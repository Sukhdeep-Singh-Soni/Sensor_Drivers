
tof_gesture_detection_and_people_counting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006774  08006774  00021c48  2**0
                  CONTENTS
  4 .ARM          00000008  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800677c  0800677c  00021c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001c48  20000000  08006784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20001c48  080083cc  00021c48  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e44  080083cc  00021e44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00021c48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c19  00000000  00000000  00021c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b40  00000000  00000000  0003688f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000393d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a577  00000000  00000000  0003b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e89  00000000  00000000  00065bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff903  00000000  00000000  0007ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c34b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b4  00000000  00000000  0017c39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001c48 	.word	0x20001c48
 800021c:	00000000 	.word	0x00000000
 8000220:	08006680 	.word	0x08006680

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001c4c 	.word	0x20001c4c
 800023c:	08006680 	.word	0x08006680

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b87      	ldr	r3, [pc, #540]	; (8000818 <MX_GPIO_Init+0x234>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a86      	ldr	r2, [pc, #536]	; (8000818 <MX_GPIO_Init+0x234>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b84      	ldr	r3, [pc, #528]	; (8000818 <MX_GPIO_Init+0x234>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b81      	ldr	r3, [pc, #516]	; (8000818 <MX_GPIO_Init+0x234>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a80      	ldr	r2, [pc, #512]	; (8000818 <MX_GPIO_Init+0x234>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b7e      	ldr	r3, [pc, #504]	; (8000818 <MX_GPIO_Init+0x234>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b7b      	ldr	r3, [pc, #492]	; (8000818 <MX_GPIO_Init+0x234>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a7a      	ldr	r2, [pc, #488]	; (8000818 <MX_GPIO_Init+0x234>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b78      	ldr	r3, [pc, #480]	; (8000818 <MX_GPIO_Init+0x234>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b75      	ldr	r3, [pc, #468]	; (8000818 <MX_GPIO_Init+0x234>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a74      	ldr	r2, [pc, #464]	; (8000818 <MX_GPIO_Init+0x234>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b72      	ldr	r3, [pc, #456]	; (8000818 <MX_GPIO_Init+0x234>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b6f      	ldr	r3, [pc, #444]	; (8000818 <MX_GPIO_Init+0x234>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a6e      	ldr	r2, [pc, #440]	; (8000818 <MX_GPIO_Init+0x234>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <MX_GPIO_Init+0x234>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000672:	4b69      	ldr	r3, [pc, #420]	; (8000818 <MX_GPIO_Init+0x234>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a68      	ldr	r2, [pc, #416]	; (8000818 <MX_GPIO_Init+0x234>)
 8000678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b66      	ldr	r3, [pc, #408]	; (8000818 <MX_GPIO_Init+0x234>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068a:	4b63      	ldr	r3, [pc, #396]	; (8000818 <MX_GPIO_Init+0x234>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a62      	ldr	r2, [pc, #392]	; (8000818 <MX_GPIO_Init+0x234>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b60      	ldr	r3, [pc, #384]	; (8000818 <MX_GPIO_Init+0x234>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80006a8:	485c      	ldr	r0, [pc, #368]	; (800081c <MX_GPIO_Init+0x238>)
 80006aa:	f000 ff85 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2141      	movs	r1, #65	; 0x41
 80006b2:	485b      	ldr	r0, [pc, #364]	; (8000820 <MX_GPIO_Init+0x23c>)
 80006b4:	f000 ff80 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4855      	ldr	r0, [pc, #340]	; (8000824 <MX_GPIO_Init+0x240>)
 80006d0:	f000 fdc6 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006d4:	2332      	movs	r3, #50	; 0x32
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e4:	230b      	movs	r3, #11
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	484d      	ldr	r0, [pc, #308]	; (8000824 <MX_GPIO_Init+0x240>)
 80006f0:	f000 fdb6 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006f4:	2386      	movs	r3, #134	; 0x86
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000704:	230b      	movs	r3, #11
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4846      	ldr	r0, [pc, #280]	; (8000828 <MX_GPIO_Init+0x244>)
 8000710:	f000 fda6 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000714:	f244 0381 	movw	r3, #16513	; 0x4081
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	483b      	ldr	r0, [pc, #236]	; (800081c <MX_GPIO_Init+0x238>)
 800072e:	f000 fd97 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000732:	2341      	movs	r3, #65	; 0x41
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4835      	ldr	r0, [pc, #212]	; (8000820 <MX_GPIO_Init+0x23c>)
 800074a:	f000 fd89 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000752:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	482f      	ldr	r0, [pc, #188]	; (8000820 <MX_GPIO_Init+0x23c>)
 8000764:	f000 fd7c 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077a:	230b      	movs	r3, #11
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4825      	ldr	r0, [pc, #148]	; (800081c <MX_GPIO_Init+0x238>)
 8000786:	f000 fd6b 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4820      	ldr	r0, [pc, #128]	; (8000820 <MX_GPIO_Init+0x23c>)
 800079e:	f000 fd5f 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007b4:	230a      	movs	r3, #10
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	481a      	ldr	r0, [pc, #104]	; (8000828 <MX_GPIO_Init+0x244>)
 80007c0:	f000 fd4e 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_GPIO_Init+0x244>)
 80007da:	f000 fd41 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_GPIO_Init+0x23c>)
 80007fc:	f000 fd30 	bl	8001260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2007      	movs	r0, #7
 8000806:	f000 fcf4 	bl	80011f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800080a:	2007      	movs	r0, #7
 800080c:	f000 fd0d 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3730      	adds	r7, #48	; 0x30
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400
 8000820:	40021800 	.word	0x40021800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000

0800082c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_I2C2_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <MX_I2C2_Init+0x7c>)
 800083a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_I2C2_Init+0x74>)
 8000868:	f000 fed8 	bl	800161c <HAL_I2C_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000872:	f000 f91b 	bl	8000aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <MX_I2C2_Init+0x74>)
 800087a:	f001 fbb5 	bl	8001fe8 <HAL_I2CEx_ConfigAnalogFilter>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000884:	f000 f912 	bl	8000aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_I2C2_Init+0x74>)
 800088c:	f001 fbf7 	bl	800207e <HAL_I2CEx_ConfigDigitalFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 f909 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001c64 	.word	0x20001c64
 80008a4:	40005800 	.word	0x40005800
 80008a8:	00303d5b 	.word	0x00303d5b

080008ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ae      	sub	sp, #184	; 0xb8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2290      	movs	r2, #144	; 0x90
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 ff41 	bl	8005754 <memset>
  if(i2cHandle->Instance==I2C2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <HAL_I2C_MspInit+0xb0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d13b      	bne.n	8000954 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 f8e6 	bl	8002abc <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008f6:	f000 f8d9 	bl	8000aac <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_I2C_MspInit+0xb4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a18      	ldr	r2, [pc, #96]	; (8000960 <HAL_I2C_MspInit+0xb4>)
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_I2C_MspInit+0xb4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000918:	2312      	movs	r3, #18
 800091a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800092a:	2304      	movs	r3, #4
 800092c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000934:	4619      	mov	r1, r3
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <HAL_I2C_MspInit+0xb8>)
 8000938:	f000 fc92 	bl	8001260 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_I2C_MspInit+0xb4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_I2C_MspInit+0xb4>)
 8000942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_I2C_MspInit+0xb4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000954:	bf00      	nop
 8000956:	37b8      	adds	r7, #184	; 0xb8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40005800 	.word	0x40005800
 8000960:	40023800 	.word	0x40023800
 8000964:	40021400 	.word	0x40021400

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fae5 	bl	8000f3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f814 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f7ff fe36 	bl	80005e4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000978:	f7ff ff58 	bl	800082c <MX_I2C2_Init>
  MX_TIM2_Init();
 800097c:	f000 f9b2 	bl	8000ce4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000980:	f000 fa22 	bl	8000dc8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  if(tof_init() != TOF_OK)
 8000984:	f003 fe05 	bl	8004592 <tof_init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d000      	beq.n	8000990 <main+0x28>
	  while(1);
 800098e:	e7fe      	b.n	800098e <main+0x26>
  counter = 0;
 8000990:	4b01      	ldr	r3, [pc, #4]	; (8000998 <main+0x30>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x2e>
 8000998:	20001dac 	.word	0x20001dac

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fed2 	bl	8005754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <SystemClock_Config+0xb0>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <SystemClock_Config+0xb0>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <SystemClock_Config+0xb0>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <SystemClock_Config+0xb4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <SystemClock_Config+0xb4>)
 80009e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <SystemClock_Config+0xb4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fc:	2310      	movs	r3, #16
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fb85 	bl	8002118 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a14:	f000 f84a 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fe1e 	bl	8002674 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a3e:	f000 f835 	bl	8000aac <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	; 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
	counter++;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a66:	6013      	str	r3, [r2, #0]

	uint8_t int_status = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	//Wait for the INT pin to be asserted
	if(GPIO_Pin == TOF_INT_Pin)
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d112      	bne.n	8000a98 <HAL_GPIO_EXTI_Callback+0x44>
	{
		//Read out and store in variable <int_status> = S 41 W E1 Sr 41 R N P
		int_status = tof_i2c_read(&read_val, TOF_INT_STATUS, 1);
 8000a72:	2201      	movs	r2, #1
 8000a74:	21e1      	movs	r1, #225	; 0xe1
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000a78:	f003 fe98 	bl	80047ac <tof_i2c_read>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]


		//Clear only the flagged INT_STATUS: S 41 W E1 <int_status> P
		write_val = int_status;
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	7013      	strb	r3, [r2, #0]
		tof_i2c_write(&write_val, TOF_INT_STATUS, 2);
 8000a86:	2202      	movs	r2, #2
 8000a88:	21e1      	movs	r1, #225	; 0xe1
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a8c:	f003 feba 	bl	8004804 <tof_i2c_write>


		//Read out the result data with an I2C block read (132 bytes should be read in an I2C block read): S 41 W 20 Sr 41 R A A A ... A N P
		tof_process();
 8000a90:	f003 fd99 	bl	80045c6 <tof_process>

		//Gesture Detection Algorithm using tof interrupt
		Gesture_Detection_IT();
 8000a94:	f003 fda4 	bl	80045e0 <Gesture_Detection_IT>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20001dac 	.word	0x20001dac
 8000aa4:	20001daa 	.word	0x20001daa
 8000aa8:	20001dab 	.word	0x20001dab

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_MspInit+0x44>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x44>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 fa32 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f000 fd47 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM2_IRQHandler+0x10>)
 8000b6a:	f002 fc26 	bl	80033ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20001cbc 	.word	0x20001cbc

08000b78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e00a      	b.n	8000ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b8a:	f3af 8000 	nop.w
 8000b8e:	4601      	mov	r1, r0
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf0      	blt.n	8000b8a <_read+0x12>
	}

return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e009      	b.n	8000bd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fddb 	bl	8004788 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf1      	blt.n	8000bc4 <_write+0x12>
	}
	return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	605a      	str	r2, [r3, #4]
	return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_isatty>:

int _isatty(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f004 fd3c 	bl	8005700 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20080000 	.word	0x20080000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20001cb8 	.word	0x20001cb8
 8000cbc:	20001e48 	.word	0x20001e48

08000cc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d0c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000d10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d1a:	2263      	movs	r2, #99	; 0x63
 8000d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d2c:	f002 faee 	bl	800330c <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d36:	f7ff feb9 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d48:	f002 fc56 	bl	80035f8 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d52:	f7ff feab 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d64:	f002 fe7e 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d6e:	f7ff fe9d 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20001cbc 	.word	0x20001cbc

08000d80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d90:	d113      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_TIM_Base_MspInit+0x44>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_TIM_Base_MspInit+0x44>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_TIM_Base_MspInit+0x44>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	201c      	movs	r0, #28
 8000db0:	f000 fa1f 	bl	80011f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db4:	201c      	movs	r0, #28
 8000db6:	f000 fa38 	bl	800122a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <MX_USART3_UART_Init+0x5c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e0c:	f002 fed6 	bl	8003bbc <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e16:	f7ff fe49 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001d08 	.word	0x20001d08
 8000e24:	40004800 	.word	0x40004800

08000e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0ae      	sub	sp, #184	; 0xb8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2290      	movs	r2, #144	; 0x90
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fc83 	bl	8005754 <memset>
  if(uartHandle->Instance==USART3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <HAL_UART_MspInit+0xb4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d13c      	bne.n	8000ed2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fe28 	bl	8002abc <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e72:	f7ff fe1b 	bl	8000aac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_UART_MspInit+0xb8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_UART_MspInit+0xbc>)
 8000ece:	f000 f9c7 	bl	8001260 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	37b8      	adds	r7, #184	; 0xb8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020c00 	.word	0x40020c00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff fed5 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f004 fbf9 	bl	800570c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fd25 	bl	8000968 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20001c48 	.word	0x20001c48
  ldr r2, =_sidata
 8000f2c:	08006784 	.word	0x08006784
  ldr r2, =_sbss
 8000f30:	20001c48 	.word	0x20001c48
  ldr r4, =_ebss
 8000f34:	20001e44 	.word	0x20001e44

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>

08000f3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f94c 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f805 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fdb5 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f967 	bl	8001246 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f90:	f000 f92f 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20001d90 	.word	0x20001d90

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20001d90 	.word	0x20001d90

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	4313      	orrs	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	05fa0000 	.word	0x05fa0000

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff29 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff3e 	bl	8001084 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff8e 	bl	8001130 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff31 	bl	80010a0 <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffa2 	bl	8001198 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e175      	b.n	800156c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8164 	bne.w	8001566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <HAL_GPIO_Init+0x56>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d130      	bne.n	8001318 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 0201 	and.w	r2, r3, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b03      	cmp	r3, #3
 8001322:	d017      	beq.n	8001354 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80be 	beq.w	8001566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b66      	ldr	r3, [pc, #408]	; (8001584 <HAL_GPIO_Init+0x324>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a65      	ldr	r2, [pc, #404]	; (8001584 <HAL_GPIO_Init+0x324>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <HAL_GPIO_Init+0x324>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001402:	4a61      	ldr	r2, [pc, #388]	; (8001588 <HAL_GPIO_Init+0x328>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_GPIO_Init+0x32c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d037      	beq.n	800149e <HAL_GPIO_Init+0x23e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a57      	ldr	r2, [pc, #348]	; (8001590 <HAL_GPIO_Init+0x330>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d031      	beq.n	800149a <HAL_GPIO_Init+0x23a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a56      	ldr	r2, [pc, #344]	; (8001594 <HAL_GPIO_Init+0x334>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d02b      	beq.n	8001496 <HAL_GPIO_Init+0x236>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a55      	ldr	r2, [pc, #340]	; (8001598 <HAL_GPIO_Init+0x338>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d025      	beq.n	8001492 <HAL_GPIO_Init+0x232>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a54      	ldr	r2, [pc, #336]	; (800159c <HAL_GPIO_Init+0x33c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01f      	beq.n	800148e <HAL_GPIO_Init+0x22e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a53      	ldr	r2, [pc, #332]	; (80015a0 <HAL_GPIO_Init+0x340>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_Init+0x22a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_GPIO_Init+0x344>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x226>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x348>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x222>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a50      	ldr	r2, [pc, #320]	; (80015ac <HAL_GPIO_Init+0x34c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x21e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4f      	ldr	r2, [pc, #316]	; (80015b0 <HAL_GPIO_Init+0x350>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x21a>
 8001476:	2309      	movs	r3, #9
 8001478:	e012      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800147a:	230a      	movs	r3, #10
 800147c:	e010      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800147e:	2308      	movs	r3, #8
 8001480:	e00e      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001482:	2307      	movs	r3, #7
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001486:	2306      	movs	r3, #6
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x240>
 800149e:	2300      	movs	r3, #0
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014b0:	4935      	ldr	r1, [pc, #212]	; (8001588 <HAL_GPIO_Init+0x328>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_GPIO_Init+0x354>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a34      	ldr	r2, [pc, #208]	; (80015b4 <HAL_GPIO_Init+0x354>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_GPIO_Init+0x354>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <HAL_GPIO_Init+0x354>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_GPIO_Init+0x354>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001536:	4a1f      	ldr	r2, [pc, #124]	; (80015b4 <HAL_GPIO_Init+0x354>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_GPIO_Init+0x354>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_GPIO_Init+0x354>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3301      	adds	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	f67f ae86 	bls.w	8001280 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40021c00 	.word	0x40021c00
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40022400 	.word	0x40022400
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa22 	bl	8000a54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e07f      	b.n	800172e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff f932 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2224      	movs	r2, #36	; 0x24
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800166c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800167c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e006      	b.n	80016a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d104      	bne.n	80016b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_I2C_Init+0x11c>)
 80016c2:	430b      	orrs	r3, r1
 80016c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69d9      	ldr	r1, [r3, #28]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	02008000 	.word	0x02008000

0800173c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	460b      	mov	r3, r1
 800174a:	817b      	strh	r3, [r7, #10]
 800174c:	4613      	mov	r3, r2
 800174e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b20      	cmp	r3, #32
 800175a:	f040 80da 	bne.w	8001912 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_I2C_Master_Transmit+0x30>
 8001768:	2302      	movs	r3, #2
 800176a:	e0d3      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1d8>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001774:	f7ff fc32 	bl	8000fdc <HAL_GetTick>
 8001778:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2319      	movs	r3, #25
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f9e6 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0be      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2221      	movs	r2, #33	; 0x21
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2210      	movs	r2, #16
 80017a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	893a      	ldrh	r2, [r7, #8]
 80017b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2bff      	cmp	r3, #255	; 0xff
 80017c6:	d90e      	bls.n	80017e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	22ff      	movs	r2, #255	; 0xff
 80017cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	8979      	ldrh	r1, [r7, #10]
 80017d6:	4b51      	ldr	r3, [pc, #324]	; (800191c <HAL_I2C_Master_Transmit+0x1e0>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fbd0 	bl	8001f84 <I2C_TransferConfig>
 80017e4:	e06c      	b.n	80018c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	8979      	ldrh	r1, [r7, #10]
 80017f8:	4b48      	ldr	r3, [pc, #288]	; (800191c <HAL_I2C_Master_Transmit+0x1e0>)
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fbbf 	bl	8001f84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001806:	e05b      	b.n	80018c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	6a39      	ldr	r1, [r7, #32]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f9e3 	bl	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e07b      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001850:	b29b      	uxth	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d034      	beq.n	80018c0 <HAL_I2C_Master_Transmit+0x184>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	2b00      	cmp	r3, #0
 800185c:	d130      	bne.n	80018c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	2200      	movs	r2, #0
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f975 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e04d      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	2bff      	cmp	r3, #255	; 0xff
 8001880:	d90e      	bls.n	80018a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	22ff      	movs	r2, #255	; 0xff
 8001886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188c:	b2da      	uxtb	r2, r3
 800188e:	8979      	ldrh	r1, [r7, #10]
 8001890:	2300      	movs	r3, #0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fb73 	bl	8001f84 <I2C_TransferConfig>
 800189e:	e00f      	b.n	80018c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fb62 	bl	8001f84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d19e      	bne.n	8001808 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f9c2 	bl	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e01a      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2220      	movs	r2, #32
 80018e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_I2C_Master_Transmit+0x1e4>)
 80018f2:	400b      	ands	r3, r1
 80018f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001912:	2302      	movs	r3, #2
  }
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	80002000 	.word	0x80002000
 8001920:	fe00e800 	.word	0xfe00e800

08001924 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	460b      	mov	r3, r1
 8001932:	817b      	strh	r3, [r7, #10]
 8001934:	4613      	mov	r3, r2
 8001936:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	f040 80db 	bne.w	8001afc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_I2C_Master_Receive+0x30>
 8001950:	2302      	movs	r3, #2
 8001952:	e0d4      	b.n	8001afe <HAL_I2C_Master_Receive+0x1da>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800195c:	f7ff fb3e 	bl	8000fdc <HAL_GetTick>
 8001960:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2319      	movs	r3, #25
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f8f2 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0bf      	b.n	8001afe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2222      	movs	r2, #34	; 0x22
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2210      	movs	r2, #16
 800198a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	893a      	ldrh	r2, [r7, #8]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2bff      	cmp	r3, #255	; 0xff
 80019ae:	d90e      	bls.n	80019ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	8979      	ldrh	r1, [r7, #10]
 80019be:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <HAL_I2C_Master_Receive+0x1e4>)
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fadc 	bl	8001f84 <I2C_TransferConfig>
 80019cc:	e06d      	b.n	8001aaa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	8979      	ldrh	r1, [r7, #10]
 80019e0:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <HAL_I2C_Master_Receive+0x1e4>)
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 facb 	bl	8001f84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019ee:	e05c      	b.n	8001aaa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	6a39      	ldr	r1, [r7, #32]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f96b 	bl	8001cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07c      	b.n	8001afe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d034      	beq.n	8001aaa <HAL_I2C_Master_Receive+0x186>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d130      	bne.n	8001aaa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f880 	bl	8001b58 <I2C_WaitOnFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e04d      	b.n	8001afe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2bff      	cmp	r3, #255	; 0xff
 8001a6a:	d90e      	bls.n	8001a8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	8979      	ldrh	r1, [r7, #10]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fa7e 	bl	8001f84 <I2C_TransferConfig>
 8001a88:	e00f      	b.n	8001aaa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	8979      	ldrh	r1, [r7, #10]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fa6d 	bl	8001f84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d19d      	bne.n	80019f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	6a39      	ldr	r1, [r7, #32]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f8cd 	bl	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e01a      	b.n	8001afe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2220      	movs	r2, #32
 8001ace:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_I2C_Master_Receive+0x1e8>)
 8001adc:	400b      	ands	r3, r1
 8001ade:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e000      	b.n	8001afe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001afc:	2302      	movs	r3, #2
  }
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	80002400 	.word	0x80002400
 8001b0c:	fe00e800 	.word	0xfe00e800

08001b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d103      	bne.n	8001b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d007      	beq.n	8001b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	619a      	str	r2, [r3, #24]
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b68:	e022      	b.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b70:	d01e      	beq.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b72:	f7ff fa33 	bl	8000fdc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d302      	bcc.n	8001b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d113      	bne.n	8001bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e00f      	b.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d0cd      	beq.n	8001b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001be4:	e02c      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f8ea 	bl	8001dc4 <I2C_IsErrorOccurred>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e02a      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c00:	d01e      	beq.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c02:	f7ff f9eb 	bl	8000fdc <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d113      	bne.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e007      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d1cb      	bne.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c64:	e028      	b.n	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f8aa 	bl	8001dc4 <I2C_IsErrorOccurred>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e026      	b.n	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7ff f9af 	bl	8000fdc <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d113      	bne.n	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e007      	b.n	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d1cf      	bne.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cdc:	e064      	b.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f86e 	bl	8001dc4 <I2C_IsErrorOccurred>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e062      	b.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d138      	bne.n	8001d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d105      	bne.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e04e      	b.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d107      	bne.n	8001d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2204      	movs	r2, #4
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
 8001d36:	e002      	b.n	8001d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2220      	movs	r2, #32
 8001d44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001d52:	400b      	ands	r3, r1
 8001d54:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e022      	b.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d72:	f7ff f933 	bl	8000fdc <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10f      	bne.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f043 0220 	orr.w	r2, r3, #32
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e007      	b.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d193      	bne.n	8001cde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	fe00e800 	.word	0xfe00e800

08001dc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d068      	beq.n	8001ec2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2210      	movs	r2, #16
 8001df6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001df8:	e049      	b.n	8001e8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e00:	d045      	beq.n	8001e8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e02:	f7ff f8eb 	bl	8000fdc <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d302      	bcc.n	8001e18 <I2C_IsErrorOccurred+0x54>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d13a      	bne.n	8001e8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3a:	d121      	bne.n	8001e80 <I2C_IsErrorOccurred+0xbc>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e42:	d01d      	beq.n	8001e80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d01a      	beq.n	8001e80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e5a:	f7ff f8bf 	bl	8000fdc <HAL_GetTick>
 8001e5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e60:	e00e      	b.n	8001e80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e62:	f7ff f8bb 	bl	8000fdc <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b19      	cmp	r3, #25
 8001e6e:	d907      	bls.n	8001e80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f043 0320 	orr.w	r3, r3, #32
 8001e76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001e7e:	e006      	b.n	8001e8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d1e9      	bne.n	8001e62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d003      	beq.n	8001ea4 <I2C_IsErrorOccurred+0xe0>
 8001e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0aa      	beq.n	8001dfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d103      	bne.n	8001eb4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01c      	beq.n	8001f72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff fde9 	bl	8001b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <I2C_IsErrorOccurred+0x1bc>)
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	fe00e800 	.word	0xfe00e800

08001f84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	817b      	strh	r3, [r7, #10]
 8001f92:	4613      	mov	r3, r2
 8001f94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f9c:	7a7b      	ldrb	r3, [r7, #9]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	0d5b      	lsrs	r3, r3, #21
 8001fbe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <I2C_TransferConfig+0x60>)
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	ea02 0103 	and.w	r1, r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	03ff63ff 	.word	0x03ff63ff

08001fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d138      	bne.n	8002070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002008:	2302      	movs	r3, #2
 800200a:	e032      	b.n	8002072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	; 0x24
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800203a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6819      	ldr	r1, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b20      	cmp	r3, #32
 8002092:	d139      	bne.n	8002108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800209e:	2302      	movs	r3, #2
 80020a0:	e033      	b.n	800210a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2224      	movs	r2, #36	; 0x24
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
  }
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e29b      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b96      	ldr	r3, [pc, #600]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002148:	4b93      	ldr	r3, [pc, #588]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
 8002154:	4b90      	ldr	r3, [pc, #576]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x130>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e275      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x7a>
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a83      	ldr	r2, [pc, #524]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x9c>
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7b      	ldr	r2, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a72      	ldr	r2, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6b      	ldr	r2, [pc, #428]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fef0 	bl	8000fdc <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe feec 	bl	8000fdc <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e229      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b61      	ldr	r3, [pc, #388]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fedc 	bl	8000fdc <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe fed8 	bl	8000fdc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e215      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x110>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d069      	beq.n	800232a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x190>
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x17a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1e9      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	493d      	ldr	r1, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e040      	b.n	800232a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a38      	ldr	r2, [pc, #224]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe8e 	bl	8000fdc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe fe8a 	bl	8000fdc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1c7      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4929      	ldr	r1, [pc, #164]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
 80022f6:	e018      	b.n	800232a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe fe6a 	bl	8000fdc <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7fe fe66 	bl	8000fdc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1a3      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d038      	beq.n	80023a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7fe fe47 	bl	8000fdc <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7fe fe43 	bl	8000fdc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e180      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x23a>
 8002370:	e01a      	b.n	80023a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_OscConfig+0x280>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237e:	f7fe fe2d 	bl	8000fdc <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002386:	f7fe fe29 	bl	8000fdc <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d903      	bls.n	800239c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e166      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
 8002398:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a4 	beq.w	80024fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b8c      	ldr	r3, [pc, #560]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a88      	ldr	r2, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023de:	4b83      	ldr	r3, [pc, #524]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023ea:	4b80      	ldr	r3, [pc, #512]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7f      	ldr	r2, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fdf1 	bl	8000fdc <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7fe fded 	bl	8000fdc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e12a      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x4d4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x31a>
 8002424:	4b70      	ldr	r3, [pc, #448]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a6f      	ldr	r2, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	e02d      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x33c>
 800243a:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
 8002446:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a67      	ldr	r2, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x35e>
 800245c:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a61      	ldr	r2, [pc, #388]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a5e      	ldr	r2, [pc, #376]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x376>
 8002476:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5b      	ldr	r2, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fda1 	bl	8000fdc <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fd9d 	bl	8000fdc <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0d8      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x386>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7fe fd8b 	bl	8000fdc <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fd87 	bl	8000fdc <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0c2      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80ae 	beq.w	8002664 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d06d      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d14b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fd58 	bl	8000fdc <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fd54 	bl	8000fdc <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e091      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	3b01      	subs	r3, #1
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	491b      	ldr	r1, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fd26 	bl	8000fdc <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fd22 	bl	8000fdc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e05f      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x47c>
 80025b2:	e057      	b.n	8002664 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fd0c 	bl	8000fdc <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fd08 	bl	8000fdc <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e045      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4b0>
 80025e6:	e03d      	b.n	8002664 <HAL_RCC_OscConfig+0x54c>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_OscConfig+0x558>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d129      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d122      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d119      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d10f      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0d0      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d910      	bls.n	80026bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 020f 	bic.w	r2, r3, #15
 80026a2:	4965      	ldr	r1, [pc, #404]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d040      	beq.n	8002798 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d115      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e073      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06b      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4936      	ldr	r1, [pc, #216]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7fe fc38 	bl	8000fdc <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7fe fc34 	bl	8000fdc <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e053      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d210      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 020f 	bic.w	r2, r3, #15
 80027ae:	4922      	ldr	r1, [pc, #136]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x1cc>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1d0>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fb94 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	080066c4 	.word	0x080066c4
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b094      	sub	sp, #80	; 0x50
 8002852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	2300      	movs	r3, #0
 800285e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d00d      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x40>
 8002870:	2b08      	cmp	r3, #8
 8002872:	f200 80e1 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x34>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x3a>
 800287e:	e0db      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002884:	e0db      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002886:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800288a:	e0d8      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002896:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	2200      	movs	r2, #0
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028be:	4622      	mov	r2, r4
 80028c0:	462b      	mov	r3, r5
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	0159      	lsls	r1, r3, #5
 80028cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d0:	0150      	lsls	r0, r2, #5
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4621      	mov	r1, r4
 80028d8:	1a51      	subs	r1, r2, r1
 80028da:	6139      	str	r1, [r7, #16]
 80028dc:	4629      	mov	r1, r5
 80028de:	eb63 0301 	sbc.w	r3, r3, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f0:	4659      	mov	r1, fp
 80028f2:	018b      	lsls	r3, r1, #6
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fa:	4651      	mov	r1, sl
 80028fc:	018a      	lsls	r2, r1, #6
 80028fe:	4651      	mov	r1, sl
 8002900:	ebb2 0801 	subs.w	r8, r2, r1
 8002904:	4659      	mov	r1, fp
 8002906:	eb63 0901 	sbc.w	r9, r3, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4623      	mov	r3, r4
 8002924:	eb18 0303 	adds.w	r3, r8, r3
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	462b      	mov	r3, r5
 800292c:	eb49 0303 	adc.w	r3, r9, r3
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293e:	4629      	mov	r1, r5
 8002940:	028b      	lsls	r3, r1, #10
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002948:	4621      	mov	r1, r4
 800294a:	028a      	lsls	r2, r1, #10
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800295c:	f7fd fcc0 	bl	80002e0 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	e058      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	4618      	mov	r0, r3
 8002974:	4611      	mov	r1, r2
 8002976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0159      	lsls	r1, r3, #5
 8002992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002996:	0150      	lsls	r0, r2, #5
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4641      	mov	r1, r8
 800299e:	ebb2 0a01 	subs.w	sl, r2, r1
 80029a2:	4649      	mov	r1, r9
 80029a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029bc:	ebb2 040a 	subs.w	r4, r2, sl
 80029c0:	eb63 050b 	sbc.w	r5, r3, fp
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	00eb      	lsls	r3, r5, #3
 80029ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d2:	00e2      	lsls	r2, r4, #3
 80029d4:	4614      	mov	r4, r2
 80029d6:	461d      	mov	r5, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	18e3      	adds	r3, r4, r3
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	464b      	mov	r3, r9
 80029e0:	eb45 0303 	adc.w	r3, r5, r3
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f2:	4629      	mov	r1, r5
 80029f4:	028b      	lsls	r3, r1, #10
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029fc:	4621      	mov	r1, r4
 80029fe:	028a      	lsls	r2, r1, #10
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	61fa      	str	r2, [r7, #28]
 8002a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a10:	f7fd fc66 	bl	80002e0 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3750      	adds	r7, #80	; 0x50
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	00f42400 	.word	0x00f42400

08002a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a70:	f7ff fff0 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	080066d4 	.word	0x080066d4

08002a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a98:	f7ff ffdc 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0b5b      	lsrs	r3, r3, #13
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	080066d4 	.word	0x080066d4

08002abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae4:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aee:	6093      	str	r3, [r2, #8]
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	4964      	ldr	r1, [pc, #400]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b16:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	4959      	ldr	r1, [pc, #356]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d101      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d017      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b52:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	494a      	ldr	r1, [pc, #296]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 808b 	beq.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fa0a 	bl	8000fdc <HAL_GetTick>
 8002bc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe fa06 	bl	8000fdc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e38f      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d035      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d02e      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d114      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f9ce 	bl	8000fdc <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe f9ca 	bl	8000fdc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e351      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ee      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c72:	d111      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c82:	400b      	ands	r3, r1
 8002c84:	4901      	ldr	r1, [pc, #4]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000
 8002c94:	0ffffcff 	.word	0x0ffffcff
 8002c98:	4bac      	ldr	r3, [pc, #688]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4aab      	ldr	r2, [pc, #684]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca2:	6093      	str	r3, [r2, #8]
 8002ca4:	4ba9      	ldr	r3, [pc, #676]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	49a6      	ldr	r1, [pc, #664]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc2:	4ba2      	ldr	r3, [pc, #648]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	4aa0      	ldr	r2, [pc, #640]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cd2:	4b9e      	ldr	r3, [pc, #632]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	499b      	ldr	r1, [pc, #620]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf0:	4b96      	ldr	r3, [pc, #600]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfe:	4993      	ldr	r1, [pc, #588]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d12:	4b8e      	ldr	r3, [pc, #568]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d20:	498a      	ldr	r1, [pc, #552]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d34:	4b85      	ldr	r3, [pc, #532]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d42:	4982      	ldr	r1, [pc, #520]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4979      	ldr	r1, [pc, #484]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d78:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4971      	ldr	r1, [pc, #452]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	f023 020c 	bic.w	r2, r3, #12
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	4968      	ldr	r1, [pc, #416]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dbc:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4960      	ldr	r1, [pc, #384]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dec:	4957      	ldr	r1, [pc, #348]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e00:	4b52      	ldr	r3, [pc, #328]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	494f      	ldr	r1, [pc, #316]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e22:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	4946      	ldr	r1, [pc, #280]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	493e      	ldr	r1, [pc, #248]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	4935      	ldr	r1, [pc, #212]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	492d      	ldr	r1, [pc, #180]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eaa:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb8:	4924      	ldr	r1, [pc, #144]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	4914      	ldr	r1, [pc, #80]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f40:	4902      	ldr	r1, [pc, #8]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f48:	e002      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f5c:	4b8a      	ldr	r3, [pc, #552]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	4986      	ldr	r1, [pc, #536]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f80:	4b81      	ldr	r3, [pc, #516]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	497d      	ldr	r1, [pc, #500]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d006      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80d6 	beq.w	8003158 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fac:	4b76      	ldr	r3, [pc, #472]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a75      	ldr	r2, [pc, #468]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb8:	f7fe f810 	bl	8000fdc <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc0:	f7fe f80c 	bl	8000fdc <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e195      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d021      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11d      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	0e1b      	lsrs	r3, r3, #24
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4958      	ldr	r1, [pc, #352]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02e      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003058:	d129      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800305a:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003068:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	0f1b      	lsrs	r3, r3, #28
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	019a      	lsls	r2, r3, #6
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	071b      	lsls	r3, r3, #28
 800308e:	493e      	ldr	r1, [pc, #248]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309c:	f023 021f 	bic.w	r2, r3, #31
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4938      	ldr	r1, [pc, #224]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01d      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ba:	4b33      	ldr	r3, [pc, #204]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0e1b      	lsrs	r3, r3, #24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	4926      	ldr	r1, [pc, #152]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d011      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	491a      	ldr	r1, [pc, #104]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003132:	f7fd ff53 	bl	8000fdc <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800313a:	f7fd ff4f 	bl	8000fdc <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0d8      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80ce 	bne.w	80032fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fd ff36 	bl	8000fdc <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003172:	e00b      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003174:	f7fd ff32 	bl	8000fdc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d904      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0bb      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800318c:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003198:	d0ec      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c2:	4b51      	ldr	r3, [pc, #324]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d0:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	0f1b      	lsrs	r3, r3, #28
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	019a      	lsls	r2, r3, #6
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	4944      	ldr	r1, [pc, #272]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	493d      	ldr	r1, [pc, #244]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d022      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800322c:	d11d      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800322e:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	0e1b      	lsrs	r3, r3, #24
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	0f1b      	lsrs	r3, r3, #28
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	019a      	lsls	r2, r3, #6
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	4929      	ldr	r1, [pc, #164]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	0c1b      	lsrs	r3, r3, #16
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4917      	ldr	r1, [pc, #92]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4911      	ldr	r1, [pc, #68]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fd fe82 	bl	8000fdc <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032dc:	f7fd fe7e 	bl	8000fdc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e007      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fa:	d1ef      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e049      	b.n	80033b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fd24 	bl	8000d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 fa50 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d122      	bne.n	8003416 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d11b      	bne.n	8003416 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0202 	mvn.w	r2, #2
 80033e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f9d9 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 8003402:	e005      	b.n	8003410 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9cb 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9dc 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d122      	bne.n	800346a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d11b      	bne.n	800346a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0204 	mvn.w	r2, #4
 800343a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9af 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 8003456:	e005      	b.n	8003464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9a1 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9b2 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b08      	cmp	r3, #8
 8003476:	d122      	bne.n	80034be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d11b      	bne.n	80034be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0208 	mvn.w	r2, #8
 800348e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2204      	movs	r2, #4
 8003494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f985 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 80034aa:	e005      	b.n	80034b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f977 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f988 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d122      	bne.n	8003512 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d11b      	bne.n	8003512 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0210 	mvn.w	r2, #16
 80034e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2208      	movs	r2, #8
 80034e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f95b 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 80034fe:	e005      	b.n	800350c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f94d 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f95e 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10e      	bne.n	800353e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0201 	mvn.w	r2, #1
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f927 	bl	800378c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d10e      	bne.n	800356a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d107      	bne.n	800356a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb15 	bl	8003b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fb08 	bl	8003ba8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f90c 	bl	80037dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d10e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0220 	mvn.w	r2, #32
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fac8 	bl	8003b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_TIM_ConfigClockSource+0x1c>
 8003610:	2302      	movs	r3, #2
 8003612:	e0b4      	b.n	800377e <HAL_TIM_ConfigClockSource+0x186>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	4b56      	ldr	r3, [pc, #344]	; (8003788 <HAL_TIM_ConfigClockSource+0x190>)
 8003630:	4013      	ands	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800363a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364c:	d03e      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0xd4>
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003652:	f200 8087 	bhi.w	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	f000 8086 	beq.w	800376a <HAL_TIM_ConfigClockSource+0x172>
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003662:	d87f      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b70      	cmp	r3, #112	; 0x70
 8003666:	d01a      	beq.n	800369e <HAL_TIM_ConfigClockSource+0xa6>
 8003668:	2b70      	cmp	r3, #112	; 0x70
 800366a:	d87b      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b60      	cmp	r3, #96	; 0x60
 800366e:	d050      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x11a>
 8003670:	2b60      	cmp	r3, #96	; 0x60
 8003672:	d877      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b50      	cmp	r3, #80	; 0x50
 8003676:	d03c      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003678:	2b50      	cmp	r3, #80	; 0x50
 800367a:	d873      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d058      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x13a>
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d86f      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b30      	cmp	r3, #48	; 0x30
 8003686:	d064      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 8003688:	2b30      	cmp	r3, #48	; 0x30
 800368a:	d86b      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b20      	cmp	r3, #32
 800368e:	d060      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b20      	cmp	r3, #32
 8003692:	d867      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d05c      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 8003698:	2b10      	cmp	r3, #16
 800369a:	d05a      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 800369c:	e062      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6899      	ldr	r1, [r3, #8]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f000 f9b9 	bl	8003a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	609a      	str	r2, [r3, #8]
      break;
 80036ca:	e04f      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f000 f9a2 	bl	8003a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ee:	609a      	str	r2, [r3, #8]
      break;
 80036f0:	e03c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 f916 	bl	8003930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2150      	movs	r1, #80	; 0x50
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f96f 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003710:	e02c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	461a      	mov	r2, r3
 8003720:	f000 f935 	bl	800398e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2160      	movs	r1, #96	; 0x60
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f95f 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003730:	e01c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	461a      	mov	r2, r3
 8003740:	f000 f8f6 	bl	8003930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2140      	movs	r1, #64	; 0x40
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f94f 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003750:	e00c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f000 f946 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003762:	e003      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e000      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800376a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	fffeff88 	.word	0xfffeff88

0800378c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a40      	ldr	r2, [pc, #256]	; (8003904 <TIM_Base_SetConfig+0x114>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d00f      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3d      	ldr	r2, [pc, #244]	; (8003908 <TIM_Base_SetConfig+0x118>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00b      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3c      	ldr	r2, [pc, #240]	; (800390c <TIM_Base_SetConfig+0x11c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d007      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3b      	ldr	r2, [pc, #236]	; (8003910 <TIM_Base_SetConfig+0x120>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3a      	ldr	r2, [pc, #232]	; (8003914 <TIM_Base_SetConfig+0x124>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2f      	ldr	r2, [pc, #188]	; (8003904 <TIM_Base_SetConfig+0x114>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02b      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d027      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <TIM_Base_SetConfig+0x118>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d023      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2b      	ldr	r2, [pc, #172]	; (800390c <TIM_Base_SetConfig+0x11c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2a      	ldr	r2, [pc, #168]	; (8003910 <TIM_Base_SetConfig+0x120>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01b      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a29      	ldr	r2, [pc, #164]	; (8003914 <TIM_Base_SetConfig+0x124>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d017      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a28      	ldr	r2, [pc, #160]	; (8003918 <TIM_Base_SetConfig+0x128>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <TIM_Base_SetConfig+0x12c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00f      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a26      	ldr	r2, [pc, #152]	; (8003920 <TIM_Base_SetConfig+0x130>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00b      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <TIM_Base_SetConfig+0x134>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <TIM_Base_SetConfig+0x138>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a23      	ldr	r2, [pc, #140]	; (800392c <TIM_Base_SetConfig+0x13c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d108      	bne.n	80038b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <TIM_Base_SetConfig+0x114>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0xf8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <TIM_Base_SetConfig+0x124>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d103      	bne.n	80038f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	615a      	str	r2, [r3, #20]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800
 8003924:	40001800 	.word	0x40001800
 8003928:	40001c00 	.word	0x40001c00
 800392c:	40002000 	.word	0x40002000

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0210 	bic.w	r2, r3, #16
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f043 0307 	orr.w	r3, r3, #7
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e06d      	b.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2f      	ldr	r2, [pc, #188]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d108      	bne.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ab6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d01d      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d10c      	bne.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40010400 	.word	0x40010400
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40001800 	.word	0x40001800

08003b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e040      	b.n	8003c50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd f922 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8b0 	bl	8003d60 <UART_SetConfig>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e022      	b.n	8003c50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fb08 	bl	8004228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb8f 	bl	800436c <UART_CheckIdleState>
 8003c4e:	4603      	mov	r3, r0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d171      	bne.n	8003d54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Transmit+0x24>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e06a      	b.n	8003d56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	; 0x21
 8003c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8e:	f7fd f9a5 	bl	8000fdc <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cac:	d108      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e003      	b.n	8003cc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cc8:	e02c      	b.n	8003d24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fb96 	bl	8004406 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e038      	b.n	8003d56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e007      	b.n	8003d12 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1cc      	bne.n	8003cca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fb63 	bl	8004406 <UART_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e005      	b.n	8003d56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4ba6      	ldr	r3, [pc, #664]	; (8004024 <UART_SetConfig+0x2c4>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	6979      	ldr	r1, [r7, #20]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a94      	ldr	r2, [pc, #592]	; (8004028 <UART_SetConfig+0x2c8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d120      	bne.n	8003e1e <UART_SetConfig+0xbe>
 8003ddc:	4b93      	ldr	r3, [pc, #588]	; (800402c <UART_SetConfig+0x2cc>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d816      	bhi.n	8003e18 <UART_SetConfig+0xb8>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x90>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e0d 	.word	0x08003e0d
 8003df8:	08003e07 	.word	0x08003e07
 8003dfc:	08003e13 	.word	0x08003e13
 8003e00:	2301      	movs	r3, #1
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e150      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e06:	2302      	movs	r3, #2
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e14d      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e14a      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e12:	2308      	movs	r3, #8
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e147      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e144      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a83      	ldr	r2, [pc, #524]	; (8004030 <UART_SetConfig+0x2d0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d132      	bne.n	8003e8e <UART_SetConfig+0x12e>
 8003e28:	4b80      	ldr	r3, [pc, #512]	; (800402c <UART_SetConfig+0x2cc>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d828      	bhi.n	8003e88 <UART_SetConfig+0x128>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0xdc>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08003e89 	.word	0x08003e89
 8003e44:	08003e89 	.word	0x08003e89
 8003e48:	08003e89 	.word	0x08003e89
 8003e4c:	08003e7d 	.word	0x08003e7d
 8003e50:	08003e89 	.word	0x08003e89
 8003e54:	08003e89 	.word	0x08003e89
 8003e58:	08003e89 	.word	0x08003e89
 8003e5c:	08003e77 	.word	0x08003e77
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e89 	.word	0x08003e89
 8003e6c:	08003e83 	.word	0x08003e83
 8003e70:	2300      	movs	r3, #0
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e118      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e76:	2302      	movs	r3, #2
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e115      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e112      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e82:	2308      	movs	r3, #8
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e10f      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e10c      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a68      	ldr	r2, [pc, #416]	; (8004034 <UART_SetConfig+0x2d4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d120      	bne.n	8003eda <UART_SetConfig+0x17a>
 8003e98:	4b64      	ldr	r3, [pc, #400]	; (800402c <UART_SetConfig+0x2cc>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d013      	beq.n	8003ece <UART_SetConfig+0x16e>
 8003ea6:	2b30      	cmp	r3, #48	; 0x30
 8003ea8:	d814      	bhi.n	8003ed4 <UART_SetConfig+0x174>
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d009      	beq.n	8003ec2 <UART_SetConfig+0x162>
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d810      	bhi.n	8003ed4 <UART_SetConfig+0x174>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <UART_SetConfig+0x15c>
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d006      	beq.n	8003ec8 <UART_SetConfig+0x168>
 8003eba:	e00b      	b.n	8003ed4 <UART_SetConfig+0x174>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e0f2      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e0ef      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e0ec      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e0e9      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e0e6      	b.n	80040a8 <UART_SetConfig+0x348>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a56      	ldr	r2, [pc, #344]	; (8004038 <UART_SetConfig+0x2d8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d120      	bne.n	8003f26 <UART_SetConfig+0x1c6>
 8003ee4:	4b51      	ldr	r3, [pc, #324]	; (800402c <UART_SetConfig+0x2cc>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef0:	d013      	beq.n	8003f1a <UART_SetConfig+0x1ba>
 8003ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef4:	d814      	bhi.n	8003f20 <UART_SetConfig+0x1c0>
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d009      	beq.n	8003f0e <UART_SetConfig+0x1ae>
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d810      	bhi.n	8003f20 <UART_SetConfig+0x1c0>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <UART_SetConfig+0x1a8>
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d006      	beq.n	8003f14 <UART_SetConfig+0x1b4>
 8003f06:	e00b      	b.n	8003f20 <UART_SetConfig+0x1c0>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e0cc      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e0c9      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f14:	2304      	movs	r3, #4
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e0c6      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e0c3      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f20:	2310      	movs	r3, #16
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e0c0      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a44      	ldr	r2, [pc, #272]	; (800403c <UART_SetConfig+0x2dc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d125      	bne.n	8003f7c <UART_SetConfig+0x21c>
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <UART_SetConfig+0x2cc>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3e:	d017      	beq.n	8003f70 <UART_SetConfig+0x210>
 8003f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f44:	d817      	bhi.n	8003f76 <UART_SetConfig+0x216>
 8003f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4a:	d00b      	beq.n	8003f64 <UART_SetConfig+0x204>
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f50:	d811      	bhi.n	8003f76 <UART_SetConfig+0x216>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <UART_SetConfig+0x1fe>
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5a:	d006      	beq.n	8003f6a <UART_SetConfig+0x20a>
 8003f5c:	e00b      	b.n	8003f76 <UART_SetConfig+0x216>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e0a1      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f64:	2302      	movs	r3, #2
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e09e      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e09b      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f70:	2308      	movs	r3, #8
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e098      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f76:	2310      	movs	r3, #16
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e095      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <UART_SetConfig+0x2e0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d125      	bne.n	8003fd2 <UART_SetConfig+0x272>
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <UART_SetConfig+0x2cc>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f94:	d017      	beq.n	8003fc6 <UART_SetConfig+0x266>
 8003f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9a:	d817      	bhi.n	8003fcc <UART_SetConfig+0x26c>
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa0:	d00b      	beq.n	8003fba <UART_SetConfig+0x25a>
 8003fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa6:	d811      	bhi.n	8003fcc <UART_SetConfig+0x26c>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <UART_SetConfig+0x254>
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d006      	beq.n	8003fc0 <UART_SetConfig+0x260>
 8003fb2:	e00b      	b.n	8003fcc <UART_SetConfig+0x26c>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e076      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e073      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e070      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e06d      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e06a      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <UART_SetConfig+0x2e4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d138      	bne.n	800404e <UART_SetConfig+0x2ee>
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <UART_SetConfig+0x2cc>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fe6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fea:	d017      	beq.n	800401c <UART_SetConfig+0x2bc>
 8003fec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ff0:	d82a      	bhi.n	8004048 <UART_SetConfig+0x2e8>
 8003ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff6:	d00b      	beq.n	8004010 <UART_SetConfig+0x2b0>
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d824      	bhi.n	8004048 <UART_SetConfig+0x2e8>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <UART_SetConfig+0x2aa>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	d006      	beq.n	8004016 <UART_SetConfig+0x2b6>
 8004008:	e01e      	b.n	8004048 <UART_SetConfig+0x2e8>
 800400a:	2300      	movs	r3, #0
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e04b      	b.n	80040a8 <UART_SetConfig+0x348>
 8004010:	2302      	movs	r3, #2
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e048      	b.n	80040a8 <UART_SetConfig+0x348>
 8004016:	2304      	movs	r3, #4
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e045      	b.n	80040a8 <UART_SetConfig+0x348>
 800401c:	2308      	movs	r3, #8
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e042      	b.n	80040a8 <UART_SetConfig+0x348>
 8004022:	bf00      	nop
 8004024:	efff69f3 	.word	0xefff69f3
 8004028:	40011000 	.word	0x40011000
 800402c:	40023800 	.word	0x40023800
 8004030:	40004400 	.word	0x40004400
 8004034:	40004800 	.word	0x40004800
 8004038:	40004c00 	.word	0x40004c00
 800403c:	40005000 	.word	0x40005000
 8004040:	40011400 	.word	0x40011400
 8004044:	40007800 	.word	0x40007800
 8004048:	2310      	movs	r3, #16
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e02c      	b.n	80040a8 <UART_SetConfig+0x348>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a72      	ldr	r2, [pc, #456]	; (800421c <UART_SetConfig+0x4bc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d125      	bne.n	80040a4 <UART_SetConfig+0x344>
 8004058:	4b71      	ldr	r3, [pc, #452]	; (8004220 <UART_SetConfig+0x4c0>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004062:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004066:	d017      	beq.n	8004098 <UART_SetConfig+0x338>
 8004068:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800406c:	d817      	bhi.n	800409e <UART_SetConfig+0x33e>
 800406e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004072:	d00b      	beq.n	800408c <UART_SetConfig+0x32c>
 8004074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004078:	d811      	bhi.n	800409e <UART_SetConfig+0x33e>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <UART_SetConfig+0x326>
 800407e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004082:	d006      	beq.n	8004092 <UART_SetConfig+0x332>
 8004084:	e00b      	b.n	800409e <UART_SetConfig+0x33e>
 8004086:	2300      	movs	r3, #0
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e00d      	b.n	80040a8 <UART_SetConfig+0x348>
 800408c:	2302      	movs	r3, #2
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e00a      	b.n	80040a8 <UART_SetConfig+0x348>
 8004092:	2304      	movs	r3, #4
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e007      	b.n	80040a8 <UART_SetConfig+0x348>
 8004098:	2308      	movs	r3, #8
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e004      	b.n	80040a8 <UART_SetConfig+0x348>
 800409e:	2310      	movs	r3, #16
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e001      	b.n	80040a8 <UART_SetConfig+0x348>
 80040a4:	2310      	movs	r3, #16
 80040a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b0:	d15b      	bne.n	800416a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040b2:	7ffb      	ldrb	r3, [r7, #31]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d828      	bhi.n	800410a <UART_SetConfig+0x3aa>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0x360>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fe fcc2 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 80040e8:	61b8      	str	r0, [r7, #24]
        break;
 80040ea:	e013      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fe fcd2 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 80040f0:	61b8      	str	r0, [r7, #24]
        break;
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <UART_SetConfig+0x4c4>)
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e00c      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7fe fba7 	bl	800284c <HAL_RCC_GetSysClockFreq>
 80040fe:	61b8      	str	r0, [r7, #24]
        break;
 8004100:	e008      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	61bb      	str	r3, [r7, #24]
        break;
 8004108:	e004      	b.n	8004114 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	77bb      	strb	r3, [r7, #30]
        break;
 8004112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d074      	beq.n	8004204 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	005a      	lsls	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b0f      	cmp	r3, #15
 8004134:	d916      	bls.n	8004164 <UART_SetConfig+0x404>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d212      	bcs.n	8004164 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f023 030f 	bic.w	r3, r3, #15
 8004146:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	b29b      	uxth	r3, r3
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	b29a      	uxth	r2, r3
 8004154:	89fb      	ldrh	r3, [r7, #14]
 8004156:	4313      	orrs	r3, r2
 8004158:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	89fa      	ldrh	r2, [r7, #14]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	e04f      	b.n	8004204 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	77bb      	strb	r3, [r7, #30]
 8004168:	e04c      	b.n	8004204 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d828      	bhi.n	80041c2 <UART_SetConfig+0x462>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0x418>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7fe fc66 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 80041a0:	61b8      	str	r0, [r7, #24]
        break;
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe fc76 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 80041a8:	61b8      	str	r0, [r7, #24]
        break;
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <UART_SetConfig+0x4c4>)
 80041ae:	61bb      	str	r3, [r7, #24]
        break;
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe fb4b 	bl	800284c <HAL_RCC_GetSysClockFreq>
 80041b6:	61b8      	str	r0, [r7, #24]
        break;
 80041b8:	e008      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	61bb      	str	r3, [r7, #24]
        break;
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	77bb      	strb	r3, [r7, #30]
        break;
 80041ca:	bf00      	nop
    }

    if (pclk != 0U)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085a      	lsrs	r2, r3, #1
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	441a      	add	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d909      	bls.n	8004200 <UART_SetConfig+0x4a0>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d205      	bcs.n	8004200 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004210:	7fbb      	ldrb	r3, [r7, #30]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40007c00 	.word	0x40007c00
 8004220:	40023800 	.word	0x40023800
 8004224:	00f42400 	.word	0x00f42400

08004228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01a      	beq.n	800433e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004326:	d10a      	bne.n	800433e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af02      	add	r7, sp, #8
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800437c:	f7fc fe2e 	bl	8000fdc <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d10e      	bne.n	80043ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f831 	bl	8004406 <UART_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e027      	b.n	80043fe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d10e      	bne.n	80043da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f81b 	bl	8004406 <UART_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e011      	b.n	80043fe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b09c      	sub	sp, #112	; 0x70
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	4613      	mov	r3, r2
 8004414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004416:	e0a7      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441e:	f000 80a3 	beq.w	8004568 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fc fddb 	bl	8000fdc <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <UART_WaitOnFlagUntilTimeout+0x32>
 8004432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004434:	2b00      	cmp	r3, #0
 8004436:	d13f      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800444c:	667b      	str	r3, [r7, #100]	; 0x64
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004458:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800445c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e6      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	663b      	str	r3, [r7, #96]	; 0x60
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3308      	adds	r3, #8
 8004488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800448a:	64ba      	str	r2, [r7, #72]	; 0x48
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e068      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d050      	beq.n	8004568 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d4:	d148      	bne.n	8004568 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004500:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e6      	bne.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	66bb      	str	r3, [r7, #104]	; 0x68
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004532:	623a      	str	r2, [r7, #32]
 8004534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	69f9      	ldr	r1, [r7, #28]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e010      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	429a      	cmp	r2, r3
 8004584:	f43f af48 	beq.w	8004418 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3770      	adds	r7, #112	; 0x70
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <tof_init>:
#include "usart.h"

volatile uint8_t zone_3x3_first[9] = {0}, zone_3x3_second[9] = {0}, int_flag = 0;

uint8_t tof_init(void)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	af00      	add	r7, sp, #0
	 if(startup() != TOF_OK)
 8004596:	f000 ff7d 	bl	8005494 <startup>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <tof_init+0x12>
		 return TOF_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e00e      	b.n	80045c2 <tof_init+0x30>

	 if(image_download() != TOF_OK)
 80045a4:	f000 fff0 	bl	8005588 <image_download>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <tof_init+0x20>
		 return TOF_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e007      	b.n	80045c2 <tof_init+0x30>

	 if(application_configuration() != TOF_OK)
 80045b2:	f001 f80d 	bl	80055d0 <application_configuration>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <tof_init+0x2e>
		 return TOF_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <tof_init+0x30>


	 //end of test api


	 return TOF_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <tof_process>:

uint8_t tof_process(void)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	af00      	add	r7, sp, #0
	if(measurements_results() != TOF_OK)
 80045ca:	f001 f887 	bl	80056dc <measurements_results>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <tof_process+0x12>
		return TOF_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <tof_process+0x14>

	return TOF_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <Gesture_Detection_IT>:

	return TOF_ERROR;
}

void Gesture_Detection_IT(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
	if(counter <= 2)
 80045e4:	4b61      	ldr	r3, [pc, #388]	; (800476c <Gesture_Detection_IT+0x18c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	f200 80ba 	bhi.w	8004762 <Gesture_Detection_IT+0x182>
	{
	//Basic gesture algorithm for hand movement (left-to-right or right-to left)

		if(counter ==1)
 80045ee:	4b5f      	ldr	r3, [pc, #380]	; (800476c <Gesture_Detection_IT+0x18c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d15c      	bne.n	80046b0 <Gesture_Detection_IT+0xd0>
		{
			zone_3x3_first[0] = result_buff[24];  //			3x3 map will be like this
 80045f6:	4b5e      	ldr	r3, [pc, #376]	; (8004770 <Gesture_Detection_IT+0x190>)
 80045f8:	7e1a      	ldrb	r2, [r3, #24]
 80045fa:	4b5e      	ldr	r3, [pc, #376]	; (8004774 <Gesture_Detection_IT+0x194>)
 80045fc:	701a      	strb	r2, [r3, #0]
			zone_3x3_first[1] = result_buff[27];  //
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <Gesture_Detection_IT+0x190>)
 8004600:	7eda      	ldrb	r2, [r3, #27]
 8004602:	4b5c      	ldr	r3, [pc, #368]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004604:	705a      	strb	r2, [r3, #1]
			zone_3x3_first[2] = result_buff[30];  //			zone3	zone2	zone1
 8004606:	4b5a      	ldr	r3, [pc, #360]	; (8004770 <Gesture_Detection_IT+0x190>)
 8004608:	7f9a      	ldrb	r2, [r3, #30]
 800460a:	4b5a      	ldr	r3, [pc, #360]	; (8004774 <Gesture_Detection_IT+0x194>)
 800460c:	709a      	strb	r2, [r3, #2]
			zone_3x3_first[3] = result_buff[33];  //			zone6	zone5	zone4
 800460e:	4b58      	ldr	r3, [pc, #352]	; (8004770 <Gesture_Detection_IT+0x190>)
 8004610:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004614:	4b57      	ldr	r3, [pc, #348]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004616:	70da      	strb	r2, [r3, #3]
			zone_3x3_first[4] = result_buff[36];  //			zone9	zone8	zonr7
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <Gesture_Detection_IT+0x190>)
 800461a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800461e:	4b55      	ldr	r3, [pc, #340]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004620:	711a      	strb	r2, [r3, #4]
			zone_3x3_first[5] = result_buff[39];  //
 8004622:	4b53      	ldr	r3, [pc, #332]	; (8004770 <Gesture_Detection_IT+0x190>)
 8004624:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004628:	4b52      	ldr	r3, [pc, #328]	; (8004774 <Gesture_Detection_IT+0x194>)
 800462a:	715a      	strb	r2, [r3, #5]
			zone_3x3_first[6] = result_buff[42];  //
 800462c:	4b50      	ldr	r3, [pc, #320]	; (8004770 <Gesture_Detection_IT+0x190>)
 800462e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004632:	4b50      	ldr	r3, [pc, #320]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004634:	719a      	strb	r2, [r3, #6]
			zone_3x3_first[7] = result_buff[45];  //
 8004636:	4b4e      	ldr	r3, [pc, #312]	; (8004770 <Gesture_Detection_IT+0x190>)
 8004638:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800463c:	4b4d      	ldr	r3, [pc, #308]	; (8004774 <Gesture_Detection_IT+0x194>)
 800463e:	71da      	strb	r2, [r3, #7]
			zone_3x3_first[8] = result_buff[48];  //
 8004640:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <Gesture_Detection_IT+0x190>)
 8004642:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004646:	4b4b      	ldr	r3, [pc, #300]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004648:	721a      	strb	r2, [r3, #8]

			if(zone_3x3_first[0] == 0xff && zone_3x3_first[1] == 0xff && zone_3x3_first[2] == 0xff && zone_3x3_first[3] == 0xff && zone_3x3_first[4] == 0xff && zone_3x3_first[5] == 0xff && zone_3x3_first[6] == 0xff && zone_3x3_first[7] == 0xff && zone_3x3_first[8] == 0xff)
 800464a:	4b4a      	ldr	r3, [pc, #296]	; (8004774 <Gesture_Detection_IT+0x194>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2bff      	cmp	r3, #255	; 0xff
 8004652:	f040 8089 	bne.w	8004768 <Gesture_Detection_IT+0x188>
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2bff      	cmp	r3, #255	; 0xff
 800465e:	f040 8083 	bne.w	8004768 <Gesture_Detection_IT+0x188>
 8004662:	4b44      	ldr	r3, [pc, #272]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004664:	789b      	ldrb	r3, [r3, #2]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2bff      	cmp	r3, #255	; 0xff
 800466a:	d17d      	bne.n	8004768 <Gesture_Detection_IT+0x188>
 800466c:	4b41      	ldr	r3, [pc, #260]	; (8004774 <Gesture_Detection_IT+0x194>)
 800466e:	78db      	ldrb	r3, [r3, #3]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2bff      	cmp	r3, #255	; 0xff
 8004674:	d178      	bne.n	8004768 <Gesture_Detection_IT+0x188>
 8004676:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004678:	791b      	ldrb	r3, [r3, #4]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2bff      	cmp	r3, #255	; 0xff
 800467e:	d173      	bne.n	8004768 <Gesture_Detection_IT+0x188>
 8004680:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004682:	795b      	ldrb	r3, [r3, #5]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2bff      	cmp	r3, #255	; 0xff
 8004688:	d16e      	bne.n	8004768 <Gesture_Detection_IT+0x188>
 800468a:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <Gesture_Detection_IT+0x194>)
 800468c:	799b      	ldrb	r3, [r3, #6]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2bff      	cmp	r3, #255	; 0xff
 8004692:	d169      	bne.n	8004768 <Gesture_Detection_IT+0x188>
 8004694:	4b37      	ldr	r3, [pc, #220]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004696:	79db      	ldrb	r3, [r3, #7]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2bff      	cmp	r3, #255	; 0xff
 800469c:	d164      	bne.n	8004768 <Gesture_Detection_IT+0x188>
 800469e:	4b35      	ldr	r3, [pc, #212]	; (8004774 <Gesture_Detection_IT+0x194>)
 80046a0:	7a1b      	ldrb	r3, [r3, #8]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2bff      	cmp	r3, #255	; 0xff
 80046a6:	d15f      	bne.n	8004768 <Gesture_Detection_IT+0x188>
			{
				counter = 0;
 80046a8:	4b30      	ldr	r3, [pc, #192]	; (800476c <Gesture_Detection_IT+0x18c>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]

	}else
	{
		counter = 0;
	}
}
 80046ae:	e05b      	b.n	8004768 <Gesture_Detection_IT+0x188>
		}else if(counter ==2)
 80046b0:	4b2e      	ldr	r3, [pc, #184]	; (800476c <Gesture_Detection_IT+0x18c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d157      	bne.n	8004768 <Gesture_Detection_IT+0x188>
			if(/*zone_3x3_first[2] == 0xff && */zone_3x3_first[5] == 0xff && zone_3x3_first[8] == 0xff)
 80046b8:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <Gesture_Detection_IT+0x194>)
 80046ba:	795b      	ldrb	r3, [r3, #5]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2bff      	cmp	r3, #255	; 0xff
 80046c0:	d122      	bne.n	8004708 <Gesture_Detection_IT+0x128>
 80046c2:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <Gesture_Detection_IT+0x194>)
 80046c4:	7a1b      	ldrb	r3, [r3, #8]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2bff      	cmp	r3, #255	; 0xff
 80046ca:	d11d      	bne.n	8004708 <Gesture_Detection_IT+0x128>
				zone_3x3_second[3] = result_buff[33];   //			zone6	zone5	zone4
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <Gesture_Detection_IT+0x190>)
 80046ce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <Gesture_Detection_IT+0x198>)
 80046d4:	70da      	strb	r2, [r3, #3]
				zone_3x3_second[6] = result_buff[42];  //
 80046d6:	4b26      	ldr	r3, [pc, #152]	; (8004770 <Gesture_Detection_IT+0x190>)
 80046d8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80046dc:	4b26      	ldr	r3, [pc, #152]	; (8004778 <Gesture_Detection_IT+0x198>)
 80046de:	719a      	strb	r2, [r3, #6]
				if(/*zone_3x3_second[0] == 0xff && */zone_3x3_second[3] == 0xff && zone_3x3_second[6] == 0xff)
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <Gesture_Detection_IT+0x198>)
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2bff      	cmp	r3, #255	; 0xff
 80046e8:	d136      	bne.n	8004758 <Gesture_Detection_IT+0x178>
 80046ea:	4b23      	ldr	r3, [pc, #140]	; (8004778 <Gesture_Detection_IT+0x198>)
 80046ec:	799b      	ldrb	r3, [r3, #6]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2bff      	cmp	r3, #255	; 0xff
 80046f2:	d131      	bne.n	8004758 <Gesture_Detection_IT+0x178>
					int_flag = 0x02;
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <Gesture_Detection_IT+0x19c>)
 80046f6:	2202      	movs	r2, #2
 80046f8:	701a      	strb	r2, [r3, #0]
					printf("LEFT-TO-RIGHT %u\r\n", counter);
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <Gesture_Detection_IT+0x18c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	481f      	ldr	r0, [pc, #124]	; (8004780 <Gesture_Detection_IT+0x1a0>)
 8004702:	f001 f82f 	bl	8005764 <iprintf>
				if(/*zone_3x3_second[0] == 0xff && */zone_3x3_second[3] == 0xff && zone_3x3_second[6] == 0xff)
 8004706:	e027      	b.n	8004758 <Gesture_Detection_IT+0x178>
			}else if(/*zone_3x3_first[0] == 0xff && */zone_3x3_first[3] == 0xff && zone_3x3_first[6] == 0xff)
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <Gesture_Detection_IT+0x194>)
 800470a:	78db      	ldrb	r3, [r3, #3]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2bff      	cmp	r3, #255	; 0xff
 8004710:	d123      	bne.n	800475a <Gesture_Detection_IT+0x17a>
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <Gesture_Detection_IT+0x194>)
 8004714:	799b      	ldrb	r3, [r3, #6]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2bff      	cmp	r3, #255	; 0xff
 800471a:	d11e      	bne.n	800475a <Gesture_Detection_IT+0x17a>
				zone_3x3_second[5] = result_buff[39];  //
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <Gesture_Detection_IT+0x190>)
 800471e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <Gesture_Detection_IT+0x198>)
 8004724:	715a      	strb	r2, [r3, #5]
				zone_3x3_second[8] = result_buff[48];  //
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <Gesture_Detection_IT+0x190>)
 8004728:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <Gesture_Detection_IT+0x198>)
 800472e:	721a      	strb	r2, [r3, #8]
				if(/*zone_3x3_second[2] == 0xff && */zone_3x3_second[5] == 0xff && zone_3x3_second[8] == 0xff)
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <Gesture_Detection_IT+0x198>)
 8004732:	795b      	ldrb	r3, [r3, #5]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2bff      	cmp	r3, #255	; 0xff
 8004738:	d10f      	bne.n	800475a <Gesture_Detection_IT+0x17a>
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <Gesture_Detection_IT+0x198>)
 800473c:	7a1b      	ldrb	r3, [r3, #8]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2bff      	cmp	r3, #255	; 0xff
 8004742:	d10a      	bne.n	800475a <Gesture_Detection_IT+0x17a>
					int_flag = 0x01;
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <Gesture_Detection_IT+0x19c>)
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
					printf("RIGHT-TO-LEFT %u\r\n", counter);
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <Gesture_Detection_IT+0x18c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	480c      	ldr	r0, [pc, #48]	; (8004784 <Gesture_Detection_IT+0x1a4>)
 8004752:	f001 f807 	bl	8005764 <iprintf>
 8004756:	e000      	b.n	800475a <Gesture_Detection_IT+0x17a>
				if(/*zone_3x3_second[0] == 0xff && */zone_3x3_second[3] == 0xff && zone_3x3_second[6] == 0xff)
 8004758:	bf00      	nop
			counter = 0;
 800475a:	4b04      	ldr	r3, [pc, #16]	; (800476c <Gesture_Detection_IT+0x18c>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
}
 8004760:	e002      	b.n	8004768 <Gesture_Detection_IT+0x188>
		counter = 0;
 8004762:	4b02      	ldr	r3, [pc, #8]	; (800476c <Gesture_Detection_IT+0x18c>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
}
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20001dac 	.word	0x20001dac
 8004770:	20001db0 	.word	0x20001db0
 8004774:	20001d94 	.word	0x20001d94
 8004778:	20001da0 	.word	0x20001da0
 800477c:	20001da9 	.word	0x20001da9
 8004780:	08006698 	.word	0x08006698
 8004784:	080066ac 	.word	0x080066ac

08004788 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004790:	1d39      	adds	r1, r7, #4
 8004792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004796:	2201      	movs	r2, #1
 8004798:	4803      	ldr	r0, [pc, #12]	; (80047a8 <__io_putchar+0x20>)
 800479a:	f7ff fa5d 	bl	8003c58 <HAL_UART_Transmit>

  return ch;
 800479e:	687b      	ldr	r3, [r7, #4]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20001d08 	.word	0x20001d08

080047ac <tof_i2c_read>:


/*@brief - i2c read function
  @ret   - return i2c data or TOF_ERROR otherwise*/
uint8_t tof_i2c_read(uint8_t *data, uint8_t regAddr, uint16_t len)
	{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	70fb      	strb	r3, [r7, #3]
 80047b8:	4613      	mov	r3, r2
 80047ba:	803b      	strh	r3, [r7, #0]
		if(HAL_I2C_Master_Transmit(TOF_I2C_Handle, TOF_I2C_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK)
 80047bc:	1cfa      	adds	r2, r7, #3
 80047be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2301      	movs	r3, #1
 80047c6:	2182      	movs	r1, #130	; 0x82
 80047c8:	480d      	ldr	r0, [pc, #52]	; (8004800 <tof_i2c_read+0x54>)
 80047ca:	f7fc ffb7 	bl	800173c <HAL_I2C_Master_Transmit>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <tof_i2c_read+0x2c>
			return TOF_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e00f      	b.n	80047f8 <tof_i2c_read+0x4c>

		if(HAL_I2C_Master_Receive(TOF_I2C_Handle, TOF_I2C_ADDR, data, len, HAL_MAX_DELAY) != HAL_OK)
 80047d8:	883b      	ldrh	r3, [r7, #0]
 80047da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047de:	9200      	str	r2, [sp, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	2182      	movs	r1, #130	; 0x82
 80047e4:	4806      	ldr	r0, [pc, #24]	; (8004800 <tof_i2c_read+0x54>)
 80047e6:	f7fd f89d 	bl	8001924 <HAL_I2C_Master_Receive>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <tof_i2c_read+0x48>
			return TOF_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e001      	b.n	80047f8 <tof_i2c_read+0x4c>

		return *data;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	781b      	ldrb	r3, [r3, #0]
	}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20001c64 	.word	0x20001c64

08004804 <tof_i2c_write>:

/*@breif - i2c write function
  @ret   - TOF_OK if success or TOF_ERROR otherwise*/
uint8_t tof_i2c_write(uint8_t *data, uint8_t regAddr, uint16_t len)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
 8004810:	4613      	mov	r3, r2
 8004812:	803b      	strh	r3, [r7, #0]
	uint8_t send_data[2];
	send_data[0] = regAddr;
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	733b      	strb	r3, [r7, #12]
	send_data[1] = *data;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	737b      	strb	r3, [r7, #13]
	if(HAL_I2C_Master_Transmit(TOF_I2C_Handle, TOF_I2C_ADDR, send_data, len, HAL_MAX_DELAY) != HAL_OK)
 800481e:	883b      	ldrh	r3, [r7, #0]
 8004820:	f107 020c 	add.w	r2, r7, #12
 8004824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004828:	9100      	str	r1, [sp, #0]
 800482a:	2182      	movs	r1, #130	; 0x82
 800482c:	4806      	ldr	r0, [pc, #24]	; (8004848 <tof_i2c_write+0x44>)
 800482e:	f7fc ff85 	bl	800173c <HAL_I2C_Master_Transmit>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <tof_i2c_write+0x38>
		return TOF_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <tof_i2c_write+0x3a>

	return TOF_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20001c64 	.word	0x20001c64

0800484c <tof_i2c_write_command>:

/*@breif - i2c write command function
  @ret   - TOF_OK if success or TOF_ERROR otherwise*/
uint8_t tof_i2c_write_command(uint8_t *data,  uint16_t len)
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af02      	add	r7, sp, #8
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]

		if(HAL_I2C_Master_Transmit(TOF_I2C_Handle, TOF_I2C_ADDR, data, len, HAL_MAX_DELAY) != HAL_OK)
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800485e:	9200      	str	r2, [sp, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	2182      	movs	r1, #130	; 0x82
 8004864:	4806      	ldr	r0, [pc, #24]	; (8004880 <tof_i2c_write_command+0x34>)
 8004866:	f7fc ff69 	bl	800173c <HAL_I2C_Master_Transmit>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <tof_i2c_write_command+0x28>
			return TOF_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <tof_i2c_write_command+0x2a>

		return TOF_OK;
 8004874:	2300      	movs	r3, #0
	}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20001c64 	.word	0x20001c64

08004884 <tof_calculate_checksum>:

/*@brief - bootloader checksum calculation function
  @ret   - return checksum value*/
uint8_t tof_calculate_checksum(uint8_t cmd, uint8_t size, uint8_t *data)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	603a      	str	r2, [r7, #0]
 800488e:	71fb      	strb	r3, [r7, #7]
 8004890:	460b      	mov	r3, r1
 8004892:	71bb      	strb	r3, [r7, #6]
	uint8_t sum = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
	uint8_t private_size = size;
 8004898:	79bb      	ldrb	r3, [r7, #6]
 800489a:	73bb      	strb	r3, [r7, #14]
	for(; size > 0; size--)
 800489c:	e00a      	b.n	80048b4 <tof_calculate_checksum+0x30>
	{
		sum += *data;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	4413      	add	r3, r2
 80048a6:	73fb      	strb	r3, [r7, #15]
		data++;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	603b      	str	r3, [r7, #0]
	for(; size > 0; size--)
 80048ae:	79bb      	ldrb	r3, [r7, #6]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	71bb      	strb	r3, [r7, #6]
 80048b4:	79bb      	ldrb	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f1      	bne.n	800489e <tof_calculate_checksum+0x1a>
	}

	sum += cmd + private_size;
 80048ba:	79fa      	ldrb	r2, [r7, #7]
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	4413      	add	r3, r2
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	4413      	add	r3, r2
 80048c6:	73fb      	strb	r3, [r7, #15]
	return ~sum;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <bootloader_poll>:

/*@brief - poll bootloader BL_CMD_STAT register to get 0x00 value
  @ret   - TOF_OK if success or TOF_ERROR otherwise*/
uint8_t bootloader_poll(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
	uint8_t read_back[3] = {0};
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <bootloader_poll+0x60>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	80bb      	strh	r3, [r7, #4]
 80048e8:	2300      	movs	r3, #0
 80048ea:	71bb      	strb	r3, [r7, #6]

//	while(tof_i2c_read(buff, TOF_BL_CMD_STAT, 1) != 0x00);
	counter = 0;
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <bootloader_poll+0x64>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
	while(counter < READ_COUNT)
 80048f2:	e01a      	b.n	800492a <bootloader_poll+0x4e>
	{
		if(tof_i2c_read(read_back, TOF_CMD_STAT, 3) == TOF_ERROR)
 80048f4:	1d3b      	adds	r3, r7, #4
 80048f6:	2203      	movs	r2, #3
 80048f8:	2108      	movs	r1, #8
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff56 	bl	80047ac <tof_i2c_read>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <bootloader_poll+0x2e>
			return TOF_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e014      	b.n	8004934 <bootloader_poll+0x58>

		if(read_back[0] == 0x00 && read_back[1] == 0x00 && read_back[2] == 0xFF)
 800490a:	793b      	ldrb	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d107      	bne.n	8004920 <bootloader_poll+0x44>
 8004910:	797b      	ldrb	r3, [r7, #5]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <bootloader_poll+0x44>
 8004916:	79bb      	ldrb	r3, [r7, #6]
 8004918:	2bff      	cmp	r3, #255	; 0xff
 800491a:	d101      	bne.n	8004920 <bootloader_poll+0x44>
		{
			return TOF_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e009      	b.n	8004934 <bootloader_poll+0x58>
		}

		counter++;
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <bootloader_poll+0x64>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	4a06      	ldr	r2, [pc, #24]	; (8004940 <bootloader_poll+0x64>)
 8004928:	6013      	str	r3, [r2, #0]
	while(counter < READ_COUNT)
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <bootloader_poll+0x64>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d9e0      	bls.n	80048f4 <bootloader_poll+0x18>
	}

	return TOF_ERROR;
 8004932:	2301      	movs	r3, #1

}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	080066c0 	.word	0x080066c0
 8004940:	20001dac 	.word	0x20001dac

08004944 <bootloader_cmd_download_init>:

/*@brief - bootloader command DOWNLOAD_INIT function
  @ret   - ok if success or error otherwise*/
uint8_t bootloader_cmd_download_init(uint8_t *write_buffer)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	uint8_t data_ptr = 0x29;
 800494c:	2329      	movs	r3, #41	; 0x29
 800494e:	73fb      	strb	r3, [r7, #15]

	write_buffer[0] = TOF_BL_CMD_STAT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2208      	movs	r2, #8
 8004954:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = DOWNLOAD_INIT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3301      	adds	r3, #1
 800495a:	2214      	movs	r2, #20
 800495c:	701a      	strb	r2, [r3, #0]
	write_buffer[2] = 0x01;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3302      	adds	r3, #2
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
	write_buffer[3] = data_ptr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3303      	adds	r3, #3
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	701a      	strb	r2, [r3, #0]
	write_buffer[4] = tof_calculate_checksum(DOWNLOAD_INIT, 1, &data_ptr);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	1d1c      	adds	r4, r3, #4
 8004972:	f107 030f 	add.w	r3, r7, #15
 8004976:	461a      	mov	r2, r3
 8004978:	2101      	movs	r1, #1
 800497a:	2014      	movs	r0, #20
 800497c:	f7ff ff82 	bl	8004884 <tof_calculate_checksum>
 8004980:	4603      	mov	r3, r0
 8004982:	7023      	strb	r3, [r4, #0]
	if(tof_i2c_write_command(write_buffer, 5) != TOF_OK)
 8004984:	2105      	movs	r1, #5
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ff60 	bl	800484c <tof_i2c_write_command>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <bootloader_cmd_download_init+0x52>
		return TOF_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <bootloader_cmd_download_init+0x54>

	return TOF_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	bd90      	pop	{r4, r7, pc}

080049a0 <bootloader_cmd_addr_ram>:

/*@brief - bootloader command ADDR_RAM function
  @ret   - oko if success or error otherwise*/
uint8_t bootloader_cmd_addr_ram(uint8_t *write_buffer)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	uint8_t data_ptr1[2] = {0x00, 0x00};
 80049a8:	2300      	movs	r3, #0
 80049aa:	81bb      	strh	r3, [r7, #12]

	write_buffer[0] = TOF_BL_CMD_STAT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2208      	movs	r2, #8
 80049b0:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = ADDR_RAM;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3301      	adds	r3, #1
 80049b6:	2243      	movs	r2, #67	; 0x43
 80049b8:	701a      	strb	r2, [r3, #0]
	write_buffer[2] = 0x02;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3302      	adds	r3, #2
 80049be:	2202      	movs	r2, #2
 80049c0:	701a      	strb	r2, [r3, #0]
	write_buffer[3] = data_ptr1[0]; //addr_lsb;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3303      	adds	r3, #3
 80049c6:	7b3a      	ldrb	r2, [r7, #12]
 80049c8:	701a      	strb	r2, [r3, #0]
	write_buffer[4] = data_ptr1[1]; //addr_msb;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	7b7a      	ldrb	r2, [r7, #13]
 80049d0:	701a      	strb	r2, [r3, #0]
	write_buffer[5] = tof_calculate_checksum(ADDR_RAM, 2, data_ptr1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	1d5c      	adds	r4, r3, #5
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	461a      	mov	r2, r3
 80049dc:	2102      	movs	r1, #2
 80049de:	2043      	movs	r0, #67	; 0x43
 80049e0:	f7ff ff50 	bl	8004884 <tof_calculate_checksum>
 80049e4:	4603      	mov	r3, r0
 80049e6:	7023      	strb	r3, [r4, #0]
	if(tof_i2c_write_command(write_buffer, 6) != TOF_OK)
 80049e8:	2106      	movs	r1, #6
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff2e 	bl	800484c <tof_i2c_write_command>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <bootloader_cmd_addr_ram+0x5a>
		return TOF_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <bootloader_cmd_addr_ram+0x5c>

	return TOF_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <bootloader_cmd_w_ram>:

/*@brief - bootloader command W_RAM function
  @ret   - ok if success or error otherwise*/
uint8_t bootloader_cmd_w_ram(uint8_t *write_buffer)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0,j = 0, k = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	2300      	movs	r3, #0
 8004a12:	73bb      	strb	r3, [r7, #14]
 8004a14:	2300      	movs	r3, #0
 8004a16:	737b      	strb	r3, [r7, #13]

	write_buffer[0] = TOF_BL_CMD_STAT;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = W_RAM;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3301      	adds	r3, #1
 8004a22:	2241      	movs	r2, #65	; 0x41
 8004a24:	701a      	strb	r2, [r3, #0]
	write_buffer[2] = 0x80;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3302      	adds	r3, #2
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	701a      	strb	r2, [r3, #0]

	for(j = 0; j < 55; j++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73bb      	strb	r3, [r7, #14]
 8004a32:	e038      	b.n	8004aa6 <bootloader_cmd_w_ram+0xa2>
	{
		for(i = 0; i < 128; i++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
 8004a38:	e00e      	b.n	8004a58 <bootloader_cmd_w_ram+0x54>
		{
			write_buffer[3+i] = tof_bin_image[i+128*j];
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	7bbb      	ldrb	r3, [r7, #14]
 8004a3e:	01db      	lsls	r3, r3, #7
 8004a40:	441a      	add	r2, r3
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	3303      	adds	r3, #3
 8004a46:	4619      	mov	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	440b      	add	r3, r1
 8004a4c:	4933      	ldr	r1, [pc, #204]	; (8004b1c <bootloader_cmd_w_ram+0x118>)
 8004a4e:	5c8a      	ldrb	r2, [r1, r2]
 8004a50:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 128; i++)
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	3301      	adds	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	daec      	bge.n	8004a3a <bootloader_cmd_w_ram+0x36>
		}
		write_buffer[3+i] = tof_calculate_checksum(W_RAM, 128, tof_bin_image+128*j);
 8004a60:	7bbb      	ldrb	r3, [r7, #14]
 8004a62:	01db      	lsls	r3, r3, #7
 8004a64:	461a      	mov	r2, r3
 8004a66:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <bootloader_cmd_w_ram+0x118>)
 8004a68:	441a      	add	r2, r3
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	3303      	adds	r3, #3
 8004a6e:	4619      	mov	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	185c      	adds	r4, r3, r1
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	2041      	movs	r0, #65	; 0x41
 8004a78:	f7ff ff04 	bl	8004884 <tof_calculate_checksum>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	7023      	strb	r3, [r4, #0]
		if(tof_i2c_write_command(write_buffer, 132) != TOF_OK)
 8004a80:	2184      	movs	r1, #132	; 0x84
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fee2 	bl	800484c <tof_i2c_write_command>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <bootloader_cmd_w_ram+0x8e>
			return TOF_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e03f      	b.n	8004b12 <bootloader_cmd_w_ram+0x10e>

		//poll until the bootloader signals READY
		if(bootloader_poll() != TOF_OK)
 8004a92:	f7ff ff23 	bl	80048dc <bootloader_poll>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <bootloader_cmd_w_ram+0x9c>
			return TOF_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e038      	b.n	8004b12 <bootloader_cmd_w_ram+0x10e>
	for(j = 0; j < 55; j++)
 8004aa0:	7bbb      	ldrb	r3, [r7, #14]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	73bb      	strb	r3, [r7, #14]
 8004aa6:	7bbb      	ldrb	r3, [r7, #14]
 8004aa8:	2b36      	cmp	r3, #54	; 0x36
 8004aaa:	d9c3      	bls.n	8004a34 <bootloader_cmd_w_ram+0x30>
//	write_buffer[2] = 0x08;
//	write_buffer[3+k] = tof_calculate_checksum(W_RAM, 8, tof_bin_image+128*j);
//	if(tof_i2c_write_command(write_buffer, 12) != TOF_OK)
//		return TOF_ERROR;

	for(k = 0; k < 88; k++)
 8004aac:	2300      	movs	r3, #0
 8004aae:	737b      	strb	r3, [r7, #13]
 8004ab0:	e00e      	b.n	8004ad0 <bootloader_cmd_w_ram+0xcc>
		{
			write_buffer[3+k] = tof_bin_image[k+128*j];
 8004ab2:	7b7a      	ldrb	r2, [r7, #13]
 8004ab4:	7bbb      	ldrb	r3, [r7, #14]
 8004ab6:	01db      	lsls	r3, r3, #7
 8004ab8:	441a      	add	r2, r3
 8004aba:	7b7b      	ldrb	r3, [r7, #13]
 8004abc:	3303      	adds	r3, #3
 8004abe:	4619      	mov	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	440b      	add	r3, r1
 8004ac4:	4915      	ldr	r1, [pc, #84]	; (8004b1c <bootloader_cmd_w_ram+0x118>)
 8004ac6:	5c8a      	ldrb	r2, [r1, r2]
 8004ac8:	701a      	strb	r2, [r3, #0]
	for(k = 0; k < 88; k++)
 8004aca:	7b7b      	ldrb	r3, [r7, #13]
 8004acc:	3301      	adds	r3, #1
 8004ace:	737b      	strb	r3, [r7, #13]
 8004ad0:	7b7b      	ldrb	r3, [r7, #13]
 8004ad2:	2b57      	cmp	r3, #87	; 0x57
 8004ad4:	d9ed      	bls.n	8004ab2 <bootloader_cmd_w_ram+0xae>
		}
		write_buffer[2] = 0x58;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3302      	adds	r3, #2
 8004ada:	2258      	movs	r2, #88	; 0x58
 8004adc:	701a      	strb	r2, [r3, #0]
		write_buffer[3+k] = tof_calculate_checksum(W_RAM, 88, tof_bin_image+128*j);
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	01db      	lsls	r3, r3, #7
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <bootloader_cmd_w_ram+0x118>)
 8004ae6:	441a      	add	r2, r3
 8004ae8:	7b7b      	ldrb	r3, [r7, #13]
 8004aea:	3303      	adds	r3, #3
 8004aec:	4619      	mov	r1, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	185c      	adds	r4, r3, r1
 8004af2:	2158      	movs	r1, #88	; 0x58
 8004af4:	2041      	movs	r0, #65	; 0x41
 8004af6:	f7ff fec5 	bl	8004884 <tof_calculate_checksum>
 8004afa:	4603      	mov	r3, r0
 8004afc:	7023      	strb	r3, [r4, #0]
		if(tof_i2c_write_command(write_buffer, 92) != TOF_OK)
 8004afe:	215c      	movs	r1, #92	; 0x5c
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fea3 	bl	800484c <tof_i2c_write_command>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <bootloader_cmd_w_ram+0x10c>
			return TOF_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <bootloader_cmd_w_ram+0x10e>

	return TOF_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	2000000c 	.word	0x2000000c

08004b20 <bootloader_cmd_ramremap_reset>:

/*@brief - bootloader command RAMREMAP_RESET function
  @ret   - ok if success or error otherwise*/
uint8_t bootloader_cmd_ramremap_reset(uint8_t *write_buffer)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	if(tof_i2c_read(&read_val, TOF_ENABLE,1) == TOF_ERROR)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	21e0      	movs	r1, #224	; 0xe0
 8004b2c:	481a      	ldr	r0, [pc, #104]	; (8004b98 <bootloader_cmd_ramremap_reset+0x78>)
 8004b2e:	f7ff fe3d 	bl	80047ac <tof_i2c_read>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <bootloader_cmd_ramremap_reset+0x1c>
		return TOF_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e029      	b.n	8004b90 <bootloader_cmd_ramremap_reset+0x70>
	write_val = read_val | 0x21;
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <bootloader_cmd_ramremap_reset+0x78>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <bootloader_cmd_ramremap_reset+0x7c>)
 8004b48:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_ENABLE, 2) != TOF_OK)
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	21e0      	movs	r1, #224	; 0xe0
 8004b4e:	4813      	ldr	r0, [pc, #76]	; (8004b9c <bootloader_cmd_ramremap_reset+0x7c>)
 8004b50:	f7ff fe58 	bl	8004804 <tof_i2c_write>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <bootloader_cmd_ramremap_reset+0x3e>
		return TOF_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e018      	b.n	8004b90 <bootloader_cmd_ramremap_reset+0x70>

	//RAMREMAP_RESET command
	write_buffer[0] = TOF_BL_CMD_STAT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2208      	movs	r2, #8
 8004b62:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = RAMREMAP_RESET;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3301      	adds	r3, #1
 8004b68:	2211      	movs	r2, #17
 8004b6a:	701a      	strb	r2, [r3, #0]
	write_buffer[2] = 0x00;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3302      	adds	r3, #2
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
	write_buffer[3] = 0xEE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3303      	adds	r3, #3
 8004b78:	22ee      	movs	r2, #238	; 0xee
 8004b7a:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write_command(write_buffer, 4) != TOF_OK)
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fe64 	bl	800484c <tof_i2c_write_command>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <bootloader_cmd_ramremap_reset+0x6e>
		return TOF_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <bootloader_cmd_ramremap_reset+0x70>

	return TOF_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20001daa 	.word	0x20001daa
 8004b9c:	20001dab 	.word	0x20001dab

08004ba0 <app_configuration>:

/*@brief - application configuration api
  @ret   - ok if success or error otherwise*/
uint8_t app_configuration(uint8_t spad_map, uint16_t time_lsb, uint8_t time_msb)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
 8004baa:	460b      	mov	r3, r1
 8004bac:	80bb      	strh	r3, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71bb      	strb	r3, [r7, #6]
	uint8_t write_buff[3] = {0x24, time_lsb, time_msb};
 8004bb2:	2324      	movs	r3, #36	; 0x24
 8004bb4:	733b      	strb	r3, [r7, #12]
 8004bb6:	88bb      	ldrh	r3, [r7, #4]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	737b      	strb	r3, [r7, #13]
 8004bbc:	79bb      	ldrb	r3, [r7, #6]
 8004bbe:	73bb      	strb	r3, [r7, #14]

	HAL_Delay(33);
 8004bc0:	2021      	movs	r0, #33	; 0x21
 8004bc2:	f7fc fa17 	bl	8000ff4 <HAL_Delay>
	//load common config page LOAD_CONFIG_PAGE_COMMON command
	write_val = 0x16;
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <app_configuration+0x114>)
 8004bc8:	2216      	movs	r2, #22
 8004bca:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 8004bcc:	2202      	movs	r2, #2
 8004bce:	2108      	movs	r1, #8
 8004bd0:	4838      	ldr	r0, [pc, #224]	; (8004cb4 <app_configuration+0x114>)
 8004bd2:	f7ff fe17 	bl	8004804 <tof_i2c_write>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <app_configuration+0x40>
		return TOF_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e065      	b.n	8004cac <app_configuration+0x10c>

	//Check that the command is executed: S 41 W 08 Sr 41 R N P
	if(check_app_cmd_exec_cmpltd() != TOF_OK)
 8004be0:	f000 faec 	bl	80051bc <check_app_cmd_exec_cmpltd>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <app_configuration+0x4e>
		return TOF_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e05e      	b.n	8004cac <app_configuration+0x10c>

	//Check that the configuration page is loaded: S 41 W 20 Sr 41 R A A A N P This should read back the values: 0x16 <do not care> 0xBC 0x00
	write_val = 0x16;
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <app_configuration+0x114>)
 8004bf0:	2216      	movs	r2, #22
 8004bf2:	701a      	strb	r2, [r3, #0]
	if(check_config_page_loaded(&write_val) != TOF_OK)
 8004bf4:	482f      	ldr	r0, [pc, #188]	; (8004cb4 <app_configuration+0x114>)
 8004bf6:	f000 fb1f 	bl	8005238 <check_config_page_loaded>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <app_configuration+0x64>
		return TOF_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e053      	b.n	8004cac <app_configuration+0x10c>

	//Change the value of the measurement period to 100ms: S 41 W 24 64 00 P
	if(tof_i2c_write_command(write_buff, 3) != TOF_OK)
 8004c04:	f107 030c 	add.w	r3, r7, #12
 8004c08:	2103      	movs	r1, #3
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fe1e 	bl	800484c <tof_i2c_write_command>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <app_configuration+0x7a>
		return TOF_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e048      	b.n	8004cac <app_configuration+0x10c>

	//Select pre-defined SPAD mask 6: S 41 W 34 06 P
	write_val = spad_map;
 8004c1a:	4a26      	ldr	r2, [pc, #152]	; (8004cb4 <app_configuration+0x114>)
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	7013      	strb	r3, [r2, #0]
	if(tof_i2c_write(&write_val, TOF_SPAD_MAP_ID, 2) != TOF_OK)
 8004c20:	2202      	movs	r2, #2
 8004c22:	2134      	movs	r1, #52	; 0x34
 8004c24:	4823      	ldr	r0, [pc, #140]	; (8004cb4 <app_configuration+0x114>)
 8004c26:	f7ff fded 	bl	8004804 <tof_i2c_write>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <app_configuration+0x94>
		return TOF_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e03b      	b.n	8004cac <app_configuration+0x10c>

	//Configure the device for LOW on GPIO0 while the VCSEL is emitting light: S 41 W 31 03 P
	write_val = 0x03;
 8004c34:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <app_configuration+0x114>)
 8004c36:	2203      	movs	r2, #3
 8004c38:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_GPIO_0, 2) != TOF_OK)
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	2131      	movs	r1, #49	; 0x31
 8004c3e:	481d      	ldr	r0, [pc, #116]	; (8004cb4 <app_configuration+0x114>)
 8004c40:	f7ff fde0 	bl	8004804 <tof_i2c_write>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <app_configuration+0xae>
		return TOF_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e02e      	b.n	8004cac <app_configuration+0x10c>

	//Write the common page to the device with command WRITE_CONFIG_PAGE: S 41 W 08 15 P
	write_val = 0x15;
 8004c4e:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <app_configuration+0x114>)
 8004c50:	2215      	movs	r2, #21
 8004c52:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 8004c54:	2202      	movs	r2, #2
 8004c56:	2108      	movs	r1, #8
 8004c58:	4816      	ldr	r0, [pc, #88]	; (8004cb4 <app_configuration+0x114>)
 8004c5a:	f7ff fdd3 	bl	8004804 <tof_i2c_write>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <app_configuration+0xc8>
		return TOF_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e021      	b.n	8004cac <app_configuration+0x10c>

	//Check that the command is executed: S 41 W 08 Sr 41 R N P
	//This should read back as: 0x00 (if you read back a value >= 0x10 continue to read the register 0x08 until it changes to a value less than 0x10)
	if(check_app_cmd_exec_cmpltd() != TOF_OK)
 8004c68:	f000 faa8 	bl	80051bc <check_app_cmd_exec_cmpltd>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <app_configuration+0xd6>
		return TOF_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e01a      	b.n	8004cac <app_configuration+0x10c>

	//Enable interrupts for results , S 41 W E2 02 P
	write_val = 0x02;
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <app_configuration+0x114>)
 8004c78:	2202      	movs	r2, #2
 8004c7a:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_INT_ENAB, 2) != TOF_OK)
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	21e2      	movs	r1, #226	; 0xe2
 8004c80:	480c      	ldr	r0, [pc, #48]	; (8004cb4 <app_configuration+0x114>)
 8004c82:	f7ff fdbf 	bl	8004804 <tof_i2c_write>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <app_configuration+0xf0>
		return TOF_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e00d      	b.n	8004cac <app_configuration+0x10c>

	//Clear any old pending interrupts: S 41 W E1 FF P
	write_val = 0xFF;
 8004c90:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <app_configuration+0x114>)
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_INT_STATUS, 2) != TOF_OK)
 8004c96:	2202      	movs	r2, #2
 8004c98:	21e1      	movs	r1, #225	; 0xe1
 8004c9a:	4806      	ldr	r0, [pc, #24]	; (8004cb4 <app_configuration+0x114>)
 8004c9c:	f7ff fdb2 	bl	8004804 <tof_i2c_write>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <app_configuration+0x10a>
		return TOF_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <app_configuration+0x10c>

	return TOF_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20001dab 	.word	0x20001dab

08004cb8 <app_factory_callibration>:

/*@brief - application factory callibration function
  @ret   - ok if success or error otherwise*/
uint8_t app_factory_callibration(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b0b2      	sub	sp, #200	; 0xc8
 8004cbc:	af00      	add	r7, sp, #0
	uint8_t factory_buff[192] = {0}, i = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	f107 0308 	add.w	r3, r7, #8
 8004cc6:	22bc      	movs	r2, #188	; 0xbc
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fd42 	bl	8005754 <memset>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	if(check_mode() == TOF_MODE_TMF8821)
 8004cd6:	f000 fae3 	bl	80052a0 <check_mode>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d113      	bne.n	8004d08 <app_factory_callibration+0x50>
	{
		if(tmf8821_store_factory_callibration(factory_buff) != TOF_OK)
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fafa 	bl	80052dc <tmf8821_store_factory_callibration>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <app_factory_callibration+0x3a>
			return TOF_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e108      	b.n	8004f04 <app_factory_callibration+0x24c>

		if(tmf8821_load_factory_callibration(factory_buff) != TOF_OK)
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fb75 	bl	80053e4 <tmf8821_load_factory_callibration>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <app_factory_callibration+0x4c>
			return TOF_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0ff      	b.n	8004f04 <app_factory_callibration+0x24c>

		return TOF_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e0fd      	b.n	8004f04 <app_factory_callibration+0x24c>
	}else if(check_mode() == TOF_MODE_TMF8828)
 8004d08:	f000 faca 	bl	80052a0 <check_mode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	f040 80f7 	bne.w	8004f02 <app_factory_callibration+0x24a>
	{
		//Reset the factory calibration counter to ensure the first SPAD mask is calibrated first. The host needs to send the command RESET_FACTORY_CALIBRATION to the device:
		//S 41 W 08 1F P
		write_val = 0x1F;
 8004d14:	4b7d      	ldr	r3, [pc, #500]	; (8004f0c <app_factory_callibration+0x254>)
 8004d16:	221f      	movs	r2, #31
 8004d18:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	2108      	movs	r1, #8
 8004d1e:	487b      	ldr	r0, [pc, #492]	; (8004f0c <app_factory_callibration+0x254>)
 8004d20:	f7ff fd70 	bl	8004804 <tof_i2c_write>

		//Initiate factory calibration through command FACTORY_CALIBRATION: S 41 W 08 20 P
		write_val = 0x20;
 8004d24:	4b79      	ldr	r3, [pc, #484]	; (8004f0c <app_factory_callibration+0x254>)
 8004d26:	2220      	movs	r2, #32
 8004d28:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	4877      	ldr	r0, [pc, #476]	; (8004f0c <app_factory_callibration+0x254>)
 8004d30:	f7ff fd68 	bl	8004804 <tof_i2c_write>

		//Wait for the command to terminate by reading the CMD_STAT register, This cmd takes some time
		if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x01)
 8004d34:	2201      	movs	r2, #1
 8004d36:	2108      	movs	r1, #8
 8004d38:	4875      	ldr	r0, [pc, #468]	; (8004f10 <app_factory_callibration+0x258>)
 8004d3a:	f7ff fd37 	bl	80047ac <tof_i2c_read>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d10c      	bne.n	8004d5e <app_factory_callibration+0xa6>
		{
			HAL_Delay(100);
 8004d44:	2064      	movs	r0, #100	; 0x64
 8004d46:	f7fc f955 	bl	8000ff4 <HAL_Delay>
			while(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) != 0x00);
 8004d4a:	bf00      	nop
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2108      	movs	r1, #8
 8004d50:	486f      	ldr	r0, [pc, #444]	; (8004f10 <app_factory_callibration+0x258>)
 8004d52:	f7ff fd2b 	bl	80047ac <tof_i2c_read>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f7      	bne.n	8004d4c <app_factory_callibration+0x94>
 8004d5c:	e02c      	b.n	8004db8 <app_factory_callibration+0x100>

		}else if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00);
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2108      	movs	r1, #8
 8004d62:	486b      	ldr	r0, [pc, #428]	; (8004f10 <app_factory_callibration+0x258>)
 8004d64:	f7ff fd22 	bl	80047ac <tof_i2c_read>

		//The host needs to repeat steps 2-3 three times to perform calibrate for all four 4x4 SPAD masks.
		while(i < 3)
 8004d68:	e026      	b.n	8004db8 <app_factory_callibration+0x100>
		{
			//Initiate factory calibration through command FACTORY_CALIBRATION: S 41 W 08 20 P
			write_val = 0x20;
 8004d6a:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <app_factory_callibration+0x254>)
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	701a      	strb	r2, [r3, #0]
			tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004d70:	2202      	movs	r2, #2
 8004d72:	2108      	movs	r1, #8
 8004d74:	4865      	ldr	r0, [pc, #404]	; (8004f0c <app_factory_callibration+0x254>)
 8004d76:	f7ff fd45 	bl	8004804 <tof_i2c_write>

			//Wait for the command to terminate by reading the CMD_STAT register, This cmd takes some time
			if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x01)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2108      	movs	r1, #8
 8004d7e:	4864      	ldr	r0, [pc, #400]	; (8004f10 <app_factory_callibration+0x258>)
 8004d80:	f7ff fd14 	bl	80047ac <tof_i2c_read>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d10c      	bne.n	8004da4 <app_factory_callibration+0xec>
			{
				HAL_Delay(100);
 8004d8a:	2064      	movs	r0, #100	; 0x64
 8004d8c:	f7fc f932 	bl	8000ff4 <HAL_Delay>
				while(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) != 0x00);
 8004d90:	bf00      	nop
 8004d92:	2201      	movs	r2, #1
 8004d94:	2108      	movs	r1, #8
 8004d96:	485e      	ldr	r0, [pc, #376]	; (8004f10 <app_factory_callibration+0x258>)
 8004d98:	f7ff fd08 	bl	80047ac <tof_i2c_read>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f7      	bne.n	8004d92 <app_factory_callibration+0xda>
 8004da2:	e004      	b.n	8004dae <app_factory_callibration+0xf6>

			}else if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00);
 8004da4:	2201      	movs	r2, #1
 8004da6:	2108      	movs	r1, #8
 8004da8:	4859      	ldr	r0, [pc, #356]	; (8004f10 <app_factory_callibration+0x258>)
 8004daa:	f7ff fcff 	bl	80047ac <tof_i2c_read>

			i++;
 8004dae:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004db2:	3301      	adds	r3, #1
 8004db4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		while(i < 3)
 8004db8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d9d4      	bls.n	8004d6a <app_factory_callibration+0xb2>
		}

		i = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

		//To ensure that the firmware has the correct calibration load, the host can send the command
		//RESET_FACTORY_CALIBRATION to the device: S 41 W 08 1F P
		//This will not reset the factory calibration data, but ensure that the internal firmware points to the
		//factory calibration of the first 4x4 SPAD mask again.
		write_val = 0x1F;
 8004dc6:	4b51      	ldr	r3, [pc, #324]	; (8004f0c <app_factory_callibration+0x254>)
 8004dc8:	221f      	movs	r2, #31
 8004dca:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004dcc:	2202      	movs	r2, #2
 8004dce:	2108      	movs	r1, #8
 8004dd0:	484e      	ldr	r0, [pc, #312]	; (8004f0c <app_factory_callibration+0x254>)
 8004dd2:	f7ff fd17 	bl	8004804 <tof_i2c_write>

		//Next, the host must issue the LOAD_CONFIG_PAGE_FACTORY_CALIB command: S 41 W 08 19 P
		write_val = 0x19;
 8004dd6:	4b4d      	ldr	r3, [pc, #308]	; (8004f0c <app_factory_callibration+0x254>)
 8004dd8:	2219      	movs	r2, #25
 8004dda:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004ddc:	2202      	movs	r2, #2
 8004dde:	2108      	movs	r1, #8
 8004de0:	484a      	ldr	r0, [pc, #296]	; (8004f0c <app_factory_callibration+0x254>)
 8004de2:	f7ff fd0f 	bl	8004804 <tof_i2c_write>

		//Wait for the command to terminate by reading the CMD_STAT register
		while(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) != 0x00);
 8004de6:	bf00      	nop
 8004de8:	2201      	movs	r2, #1
 8004dea:	2108      	movs	r1, #8
 8004dec:	4848      	ldr	r0, [pc, #288]	; (8004f10 <app_factory_callibration+0x258>)
 8004dee:	f7ff fcdd 	bl	80047ac <tof_i2c_read>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f7      	bne.n	8004de8 <app_factory_callibration+0x130>

		//Now the host must read out the complete factory calibration page: S 41 W 20 Sr 41 R A A A A .... <repeat> ... A N P
		//The host must read out the complete factory calibration page from address 0x20 .. 0xDF (inclusive)
		tof_i2c_read(factory_buff, TOF_CONFIG_RESULT, 192);
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	22c0      	movs	r2, #192	; 0xc0
 8004dfc:	2120      	movs	r1, #32
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fcd4 	bl	80047ac <tof_i2c_read>

		//To switch to the next factory calibration data set, the host needs to send a
		//WRITE_CONFIG_PAGE to the device: S 41 W 08 15 P
		//When the device stores the factory calibration has it will automatically switch to the next factory
		//calibration set.
		write_val = 0x15;
 8004e04:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <app_factory_callibration+0x254>)
 8004e06:	2215      	movs	r2, #21
 8004e08:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	2108      	movs	r1, #8
 8004e0e:	483f      	ldr	r0, [pc, #252]	; (8004f0c <app_factory_callibration+0x254>)
 8004e10:	f7ff fcf8 	bl	8004804 <tof_i2c_write>

		//Check that the command is executed: S 41 W 08 Sr 41 R N P
		check_app_cmd_exec_cmpltd();
 8004e14:	f000 f9d2 	bl	80051bc <check_app_cmd_exec_cmpltd>

		//In order to read all four factory calibrations, the host needs to repeat steps 7-11 four times (the last WRITE_CONFIG_PAGE is optional).
		while(i < 4)
 8004e18:	e020      	b.n	8004e5c <app_factory_callibration+0x1a4>
		{
			//Next, the host must issue the LOAD_CONFIG_PAGE_FACTORY_CALIB command: S 41 W 08 19 P
			write_val = 0x19;
 8004e1a:	4b3c      	ldr	r3, [pc, #240]	; (8004f0c <app_factory_callibration+0x254>)
 8004e1c:	2219      	movs	r2, #25
 8004e1e:	701a      	strb	r2, [r3, #0]
			tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004e20:	2202      	movs	r2, #2
 8004e22:	2108      	movs	r1, #8
 8004e24:	4839      	ldr	r0, [pc, #228]	; (8004f0c <app_factory_callibration+0x254>)
 8004e26:	f7ff fced 	bl	8004804 <tof_i2c_write>

			//Wait for the command to terminate by reading the CMD_STAT register
			while(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) != 0x00);
 8004e2a:	bf00      	nop
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2108      	movs	r1, #8
 8004e30:	4837      	ldr	r0, [pc, #220]	; (8004f10 <app_factory_callibration+0x258>)
 8004e32:	f7ff fcbb 	bl	80047ac <tof_i2c_read>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f7      	bne.n	8004e2c <app_factory_callibration+0x174>

			//Now the host must read out the complete factory calibration page: S 41 W 20 Sr 41 R A A A A .... <repeat> ... A N P
			//The host must read out the complete factory calibration page from address 0x20 .. 0xDF (inclusive)
			tof_i2c_read(factory_buff, TOF_CONFIG_RESULT, 192);
 8004e3c:	1d3b      	adds	r3, r7, #4
 8004e3e:	22c0      	movs	r2, #192	; 0xc0
 8004e40:	2120      	movs	r1, #32
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fcb2 	bl	80047ac <tof_i2c_read>

			//To switch to the next factory calibration data set, the host needs to send a
			//WRITE_CONFIG_PAGE to the device: S 41 W 08 15 P
			//When the device stores the factory calibration has it will automatically switch to the next factory
			//calibration set.
			write_val = 0x15;
 8004e48:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <app_factory_callibration+0x254>)
 8004e4a:	2215      	movs	r2, #21
 8004e4c:	701a      	strb	r2, [r3, #0]
			tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004e4e:	2202      	movs	r2, #2
 8004e50:	2108      	movs	r1, #8
 8004e52:	482e      	ldr	r0, [pc, #184]	; (8004f0c <app_factory_callibration+0x254>)
 8004e54:	f7ff fcd6 	bl	8004804 <tof_i2c_write>

			//Check that the command is executed: S 41 W 08 Sr 41 R N P
			check_app_cmd_exec_cmpltd();
 8004e58:	f000 f9b0 	bl	80051bc <check_app_cmd_exec_cmpltd>
		while(i < 4)
 8004e5c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d9da      	bls.n	8004e1a <app_factory_callibration+0x162>
		}
		i = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		//TODO

		//Reset the factory calibration counter to ensure the first SPAD mask calibration is load first.
		//The host needs to send the command RESET_FACTORY_CALIBRATION to the device:
		//S 41 W 08 1F P
		write_val = 0x1F;
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <app_factory_callibration+0x254>)
 8004e6c:	221f      	movs	r2, #31
 8004e6e:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004e70:	2202      	movs	r2, #2
 8004e72:	2108      	movs	r1, #8
 8004e74:	4825      	ldr	r0, [pc, #148]	; (8004f0c <app_factory_callibration+0x254>)
 8004e76:	f7ff fcc5 	bl	8004804 <tof_i2c_write>

		//Load the factory calibration page with command LOAD_CONFIG_PAGE_FACTORY_CALIB: S 41 W 08 19 P
		write_val = 0x19;
 8004e7a:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <app_factory_callibration+0x254>)
 8004e7c:	2219      	movs	r2, #25
 8004e7e:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004e80:	2202      	movs	r2, #2
 8004e82:	2108      	movs	r1, #8
 8004e84:	4821      	ldr	r0, [pc, #132]	; (8004f0c <app_factory_callibration+0x254>)
 8004e86:	f7ff fcbd 	bl	8004804 <tof_i2c_write>

		//Check that the command is executed: S 41 W 08 Sr 41 R N P
		check_app_cmd_exec_cmpltd();
 8004e8a:	f000 f997 	bl	80051bc <check_app_cmd_exec_cmpltd>

		//Check that the configuration page is loaded: S 41 W 20 Sr 41 R A A A N P
		write_val = 0x19;
 8004e8e:	4b1f      	ldr	r3, [pc, #124]	; (8004f0c <app_factory_callibration+0x254>)
 8004e90:	2219      	movs	r2, #25
 8004e92:	701a      	strb	r2, [r3, #0]
		check_config_page_loaded(&write_val);
 8004e94:	481d      	ldr	r0, [pc, #116]	; (8004f0c <app_factory_callibration+0x254>)
 8004e96:	f000 f9cf 	bl	8005238 <check_config_page_loaded>

		//Write the stored calibration data to the I2C registers: 0x24, 0x25, ... 0xDF.
		//TODO

		//Write back the calibration data with command WRITE_CONFIG_PAGE: S 41 W 08 15 P
		write_val = 0x15;
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <app_factory_callibration+0x254>)
 8004e9c:	2215      	movs	r2, #21
 8004e9e:	701a      	strb	r2, [r3, #0]
		tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	2108      	movs	r1, #8
 8004ea4:	4819      	ldr	r0, [pc, #100]	; (8004f0c <app_factory_callibration+0x254>)
 8004ea6:	f7ff fcad 	bl	8004804 <tof_i2c_write>

		//Check that the command is executed: S 41 W 08 Sr 41 R N P
		check_app_cmd_exec_cmpltd();
 8004eaa:	f000 f987 	bl	80051bc <check_app_cmd_exec_cmpltd>

		//The host has to repeat steps 2-7 four times
		while(i < 4)
 8004eae:	e019      	b.n	8004ee4 <app_factory_callibration+0x22c>
		{
			//Load the factory calibration page with command LOAD_CONFIG_PAGE_FACTORY_CALIB: S 41 W 08 19 P
			write_val = 0x19;
 8004eb0:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <app_factory_callibration+0x254>)
 8004eb2:	2219      	movs	r2, #25
 8004eb4:	701a      	strb	r2, [r3, #0]
			tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	2108      	movs	r1, #8
 8004eba:	4814      	ldr	r0, [pc, #80]	; (8004f0c <app_factory_callibration+0x254>)
 8004ebc:	f7ff fca2 	bl	8004804 <tof_i2c_write>

			//Check that the command is executed: S 41 W 08 Sr 41 R N P
			check_app_cmd_exec_cmpltd();
 8004ec0:	f000 f97c 	bl	80051bc <check_app_cmd_exec_cmpltd>

			//Check that the configuration page is loaded: S 41 W 20 Sr 41 R A A A N P
			write_val = 0x19;
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <app_factory_callibration+0x254>)
 8004ec6:	2219      	movs	r2, #25
 8004ec8:	701a      	strb	r2, [r3, #0]
			check_config_page_loaded(&write_val);
 8004eca:	4810      	ldr	r0, [pc, #64]	; (8004f0c <app_factory_callibration+0x254>)
 8004ecc:	f000 f9b4 	bl	8005238 <check_config_page_loaded>

			//Write the stored calibration data to the I2C registers: 0x24, 0x25, ... 0xDF.
			//TODO

			//Write back the calibration data with command WRITE_CONFIG_PAGE: S 41 W 08 15 P
			write_val = 0x15;
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <app_factory_callibration+0x254>)
 8004ed2:	2215      	movs	r2, #21
 8004ed4:	701a      	strb	r2, [r3, #0]
			tof_i2c_write(&write_val, TOF_CMD_STAT, 2);
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	2108      	movs	r1, #8
 8004eda:	480c      	ldr	r0, [pc, #48]	; (8004f0c <app_factory_callibration+0x254>)
 8004edc:	f7ff fc92 	bl	8004804 <tof_i2c_write>

			//Check that the command is executed: S 41 W 08 Sr 41 R N P
			check_app_cmd_exec_cmpltd();
 8004ee0:	f000 f96c 	bl	80051bc <check_app_cmd_exec_cmpltd>
		while(i < 4)
 8004ee4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d9e1      	bls.n	8004eb0 <app_factory_callibration+0x1f8>
		}

		//wait for calliberation status to be success
		while(tof_i2c_read(&read_val, TOF_CALIBRATION_STATUS, 1) != 0x00);
 8004eec:	bf00      	nop
 8004eee:	2201      	movs	r2, #1
 8004ef0:	2107      	movs	r1, #7
 8004ef2:	4807      	ldr	r0, [pc, #28]	; (8004f10 <app_factory_callibration+0x258>)
 8004ef4:	f7ff fc5a 	bl	80047ac <tof_i2c_read>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f7      	bne.n	8004eee <app_factory_callibration+0x236>

		return TOF_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <app_factory_callibration+0x24c>
	}

	return TOF_ERROR;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	37c8      	adds	r7, #200	; 0xc8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20001dab 	.word	0x20001dab
 8004f10:	20001daa 	.word	0x20001daa

08004f14 <app_measurement>:

/*@brief - application measurements function
  @ret   - ok if success or error otherwise*/
uint8_t app_measurement(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
	HAL_Delay(33);
 8004f18:	2021      	movs	r0, #33	; 0x21
 8004f1a:	f7fc f86b 	bl	8000ff4 <HAL_Delay>
	//Enable interrupts for results , S 41 W E2 02 P
	write_val = 0x02;
 8004f1e:	4b2f      	ldr	r3, [pc, #188]	; (8004fdc <app_measurement+0xc8>)
 8004f20:	2202      	movs	r2, #2
 8004f22:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_INT_ENAB, 2) != TOF_OK)
 8004f24:	2202      	movs	r2, #2
 8004f26:	21e2      	movs	r1, #226	; 0xe2
 8004f28:	482c      	ldr	r0, [pc, #176]	; (8004fdc <app_measurement+0xc8>)
 8004f2a:	f7ff fc6b 	bl	8004804 <tof_i2c_write>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <app_measurement+0x24>
		return TOF_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e04f      	b.n	8004fd8 <app_measurement+0xc4>

	//Clear any old pending interrupts: S 41 W E1 FF P
	write_val = 0xFF;
 8004f38:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <app_measurement+0xc8>)
 8004f3a:	22ff      	movs	r2, #255	; 0xff
 8004f3c:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_INT_STATUS, 2) != TOF_OK)
 8004f3e:	2202      	movs	r2, #2
 8004f40:	21e1      	movs	r1, #225	; 0xe1
 8004f42:	4826      	ldr	r0, [pc, #152]	; (8004fdc <app_measurement+0xc8>)
 8004f44:	f7ff fc5e 	bl	8004804 <tof_i2c_write>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <app_measurement+0x3e>
		return TOF_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e042      	b.n	8004fd8 <app_measurement+0xc4>

	//The starting of measurements is done by issuing the command MEASURE: S 41 W 08 10 P
	write_val = 0x10;
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <app_measurement+0xc8>)
 8004f54:	2210      	movs	r2, #16
 8004f56:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 8004f58:	2202      	movs	r2, #2
 8004f5a:	2108      	movs	r1, #8
 8004f5c:	481f      	ldr	r0, [pc, #124]	; (8004fdc <app_measurement+0xc8>)
 8004f5e:	f7ff fc51 	bl	8004804 <tof_i2c_write>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <app_measurement+0x58>
		return TOF_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e035      	b.n	8004fd8 <app_measurement+0xc4>

	//The host should check that the command is accepted by reading back the register CMD_STAT
	if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x01)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2108      	movs	r1, #8
 8004f70:	481b      	ldr	r0, [pc, #108]	; (8004fe0 <app_measurement+0xcc>)
 8004f72:	f7ff fc1b 	bl	80047ac <tof_i2c_read>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d02c      	beq.n	8004fd6 <app_measurement+0xc2>
	{
			;
	}else if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) >= 0x10)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2108      	movs	r1, #8
 8004f80:	4817      	ldr	r0, [pc, #92]	; (8004fe0 <app_measurement+0xcc>)
 8004f82:	f7ff fc13 	bl	80047ac <tof_i2c_read>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d924      	bls.n	8004fd6 <app_measurement+0xc2>
	{
		counter = 0;
 8004f8c:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <app_measurement+0xd0>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
		while(counter < READ_COUNT)
 8004f92:	e014      	b.n	8004fbe <app_measurement+0xaa>
		{
			if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) <= 0x10)
 8004f94:	2201      	movs	r2, #1
 8004f96:	2108      	movs	r1, #8
 8004f98:	4811      	ldr	r0, [pc, #68]	; (8004fe0 <app_measurement+0xcc>)
 8004f9a:	f7ff fc07 	bl	80047ac <tof_i2c_read>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d807      	bhi.n	8004fb4 <app_measurement+0xa0>
			{
				if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x01)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	2108      	movs	r1, #8
 8004fa8:	480d      	ldr	r0, [pc, #52]	; (8004fe0 <app_measurement+0xcc>)
 8004faa:	f7ff fbff 	bl	80047ac <tof_i2c_read>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d009      	beq.n	8004fc8 <app_measurement+0xb4>
					break;
			}
			counter++;
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <app_measurement+0xd0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <app_measurement+0xd0>)
 8004fbc:	6013      	str	r3, [r2, #0]
		while(counter < READ_COUNT)
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <app_measurement+0xd0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d9e6      	bls.n	8004f94 <app_measurement+0x80>
 8004fc6:	e000      	b.n	8004fca <app_measurement+0xb6>
					break;
 8004fc8:	bf00      	nop
		}
		if(counter == 3)
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <app_measurement+0xd0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d101      	bne.n	8004fd6 <app_measurement+0xc2>
			return TOF_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <app_measurement+0xc4>
	}
	return TOF_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20001dab 	.word	0x20001dab
 8004fe0:	20001daa 	.word	0x20001daa
 8004fe4:	20001dac 	.word	0x20001dac

08004fe8 <app_full_config>:

/*@breif - application all configuration function sequence
  @ret   - ok if success or error otherwise*/
uint8_t app_full_config(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
	//check APPID to be the measurement application ID.(APPID = 0x03)
	if(tof_i2c_read(&read_val, TOF_APPID, 1) == TOF_ERROR)
 8004fec:	2201      	movs	r2, #1
 8004fee:	2100      	movs	r1, #0
 8004ff0:	481e      	ldr	r0, [pc, #120]	; (800506c <app_full_config+0x84>)
 8004ff2:	f7ff fbdb 	bl	80047ac <tof_i2c_read>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <app_full_config+0x18>
		return TOF_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e032      	b.n	8005066 <app_full_config+0x7e>

	if(read_val == 0x03)
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <app_full_config+0x84>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d127      	bne.n	8005058 <app_full_config+0x70>
	{
		//Read MODE register
		if(tof_i2c_read(&read_val, TOF_MODE, 1) == TOF_ERROR)
 8005008:	2201      	movs	r2, #1
 800500a:	2110      	movs	r1, #16
 800500c:	4817      	ldr	r0, [pc, #92]	; (800506c <app_full_config+0x84>)
 800500e:	f7ff fbcd 	bl	80047ac <tof_i2c_read>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <app_full_config+0x34>
			return TOF_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e024      	b.n	8005066 <app_full_config+0x7e>

		if(read_val == 0x00)
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <app_full_config+0x84>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d11f      	bne.n	8005064 <app_full_config+0x7c>
		{
			//TMF8821 Application running

			//Application Configuration
			if(app_configuration(SPAD_MAP_ID_6, TOF_TIME_LSB, TOF_TIME_MSB) != TOF_OK)
 8005024:	2201      	movs	r2, #1
 8005026:	21f4      	movs	r1, #244	; 0xf4
 8005028:	2006      	movs	r0, #6
 800502a:	f7ff fdb9 	bl	8004ba0 <app_configuration>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <app_full_config+0x50>
				return TOF_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e016      	b.n	8005066 <app_full_config+0x7e>

			//Application Factory Callibration
			if(app_factory_callibration() != TOF_OK)
 8005038:	f7ff fe3e 	bl	8004cb8 <app_factory_callibration>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <app_full_config+0x5e>
				return TOF_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e00f      	b.n	8005066 <app_full_config+0x7e>

			//Application Measurements
			if(app_measurement() != TOF_OK)
 8005046:	f7ff ff65 	bl	8004f14 <app_measurement>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <app_full_config+0x6c>
				return TOF_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e008      	b.n	8005066 <app_full_config+0x7e>
			return TOF_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e006      	b.n	8005066 <app_full_config+0x7e>
		}
	}else if(read_val == 0x08)
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <app_full_config+0x84>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d101      	bne.n	8005064 <app_full_config+0x7c>
	{
		//TMF8828 Application running
		return TOF_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <app_full_config+0x7e>
	}

	return TOF_ERROR;
 8005064:	2301      	movs	r3, #1
}
 8005066:	4618      	mov	r0, r3
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20001daa 	.word	0x20001daa

08005070 <wake_up_device>:
}

/*@breif - wake up the device
  @ret   - TOF_OK if success or TOF_ERROR otherwise*/
uint8_t wake_up_device(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
	//Read back register ENABLE (0xE0) and check that the device is in STANDBY state (reads back as b_00xx_0010).
	if((tof_i2c_read(&read_val, TOF_ENABLE, 1) & 0x02) == 0x02)
 8005074:	2201      	movs	r2, #1
 8005076:	21e0      	movs	r1, #224	; 0xe0
 8005078:	4822      	ldr	r0, [pc, #136]	; (8005104 <wake_up_device+0x94>)
 800507a:	f7ff fb97 	bl	80047ac <tof_i2c_read>
 800507e:	4603      	mov	r3, r0
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d13a      	bne.n	80050fe <wake_up_device+0x8e>
	{
		//Write to register ENABLE the value b_00xx_0001.
		if(tof_i2c_read(&read_val, TOF_ENABLE, 1) == TOF_ERROR)
 8005088:	2201      	movs	r2, #1
 800508a:	21e0      	movs	r1, #224	; 0xe0
 800508c:	481d      	ldr	r0, [pc, #116]	; (8005104 <wake_up_device+0x94>)
 800508e:	f7ff fb8d 	bl	80047ac <tof_i2c_read>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <wake_up_device+0x2c>
			return TOF_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e031      	b.n	8005100 <wake_up_device+0x90>
		write_val = (read_val & 0x30) | 0x01;
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <wake_up_device+0x94>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b25b      	sxtb	r3, r3
 80050a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	b25b      	sxtb	r3, r3
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	4b15      	ldr	r3, [pc, #84]	; (8005108 <wake_up_device+0x98>)
 80050b2:	701a      	strb	r2, [r3, #0]
		if(tof_i2c_write(&write_val, TOF_ENABLE, 2) != TOF_OK)
 80050b4:	2202      	movs	r2, #2
 80050b6:	21e0      	movs	r1, #224	; 0xe0
 80050b8:	4813      	ldr	r0, [pc, #76]	; (8005108 <wake_up_device+0x98>)
 80050ba:	f7ff fba3 	bl	8004804 <tof_i2c_write>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <wake_up_device+0x58>
			return TOF_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e01b      	b.n	8005100 <wake_up_device+0x90>

		//Read back register ENABLE until it has the value b_01xx_0001.
		counter = 0;
 80050c8:	4b10      	ldr	r3, [pc, #64]	; (800510c <wake_up_device+0x9c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
		while(counter < READ_COUNT)
 80050ce:	e010      	b.n	80050f2 <wake_up_device+0x82>
			{
				if((tof_i2c_read(&read_val, TOF_ENABLE, 1) & 0x41) == 0x41)
 80050d0:	2201      	movs	r2, #1
 80050d2:	21e0      	movs	r1, #224	; 0xe0
 80050d4:	480b      	ldr	r0, [pc, #44]	; (8005104 <wake_up_device+0x94>)
 80050d6:	f7ff fb69 	bl	80047ac <tof_i2c_read>
 80050da:	4603      	mov	r3, r0
 80050dc:	f003 0341 	and.w	r3, r3, #65	; 0x41
 80050e0:	2b41      	cmp	r3, #65	; 0x41
 80050e2:	d101      	bne.n	80050e8 <wake_up_device+0x78>
					return TOF_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e00b      	b.n	8005100 <wake_up_device+0x90>
				counter++;
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <wake_up_device+0x9c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	4a07      	ldr	r2, [pc, #28]	; (800510c <wake_up_device+0x9c>)
 80050f0:	6013      	str	r3, [r2, #0]
		while(counter < READ_COUNT)
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <wake_up_device+0x9c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d9ea      	bls.n	80050d0 <wake_up_device+0x60>
			}
		return TOF_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <wake_up_device+0x90>
	}

	return TOF_ERROR;
 80050fe:	2301      	movs	r3, #1
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20001daa 	.word	0x20001daa
 8005108:	20001dab 	.word	0x20001dab
 800510c:	20001dac 	.word	0x20001dac

08005110 <power_cycle>:

/*@breif - power cycle sequence
  @ret   - void*/
void power_cycle(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005114:	2200      	movs	r2, #0
 8005116:	2141      	movs	r1, #65	; 0x41
 8005118:	4806      	ldr	r0, [pc, #24]	; (8005134 <power_cycle+0x24>)
 800511a:	f7fc fa4d 	bl	80015b8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800511e:	2001      	movs	r0, #1
 8005120:	f7fb ff68 	bl	8000ff4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005124:	2201      	movs	r2, #1
 8005126:	2141      	movs	r1, #65	; 0x41
 8005128:	4802      	ldr	r0, [pc, #8]	; (8005134 <power_cycle+0x24>)
 800512a:	f7fc fa45 	bl	80015b8 <HAL_GPIO_WritePin>
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40021800 	.word	0x40021800

08005138 <exit_standby_timed_mode>:
}

/*@breif - exit from standby timed mode
  @ret   - TOF_OK if success or TOF_ERROR otherwise*/
uint8_t exit_standby_timed_mode(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
	//Stop handling the result interrupts
	//Perform a wake-up sequence: S 41 W E0 21 P
	if(wake_up_device() != TOF_OK)
 800513c:	f7ff ff98 	bl	8005070 <wake_up_device>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <exit_standby_timed_mode+0x12>
		return TOF_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e030      	b.n	80051ac <exit_standby_timed_mode+0x74>

	//Check that the device is not in STANDBY_TIMED by reading the ENABLE register: S 41 W E0 Sr 41 R N P, which must have the value b_01xx_0001 to continue.
	if((tof_i2c_read(&read_val, TOF_ENABLE, 1) & 0x41) != 0x41)
 800514a:	2201      	movs	r2, #1
 800514c:	21e0      	movs	r1, #224	; 0xe0
 800514e:	4818      	ldr	r0, [pc, #96]	; (80051b0 <exit_standby_timed_mode+0x78>)
 8005150:	f7ff fb2c 	bl	80047ac <tof_i2c_read>
 8005154:	4603      	mov	r3, r0
 8005156:	f003 0341 	and.w	r3, r3, #65	; 0x41
 800515a:	2b41      	cmp	r3, #65	; 0x41
 800515c:	d001      	beq.n	8005162 <exit_standby_timed_mode+0x2a>
		return TOF_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e024      	b.n	80051ac <exit_standby_timed_mode+0x74>

	//Issue the STOP command: S 41 W 08 FF P
	write_val = 0xFF;
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <exit_standby_timed_mode+0x7c>)
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 8005168:	2202      	movs	r2, #2
 800516a:	2108      	movs	r1, #8
 800516c:	4811      	ldr	r0, [pc, #68]	; (80051b4 <exit_standby_timed_mode+0x7c>)
 800516e:	f7ff fb49 	bl	8004804 <tof_i2c_write>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <exit_standby_timed_mode+0x44>
		return TOF_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e017      	b.n	80051ac <exit_standby_timed_mode+0x74>

	//Wait for the STOP to be successfully executed by reading CMD_STAT: S 41 W 08 Sr 41 R N P
	counter = 0;
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <exit_standby_timed_mode+0x80>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
	while(counter < READ_COUNT)
 8005182:	e00e      	b.n	80051a2 <exit_standby_timed_mode+0x6a>
	{
		if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00)
 8005184:	2201      	movs	r2, #1
 8005186:	2108      	movs	r1, #8
 8005188:	4809      	ldr	r0, [pc, #36]	; (80051b0 <exit_standby_timed_mode+0x78>)
 800518a:	f7ff fb0f 	bl	80047ac <tof_i2c_read>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <exit_standby_timed_mode+0x60>
			return TOF_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	e009      	b.n	80051ac <exit_standby_timed_mode+0x74>
		counter++;
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <exit_standby_timed_mode+0x80>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a06      	ldr	r2, [pc, #24]	; (80051b8 <exit_standby_timed_mode+0x80>)
 80051a0:	6013      	str	r3, [r2, #0]
	while(counter < READ_COUNT)
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <exit_standby_timed_mode+0x80>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d9ec      	bls.n	8005184 <exit_standby_timed_mode+0x4c>
	}
	return TOF_ERROR;
 80051aa:	2301      	movs	r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20001daa 	.word	0x20001daa
 80051b4:	20001dab 	.word	0x20001dab
 80051b8:	20001dac 	.word	0x20001dac

080051bc <check_app_cmd_exec_cmpltd>:
}

/*@breif - check whether application command has been executed or not
  @ret   - TOF_OK if success or TOF_ERROR otherwise*/
uint8_t check_app_cmd_exec_cmpltd(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	HAL_Delay(3);
 80051c0:	2003      	movs	r0, #3
 80051c2:	f7fb ff17 	bl	8000ff4 <HAL_Delay>
	if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00)
 80051c6:	2201      	movs	r2, #1
 80051c8:	2108      	movs	r1, #8
 80051ca:	4819      	ldr	r0, [pc, #100]	; (8005230 <check_app_cmd_exec_cmpltd+0x74>)
 80051cc:	f7ff faee 	bl	80047ac <tof_i2c_read>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <check_app_cmd_exec_cmpltd+0x1e>
		return TOF_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e027      	b.n	800522a <check_app_cmd_exec_cmpltd+0x6e>
	else if(read_val >= 0x10)
 80051da:	4b15      	ldr	r3, [pc, #84]	; (8005230 <check_app_cmd_exec_cmpltd+0x74>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d922      	bls.n	8005228 <check_app_cmd_exec_cmpltd+0x6c>
	{
//		while(!(tof_i2c_read(&read, TOF_CMD_STAT, 1) < 0x10));
		counter = 0;
 80051e2:	4b14      	ldr	r3, [pc, #80]	; (8005234 <check_app_cmd_exec_cmpltd+0x78>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
		while(counter < READ_COUNT)
 80051e8:	e018      	b.n	800521c <check_app_cmd_exec_cmpltd+0x60>
			{
				if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) < 0x10)
 80051ea:	2201      	movs	r2, #1
 80051ec:	2108      	movs	r1, #8
 80051ee:	4810      	ldr	r0, [pc, #64]	; (8005230 <check_app_cmd_exec_cmpltd+0x74>)
 80051f0:	f7ff fadc 	bl	80047ac <tof_i2c_read>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d80b      	bhi.n	8005212 <check_app_cmd_exec_cmpltd+0x56>
				{
					if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00)
 80051fa:	2201      	movs	r2, #1
 80051fc:	2108      	movs	r1, #8
 80051fe:	480c      	ldr	r0, [pc, #48]	; (8005230 <check_app_cmd_exec_cmpltd+0x74>)
 8005200:	f7ff fad4 	bl	80047ac <tof_i2c_read>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <check_app_cmd_exec_cmpltd+0x52>
							return TOF_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e00d      	b.n	800522a <check_app_cmd_exec_cmpltd+0x6e>
					else
						return TOF_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e00b      	b.n	800522a <check_app_cmd_exec_cmpltd+0x6e>
				}
				counter++;
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <check_app_cmd_exec_cmpltd+0x78>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a06      	ldr	r2, [pc, #24]	; (8005234 <check_app_cmd_exec_cmpltd+0x78>)
 800521a:	6013      	str	r3, [r2, #0]
		while(counter < READ_COUNT)
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <check_app_cmd_exec_cmpltd+0x78>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d9e2      	bls.n	80051ea <check_app_cmd_exec_cmpltd+0x2e>
			}

		return TOF_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <check_app_cmd_exec_cmpltd+0x6e>
	}

	return TOF_ERROR;
 8005228:	2301      	movs	r3, #1
}
 800522a:	4618      	mov	r0, r3
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20001daa 	.word	0x20001daa
 8005234:	20001dac 	.word	0x20001dac

08005238 <check_config_page_loaded>:

/*@breif - check whether configuration page has been loaded or not
  @ret   - TOF_OK if success or TOF_ERROR otherwise*/
uint8_t check_config_page_loaded(uint8_t *write_reg)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	uint8_t page[4] = {0};
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

	counter = 0;
 8005244:	4b15      	ldr	r3, [pc, #84]	; (800529c <check_config_page_loaded+0x64>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
	while(counter < READ_COUNT)
 800524a:	e01d      	b.n	8005288 <check_config_page_loaded+0x50>
	{
		if(tof_i2c_read(page, TOF_CONFIG_RESULT, 4) == TOF_ERROR)
 800524c:	f107 030c 	add.w	r3, r7, #12
 8005250:	2204      	movs	r2, #4
 8005252:	2120      	movs	r1, #32
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff faa9 	bl	80047ac <tof_i2c_read>
 800525a:	4603      	mov	r3, r0
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <check_config_page_loaded+0x2c>
			return TOF_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e016      	b.n	8005292 <check_config_page_loaded+0x5a>
		if(page[0] == *write_reg && page[2] == 0xBC && page[3] == 0x00)
 8005264:	7b3a      	ldrb	r2, [r7, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d107      	bne.n	800527e <check_config_page_loaded+0x46>
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	2bbc      	cmp	r3, #188	; 0xbc
 8005272:	d104      	bne.n	800527e <check_config_page_loaded+0x46>
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <check_config_page_loaded+0x46>
			return TOF_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	e009      	b.n	8005292 <check_config_page_loaded+0x5a>
		counter++;
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <check_config_page_loaded+0x64>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a05      	ldr	r2, [pc, #20]	; (800529c <check_config_page_loaded+0x64>)
 8005286:	6013      	str	r3, [r2, #0]
	while(counter < READ_COUNT)
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <check_config_page_loaded+0x64>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d9dd      	bls.n	800524c <check_config_page_loaded+0x14>
	}

	return TOF_ERROR;
 8005290:	2301      	movs	r3, #1
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20001dac 	.word	0x20001dac

080052a0 <check_mode>:
}

/*@breif - check application mode TMF8828(0x08) or TMF8821(0x00)
  @ret   - return TMF8828/TMF8821 macros or TOF_ERROR otherwise*/
uint8_t check_mode(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
	if(tof_i2c_read(&read_val, TOF_MODE, 1) == TOF_ERROR)
 80052a4:	2201      	movs	r2, #1
 80052a6:	2110      	movs	r1, #16
 80052a8:	480b      	ldr	r0, [pc, #44]	; (80052d8 <check_mode+0x38>)
 80052aa:	f7ff fa7f 	bl	80047ac <tof_i2c_read>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <check_mode+0x18>
		return TOF_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e00c      	b.n	80052d2 <check_mode+0x32>
	if(read_val == 0x00)
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <check_mode+0x38>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <check_mode+0x24>
		return TOF_MODE_TMF8821;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e006      	b.n	80052d2 <check_mode+0x32>
	else if(read_val == TOF_MODE_TMF8828)
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <check_mode+0x38>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d101      	bne.n	80052d0 <check_mode+0x30>
		return TOF_MODE_TMF8828;
 80052cc:	2308      	movs	r3, #8
 80052ce:	e000      	b.n	80052d2 <check_mode+0x32>

	return TOF_ERROR;
 80052d0:	2301      	movs	r3, #1
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20001daa 	.word	0x20001daa

080052dc <tmf8821_store_factory_callibration>:

uint8_t tmf8821_store_factory_callibration(uint8_t *factory_buff)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	//Initiate factory calibration through command FACTORY_CALIBRATION: S 41 W 08 20 P
	write_val = 0x20;
 80052e4:	4b3c      	ldr	r3, [pc, #240]	; (80053d8 <tmf8821_store_factory_callibration+0xfc>)
 80052e6:	2220      	movs	r2, #32
 80052e8:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 80052ea:	2202      	movs	r2, #2
 80052ec:	2108      	movs	r1, #8
 80052ee:	483a      	ldr	r0, [pc, #232]	; (80053d8 <tmf8821_store_factory_callibration+0xfc>)
 80052f0:	f7ff fa88 	bl	8004804 <tof_i2c_write>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <tmf8821_store_factory_callibration+0x22>
		return TOF_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e068      	b.n	80053d0 <tmf8821_store_factory_callibration+0xf4>

	//Wait for the command to terminate by reading the CMD_STAT This command takes some time
	if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x01)
 80052fe:	2201      	movs	r2, #1
 8005300:	2108      	movs	r1, #8
 8005302:	4836      	ldr	r0, [pc, #216]	; (80053dc <tmf8821_store_factory_callibration+0x100>)
 8005304:	f7ff fa52 	bl	80047ac <tof_i2c_read>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d118      	bne.n	8005340 <tmf8821_store_factory_callibration+0x64>
	{
		HAL_Delay(33);
 800530e:	2021      	movs	r0, #33	; 0x21
 8005310:	f7fb fe70 	bl	8000ff4 <HAL_Delay>
//			while(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) != 0x00);
		counter = 0;
 8005314:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
		while(counter < READ_COUNT)
 800531a:	e00c      	b.n	8005336 <tmf8821_store_factory_callibration+0x5a>
		{
			if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00)
 800531c:	2201      	movs	r2, #1
 800531e:	2108      	movs	r1, #8
 8005320:	482e      	ldr	r0, [pc, #184]	; (80053dc <tmf8821_store_factory_callibration+0x100>)
 8005322:	f7ff fa43 	bl	80047ac <tof_i2c_read>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00f      	beq.n	800534c <tmf8821_store_factory_callibration+0x70>
				break;
			counter++;
 800532c:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	4a2b      	ldr	r2, [pc, #172]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 8005334:	6013      	str	r3, [r2, #0]
		while(counter < READ_COUNT)
 8005336:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d9ee      	bls.n	800531c <tmf8821_store_factory_callibration+0x40>
 800533e:	e006      	b.n	800534e <tmf8821_store_factory_callibration+0x72>
		}
	}else if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00);
 8005340:	2201      	movs	r2, #1
 8005342:	2108      	movs	r1, #8
 8005344:	4825      	ldr	r0, [pc, #148]	; (80053dc <tmf8821_store_factory_callibration+0x100>)
 8005346:	f7ff fa31 	bl	80047ac <tof_i2c_read>
 800534a:	e000      	b.n	800534e <tmf8821_store_factory_callibration+0x72>
				break;
 800534c:	bf00      	nop

	if(counter == 3)
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d101      	bne.n	800535a <tmf8821_store_factory_callibration+0x7e>
		return TOF_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e03a      	b.n	80053d0 <tmf8821_store_factory_callibration+0xf4>

	//the host must issue the LOAD_CONFIG_PAGE_FACTORY_CALIB command: S 41 W 08 19 P
	write_val = 0x19;
 800535a:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <tmf8821_store_factory_callibration+0xfc>)
 800535c:	2219      	movs	r2, #25
 800535e:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 8005360:	2202      	movs	r2, #2
 8005362:	2108      	movs	r1, #8
 8005364:	481c      	ldr	r0, [pc, #112]	; (80053d8 <tmf8821_store_factory_callibration+0xfc>)
 8005366:	f7ff fa4d 	bl	8004804 <tof_i2c_write>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <tmf8821_store_factory_callibration+0x98>
		return TOF_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e02d      	b.n	80053d0 <tmf8821_store_factory_callibration+0xf4>

	HAL_Delay(190);
 8005374:	20be      	movs	r0, #190	; 0xbe
 8005376:	f7fb fe3d 	bl	8000ff4 <HAL_Delay>
	//Wait for the command to terminate by reading the CMD_STAT register
//		while(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) != 0x00);
	counter = 0;
 800537a:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
	while(counter < READ_COUNT)
 8005380:	e00c      	b.n	800539c <tmf8821_store_factory_callibration+0xc0>
	{
		if(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) == 0x00)
 8005382:	2201      	movs	r2, #1
 8005384:	2108      	movs	r1, #8
 8005386:	4815      	ldr	r0, [pc, #84]	; (80053dc <tmf8821_store_factory_callibration+0x100>)
 8005388:	f7ff fa10 	bl	80047ac <tof_i2c_read>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <tmf8821_store_factory_callibration+0xca>
			break;
		counter++;
 8005392:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 800539a:	6013      	str	r3, [r2, #0]
	while(counter < READ_COUNT)
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d9ee      	bls.n	8005382 <tmf8821_store_factory_callibration+0xa6>
 80053a4:	e000      	b.n	80053a8 <tmf8821_store_factory_callibration+0xcc>
			break;
 80053a6:	bf00      	nop
	}

	if(counter == 3)
 80053a8:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <tmf8821_store_factory_callibration+0x104>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d101      	bne.n	80053b4 <tmf8821_store_factory_callibration+0xd8>
		return TOF_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e00d      	b.n	80053d0 <tmf8821_store_factory_callibration+0xf4>

	//Now the host must read out the complete factory calibration page: S 41 W 20 Sr 41 R A A A A .... <repeat> ... A N P
	//The host must read out the complete factory calibration page from address 0x20 .. 0xDF (inclusive)
	if(tof_i2c_read(factory_buff, TOF_CONFIG_RESULT, 192) == TOF_ERROR)
 80053b4:	22c0      	movs	r2, #192	; 0xc0
 80053b6:	2120      	movs	r1, #32
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff f9f7 	bl	80047ac <tof_i2c_read>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <tmf8821_store_factory_callibration+0xec>
		return TOF_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e003      	b.n	80053d0 <tmf8821_store_factory_callibration+0xf4>

	HAL_Delay(33);
 80053c8:	2021      	movs	r0, #33	; 0x21
 80053ca:	f7fb fe13 	bl	8000ff4 <HAL_Delay>
	return TOF_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20001dab 	.word	0x20001dab
 80053dc:	20001daa 	.word	0x20001daa
 80053e0:	20001dac 	.word	0x20001dac

080053e4 <tmf8821_load_factory_callibration>:

uint8_t tmf8821_load_factory_callibration(uint8_t *factory_buff)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
	//Load the factory calibration page with command LOAD_CONFIG_PAGE_FACTORY_CALIB: S 41 W 08 19 P
	write_val = 0x19;
 80053ec:	4b27      	ldr	r3, [pc, #156]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 80053ee:	2219      	movs	r2, #25
 80053f0:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 80053f2:	2202      	movs	r2, #2
 80053f4:	2108      	movs	r1, #8
 80053f6:	4825      	ldr	r0, [pc, #148]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 80053f8:	f7ff fa04 	bl	8004804 <tof_i2c_write>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <tmf8821_load_factory_callibration+0x22>
		return TOF_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e03d      	b.n	8005482 <tmf8821_load_factory_callibration+0x9e>

	//Check that the command is executed
	if(check_app_cmd_exec_cmpltd() != TOF_OK)
 8005406:	f7ff fed9 	bl	80051bc <check_app_cmd_exec_cmpltd>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <tmf8821_load_factory_callibration+0x30>
		return TOF_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e036      	b.n	8005482 <tmf8821_load_factory_callibration+0x9e>

	//Check that the configuration page is loaded: S 41 W 20 Sr 41 R A A A N P This should read back the values: 0x19 <do not care> 0xBC 0x00
	write_val = 0x19;
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 8005416:	2219      	movs	r2, #25
 8005418:	701a      	strb	r2, [r3, #0]
	if(check_config_page_loaded(&write_val) != TOF_OK)
 800541a:	481c      	ldr	r0, [pc, #112]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 800541c:	f7ff ff0c 	bl	8005238 <check_config_page_loaded>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <tmf8821_load_factory_callibration+0x46>
		return TOF_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e02b      	b.n	8005482 <tmf8821_load_factory_callibration+0x9e>

	//Write the stored calibration data to the I²C registers: 0x24, 0x25, … 0xDF.
	write_val = TOF_PERIOD_MS_LSB;
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 800542c:	2224      	movs	r2, #36	; 0x24
 800542e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(TOF_I2C_Handle, TOF_I2C_ADDR, &write_val, 1, HAL_MAX_DELAY);
 8005430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2301      	movs	r3, #1
 8005438:	4a14      	ldr	r2, [pc, #80]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 800543a:	2182      	movs	r1, #130	; 0x82
 800543c:	4814      	ldr	r0, [pc, #80]	; (8005490 <tmf8821_load_factory_callibration+0xac>)
 800543e:	f7fc f97d 	bl	800173c <HAL_I2C_Master_Transmit>
	if(tof_i2c_write_command(factory_buff+4, 188) != TOF_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	21bc      	movs	r1, #188	; 0xbc
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff f9ff 	bl	800484c <tof_i2c_write_command>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <tmf8821_load_factory_callibration+0x74>
		return TOF_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e014      	b.n	8005482 <tmf8821_load_factory_callibration+0x9e>

	//Write back the calibration data with command WRITE_CONFIG_PAGE: S 41 W 08 15 P
	write_val = 0x15;
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 800545a:	2215      	movs	r2, #21
 800545c:	701a      	strb	r2, [r3, #0]
	if(tof_i2c_write(&write_val, TOF_CMD_STAT, 2) != TOF_OK)
 800545e:	2202      	movs	r2, #2
 8005460:	2108      	movs	r1, #8
 8005462:	480a      	ldr	r0, [pc, #40]	; (800548c <tmf8821_load_factory_callibration+0xa8>)
 8005464:	f7ff f9ce 	bl	8004804 <tof_i2c_write>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <tmf8821_load_factory_callibration+0x8e>
		return TOF_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e007      	b.n	8005482 <tmf8821_load_factory_callibration+0x9e>

	//Check that the command is executed
	if(check_app_cmd_exec_cmpltd() != TOF_OK)
 8005472:	f7ff fea3 	bl	80051bc <check_app_cmd_exec_cmpltd>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <tmf8821_load_factory_callibration+0x9c>
		return TOF_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <tmf8821_load_factory_callibration+0x9e>
//			counter++;
//		}
//		if(counter == 3)
//			return TOF_ERROR;

	return TOF_OK;
 8005480:	2300      	movs	r3, #0

}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20001dab 	.word	0x20001dab
 8005490:	20001c64 	.word	0x20001c64

08005494 <startup>:

uint8_t startup(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
	  //after power on pull enable line HIGH
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005498:	2201      	movs	r2, #1
 800549a:	2141      	movs	r1, #65	; 0x41
 800549c:	4836      	ldr	r0, [pc, #216]	; (8005578 <startup+0xe4>)
 800549e:	f7fc f88b 	bl	80015b8 <HAL_GPIO_WritePin>

	  HAL_Delay(2);
 80054a2:	2002      	movs	r0, #2
 80054a4:	f7fb fda6 	bl	8000ff4 <HAL_Delay>
	  //write 0x01 to ENABLE register 0xE0
	  if(tof_i2c_read(&read_val, TOF_ENABLE, 1) == TOF_ERROR)
 80054a8:	2201      	movs	r2, #1
 80054aa:	21e0      	movs	r1, #224	; 0xe0
 80054ac:	4833      	ldr	r0, [pc, #204]	; (800557c <startup+0xe8>)
 80054ae:	f7ff f97d 	bl	80047ac <tof_i2c_read>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <startup+0x28>
		  return TOF_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e05a      	b.n	8005572 <startup+0xde>
	  write_val = read_val | 0x01;
 80054bc:	4b2f      	ldr	r3, [pc, #188]	; (800557c <startup+0xe8>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <startup+0xec>)
 80054c8:	701a      	strb	r2, [r3, #0]
	  if(tof_i2c_write(&write_val, TOF_ENABLE, 2) != TOF_OK)
 80054ca:	2202      	movs	r2, #2
 80054cc:	21e0      	movs	r1, #224	; 0xe0
 80054ce:	482c      	ldr	r0, [pc, #176]	; (8005580 <startup+0xec>)
 80054d0:	f7ff f998 	bl	8004804 <tof_i2c_write>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <startup+0x4a>
		  return TOF_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e049      	b.n	8005572 <startup+0xde>

	  //Poll register ENABLE until the value 0x41 is read back
	  if(tof_i2c_read(&read_val, TOF_ENABLE, 1) == TOF_ERROR)
 80054de:	2201      	movs	r2, #1
 80054e0:	21e0      	movs	r1, #224	; 0xe0
 80054e2:	4826      	ldr	r0, [pc, #152]	; (800557c <startup+0xe8>)
 80054e4:	f7ff f962 	bl	80047ac <tof_i2c_read>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <startup+0x5e>
		  return TOF_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e03f      	b.n	8005572 <startup+0xde>

	  if((read_val & 0x01) == 0x01){
 80054f2:	4b22      	ldr	r3, [pc, #136]	; (800557c <startup+0xe8>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01e      	beq.n	800553c <startup+0xa8>
//		  while((tof_i2c_read(&read_buffer, TOF_ENABLE, 1) & 0x41) != 0x41);
		  counter = 0;
 80054fe:	4b21      	ldr	r3, [pc, #132]	; (8005584 <startup+0xf0>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
		  while(counter < READ_COUNT)
 8005504:	e00e      	b.n	8005524 <startup+0x90>
		  {
			  if((tof_i2c_read(&read_val, TOF_ENABLE, 1) & 0x41) == 0x41)
 8005506:	2201      	movs	r2, #1
 8005508:	21e0      	movs	r1, #224	; 0xe0
 800550a:	481c      	ldr	r0, [pc, #112]	; (800557c <startup+0xe8>)
 800550c:	f7ff f94e 	bl	80047ac <tof_i2c_read>
 8005510:	4603      	mov	r3, r0
 8005512:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8005516:	2b41      	cmp	r3, #65	; 0x41
 8005518:	d009      	beq.n	800552e <startup+0x9a>
				break;
			  counter++;
 800551a:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <startup+0xf0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	4a18      	ldr	r2, [pc, #96]	; (8005584 <startup+0xf0>)
 8005522:	6013      	str	r3, [r2, #0]
		  while(counter < READ_COUNT)
 8005524:	4b17      	ldr	r3, [pc, #92]	; (8005584 <startup+0xf0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d9ec      	bls.n	8005506 <startup+0x72>
 800552c:	e000      	b.n	8005530 <startup+0x9c>
				break;
 800552e:	bf00      	nop
		  }
		  if(counter == 3)
 8005530:	4b14      	ldr	r3, [pc, #80]	; (8005584 <startup+0xf0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d11b      	bne.n	8005570 <startup+0xdc>
			  return TOF_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e01a      	b.n	8005572 <startup+0xde>
	  }
	  else if((read_val & 0x02) == 0x02)
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <startup+0xe8>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <startup+0xc2>
	  {
		  if(wake_up_device() != TOF_OK)
 8005548:	f7ff fd92 	bl	8005070 <wake_up_device>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00e      	beq.n	8005570 <startup+0xdc>
			  return TOF_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e00d      	b.n	8005572 <startup+0xde>
	  }
	  else if((read_val & 0x06) == 0x06)
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <startup+0xe8>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	f003 0306 	and.w	r3, r3, #6
 800555e:	2b06      	cmp	r3, #6
 8005560:	d106      	bne.n	8005570 <startup+0xdc>
	  {
		  //(either force wake up from standby timed mode by writing b_00xx_0001 to ENABLE register to send STOP command to abort measurements and enter IDLE states)
		  if(exit_standby_timed_mode() != TOF_OK)
 8005562:	f7ff fde9 	bl	8005138 <exit_standby_timed_mode>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <startup+0xdc>
			  return TOF_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <startup+0xde>
//
//	  //Read REVID Register
//	  if(tof_i2c_read(&read_val, TOF_REVID, 1) == TOF_ERROR)
//		  return TOF_ERROR;

	 return TOF_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021800 	.word	0x40021800
 800557c:	20001daa 	.word	0x20001daa
 8005580:	20001dab 	.word	0x20001dab
 8005584:	20001dac 	.word	0x20001dac

08005588 <image_download>:

uint8_t image_download(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
	  //Read the register 0x00 = APPID to find out which application is running.
	  if(tof_i2c_read(&read_val, TOF_APPID, 1) == TOF_ERROR)
 800558c:	2201      	movs	r2, #1
 800558e:	2100      	movs	r1, #0
 8005590:	480e      	ldr	r0, [pc, #56]	; (80055cc <image_download+0x44>)
 8005592:	f7ff f90b 	bl	80047ac <tof_i2c_read>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <image_download+0x18>
		  return TOF_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e012      	b.n	80055c6 <image_download+0x3e>

	  if(read_val == 0x80)
 80055a0:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <image_download+0x44>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b80      	cmp	r3, #128	; 0x80
 80055a6:	d108      	bne.n	80055ba <image_download+0x32>
	  {
		  //bootloader is running , download  patch image
		 if(tof_patch_image_download() != TOF_OK)
 80055a8:	f000 f81e 	bl	80055e8 <tof_patch_image_download>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <image_download+0x2e>
			 return TOF_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e007      	b.n	80055c6 <image_download+0x3e>
		 return TOF_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e005      	b.n	80055c6 <image_download+0x3e>
	  }else if(read_val == 0x03)
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <image_download+0x44>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d100      	bne.n	80055c4 <image_download+0x3c>
	  {
		  //application is running
		  while(1);
 80055c2:	e7fe      	b.n	80055c2 <image_download+0x3a>
	  }
	  return TOF_ERROR;
 80055c4:	2301      	movs	r3, #1
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20001daa 	.word	0x20001daa

080055d0 <application_configuration>:

uint8_t application_configuration(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
	//Application configuration + factory callibration + measurements
	if(app_full_config() != TOF_OK)
 80055d4:	f7ff fd08 	bl	8004fe8 <app_full_config>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <application_configuration+0x12>
		return TOF_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <application_configuration+0x14>
	return TOF_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <tof_patch_image_download>:

/*patch image download function*/
uint8_t tof_patch_image_download(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b0a6      	sub	sp, #152	; 0x98
 80055ec:	af00      	add	r7, sp, #0
	uint8_t write_buffer[150] = {0};
 80055ee:	2300      	movs	r3, #0
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	2292      	movs	r2, #146	; 0x92
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f8ab 	bl	8005754 <memset>

	//issue DOWNLOAD INIT command		S 41 W 08 14 01 29 C1 P
	if(bootloader_cmd_download_init(write_buffer) != TOF_OK)
 80055fe:	463b      	mov	r3, r7
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff f99f 	bl	8004944 <bootloader_cmd_download_init>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <tof_patch_image_download+0x28>
		return TOF_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e05e      	b.n	80056ce <tof_patch_image_download+0xe6>

	//poll until the bootloader signals READY
	if(bootloader_poll() != TOF_OK)
 8005610:	f7ff f964 	bl	80048dc <bootloader_poll>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <tof_patch_image_download+0x36>
		return TOF_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e057      	b.n	80056ce <tof_patch_image_download+0xe6>

	//set the destination address to 0x0000 with the command ADDR_RAM
	if(bootloader_cmd_addr_ram(write_buffer) != TOF_OK)
 800561e:	463b      	mov	r3, r7
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff f9bd 	bl	80049a0 <bootloader_cmd_addr_ram>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <tof_patch_image_download+0x48>
		return TOF_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04e      	b.n	80056ce <tof_patch_image_download+0xe6>

	//poll until the bootloader signals READY
	if(bootloader_poll() != TOF_OK)
 8005630:	f7ff f954 	bl	80048dc <bootloader_poll>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <tof_patch_image_download+0x56>
		return TOF_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e047      	b.n	80056ce <tof_patch_image_download+0xe6>

	//load the image with a series of the W_RAM commands
	if(bootloader_cmd_w_ram(write_buffer) != TOF_OK)
 800563e:	463b      	mov	r3, r7
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff f9df 	bl	8004a04 <bootloader_cmd_w_ram>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <tof_patch_image_download+0x68>
		return TOF_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e03e      	b.n	80056ce <tof_patch_image_download+0xe6>

	//poll until the bootloader signals READY
	if(bootloader_poll() != TOF_OK)
 8005650:	f7ff f944 	bl	80048dc <bootloader_poll>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <tof_patch_image_download+0x76>
		return TOF_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e037      	b.n	80056ce <tof_patch_image_download+0xe6>

	//When all data packets have successfully been downloaded the host must issue a RAMREMAP_RESET command
	//Before executing this command, set powerup_select = 2 in ENABLE register bits 4 & 5
	if(bootloader_cmd_ramremap_reset(write_buffer) != TOF_OK)
 800565e:	463b      	mov	r3, r7
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fa5d 	bl	8004b20 <bootloader_cmd_ramremap_reset>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <tof_patch_image_download+0x88>
		return TOF_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e02e      	b.n	80056ce <tof_patch_image_download+0xe6>

	//poll only for first byte of cmd stat register
	while(tof_i2c_read(&read_val, TOF_CMD_STAT, 1) != 0x00);
 8005670:	bf00      	nop
 8005672:	2201      	movs	r2, #1
 8005674:	2108      	movs	r1, #8
 8005676:	4818      	ldr	r0, [pc, #96]	; (80056d8 <tof_patch_image_download+0xf0>)
 8005678:	f7ff f898 	bl	80047ac <tof_i2c_read>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f7      	bne.n	8005672 <tof_patch_image_download+0x8a>

	//if after a maximum wait time of 2.5 ms the register APPID does not read back with the measurement application ID, the download failed and the host should power cycle the device
	while(1)
	{
		if(tof_i2c_read(&read_val, TOF_APPID, 1) == TOF_ERROR)
 8005682:	2201      	movs	r2, #1
 8005684:	2100      	movs	r1, #0
 8005686:	4814      	ldr	r0, [pc, #80]	; (80056d8 <tof_patch_image_download+0xf0>)
 8005688:	f7ff f890 	bl	80047ac <tof_i2c_read>
 800568c:	4603      	mov	r3, r0
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <tof_patch_image_download+0xae>
			return TOF_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e01b      	b.n	80056ce <tof_patch_image_download+0xe6>
		if(read_val == 0x03)
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <tof_patch_image_download+0xf0>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d013      	beq.n	80056c6 <tof_patch_image_download+0xde>
		{
			break;
		}
		else
		{
			HAL_Delay(3);
 800569e:	2003      	movs	r0, #3
 80056a0:	f7fb fca8 	bl	8000ff4 <HAL_Delay>
			if(tof_i2c_read(&read_val, TOF_APPID, 1) == TOF_ERROR)
 80056a4:	2201      	movs	r2, #1
 80056a6:	2100      	movs	r1, #0
 80056a8:	480b      	ldr	r0, [pc, #44]	; (80056d8 <tof_patch_image_download+0xf0>)
 80056aa:	f7ff f87f 	bl	80047ac <tof_i2c_read>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <tof_patch_image_download+0xd0>
				return TOF_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e00a      	b.n	80056ce <tof_patch_image_download+0xe6>
			if(read_val == 0x03)
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <tof_patch_image_download+0xf0>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d004      	beq.n	80056ca <tof_patch_image_download+0xe2>
			{
				break;
			}else
			{
				power_cycle();
 80056c0:	f7ff fd26 	bl	8005110 <power_cycle>
				break;
 80056c4:	e002      	b.n	80056cc <tof_patch_image_download+0xe4>
			break;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <tof_patch_image_download+0xe4>
				break;
 80056ca:	bf00      	nop
			}
		}
	}

	return TOF_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3798      	adds	r7, #152	; 0x98
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20001daa 	.word	0x20001daa

080056dc <measurements_results>:

uint8_t measurements_results(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
	//measurements results

	//read 132 bytes block read from register 0x20
	if(tof_i2c_read(result_buff, TOF_CONFIG_RESULT, 132) == TOF_ERROR)
 80056e0:	2284      	movs	r2, #132	; 0x84
 80056e2:	2120      	movs	r1, #32
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <measurements_results+0x20>)
 80056e6:	f7ff f861 	bl	80047ac <tof_i2c_read>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <measurements_results+0x18>
		return TOF_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <measurements_results+0x1a>

	return TOF_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20001db0 	.word	0x20001db0

08005700 <__errno>:
 8005700:	4b01      	ldr	r3, [pc, #4]	; (8005708 <__errno+0x8>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20001be4 	.word	0x20001be4

0800570c <__libc_init_array>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	4d0d      	ldr	r5, [pc, #52]	; (8005744 <__libc_init_array+0x38>)
 8005710:	4c0d      	ldr	r4, [pc, #52]	; (8005748 <__libc_init_array+0x3c>)
 8005712:	1b64      	subs	r4, r4, r5
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	2600      	movs	r6, #0
 8005718:	42a6      	cmp	r6, r4
 800571a:	d109      	bne.n	8005730 <__libc_init_array+0x24>
 800571c:	4d0b      	ldr	r5, [pc, #44]	; (800574c <__libc_init_array+0x40>)
 800571e:	4c0c      	ldr	r4, [pc, #48]	; (8005750 <__libc_init_array+0x44>)
 8005720:	f000 ffae 	bl	8006680 <_init>
 8005724:	1b64      	subs	r4, r4, r5
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	2600      	movs	r6, #0
 800572a:	42a6      	cmp	r6, r4
 800572c:	d105      	bne.n	800573a <__libc_init_array+0x2e>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	f855 3b04 	ldr.w	r3, [r5], #4
 8005734:	4798      	blx	r3
 8005736:	3601      	adds	r6, #1
 8005738:	e7ee      	b.n	8005718 <__libc_init_array+0xc>
 800573a:	f855 3b04 	ldr.w	r3, [r5], #4
 800573e:	4798      	blx	r3
 8005740:	3601      	adds	r6, #1
 8005742:	e7f2      	b.n	800572a <__libc_init_array+0x1e>
 8005744:	0800677c 	.word	0x0800677c
 8005748:	0800677c 	.word	0x0800677c
 800574c:	0800677c 	.word	0x0800677c
 8005750:	08006780 	.word	0x08006780

08005754 <memset>:
 8005754:	4402      	add	r2, r0
 8005756:	4603      	mov	r3, r0
 8005758:	4293      	cmp	r3, r2
 800575a:	d100      	bne.n	800575e <memset+0xa>
 800575c:	4770      	bx	lr
 800575e:	f803 1b01 	strb.w	r1, [r3], #1
 8005762:	e7f9      	b.n	8005758 <memset+0x4>

08005764 <iprintf>:
 8005764:	b40f      	push	{r0, r1, r2, r3}
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <iprintf+0x2c>)
 8005768:	b513      	push	{r0, r1, r4, lr}
 800576a:	681c      	ldr	r4, [r3, #0]
 800576c:	b124      	cbz	r4, 8005778 <iprintf+0x14>
 800576e:	69a3      	ldr	r3, [r4, #24]
 8005770:	b913      	cbnz	r3, 8005778 <iprintf+0x14>
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f866 	bl	8005844 <__sinit>
 8005778:	ab05      	add	r3, sp, #20
 800577a:	9a04      	ldr	r2, [sp, #16]
 800577c:	68a1      	ldr	r1, [r4, #8]
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	4620      	mov	r0, r4
 8005782:	f000 f9bd 	bl	8005b00 <_vfiprintf_r>
 8005786:	b002      	add	sp, #8
 8005788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800578c:	b004      	add	sp, #16
 800578e:	4770      	bx	lr
 8005790:	20001be4 	.word	0x20001be4

08005794 <std>:
 8005794:	2300      	movs	r3, #0
 8005796:	b510      	push	{r4, lr}
 8005798:	4604      	mov	r4, r0
 800579a:	e9c0 3300 	strd	r3, r3, [r0]
 800579e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057a2:	6083      	str	r3, [r0, #8]
 80057a4:	8181      	strh	r1, [r0, #12]
 80057a6:	6643      	str	r3, [r0, #100]	; 0x64
 80057a8:	81c2      	strh	r2, [r0, #14]
 80057aa:	6183      	str	r3, [r0, #24]
 80057ac:	4619      	mov	r1, r3
 80057ae:	2208      	movs	r2, #8
 80057b0:	305c      	adds	r0, #92	; 0x5c
 80057b2:	f7ff ffcf 	bl	8005754 <memset>
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <std+0x38>)
 80057b8:	6263      	str	r3, [r4, #36]	; 0x24
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <std+0x3c>)
 80057bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <std+0x40>)
 80057c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <std+0x44>)
 80057c4:	6224      	str	r4, [r4, #32]
 80057c6:	6323      	str	r3, [r4, #48]	; 0x30
 80057c8:	bd10      	pop	{r4, pc}
 80057ca:	bf00      	nop
 80057cc:	080060a9 	.word	0x080060a9
 80057d0:	080060cb 	.word	0x080060cb
 80057d4:	08006103 	.word	0x08006103
 80057d8:	08006127 	.word	0x08006127

080057dc <_cleanup_r>:
 80057dc:	4901      	ldr	r1, [pc, #4]	; (80057e4 <_cleanup_r+0x8>)
 80057de:	f000 b8af 	b.w	8005940 <_fwalk_reent>
 80057e2:	bf00      	nop
 80057e4:	08006401 	.word	0x08006401

080057e8 <__sfmoreglue>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	2268      	movs	r2, #104	; 0x68
 80057ec:	1e4d      	subs	r5, r1, #1
 80057ee:	4355      	muls	r5, r2
 80057f0:	460e      	mov	r6, r1
 80057f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057f6:	f000 f8e5 	bl	80059c4 <_malloc_r>
 80057fa:	4604      	mov	r4, r0
 80057fc:	b140      	cbz	r0, 8005810 <__sfmoreglue+0x28>
 80057fe:	2100      	movs	r1, #0
 8005800:	e9c0 1600 	strd	r1, r6, [r0]
 8005804:	300c      	adds	r0, #12
 8005806:	60a0      	str	r0, [r4, #8]
 8005808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800580c:	f7ff ffa2 	bl	8005754 <memset>
 8005810:	4620      	mov	r0, r4
 8005812:	bd70      	pop	{r4, r5, r6, pc}

08005814 <__sfp_lock_acquire>:
 8005814:	4801      	ldr	r0, [pc, #4]	; (800581c <__sfp_lock_acquire+0x8>)
 8005816:	f000 b8b3 	b.w	8005980 <__retarget_lock_acquire_recursive>
 800581a:	bf00      	nop
 800581c:	20001e35 	.word	0x20001e35

08005820 <__sfp_lock_release>:
 8005820:	4801      	ldr	r0, [pc, #4]	; (8005828 <__sfp_lock_release+0x8>)
 8005822:	f000 b8ae 	b.w	8005982 <__retarget_lock_release_recursive>
 8005826:	bf00      	nop
 8005828:	20001e35 	.word	0x20001e35

0800582c <__sinit_lock_acquire>:
 800582c:	4801      	ldr	r0, [pc, #4]	; (8005834 <__sinit_lock_acquire+0x8>)
 800582e:	f000 b8a7 	b.w	8005980 <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	20001e36 	.word	0x20001e36

08005838 <__sinit_lock_release>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__sinit_lock_release+0x8>)
 800583a:	f000 b8a2 	b.w	8005982 <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	20001e36 	.word	0x20001e36

08005844 <__sinit>:
 8005844:	b510      	push	{r4, lr}
 8005846:	4604      	mov	r4, r0
 8005848:	f7ff fff0 	bl	800582c <__sinit_lock_acquire>
 800584c:	69a3      	ldr	r3, [r4, #24]
 800584e:	b11b      	cbz	r3, 8005858 <__sinit+0x14>
 8005850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005854:	f7ff bff0 	b.w	8005838 <__sinit_lock_release>
 8005858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800585c:	6523      	str	r3, [r4, #80]	; 0x50
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <__sinit+0x68>)
 8005860:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <__sinit+0x6c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	62a2      	str	r2, [r4, #40]	; 0x28
 8005866:	42a3      	cmp	r3, r4
 8005868:	bf04      	itt	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	61a3      	streq	r3, [r4, #24]
 800586e:	4620      	mov	r0, r4
 8005870:	f000 f820 	bl	80058b4 <__sfp>
 8005874:	6060      	str	r0, [r4, #4]
 8005876:	4620      	mov	r0, r4
 8005878:	f000 f81c 	bl	80058b4 <__sfp>
 800587c:	60a0      	str	r0, [r4, #8]
 800587e:	4620      	mov	r0, r4
 8005880:	f000 f818 	bl	80058b4 <__sfp>
 8005884:	2200      	movs	r2, #0
 8005886:	60e0      	str	r0, [r4, #12]
 8005888:	2104      	movs	r1, #4
 800588a:	6860      	ldr	r0, [r4, #4]
 800588c:	f7ff ff82 	bl	8005794 <std>
 8005890:	68a0      	ldr	r0, [r4, #8]
 8005892:	2201      	movs	r2, #1
 8005894:	2109      	movs	r1, #9
 8005896:	f7ff ff7d 	bl	8005794 <std>
 800589a:	68e0      	ldr	r0, [r4, #12]
 800589c:	2202      	movs	r2, #2
 800589e:	2112      	movs	r1, #18
 80058a0:	f7ff ff78 	bl	8005794 <std>
 80058a4:	2301      	movs	r3, #1
 80058a6:	61a3      	str	r3, [r4, #24]
 80058a8:	e7d2      	b.n	8005850 <__sinit+0xc>
 80058aa:	bf00      	nop
 80058ac:	080066dc 	.word	0x080066dc
 80058b0:	080057dd 	.word	0x080057dd

080058b4 <__sfp>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	4607      	mov	r7, r0
 80058b8:	f7ff ffac 	bl	8005814 <__sfp_lock_acquire>
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <__sfp+0x84>)
 80058be:	681e      	ldr	r6, [r3, #0]
 80058c0:	69b3      	ldr	r3, [r6, #24]
 80058c2:	b913      	cbnz	r3, 80058ca <__sfp+0x16>
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7ff ffbd 	bl	8005844 <__sinit>
 80058ca:	3648      	adds	r6, #72	; 0x48
 80058cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	d503      	bpl.n	80058dc <__sfp+0x28>
 80058d4:	6833      	ldr	r3, [r6, #0]
 80058d6:	b30b      	cbz	r3, 800591c <__sfp+0x68>
 80058d8:	6836      	ldr	r6, [r6, #0]
 80058da:	e7f7      	b.n	80058cc <__sfp+0x18>
 80058dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058e0:	b9d5      	cbnz	r5, 8005918 <__sfp+0x64>
 80058e2:	4b16      	ldr	r3, [pc, #88]	; (800593c <__sfp+0x88>)
 80058e4:	60e3      	str	r3, [r4, #12]
 80058e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058ea:	6665      	str	r5, [r4, #100]	; 0x64
 80058ec:	f000 f847 	bl	800597e <__retarget_lock_init_recursive>
 80058f0:	f7ff ff96 	bl	8005820 <__sfp_lock_release>
 80058f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058fc:	6025      	str	r5, [r4, #0]
 80058fe:	61a5      	str	r5, [r4, #24]
 8005900:	2208      	movs	r2, #8
 8005902:	4629      	mov	r1, r5
 8005904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005908:	f7ff ff24 	bl	8005754 <memset>
 800590c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005914:	4620      	mov	r0, r4
 8005916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005918:	3468      	adds	r4, #104	; 0x68
 800591a:	e7d9      	b.n	80058d0 <__sfp+0x1c>
 800591c:	2104      	movs	r1, #4
 800591e:	4638      	mov	r0, r7
 8005920:	f7ff ff62 	bl	80057e8 <__sfmoreglue>
 8005924:	4604      	mov	r4, r0
 8005926:	6030      	str	r0, [r6, #0]
 8005928:	2800      	cmp	r0, #0
 800592a:	d1d5      	bne.n	80058d8 <__sfp+0x24>
 800592c:	f7ff ff78 	bl	8005820 <__sfp_lock_release>
 8005930:	230c      	movs	r3, #12
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	e7ee      	b.n	8005914 <__sfp+0x60>
 8005936:	bf00      	nop
 8005938:	080066dc 	.word	0x080066dc
 800593c:	ffff0001 	.word	0xffff0001

08005940 <_fwalk_reent>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	4606      	mov	r6, r0
 8005946:	4688      	mov	r8, r1
 8005948:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800594c:	2700      	movs	r7, #0
 800594e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005952:	f1b9 0901 	subs.w	r9, r9, #1
 8005956:	d505      	bpl.n	8005964 <_fwalk_reent+0x24>
 8005958:	6824      	ldr	r4, [r4, #0]
 800595a:	2c00      	cmp	r4, #0
 800595c:	d1f7      	bne.n	800594e <_fwalk_reent+0xe>
 800595e:	4638      	mov	r0, r7
 8005960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005964:	89ab      	ldrh	r3, [r5, #12]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d907      	bls.n	800597a <_fwalk_reent+0x3a>
 800596a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800596e:	3301      	adds	r3, #1
 8005970:	d003      	beq.n	800597a <_fwalk_reent+0x3a>
 8005972:	4629      	mov	r1, r5
 8005974:	4630      	mov	r0, r6
 8005976:	47c0      	blx	r8
 8005978:	4307      	orrs	r7, r0
 800597a:	3568      	adds	r5, #104	; 0x68
 800597c:	e7e9      	b.n	8005952 <_fwalk_reent+0x12>

0800597e <__retarget_lock_init_recursive>:
 800597e:	4770      	bx	lr

08005980 <__retarget_lock_acquire_recursive>:
 8005980:	4770      	bx	lr

08005982 <__retarget_lock_release_recursive>:
 8005982:	4770      	bx	lr

08005984 <sbrk_aligned>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4e0e      	ldr	r6, [pc, #56]	; (80059c0 <sbrk_aligned+0x3c>)
 8005988:	460c      	mov	r4, r1
 800598a:	6831      	ldr	r1, [r6, #0]
 800598c:	4605      	mov	r5, r0
 800598e:	b911      	cbnz	r1, 8005996 <sbrk_aligned+0x12>
 8005990:	f000 fb7a 	bl	8006088 <_sbrk_r>
 8005994:	6030      	str	r0, [r6, #0]
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fb75 	bl	8006088 <_sbrk_r>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	d00a      	beq.n	80059b8 <sbrk_aligned+0x34>
 80059a2:	1cc4      	adds	r4, r0, #3
 80059a4:	f024 0403 	bic.w	r4, r4, #3
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d007      	beq.n	80059bc <sbrk_aligned+0x38>
 80059ac:	1a21      	subs	r1, r4, r0
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fb6a 	bl	8006088 <_sbrk_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d101      	bne.n	80059bc <sbrk_aligned+0x38>
 80059b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059bc:	4620      	mov	r0, r4
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	20001e3c 	.word	0x20001e3c

080059c4 <_malloc_r>:
 80059c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c8:	1ccd      	adds	r5, r1, #3
 80059ca:	f025 0503 	bic.w	r5, r5, #3
 80059ce:	3508      	adds	r5, #8
 80059d0:	2d0c      	cmp	r5, #12
 80059d2:	bf38      	it	cc
 80059d4:	250c      	movcc	r5, #12
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	4607      	mov	r7, r0
 80059da:	db01      	blt.n	80059e0 <_malloc_r+0x1c>
 80059dc:	42a9      	cmp	r1, r5
 80059de:	d905      	bls.n	80059ec <_malloc_r+0x28>
 80059e0:	230c      	movs	r3, #12
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	2600      	movs	r6, #0
 80059e6:	4630      	mov	r0, r6
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ec:	4e2e      	ldr	r6, [pc, #184]	; (8005aa8 <_malloc_r+0xe4>)
 80059ee:	f000 fdbb 	bl	8006568 <__malloc_lock>
 80059f2:	6833      	ldr	r3, [r6, #0]
 80059f4:	461c      	mov	r4, r3
 80059f6:	bb34      	cbnz	r4, 8005a46 <_malloc_r+0x82>
 80059f8:	4629      	mov	r1, r5
 80059fa:	4638      	mov	r0, r7
 80059fc:	f7ff ffc2 	bl	8005984 <sbrk_aligned>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	4604      	mov	r4, r0
 8005a04:	d14d      	bne.n	8005aa2 <_malloc_r+0xde>
 8005a06:	6834      	ldr	r4, [r6, #0]
 8005a08:	4626      	mov	r6, r4
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	d140      	bne.n	8005a90 <_malloc_r+0xcc>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	4631      	mov	r1, r6
 8005a12:	4638      	mov	r0, r7
 8005a14:	eb04 0803 	add.w	r8, r4, r3
 8005a18:	f000 fb36 	bl	8006088 <_sbrk_r>
 8005a1c:	4580      	cmp	r8, r0
 8005a1e:	d13a      	bne.n	8005a96 <_malloc_r+0xd2>
 8005a20:	6821      	ldr	r1, [r4, #0]
 8005a22:	3503      	adds	r5, #3
 8005a24:	1a6d      	subs	r5, r5, r1
 8005a26:	f025 0503 	bic.w	r5, r5, #3
 8005a2a:	3508      	adds	r5, #8
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	bf38      	it	cc
 8005a30:	250c      	movcc	r5, #12
 8005a32:	4629      	mov	r1, r5
 8005a34:	4638      	mov	r0, r7
 8005a36:	f7ff ffa5 	bl	8005984 <sbrk_aligned>
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d02b      	beq.n	8005a96 <_malloc_r+0xd2>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	442b      	add	r3, r5
 8005a42:	6023      	str	r3, [r4, #0]
 8005a44:	e00e      	b.n	8005a64 <_malloc_r+0xa0>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	1b52      	subs	r2, r2, r5
 8005a4a:	d41e      	bmi.n	8005a8a <_malloc_r+0xc6>
 8005a4c:	2a0b      	cmp	r2, #11
 8005a4e:	d916      	bls.n	8005a7e <_malloc_r+0xba>
 8005a50:	1961      	adds	r1, r4, r5
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	6025      	str	r5, [r4, #0]
 8005a56:	bf18      	it	ne
 8005a58:	6059      	strne	r1, [r3, #4]
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	bf08      	it	eq
 8005a5e:	6031      	streq	r1, [r6, #0]
 8005a60:	5162      	str	r2, [r4, r5]
 8005a62:	604b      	str	r3, [r1, #4]
 8005a64:	4638      	mov	r0, r7
 8005a66:	f104 060b 	add.w	r6, r4, #11
 8005a6a:	f000 fd83 	bl	8006574 <__malloc_unlock>
 8005a6e:	f026 0607 	bic.w	r6, r6, #7
 8005a72:	1d23      	adds	r3, r4, #4
 8005a74:	1af2      	subs	r2, r6, r3
 8005a76:	d0b6      	beq.n	80059e6 <_malloc_r+0x22>
 8005a78:	1b9b      	subs	r3, r3, r6
 8005a7a:	50a3      	str	r3, [r4, r2]
 8005a7c:	e7b3      	b.n	80059e6 <_malloc_r+0x22>
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	bf0c      	ite	eq
 8005a84:	6032      	streq	r2, [r6, #0]
 8005a86:	605a      	strne	r2, [r3, #4]
 8005a88:	e7ec      	b.n	8005a64 <_malloc_r+0xa0>
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	6864      	ldr	r4, [r4, #4]
 8005a8e:	e7b2      	b.n	80059f6 <_malloc_r+0x32>
 8005a90:	4634      	mov	r4, r6
 8005a92:	6876      	ldr	r6, [r6, #4]
 8005a94:	e7b9      	b.n	8005a0a <_malloc_r+0x46>
 8005a96:	230c      	movs	r3, #12
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f000 fd6a 	bl	8006574 <__malloc_unlock>
 8005aa0:	e7a1      	b.n	80059e6 <_malloc_r+0x22>
 8005aa2:	6025      	str	r5, [r4, #0]
 8005aa4:	e7de      	b.n	8005a64 <_malloc_r+0xa0>
 8005aa6:	bf00      	nop
 8005aa8:	20001e38 	.word	0x20001e38

08005aac <__sfputc_r>:
 8005aac:	6893      	ldr	r3, [r2, #8]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	b410      	push	{r4}
 8005ab4:	6093      	str	r3, [r2, #8]
 8005ab6:	da08      	bge.n	8005aca <__sfputc_r+0x1e>
 8005ab8:	6994      	ldr	r4, [r2, #24]
 8005aba:	42a3      	cmp	r3, r4
 8005abc:	db01      	blt.n	8005ac2 <__sfputc_r+0x16>
 8005abe:	290a      	cmp	r1, #10
 8005ac0:	d103      	bne.n	8005aca <__sfputc_r+0x1e>
 8005ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ac6:	f000 bb33 	b.w	8006130 <__swbuf_r>
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	1c58      	adds	r0, r3, #1
 8005ace:	6010      	str	r0, [r2, #0]
 8005ad0:	7019      	strb	r1, [r3, #0]
 8005ad2:	4608      	mov	r0, r1
 8005ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <__sfputs_r>:
 8005ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	18d5      	adds	r5, r2, r3
 8005ae4:	42ac      	cmp	r4, r5
 8005ae6:	d101      	bne.n	8005aec <__sfputs_r+0x12>
 8005ae8:	2000      	movs	r0, #0
 8005aea:	e007      	b.n	8005afc <__sfputs_r+0x22>
 8005aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af0:	463a      	mov	r2, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7ff ffda 	bl	8005aac <__sfputc_r>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d1f3      	bne.n	8005ae4 <__sfputs_r+0xa>
 8005afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b00 <_vfiprintf_r>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	460d      	mov	r5, r1
 8005b06:	b09d      	sub	sp, #116	; 0x74
 8005b08:	4614      	mov	r4, r2
 8005b0a:	4698      	mov	r8, r3
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	b118      	cbz	r0, 8005b18 <_vfiprintf_r+0x18>
 8005b10:	6983      	ldr	r3, [r0, #24]
 8005b12:	b90b      	cbnz	r3, 8005b18 <_vfiprintf_r+0x18>
 8005b14:	f7ff fe96 	bl	8005844 <__sinit>
 8005b18:	4b89      	ldr	r3, [pc, #548]	; (8005d40 <_vfiprintf_r+0x240>)
 8005b1a:	429d      	cmp	r5, r3
 8005b1c:	d11b      	bne.n	8005b56 <_vfiprintf_r+0x56>
 8005b1e:	6875      	ldr	r5, [r6, #4]
 8005b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b22:	07d9      	lsls	r1, r3, #31
 8005b24:	d405      	bmi.n	8005b32 <_vfiprintf_r+0x32>
 8005b26:	89ab      	ldrh	r3, [r5, #12]
 8005b28:	059a      	lsls	r2, r3, #22
 8005b2a:	d402      	bmi.n	8005b32 <_vfiprintf_r+0x32>
 8005b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b2e:	f7ff ff27 	bl	8005980 <__retarget_lock_acquire_recursive>
 8005b32:	89ab      	ldrh	r3, [r5, #12]
 8005b34:	071b      	lsls	r3, r3, #28
 8005b36:	d501      	bpl.n	8005b3c <_vfiprintf_r+0x3c>
 8005b38:	692b      	ldr	r3, [r5, #16]
 8005b3a:	b9eb      	cbnz	r3, 8005b78 <_vfiprintf_r+0x78>
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f000 fb5a 	bl	80061f8 <__swsetup_r>
 8005b44:	b1c0      	cbz	r0, 8005b78 <_vfiprintf_r+0x78>
 8005b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b48:	07dc      	lsls	r4, r3, #31
 8005b4a:	d50e      	bpl.n	8005b6a <_vfiprintf_r+0x6a>
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b50:	b01d      	add	sp, #116	; 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	4b7b      	ldr	r3, [pc, #492]	; (8005d44 <_vfiprintf_r+0x244>)
 8005b58:	429d      	cmp	r5, r3
 8005b5a:	d101      	bne.n	8005b60 <_vfiprintf_r+0x60>
 8005b5c:	68b5      	ldr	r5, [r6, #8]
 8005b5e:	e7df      	b.n	8005b20 <_vfiprintf_r+0x20>
 8005b60:	4b79      	ldr	r3, [pc, #484]	; (8005d48 <_vfiprintf_r+0x248>)
 8005b62:	429d      	cmp	r5, r3
 8005b64:	bf08      	it	eq
 8005b66:	68f5      	ldreq	r5, [r6, #12]
 8005b68:	e7da      	b.n	8005b20 <_vfiprintf_r+0x20>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	0598      	lsls	r0, r3, #22
 8005b6e:	d4ed      	bmi.n	8005b4c <_vfiprintf_r+0x4c>
 8005b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b72:	f7ff ff06 	bl	8005982 <__retarget_lock_release_recursive>
 8005b76:	e7e9      	b.n	8005b4c <_vfiprintf_r+0x4c>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b86:	2330      	movs	r3, #48	; 0x30
 8005b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d4c <_vfiprintf_r+0x24c>
 8005b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b90:	f04f 0901 	mov.w	r9, #1
 8005b94:	4623      	mov	r3, r4
 8005b96:	469a      	mov	sl, r3
 8005b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_vfiprintf_r+0xa2>
 8005b9e:	2a25      	cmp	r2, #37	; 0x25
 8005ba0:	d1f9      	bne.n	8005b96 <_vfiprintf_r+0x96>
 8005ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba6:	d00b      	beq.n	8005bc0 <_vfiprintf_r+0xc0>
 8005ba8:	465b      	mov	r3, fp
 8005baa:	4622      	mov	r2, r4
 8005bac:	4629      	mov	r1, r5
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ff93 	bl	8005ada <__sfputs_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f000 80aa 	beq.w	8005d0e <_vfiprintf_r+0x20e>
 8005bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bbc:	445a      	add	r2, fp
 8005bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80a2 	beq.w	8005d0e <_vfiprintf_r+0x20e>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd4:	f10a 0a01 	add.w	sl, sl, #1
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	9307      	str	r3, [sp, #28]
 8005bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be0:	931a      	str	r3, [sp, #104]	; 0x68
 8005be2:	4654      	mov	r4, sl
 8005be4:	2205      	movs	r2, #5
 8005be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bea:	4858      	ldr	r0, [pc, #352]	; (8005d4c <_vfiprintf_r+0x24c>)
 8005bec:	f7fa fb28 	bl	8000240 <memchr>
 8005bf0:	9a04      	ldr	r2, [sp, #16]
 8005bf2:	b9d8      	cbnz	r0, 8005c2c <_vfiprintf_r+0x12c>
 8005bf4:	06d1      	lsls	r1, r2, #27
 8005bf6:	bf44      	itt	mi
 8005bf8:	2320      	movmi	r3, #32
 8005bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bfe:	0713      	lsls	r3, r2, #28
 8005c00:	bf44      	itt	mi
 8005c02:	232b      	movmi	r3, #43	; 0x2b
 8005c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c08:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0e:	d015      	beq.n	8005c3c <_vfiprintf_r+0x13c>
 8005c10:	9a07      	ldr	r2, [sp, #28]
 8005c12:	4654      	mov	r4, sl
 8005c14:	2000      	movs	r0, #0
 8005c16:	f04f 0c0a 	mov.w	ip, #10
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c20:	3b30      	subs	r3, #48	; 0x30
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	d94e      	bls.n	8005cc4 <_vfiprintf_r+0x1c4>
 8005c26:	b1b0      	cbz	r0, 8005c56 <_vfiprintf_r+0x156>
 8005c28:	9207      	str	r2, [sp, #28]
 8005c2a:	e014      	b.n	8005c56 <_vfiprintf_r+0x156>
 8005c2c:	eba0 0308 	sub.w	r3, r0, r8
 8005c30:	fa09 f303 	lsl.w	r3, r9, r3
 8005c34:	4313      	orrs	r3, r2
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	46a2      	mov	sl, r4
 8005c3a:	e7d2      	b.n	8005be2 <_vfiprintf_r+0xe2>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1d19      	adds	r1, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	9103      	str	r1, [sp, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfbb      	ittet	lt
 8005c48:	425b      	neglt	r3, r3
 8005c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4e:	9307      	strge	r3, [sp, #28]
 8005c50:	9307      	strlt	r3, [sp, #28]
 8005c52:	bfb8      	it	lt
 8005c54:	9204      	strlt	r2, [sp, #16]
 8005c56:	7823      	ldrb	r3, [r4, #0]
 8005c58:	2b2e      	cmp	r3, #46	; 0x2e
 8005c5a:	d10c      	bne.n	8005c76 <_vfiprintf_r+0x176>
 8005c5c:	7863      	ldrb	r3, [r4, #1]
 8005c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c60:	d135      	bne.n	8005cce <_vfiprintf_r+0x1ce>
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9203      	str	r2, [sp, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfb8      	it	lt
 8005c6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c72:	3402      	adds	r4, #2
 8005c74:	9305      	str	r3, [sp, #20]
 8005c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d5c <_vfiprintf_r+0x25c>
 8005c7a:	7821      	ldrb	r1, [r4, #0]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	4650      	mov	r0, sl
 8005c80:	f7fa fade 	bl	8000240 <memchr>
 8005c84:	b140      	cbz	r0, 8005c98 <_vfiprintf_r+0x198>
 8005c86:	2340      	movs	r3, #64	; 0x40
 8005c88:	eba0 000a 	sub.w	r0, r0, sl
 8005c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	4303      	orrs	r3, r0
 8005c94:	3401      	adds	r4, #1
 8005c96:	9304      	str	r3, [sp, #16]
 8005c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9c:	482c      	ldr	r0, [pc, #176]	; (8005d50 <_vfiprintf_r+0x250>)
 8005c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ca2:	2206      	movs	r2, #6
 8005ca4:	f7fa facc 	bl	8000240 <memchr>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d03f      	beq.n	8005d2c <_vfiprintf_r+0x22c>
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <_vfiprintf_r+0x254>)
 8005cae:	bb1b      	cbnz	r3, 8005cf8 <_vfiprintf_r+0x1f8>
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	3307      	adds	r3, #7
 8005cb4:	f023 0307 	bic.w	r3, r3, #7
 8005cb8:	3308      	adds	r3, #8
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbe:	443b      	add	r3, r7
 8005cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc2:	e767      	b.n	8005b94 <_vfiprintf_r+0x94>
 8005cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc8:	460c      	mov	r4, r1
 8005cca:	2001      	movs	r0, #1
 8005ccc:	e7a5      	b.n	8005c1a <_vfiprintf_r+0x11a>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	3401      	adds	r4, #1
 8005cd2:	9305      	str	r3, [sp, #20]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f04f 0c0a 	mov.w	ip, #10
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce0:	3a30      	subs	r2, #48	; 0x30
 8005ce2:	2a09      	cmp	r2, #9
 8005ce4:	d903      	bls.n	8005cee <_vfiprintf_r+0x1ee>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0c5      	beq.n	8005c76 <_vfiprintf_r+0x176>
 8005cea:	9105      	str	r1, [sp, #20]
 8005cec:	e7c3      	b.n	8005c76 <_vfiprintf_r+0x176>
 8005cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e7f0      	b.n	8005cda <_vfiprintf_r+0x1da>
 8005cf8:	ab03      	add	r3, sp, #12
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <_vfiprintf_r+0x258>)
 8005d00:	a904      	add	r1, sp, #16
 8005d02:	4630      	mov	r0, r6
 8005d04:	f3af 8000 	nop.w
 8005d08:	4607      	mov	r7, r0
 8005d0a:	1c78      	adds	r0, r7, #1
 8005d0c:	d1d6      	bne.n	8005cbc <_vfiprintf_r+0x1bc>
 8005d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d10:	07d9      	lsls	r1, r3, #31
 8005d12:	d405      	bmi.n	8005d20 <_vfiprintf_r+0x220>
 8005d14:	89ab      	ldrh	r3, [r5, #12]
 8005d16:	059a      	lsls	r2, r3, #22
 8005d18:	d402      	bmi.n	8005d20 <_vfiprintf_r+0x220>
 8005d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d1c:	f7ff fe31 	bl	8005982 <__retarget_lock_release_recursive>
 8005d20:	89ab      	ldrh	r3, [r5, #12]
 8005d22:	065b      	lsls	r3, r3, #25
 8005d24:	f53f af12 	bmi.w	8005b4c <_vfiprintf_r+0x4c>
 8005d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d2a:	e711      	b.n	8005b50 <_vfiprintf_r+0x50>
 8005d2c:	ab03      	add	r3, sp, #12
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	462a      	mov	r2, r5
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <_vfiprintf_r+0x258>)
 8005d34:	a904      	add	r1, sp, #16
 8005d36:	4630      	mov	r0, r6
 8005d38:	f000 f880 	bl	8005e3c <_printf_i>
 8005d3c:	e7e4      	b.n	8005d08 <_vfiprintf_r+0x208>
 8005d3e:	bf00      	nop
 8005d40:	08006700 	.word	0x08006700
 8005d44:	08006720 	.word	0x08006720
 8005d48:	080066e0 	.word	0x080066e0
 8005d4c:	08006740 	.word	0x08006740
 8005d50:	0800674a 	.word	0x0800674a
 8005d54:	00000000 	.word	0x00000000
 8005d58:	08005adb 	.word	0x08005adb
 8005d5c:	08006746 	.word	0x08006746

08005d60 <_printf_common>:
 8005d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	4616      	mov	r6, r2
 8005d66:	4699      	mov	r9, r3
 8005d68:	688a      	ldr	r2, [r1, #8]
 8005d6a:	690b      	ldr	r3, [r1, #16]
 8005d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d70:	4293      	cmp	r3, r2
 8005d72:	bfb8      	it	lt
 8005d74:	4613      	movlt	r3, r2
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	b10a      	cbz	r2, 8005d86 <_printf_common+0x26>
 8005d82:	3301      	adds	r3, #1
 8005d84:	6033      	str	r3, [r6, #0]
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	0699      	lsls	r1, r3, #26
 8005d8a:	bf42      	ittt	mi
 8005d8c:	6833      	ldrmi	r3, [r6, #0]
 8005d8e:	3302      	addmi	r3, #2
 8005d90:	6033      	strmi	r3, [r6, #0]
 8005d92:	6825      	ldr	r5, [r4, #0]
 8005d94:	f015 0506 	ands.w	r5, r5, #6
 8005d98:	d106      	bne.n	8005da8 <_printf_common+0x48>
 8005d9a:	f104 0a19 	add.w	sl, r4, #25
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	6832      	ldr	r2, [r6, #0]
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	42ab      	cmp	r3, r5
 8005da6:	dc26      	bgt.n	8005df6 <_printf_common+0x96>
 8005da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dac:	1e13      	subs	r3, r2, #0
 8005dae:	6822      	ldr	r2, [r4, #0]
 8005db0:	bf18      	it	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	0692      	lsls	r2, r2, #26
 8005db6:	d42b      	bmi.n	8005e10 <_printf_common+0xb0>
 8005db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	47c0      	blx	r8
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d01e      	beq.n	8005e04 <_printf_common+0xa4>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	68e5      	ldr	r5, [r4, #12]
 8005dca:	6832      	ldr	r2, [r6, #0]
 8005dcc:	f003 0306 	and.w	r3, r3, #6
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	bf08      	it	eq
 8005dd4:	1aad      	subeq	r5, r5, r2
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	6922      	ldr	r2, [r4, #16]
 8005dda:	bf0c      	ite	eq
 8005ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de0:	2500      	movne	r5, #0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bfc4      	itt	gt
 8005de6:	1a9b      	subgt	r3, r3, r2
 8005de8:	18ed      	addgt	r5, r5, r3
 8005dea:	2600      	movs	r6, #0
 8005dec:	341a      	adds	r4, #26
 8005dee:	42b5      	cmp	r5, r6
 8005df0:	d11a      	bne.n	8005e28 <_printf_common+0xc8>
 8005df2:	2000      	movs	r0, #0
 8005df4:	e008      	b.n	8005e08 <_printf_common+0xa8>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4652      	mov	r2, sl
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	47c0      	blx	r8
 8005e00:	3001      	adds	r0, #1
 8005e02:	d103      	bne.n	8005e0c <_printf_common+0xac>
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	e7c6      	b.n	8005d9e <_printf_common+0x3e>
 8005e10:	18e1      	adds	r1, r4, r3
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	2030      	movs	r0, #48	; 0x30
 8005e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e1a:	4422      	add	r2, r4
 8005e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e24:	3302      	adds	r3, #2
 8005e26:	e7c7      	b.n	8005db8 <_printf_common+0x58>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	4638      	mov	r0, r7
 8005e30:	47c0      	blx	r8
 8005e32:	3001      	adds	r0, #1
 8005e34:	d0e6      	beq.n	8005e04 <_printf_common+0xa4>
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7d9      	b.n	8005dee <_printf_common+0x8e>
	...

08005e3c <_printf_i>:
 8005e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	7e0f      	ldrb	r7, [r1, #24]
 8005e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e44:	2f78      	cmp	r7, #120	; 0x78
 8005e46:	4691      	mov	r9, r2
 8005e48:	4680      	mov	r8, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	469a      	mov	sl, r3
 8005e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e52:	d807      	bhi.n	8005e64 <_printf_i+0x28>
 8005e54:	2f62      	cmp	r7, #98	; 0x62
 8005e56:	d80a      	bhi.n	8005e6e <_printf_i+0x32>
 8005e58:	2f00      	cmp	r7, #0
 8005e5a:	f000 80d8 	beq.w	800600e <_printf_i+0x1d2>
 8005e5e:	2f58      	cmp	r7, #88	; 0x58
 8005e60:	f000 80a3 	beq.w	8005faa <_printf_i+0x16e>
 8005e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e6c:	e03a      	b.n	8005ee4 <_printf_i+0xa8>
 8005e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e72:	2b15      	cmp	r3, #21
 8005e74:	d8f6      	bhi.n	8005e64 <_printf_i+0x28>
 8005e76:	a101      	add	r1, pc, #4	; (adr r1, 8005e7c <_printf_i+0x40>)
 8005e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ee9 	.word	0x08005ee9
 8005e84:	08005e65 	.word	0x08005e65
 8005e88:	08005e65 	.word	0x08005e65
 8005e8c:	08005e65 	.word	0x08005e65
 8005e90:	08005e65 	.word	0x08005e65
 8005e94:	08005ee9 	.word	0x08005ee9
 8005e98:	08005e65 	.word	0x08005e65
 8005e9c:	08005e65 	.word	0x08005e65
 8005ea0:	08005e65 	.word	0x08005e65
 8005ea4:	08005e65 	.word	0x08005e65
 8005ea8:	08005ff5 	.word	0x08005ff5
 8005eac:	08005f19 	.word	0x08005f19
 8005eb0:	08005fd7 	.word	0x08005fd7
 8005eb4:	08005e65 	.word	0x08005e65
 8005eb8:	08005e65 	.word	0x08005e65
 8005ebc:	08006017 	.word	0x08006017
 8005ec0:	08005e65 	.word	0x08005e65
 8005ec4:	08005f19 	.word	0x08005f19
 8005ec8:	08005e65 	.word	0x08005e65
 8005ecc:	08005e65 	.word	0x08005e65
 8005ed0:	08005fdf 	.word	0x08005fdf
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	1d1a      	adds	r2, r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	602a      	str	r2, [r5, #0]
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0a3      	b.n	8006030 <_printf_i+0x1f4>
 8005ee8:	6820      	ldr	r0, [r4, #0]
 8005eea:	6829      	ldr	r1, [r5, #0]
 8005eec:	0606      	lsls	r6, r0, #24
 8005eee:	f101 0304 	add.w	r3, r1, #4
 8005ef2:	d50a      	bpl.n	8005f0a <_printf_i+0xce>
 8005ef4:	680e      	ldr	r6, [r1, #0]
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	da03      	bge.n	8005f04 <_printf_i+0xc8>
 8005efc:	232d      	movs	r3, #45	; 0x2d
 8005efe:	4276      	negs	r6, r6
 8005f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f04:	485e      	ldr	r0, [pc, #376]	; (8006080 <_printf_i+0x244>)
 8005f06:	230a      	movs	r3, #10
 8005f08:	e019      	b.n	8005f3e <_printf_i+0x102>
 8005f0a:	680e      	ldr	r6, [r1, #0]
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f12:	bf18      	it	ne
 8005f14:	b236      	sxthne	r6, r6
 8005f16:	e7ef      	b.n	8005ef8 <_printf_i+0xbc>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	6820      	ldr	r0, [r4, #0]
 8005f1c:	1d19      	adds	r1, r3, #4
 8005f1e:	6029      	str	r1, [r5, #0]
 8005f20:	0601      	lsls	r1, r0, #24
 8005f22:	d501      	bpl.n	8005f28 <_printf_i+0xec>
 8005f24:	681e      	ldr	r6, [r3, #0]
 8005f26:	e002      	b.n	8005f2e <_printf_i+0xf2>
 8005f28:	0646      	lsls	r6, r0, #25
 8005f2a:	d5fb      	bpl.n	8005f24 <_printf_i+0xe8>
 8005f2c:	881e      	ldrh	r6, [r3, #0]
 8005f2e:	4854      	ldr	r0, [pc, #336]	; (8006080 <_printf_i+0x244>)
 8005f30:	2f6f      	cmp	r7, #111	; 0x6f
 8005f32:	bf0c      	ite	eq
 8005f34:	2308      	moveq	r3, #8
 8005f36:	230a      	movne	r3, #10
 8005f38:	2100      	movs	r1, #0
 8005f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f3e:	6865      	ldr	r5, [r4, #4]
 8005f40:	60a5      	str	r5, [r4, #8]
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	bfa2      	ittt	ge
 8005f46:	6821      	ldrge	r1, [r4, #0]
 8005f48:	f021 0104 	bicge.w	r1, r1, #4
 8005f4c:	6021      	strge	r1, [r4, #0]
 8005f4e:	b90e      	cbnz	r6, 8005f54 <_printf_i+0x118>
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	d04d      	beq.n	8005ff0 <_printf_i+0x1b4>
 8005f54:	4615      	mov	r5, r2
 8005f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f5e:	5dc7      	ldrb	r7, [r0, r7]
 8005f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f64:	4637      	mov	r7, r6
 8005f66:	42bb      	cmp	r3, r7
 8005f68:	460e      	mov	r6, r1
 8005f6a:	d9f4      	bls.n	8005f56 <_printf_i+0x11a>
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d10b      	bne.n	8005f88 <_printf_i+0x14c>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07de      	lsls	r6, r3, #31
 8005f74:	d508      	bpl.n	8005f88 <_printf_i+0x14c>
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	6861      	ldr	r1, [r4, #4]
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	bfde      	ittt	le
 8005f7e:	2330      	movle	r3, #48	; 0x30
 8005f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f88:	1b52      	subs	r2, r2, r5
 8005f8a:	6122      	str	r2, [r4, #16]
 8005f8c:	f8cd a000 	str.w	sl, [sp]
 8005f90:	464b      	mov	r3, r9
 8005f92:	aa03      	add	r2, sp, #12
 8005f94:	4621      	mov	r1, r4
 8005f96:	4640      	mov	r0, r8
 8005f98:	f7ff fee2 	bl	8005d60 <_printf_common>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d14c      	bne.n	800603a <_printf_i+0x1fe>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa4:	b004      	add	sp, #16
 8005fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005faa:	4835      	ldr	r0, [pc, #212]	; (8006080 <_printf_i+0x244>)
 8005fac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fb0:	6829      	ldr	r1, [r5, #0]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fb8:	6029      	str	r1, [r5, #0]
 8005fba:	061d      	lsls	r5, r3, #24
 8005fbc:	d514      	bpl.n	8005fe8 <_printf_i+0x1ac>
 8005fbe:	07df      	lsls	r7, r3, #31
 8005fc0:	bf44      	itt	mi
 8005fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc6:	6023      	strmi	r3, [r4, #0]
 8005fc8:	b91e      	cbnz	r6, 8005fd2 <_printf_i+0x196>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	f023 0320 	bic.w	r3, r3, #32
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	2310      	movs	r3, #16
 8005fd4:	e7b0      	b.n	8005f38 <_printf_i+0xfc>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f043 0320 	orr.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	2378      	movs	r3, #120	; 0x78
 8005fe0:	4828      	ldr	r0, [pc, #160]	; (8006084 <_printf_i+0x248>)
 8005fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fe6:	e7e3      	b.n	8005fb0 <_printf_i+0x174>
 8005fe8:	0659      	lsls	r1, r3, #25
 8005fea:	bf48      	it	mi
 8005fec:	b2b6      	uxthmi	r6, r6
 8005fee:	e7e6      	b.n	8005fbe <_printf_i+0x182>
 8005ff0:	4615      	mov	r5, r2
 8005ff2:	e7bb      	b.n	8005f6c <_printf_i+0x130>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	6826      	ldr	r6, [r4, #0]
 8005ff8:	6961      	ldr	r1, [r4, #20]
 8005ffa:	1d18      	adds	r0, r3, #4
 8005ffc:	6028      	str	r0, [r5, #0]
 8005ffe:	0635      	lsls	r5, r6, #24
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	d501      	bpl.n	8006008 <_printf_i+0x1cc>
 8006004:	6019      	str	r1, [r3, #0]
 8006006:	e002      	b.n	800600e <_printf_i+0x1d2>
 8006008:	0670      	lsls	r0, r6, #25
 800600a:	d5fb      	bpl.n	8006004 <_printf_i+0x1c8>
 800600c:	8019      	strh	r1, [r3, #0]
 800600e:	2300      	movs	r3, #0
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	4615      	mov	r5, r2
 8006014:	e7ba      	b.n	8005f8c <_printf_i+0x150>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	602a      	str	r2, [r5, #0]
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	2100      	movs	r1, #0
 8006022:	4628      	mov	r0, r5
 8006024:	f7fa f90c 	bl	8000240 <memchr>
 8006028:	b108      	cbz	r0, 800602e <_printf_i+0x1f2>
 800602a:	1b40      	subs	r0, r0, r5
 800602c:	6060      	str	r0, [r4, #4]
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	2300      	movs	r3, #0
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006038:	e7a8      	b.n	8005f8c <_printf_i+0x150>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	462a      	mov	r2, r5
 800603e:	4649      	mov	r1, r9
 8006040:	4640      	mov	r0, r8
 8006042:	47d0      	blx	sl
 8006044:	3001      	adds	r0, #1
 8006046:	d0ab      	beq.n	8005fa0 <_printf_i+0x164>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	079b      	lsls	r3, r3, #30
 800604c:	d413      	bmi.n	8006076 <_printf_i+0x23a>
 800604e:	68e0      	ldr	r0, [r4, #12]
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	4298      	cmp	r0, r3
 8006054:	bfb8      	it	lt
 8006056:	4618      	movlt	r0, r3
 8006058:	e7a4      	b.n	8005fa4 <_printf_i+0x168>
 800605a:	2301      	movs	r3, #1
 800605c:	4632      	mov	r2, r6
 800605e:	4649      	mov	r1, r9
 8006060:	4640      	mov	r0, r8
 8006062:	47d0      	blx	sl
 8006064:	3001      	adds	r0, #1
 8006066:	d09b      	beq.n	8005fa0 <_printf_i+0x164>
 8006068:	3501      	adds	r5, #1
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	9903      	ldr	r1, [sp, #12]
 800606e:	1a5b      	subs	r3, r3, r1
 8006070:	42ab      	cmp	r3, r5
 8006072:	dcf2      	bgt.n	800605a <_printf_i+0x21e>
 8006074:	e7eb      	b.n	800604e <_printf_i+0x212>
 8006076:	2500      	movs	r5, #0
 8006078:	f104 0619 	add.w	r6, r4, #25
 800607c:	e7f5      	b.n	800606a <_printf_i+0x22e>
 800607e:	bf00      	nop
 8006080:	08006751 	.word	0x08006751
 8006084:	08006762 	.word	0x08006762

08006088 <_sbrk_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_sbrk_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fa fdde 	bl	8000c54 <_sbrk>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_sbrk_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_sbrk_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	20001e40 	.word	0x20001e40

080060a8 <__sread>:
 80060a8:	b510      	push	{r4, lr}
 80060aa:	460c      	mov	r4, r1
 80060ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b0:	f000 fab2 	bl	8006618 <_read_r>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	bfab      	itete	ge
 80060b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060ba:	89a3      	ldrhlt	r3, [r4, #12]
 80060bc:	181b      	addge	r3, r3, r0
 80060be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060c2:	bfac      	ite	ge
 80060c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060c6:	81a3      	strhlt	r3, [r4, #12]
 80060c8:	bd10      	pop	{r4, pc}

080060ca <__swrite>:
 80060ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ce:	461f      	mov	r7, r3
 80060d0:	898b      	ldrh	r3, [r1, #12]
 80060d2:	05db      	lsls	r3, r3, #23
 80060d4:	4605      	mov	r5, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	4616      	mov	r6, r2
 80060da:	d505      	bpl.n	80060e8 <__swrite+0x1e>
 80060dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e0:	2302      	movs	r3, #2
 80060e2:	2200      	movs	r2, #0
 80060e4:	f000 f9c8 	bl	8006478 <_lseek_r>
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f2:	81a3      	strh	r3, [r4, #12]
 80060f4:	4632      	mov	r2, r6
 80060f6:	463b      	mov	r3, r7
 80060f8:	4628      	mov	r0, r5
 80060fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	f000 b869 	b.w	80061d4 <_write_r>

08006102 <__sseek>:
 8006102:	b510      	push	{r4, lr}
 8006104:	460c      	mov	r4, r1
 8006106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610a:	f000 f9b5 	bl	8006478 <_lseek_r>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	bf15      	itete	ne
 8006114:	6560      	strne	r0, [r4, #84]	; 0x54
 8006116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800611a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800611e:	81a3      	strheq	r3, [r4, #12]
 8006120:	bf18      	it	ne
 8006122:	81a3      	strhne	r3, [r4, #12]
 8006124:	bd10      	pop	{r4, pc}

08006126 <__sclose>:
 8006126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612a:	f000 b8d3 	b.w	80062d4 <_close_r>
	...

08006130 <__swbuf_r>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	460e      	mov	r6, r1
 8006134:	4614      	mov	r4, r2
 8006136:	4605      	mov	r5, r0
 8006138:	b118      	cbz	r0, 8006142 <__swbuf_r+0x12>
 800613a:	6983      	ldr	r3, [r0, #24]
 800613c:	b90b      	cbnz	r3, 8006142 <__swbuf_r+0x12>
 800613e:	f7ff fb81 	bl	8005844 <__sinit>
 8006142:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <__swbuf_r+0x98>)
 8006144:	429c      	cmp	r4, r3
 8006146:	d12b      	bne.n	80061a0 <__swbuf_r+0x70>
 8006148:	686c      	ldr	r4, [r5, #4]
 800614a:	69a3      	ldr	r3, [r4, #24]
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	071a      	lsls	r2, r3, #28
 8006152:	d52f      	bpl.n	80061b4 <__swbuf_r+0x84>
 8006154:	6923      	ldr	r3, [r4, #16]
 8006156:	b36b      	cbz	r3, 80061b4 <__swbuf_r+0x84>
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	1ac0      	subs	r0, r0, r3
 800615e:	6963      	ldr	r3, [r4, #20]
 8006160:	b2f6      	uxtb	r6, r6
 8006162:	4283      	cmp	r3, r0
 8006164:	4637      	mov	r7, r6
 8006166:	dc04      	bgt.n	8006172 <__swbuf_r+0x42>
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f948 	bl	8006400 <_fflush_r>
 8006170:	bb30      	cbnz	r0, 80061c0 <__swbuf_r+0x90>
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	3b01      	subs	r3, #1
 8006176:	60a3      	str	r3, [r4, #8]
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	6022      	str	r2, [r4, #0]
 800617e:	701e      	strb	r6, [r3, #0]
 8006180:	6963      	ldr	r3, [r4, #20]
 8006182:	3001      	adds	r0, #1
 8006184:	4283      	cmp	r3, r0
 8006186:	d004      	beq.n	8006192 <__swbuf_r+0x62>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	07db      	lsls	r3, r3, #31
 800618c:	d506      	bpl.n	800619c <__swbuf_r+0x6c>
 800618e:	2e0a      	cmp	r6, #10
 8006190:	d104      	bne.n	800619c <__swbuf_r+0x6c>
 8006192:	4621      	mov	r1, r4
 8006194:	4628      	mov	r0, r5
 8006196:	f000 f933 	bl	8006400 <_fflush_r>
 800619a:	b988      	cbnz	r0, 80061c0 <__swbuf_r+0x90>
 800619c:	4638      	mov	r0, r7
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <__swbuf_r+0x9c>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d101      	bne.n	80061aa <__swbuf_r+0x7a>
 80061a6:	68ac      	ldr	r4, [r5, #8]
 80061a8:	e7cf      	b.n	800614a <__swbuf_r+0x1a>
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <__swbuf_r+0xa0>)
 80061ac:	429c      	cmp	r4, r3
 80061ae:	bf08      	it	eq
 80061b0:	68ec      	ldreq	r4, [r5, #12]
 80061b2:	e7ca      	b.n	800614a <__swbuf_r+0x1a>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 f81e 	bl	80061f8 <__swsetup_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d0cb      	beq.n	8006158 <__swbuf_r+0x28>
 80061c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80061c4:	e7ea      	b.n	800619c <__swbuf_r+0x6c>
 80061c6:	bf00      	nop
 80061c8:	08006700 	.word	0x08006700
 80061cc:	08006720 	.word	0x08006720
 80061d0:	080066e0 	.word	0x080066e0

080061d4 <_write_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	; (80061f4 <_write_r+0x20>)
 80061d8:	4604      	mov	r4, r0
 80061da:	4608      	mov	r0, r1
 80061dc:	4611      	mov	r1, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fa fce5 	bl	8000bb2 <_write>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_write_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_write_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	20001e40 	.word	0x20001e40

080061f8 <__swsetup_r>:
 80061f8:	4b32      	ldr	r3, [pc, #200]	; (80062c4 <__swsetup_r+0xcc>)
 80061fa:	b570      	push	{r4, r5, r6, lr}
 80061fc:	681d      	ldr	r5, [r3, #0]
 80061fe:	4606      	mov	r6, r0
 8006200:	460c      	mov	r4, r1
 8006202:	b125      	cbz	r5, 800620e <__swsetup_r+0x16>
 8006204:	69ab      	ldr	r3, [r5, #24]
 8006206:	b913      	cbnz	r3, 800620e <__swsetup_r+0x16>
 8006208:	4628      	mov	r0, r5
 800620a:	f7ff fb1b 	bl	8005844 <__sinit>
 800620e:	4b2e      	ldr	r3, [pc, #184]	; (80062c8 <__swsetup_r+0xd0>)
 8006210:	429c      	cmp	r4, r3
 8006212:	d10f      	bne.n	8006234 <__swsetup_r+0x3c>
 8006214:	686c      	ldr	r4, [r5, #4]
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800621c:	0719      	lsls	r1, r3, #28
 800621e:	d42c      	bmi.n	800627a <__swsetup_r+0x82>
 8006220:	06dd      	lsls	r5, r3, #27
 8006222:	d411      	bmi.n	8006248 <__swsetup_r+0x50>
 8006224:	2309      	movs	r3, #9
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800622c:	81a3      	strh	r3, [r4, #12]
 800622e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006232:	e03e      	b.n	80062b2 <__swsetup_r+0xba>
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <__swsetup_r+0xd4>)
 8006236:	429c      	cmp	r4, r3
 8006238:	d101      	bne.n	800623e <__swsetup_r+0x46>
 800623a:	68ac      	ldr	r4, [r5, #8]
 800623c:	e7eb      	b.n	8006216 <__swsetup_r+0x1e>
 800623e:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <__swsetup_r+0xd8>)
 8006240:	429c      	cmp	r4, r3
 8006242:	bf08      	it	eq
 8006244:	68ec      	ldreq	r4, [r5, #12]
 8006246:	e7e6      	b.n	8006216 <__swsetup_r+0x1e>
 8006248:	0758      	lsls	r0, r3, #29
 800624a:	d512      	bpl.n	8006272 <__swsetup_r+0x7a>
 800624c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800624e:	b141      	cbz	r1, 8006262 <__swsetup_r+0x6a>
 8006250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006254:	4299      	cmp	r1, r3
 8006256:	d002      	beq.n	800625e <__swsetup_r+0x66>
 8006258:	4630      	mov	r0, r6
 800625a:	f000 f991 	bl	8006580 <_free_r>
 800625e:	2300      	movs	r3, #0
 8006260:	6363      	str	r3, [r4, #52]	; 0x34
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	2300      	movs	r3, #0
 800626c:	6063      	str	r3, [r4, #4]
 800626e:	6923      	ldr	r3, [r4, #16]
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f043 0308 	orr.w	r3, r3, #8
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	b94b      	cbnz	r3, 8006292 <__swsetup_r+0x9a>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006288:	d003      	beq.n	8006292 <__swsetup_r+0x9a>
 800628a:	4621      	mov	r1, r4
 800628c:	4630      	mov	r0, r6
 800628e:	f000 f92b 	bl	80064e8 <__smakebuf_r>
 8006292:	89a0      	ldrh	r0, [r4, #12]
 8006294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006298:	f010 0301 	ands.w	r3, r0, #1
 800629c:	d00a      	beq.n	80062b4 <__swsetup_r+0xbc>
 800629e:	2300      	movs	r3, #0
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	6963      	ldr	r3, [r4, #20]
 80062a4:	425b      	negs	r3, r3
 80062a6:	61a3      	str	r3, [r4, #24]
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	b943      	cbnz	r3, 80062be <__swsetup_r+0xc6>
 80062ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062b0:	d1ba      	bne.n	8006228 <__swsetup_r+0x30>
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	0781      	lsls	r1, r0, #30
 80062b6:	bf58      	it	pl
 80062b8:	6963      	ldrpl	r3, [r4, #20]
 80062ba:	60a3      	str	r3, [r4, #8]
 80062bc:	e7f4      	b.n	80062a8 <__swsetup_r+0xb0>
 80062be:	2000      	movs	r0, #0
 80062c0:	e7f7      	b.n	80062b2 <__swsetup_r+0xba>
 80062c2:	bf00      	nop
 80062c4:	20001be4 	.word	0x20001be4
 80062c8:	08006700 	.word	0x08006700
 80062cc:	08006720 	.word	0x08006720
 80062d0:	080066e0 	.word	0x080066e0

080062d4 <_close_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d06      	ldr	r5, [pc, #24]	; (80062f0 <_close_r+0x1c>)
 80062d8:	2300      	movs	r3, #0
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	f7fa fc83 	bl	8000bea <_close>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_close_r+0x1a>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_close_r+0x1a>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	20001e40 	.word	0x20001e40

080062f4 <__sflush_r>:
 80062f4:	898a      	ldrh	r2, [r1, #12]
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	4605      	mov	r5, r0
 80062fc:	0710      	lsls	r0, r2, #28
 80062fe:	460c      	mov	r4, r1
 8006300:	d458      	bmi.n	80063b4 <__sflush_r+0xc0>
 8006302:	684b      	ldr	r3, [r1, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc05      	bgt.n	8006314 <__sflush_r+0x20>
 8006308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	dc02      	bgt.n	8006314 <__sflush_r+0x20>
 800630e:	2000      	movs	r0, #0
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006316:	2e00      	cmp	r6, #0
 8006318:	d0f9      	beq.n	800630e <__sflush_r+0x1a>
 800631a:	2300      	movs	r3, #0
 800631c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006320:	682f      	ldr	r7, [r5, #0]
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	d032      	beq.n	800638c <__sflush_r+0x98>
 8006326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	075a      	lsls	r2, r3, #29
 800632c:	d505      	bpl.n	800633a <__sflush_r+0x46>
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	1ac0      	subs	r0, r0, r3
 8006332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006334:	b10b      	cbz	r3, 800633a <__sflush_r+0x46>
 8006336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006338:	1ac0      	subs	r0, r0, r3
 800633a:	2300      	movs	r3, #0
 800633c:	4602      	mov	r2, r0
 800633e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006340:	6a21      	ldr	r1, [r4, #32]
 8006342:	4628      	mov	r0, r5
 8006344:	47b0      	blx	r6
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	d106      	bne.n	800635a <__sflush_r+0x66>
 800634c:	6829      	ldr	r1, [r5, #0]
 800634e:	291d      	cmp	r1, #29
 8006350:	d82c      	bhi.n	80063ac <__sflush_r+0xb8>
 8006352:	4a2a      	ldr	r2, [pc, #168]	; (80063fc <__sflush_r+0x108>)
 8006354:	40ca      	lsrs	r2, r1
 8006356:	07d6      	lsls	r6, r2, #31
 8006358:	d528      	bpl.n	80063ac <__sflush_r+0xb8>
 800635a:	2200      	movs	r2, #0
 800635c:	6062      	str	r2, [r4, #4]
 800635e:	04d9      	lsls	r1, r3, #19
 8006360:	6922      	ldr	r2, [r4, #16]
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	d504      	bpl.n	8006370 <__sflush_r+0x7c>
 8006366:	1c42      	adds	r2, r0, #1
 8006368:	d101      	bne.n	800636e <__sflush_r+0x7a>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	b903      	cbnz	r3, 8006370 <__sflush_r+0x7c>
 800636e:	6560      	str	r0, [r4, #84]	; 0x54
 8006370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006372:	602f      	str	r7, [r5, #0]
 8006374:	2900      	cmp	r1, #0
 8006376:	d0ca      	beq.n	800630e <__sflush_r+0x1a>
 8006378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637c:	4299      	cmp	r1, r3
 800637e:	d002      	beq.n	8006386 <__sflush_r+0x92>
 8006380:	4628      	mov	r0, r5
 8006382:	f000 f8fd 	bl	8006580 <_free_r>
 8006386:	2000      	movs	r0, #0
 8006388:	6360      	str	r0, [r4, #52]	; 0x34
 800638a:	e7c1      	b.n	8006310 <__sflush_r+0x1c>
 800638c:	6a21      	ldr	r1, [r4, #32]
 800638e:	2301      	movs	r3, #1
 8006390:	4628      	mov	r0, r5
 8006392:	47b0      	blx	r6
 8006394:	1c41      	adds	r1, r0, #1
 8006396:	d1c7      	bne.n	8006328 <__sflush_r+0x34>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c4      	beq.n	8006328 <__sflush_r+0x34>
 800639e:	2b1d      	cmp	r3, #29
 80063a0:	d001      	beq.n	80063a6 <__sflush_r+0xb2>
 80063a2:	2b16      	cmp	r3, #22
 80063a4:	d101      	bne.n	80063aa <__sflush_r+0xb6>
 80063a6:	602f      	str	r7, [r5, #0]
 80063a8:	e7b1      	b.n	800630e <__sflush_r+0x1a>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7ad      	b.n	8006310 <__sflush_r+0x1c>
 80063b4:	690f      	ldr	r7, [r1, #16]
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d0a9      	beq.n	800630e <__sflush_r+0x1a>
 80063ba:	0793      	lsls	r3, r2, #30
 80063bc:	680e      	ldr	r6, [r1, #0]
 80063be:	bf08      	it	eq
 80063c0:	694b      	ldreq	r3, [r1, #20]
 80063c2:	600f      	str	r7, [r1, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2300      	movne	r3, #0
 80063c8:	eba6 0807 	sub.w	r8, r6, r7
 80063cc:	608b      	str	r3, [r1, #8]
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	dd9c      	ble.n	800630e <__sflush_r+0x1a>
 80063d4:	6a21      	ldr	r1, [r4, #32]
 80063d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d8:	4643      	mov	r3, r8
 80063da:	463a      	mov	r2, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	47b0      	blx	r6
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc06      	bgt.n	80063f2 <__sflush_r+0xfe>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f0:	e78e      	b.n	8006310 <__sflush_r+0x1c>
 80063f2:	4407      	add	r7, r0
 80063f4:	eba8 0800 	sub.w	r8, r8, r0
 80063f8:	e7e9      	b.n	80063ce <__sflush_r+0xda>
 80063fa:	bf00      	nop
 80063fc:	20400001 	.word	0x20400001

08006400 <_fflush_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b913      	cbnz	r3, 8006410 <_fflush_r+0x10>
 800640a:	2500      	movs	r5, #0
 800640c:	4628      	mov	r0, r5
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	b118      	cbz	r0, 800641a <_fflush_r+0x1a>
 8006412:	6983      	ldr	r3, [r0, #24]
 8006414:	b90b      	cbnz	r3, 800641a <_fflush_r+0x1a>
 8006416:	f7ff fa15 	bl	8005844 <__sinit>
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <_fflush_r+0x6c>)
 800641c:	429c      	cmp	r4, r3
 800641e:	d11b      	bne.n	8006458 <_fflush_r+0x58>
 8006420:	686c      	ldr	r4, [r5, #4]
 8006422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0ef      	beq.n	800640a <_fflush_r+0xa>
 800642a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800642c:	07d0      	lsls	r0, r2, #31
 800642e:	d404      	bmi.n	800643a <_fflush_r+0x3a>
 8006430:	0599      	lsls	r1, r3, #22
 8006432:	d402      	bmi.n	800643a <_fflush_r+0x3a>
 8006434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006436:	f7ff faa3 	bl	8005980 <__retarget_lock_acquire_recursive>
 800643a:	4628      	mov	r0, r5
 800643c:	4621      	mov	r1, r4
 800643e:	f7ff ff59 	bl	80062f4 <__sflush_r>
 8006442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006444:	07da      	lsls	r2, r3, #31
 8006446:	4605      	mov	r5, r0
 8006448:	d4e0      	bmi.n	800640c <_fflush_r+0xc>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	059b      	lsls	r3, r3, #22
 800644e:	d4dd      	bmi.n	800640c <_fflush_r+0xc>
 8006450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006452:	f7ff fa96 	bl	8005982 <__retarget_lock_release_recursive>
 8006456:	e7d9      	b.n	800640c <_fflush_r+0xc>
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <_fflush_r+0x70>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d101      	bne.n	8006462 <_fflush_r+0x62>
 800645e:	68ac      	ldr	r4, [r5, #8]
 8006460:	e7df      	b.n	8006422 <_fflush_r+0x22>
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <_fflush_r+0x74>)
 8006464:	429c      	cmp	r4, r3
 8006466:	bf08      	it	eq
 8006468:	68ec      	ldreq	r4, [r5, #12]
 800646a:	e7da      	b.n	8006422 <_fflush_r+0x22>
 800646c:	08006700 	.word	0x08006700
 8006470:	08006720 	.word	0x08006720
 8006474:	080066e0 	.word	0x080066e0

08006478 <_lseek_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_lseek_r+0x20>)
 800647c:	4604      	mov	r4, r0
 800647e:	4608      	mov	r0, r1
 8006480:	4611      	mov	r1, r2
 8006482:	2200      	movs	r2, #0
 8006484:	602a      	str	r2, [r5, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f7fa fbd6 	bl	8000c38 <_lseek>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_lseek_r+0x1e>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_lseek_r+0x1e>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20001e40 	.word	0x20001e40

0800649c <__swhatbuf_r>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	460e      	mov	r6, r1
 80064a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a4:	2900      	cmp	r1, #0
 80064a6:	b096      	sub	sp, #88	; 0x58
 80064a8:	4614      	mov	r4, r2
 80064aa:	461d      	mov	r5, r3
 80064ac:	da08      	bge.n	80064c0 <__swhatbuf_r+0x24>
 80064ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	602a      	str	r2, [r5, #0]
 80064b6:	061a      	lsls	r2, r3, #24
 80064b8:	d410      	bmi.n	80064dc <__swhatbuf_r+0x40>
 80064ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064be:	e00e      	b.n	80064de <__swhatbuf_r+0x42>
 80064c0:	466a      	mov	r2, sp
 80064c2:	f000 f8bb 	bl	800663c <_fstat_r>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	dbf1      	blt.n	80064ae <__swhatbuf_r+0x12>
 80064ca:	9a01      	ldr	r2, [sp, #4]
 80064cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064d4:	425a      	negs	r2, r3
 80064d6:	415a      	adcs	r2, r3
 80064d8:	602a      	str	r2, [r5, #0]
 80064da:	e7ee      	b.n	80064ba <__swhatbuf_r+0x1e>
 80064dc:	2340      	movs	r3, #64	; 0x40
 80064de:	2000      	movs	r0, #0
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	b016      	add	sp, #88	; 0x58
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080064e8 <__smakebuf_r>:
 80064e8:	898b      	ldrh	r3, [r1, #12]
 80064ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064ec:	079d      	lsls	r5, r3, #30
 80064ee:	4606      	mov	r6, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	d507      	bpl.n	8006504 <__smakebuf_r+0x1c>
 80064f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	2301      	movs	r3, #1
 80064fe:	6163      	str	r3, [r4, #20]
 8006500:	b002      	add	sp, #8
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	ab01      	add	r3, sp, #4
 8006506:	466a      	mov	r2, sp
 8006508:	f7ff ffc8 	bl	800649c <__swhatbuf_r>
 800650c:	9900      	ldr	r1, [sp, #0]
 800650e:	4605      	mov	r5, r0
 8006510:	4630      	mov	r0, r6
 8006512:	f7ff fa57 	bl	80059c4 <_malloc_r>
 8006516:	b948      	cbnz	r0, 800652c <__smakebuf_r+0x44>
 8006518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651c:	059a      	lsls	r2, r3, #22
 800651e:	d4ef      	bmi.n	8006500 <__smakebuf_r+0x18>
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	f043 0302 	orr.w	r3, r3, #2
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	e7e3      	b.n	80064f4 <__smakebuf_r+0xc>
 800652c:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <__smakebuf_r+0x7c>)
 800652e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	6020      	str	r0, [r4, #0]
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	6163      	str	r3, [r4, #20]
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	6120      	str	r0, [r4, #16]
 8006542:	b15b      	cbz	r3, 800655c <__smakebuf_r+0x74>
 8006544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006548:	4630      	mov	r0, r6
 800654a:	f000 f889 	bl	8006660 <_isatty_r>
 800654e:	b128      	cbz	r0, 800655c <__smakebuf_r+0x74>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	89a0      	ldrh	r0, [r4, #12]
 800655e:	4305      	orrs	r5, r0
 8006560:	81a5      	strh	r5, [r4, #12]
 8006562:	e7cd      	b.n	8006500 <__smakebuf_r+0x18>
 8006564:	080057dd 	.word	0x080057dd

08006568 <__malloc_lock>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__malloc_lock+0x8>)
 800656a:	f7ff ba09 	b.w	8005980 <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	20001e34 	.word	0x20001e34

08006574 <__malloc_unlock>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__malloc_unlock+0x8>)
 8006576:	f7ff ba04 	b.w	8005982 <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	20001e34 	.word	0x20001e34

08006580 <_free_r>:
 8006580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006582:	2900      	cmp	r1, #0
 8006584:	d044      	beq.n	8006610 <_free_r+0x90>
 8006586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658a:	9001      	str	r0, [sp, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f1a1 0404 	sub.w	r4, r1, #4
 8006592:	bfb8      	it	lt
 8006594:	18e4      	addlt	r4, r4, r3
 8006596:	f7ff ffe7 	bl	8006568 <__malloc_lock>
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <_free_r+0x94>)
 800659c:	9801      	ldr	r0, [sp, #4]
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	b933      	cbnz	r3, 80065b0 <_free_r+0x30>
 80065a2:	6063      	str	r3, [r4, #4]
 80065a4:	6014      	str	r4, [r2, #0]
 80065a6:	b003      	add	sp, #12
 80065a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065ac:	f7ff bfe2 	b.w	8006574 <__malloc_unlock>
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d908      	bls.n	80065c6 <_free_r+0x46>
 80065b4:	6825      	ldr	r5, [r4, #0]
 80065b6:	1961      	adds	r1, r4, r5
 80065b8:	428b      	cmp	r3, r1
 80065ba:	bf01      	itttt	eq
 80065bc:	6819      	ldreq	r1, [r3, #0]
 80065be:	685b      	ldreq	r3, [r3, #4]
 80065c0:	1949      	addeq	r1, r1, r5
 80065c2:	6021      	streq	r1, [r4, #0]
 80065c4:	e7ed      	b.n	80065a2 <_free_r+0x22>
 80065c6:	461a      	mov	r2, r3
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	b10b      	cbz	r3, 80065d0 <_free_r+0x50>
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d9fa      	bls.n	80065c6 <_free_r+0x46>
 80065d0:	6811      	ldr	r1, [r2, #0]
 80065d2:	1855      	adds	r5, r2, r1
 80065d4:	42a5      	cmp	r5, r4
 80065d6:	d10b      	bne.n	80065f0 <_free_r+0x70>
 80065d8:	6824      	ldr	r4, [r4, #0]
 80065da:	4421      	add	r1, r4
 80065dc:	1854      	adds	r4, r2, r1
 80065de:	42a3      	cmp	r3, r4
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	d1e0      	bne.n	80065a6 <_free_r+0x26>
 80065e4:	681c      	ldr	r4, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	6053      	str	r3, [r2, #4]
 80065ea:	4421      	add	r1, r4
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	e7da      	b.n	80065a6 <_free_r+0x26>
 80065f0:	d902      	bls.n	80065f8 <_free_r+0x78>
 80065f2:	230c      	movs	r3, #12
 80065f4:	6003      	str	r3, [r0, #0]
 80065f6:	e7d6      	b.n	80065a6 <_free_r+0x26>
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	1961      	adds	r1, r4, r5
 80065fc:	428b      	cmp	r3, r1
 80065fe:	bf04      	itt	eq
 8006600:	6819      	ldreq	r1, [r3, #0]
 8006602:	685b      	ldreq	r3, [r3, #4]
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	bf04      	itt	eq
 8006608:	1949      	addeq	r1, r1, r5
 800660a:	6021      	streq	r1, [r4, #0]
 800660c:	6054      	str	r4, [r2, #4]
 800660e:	e7ca      	b.n	80065a6 <_free_r+0x26>
 8006610:	b003      	add	sp, #12
 8006612:	bd30      	pop	{r4, r5, pc}
 8006614:	20001e38 	.word	0x20001e38

08006618 <_read_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d07      	ldr	r5, [pc, #28]	; (8006638 <_read_r+0x20>)
 800661c:	4604      	mov	r4, r0
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	2200      	movs	r2, #0
 8006624:	602a      	str	r2, [r5, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f7fa faa6 	bl	8000b78 <_read>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_read_r+0x1e>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_read_r+0x1e>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	20001e40 	.word	0x20001e40

0800663c <_fstat_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d07      	ldr	r5, [pc, #28]	; (800665c <_fstat_r+0x20>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	f7fa fada 	bl	8000c02 <_fstat>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d102      	bne.n	8006658 <_fstat_r+0x1c>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	b103      	cbz	r3, 8006658 <_fstat_r+0x1c>
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	20001e40 	.word	0x20001e40

08006660 <_isatty_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4d06      	ldr	r5, [pc, #24]	; (800667c <_isatty_r+0x1c>)
 8006664:	2300      	movs	r3, #0
 8006666:	4604      	mov	r4, r0
 8006668:	4608      	mov	r0, r1
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	f7fa fad9 	bl	8000c22 <_isatty>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_isatty_r+0x1a>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_isatty_r+0x1a>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20001e40 	.word	0x20001e40

08006680 <_init>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr

0800668c <_fini>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	bf00      	nop
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr
