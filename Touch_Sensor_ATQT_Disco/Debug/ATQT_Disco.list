
ATQT_Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f9c  08005f9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa4  08005fa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  08006020  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08006020  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e96  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cf  00000000  00000000  00037f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033144  00000000  00000000  0003d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018566  00000000  00000000  00070a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e2a7  00000000  00000000  00088f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7231  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b0  00000000  00000000  001a7284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005e20 	.word	0x08005e20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005e20 	.word	0x08005e20

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <MX_GPIO_Init+0xa8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <MX_GPIO_Init+0xa8>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_GPIO_Init+0xa8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_GPIO_Init+0xa8>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <MX_GPIO_Init+0xa8>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_GPIO_Init+0xa8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_GPIO_Init+0xa8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_GPIO_Init+0xa8>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_GPIO_Init+0xa8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_GPIO_Init+0xa8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a11      	ldr	r2, [pc, #68]	; (800068c <MX_GPIO_Init+0xa8>)
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_GPIO_Init+0xa8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0320 	and.w	r3, r3, #32
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <MX_GPIO_Init+0xac>)
 8000670:	f000 fd4e 	bl	8001110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2017      	movs	r0, #23
 800067a:	f000 fd12 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800067e:	2017      	movs	r0, #23
 8000680:	f000 fd2b 	bl	80010da <HAL_NVIC_EnableIRQ>

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40021400 	.word	0x40021400

08000694 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_I2C1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_I2C1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_I2C1_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <MX_I2C1_Init+0x74>)
 80006d0:	f000 feee 	bl	80014b0 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 f903 	bl	80008e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <MX_I2C1_Init+0x74>)
 80006e2:	f001 fbd9 	bl	8001e98 <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 f8fa 	bl	80008e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_I2C1_Init+0x74>)
 80006f4:	f001 fc1b 	bl	8001f2e <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f8f1 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000008c 	.word	0x2000008c
 800070c:	40005400 	.word	0x40005400
 8000710:	00506682 	.word	0x00506682

08000714 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0ae      	sub	sp, #184	; 0xb8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2290      	movs	r2, #144	; 0x90
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f004 fb67 	bl	8004e08 <memset>
  if(i2cHandle->Instance==I2C1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <HAL_I2C_MspInit+0xb4>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d13c      	bne.n	80007be <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000744:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000748:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800074a:	2300      	movs	r3, #0
 800074c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f8cc 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800075e:	f000 f8c1 	bl	80008e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_I2C_MspInit+0xb8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <HAL_I2C_MspInit+0xb8>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_I2C_MspInit+0xb8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800077a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000782:	2312      	movs	r3, #18
 8000784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000788:	2301      	movs	r3, #1
 800078a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000794:	2304      	movs	r3, #4
 8000796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <HAL_I2C_MspInit+0xbc>)
 80007a2:	f000 fcb5 	bl	8001110 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_I2C_MspInit+0xb8>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_I2C_MspInit+0xb8>)
 80007ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_I2C_MspInit+0xb8>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007be:	bf00      	nop
 80007c0:	37b8      	adds	r7, #184	; 0xb8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40005400 	.word	0x40005400
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020400 	.word	0x40020400

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fb2b 	bl	8000e32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f818 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f7ff ff00 	bl	80005e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e4:	f7ff ff56 	bl	8000694 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007e8:	f000 fa6c 	bl	8000cc4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80007ec:	f000 f996 	bl	8000b1c <MX_TIM2_Init>
  MX_TIM5_Init();
 80007f0:	f000 f9e2 	bl	8000bb8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //touch sensor init function
  touchSensor_Init();
 80007f4:	f004 f82a 	bl	800484c <touchSensor_Init>

 HAL_TIM_Base_Start(&htim2);
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <main+0x34>)
 80007fa:	f002 fcf9 	bl	80031f0 <HAL_TIM_Base_Start>
 HAL_TIM_Base_Start_IT(&htim5);
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <main+0x38>)
 8000800:	f002 fd66 	bl	80032d0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0x30>
 8000806:	bf00      	nop
 8000808:	200000e4 	.word	0x200000e4
 800080c:	20000130 	.word	0x20000130

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 faf2 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a28      	ldr	r2, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b26      	ldr	r3, [pc, #152]	; (80008dc <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000854:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800087c:	2308      	movs	r3, #8
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000880:	23c0      	movs	r3, #192	; 0xc0
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000884:	2304      	movs	r3, #4
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fb97 	bl	8001fc8 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a0:	f000 f820 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2103      	movs	r1, #3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fe2e 	bl	8002524 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ce:	f000 f809 	bl	80008e4 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x44>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x44>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x44>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x44>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x44>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 fa92 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8000990:	2040      	movs	r0, #64	; 0x40
 8000992:	f000 fd69 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM5_IRQHandler+0x10>)
 80009a2:	f002 fd0d 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000130 	.word	0x20000130

080009b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e00a      	b.n	80009d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c2:	f3af 8000 	nop.w
 80009c6:	4601      	mov	r1, r0
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	b2ca      	uxtb	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf0      	blt.n	80009c2 <_read+0x12>
	}

return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e009      	b.n	8000a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f004 f863 	bl	8004ad0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf1      	blt.n	80009fc <_write+0x12>
		//ITM_sendChar(*ptr++);
	}
	return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_close>:

int _close(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	return -1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_isatty>:

int _isatty(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	return 1;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f004 f97a 	bl	8004db4 <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20080000 	.word	0x20080000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	200000e0 	.word	0x200000e0
 8000af4:	20000270 	.word	0x20000270

08000af8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b44:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000b48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b52:	f04f 32ff 	mov.w	r2, #4294967295
 8000b56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b66:	f002 faeb 	bl	8003140 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b70:	f7ff feb8 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b82:	f002 fd3d 	bl	8003600 <HAL_TIM_ConfigClockSource>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b8c:	f7ff feaa 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_TIM2_Init+0x98>)
 8000b9e:	f002 ff5b 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ba8:	f7ff fe9c 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000e4 	.word	0x200000e4

08000bb8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <MX_TIM5_Init+0x98>)
 8000bda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48000-1;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000bde:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000be2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20-1;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000bec:	2213      	movs	r2, #19
 8000bee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000bf8:	2280      	movs	r2, #128	; 0x80
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bfc:	4813      	ldr	r0, [pc, #76]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000bfe:	f002 fa9f 	bl	8003140 <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c08:	f7ff fe6c 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000c1a:	f002 fcf1 	bl	8003600 <HAL_TIM_ConfigClockSource>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c24:	f7ff fe5e 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_TIM5_Init+0x94>)
 8000c36:	f002 ff0f 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f7ff fe50 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000130 	.word	0x20000130
 8000c50:	40000c00 	.word	0x40000c00

08000c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d10c      	bne.n	8000c80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000c7e:	e018      	b.n	8000cb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM5)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d113      	bne.n	8000cb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2032      	movs	r0, #50	; 0x32
 8000ca8:	f000 f9fb 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000cac:	2032      	movs	r0, #50	; 0x32
 8000cae:	f000 fa14 	bl	80010da <HAL_NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40000c00 	.word	0x40000c00

08000cc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <MX_USART1_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d08:	f002 ff52 	bl	8003bb0 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f7ff fde7 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000017c 	.word	0x2000017c
 8000d20:	40011000 	.word	0x40011000

08000d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0ae      	sub	sp, #184	; 0xb8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2290      	movs	r2, #144	; 0x90
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 f85f 	bl	8004e08 <memset>
  if(uartHandle->Instance==USART1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_UART_MspInit+0xb0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d13b      	bne.n	8000dcc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fdc5 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d6c:	f7ff fdba 	bl	80008e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000da0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000dc8:	f000 f9a2 	bl	8001110 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dcc:	bf00      	nop
 8000dce:	37b8      	adds	r7, #184	; 0xb8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff fe75 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 ffd7 	bl	8004dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fcdf 	bl	80007d4 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e24:	08005fb0 	.word	0x08005fb0
  ldr r2, =_sbss
 8000e28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e2c:	2000026c 	.word	0x2000026c

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>

08000e32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f928 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f805 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fd55 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f943 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f90b 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000204 	.word	0x20000204

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000204 	.word	0x20000204

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e175      	b.n	800141c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 8164 	bne.w	8001416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d005      	beq.n	8001166 <HAL_GPIO_Init+0x56>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d130      	bne.n	80011c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 0201 	and.w	r2, r3, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d017      	beq.n	8001204 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d123      	bne.n	8001258 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	69b9      	ldr	r1, [r7, #24]
 8001254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0203 	and.w	r2, r3, #3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80be 	beq.w	8001416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_GPIO_Init+0x324>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_GPIO_Init+0x324>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_GPIO_Init+0x324>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012b2:	4a61      	ldr	r2, [pc, #388]	; (8001438 <HAL_GPIO_Init+0x328>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a58      	ldr	r2, [pc, #352]	; (800143c <HAL_GPIO_Init+0x32c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d037      	beq.n	800134e <HAL_GPIO_Init+0x23e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a57      	ldr	r2, [pc, #348]	; (8001440 <HAL_GPIO_Init+0x330>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d031      	beq.n	800134a <HAL_GPIO_Init+0x23a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_GPIO_Init+0x334>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x236>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a55      	ldr	r2, [pc, #340]	; (8001448 <HAL_GPIO_Init+0x338>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x232>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a54      	ldr	r2, [pc, #336]	; (800144c <HAL_GPIO_Init+0x33c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x22e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a53      	ldr	r2, [pc, #332]	; (8001450 <HAL_GPIO_Init+0x340>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x22a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_GPIO_Init+0x344>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x226>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a51      	ldr	r2, [pc, #324]	; (8001458 <HAL_GPIO_Init+0x348>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x222>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a50      	ldr	r2, [pc, #320]	; (800145c <HAL_GPIO_Init+0x34c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x21e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	; (8001460 <HAL_GPIO_Init+0x350>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x21a>
 8001326:	2309      	movs	r3, #9
 8001328:	e012      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800132a:	230a      	movs	r3, #10
 800132c:	e010      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800132e:	2308      	movs	r3, #8
 8001330:	e00e      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001332:	2307      	movs	r3, #7
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001336:	2306      	movs	r3, #6
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x328>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <HAL_GPIO_Init+0x354>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <HAL_GPIO_Init+0x354>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x354>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_GPIO_Init+0x354>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f ae86 	bls.w	8001130 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40013800 	.word	0x40013800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40021400 	.word	0x40021400
 8001454:	40021800 	.word	0x40021800
 8001458:	40021c00 	.word	0x40021c00
 800145c:	40022000 	.word	0x40022000
 8001460:	40022400 	.word	0x40022400
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f806 	bl	8001498 <HAL_GPIO_EXTI_Callback>
  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07f      	b.n	80015c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff f91c 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e006      	b.n	8001538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d104      	bne.n	800154a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001548:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_I2C_Init+0x11c>)
 8001556:	430b      	orrs	r3, r1
 8001558:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001568:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69d9      	ldr	r1, [r3, #28]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	02008000 	.word	0x02008000

080015d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	461a      	mov	r2, r3
 80015dc:	460b      	mov	r3, r1
 80015de:	817b      	strh	r3, [r7, #10]
 80015e0:	4613      	mov	r3, r2
 80015e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	f040 80da 	bne.w	80017a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x30>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e0d3      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001608:	f7ff fc64 	bl	8000ed4 <HAL_GetTick>
 800160c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2319      	movs	r3, #25
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f9f4 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0be      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2210      	movs	r2, #16
 8001636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	893a      	ldrh	r2, [r7, #8]
 800164a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001656:	b29b      	uxth	r3, r3
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d90e      	bls.n	800167a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	8979      	ldrh	r1, [r7, #10]
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fbde 	bl	8001e34 <I2C_TransferConfig>
 8001678:	e06c      	b.n	8001754 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	b2da      	uxtb	r2, r3
 800168a:	8979      	ldrh	r1, [r7, #10]
 800168c:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fbcd 	bl	8001e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800169a:	e05b      	b.n	8001754 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	6a39      	ldr	r1, [r7, #32]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f9f1 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e07b      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d034      	beq.n	8001754 <HAL_I2C_Master_Transmit+0x184>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d130      	bne.n	8001754 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	2200      	movs	r2, #0
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f983 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e04d      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d90e      	bls.n	8001734 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fb81 	bl	8001e34 <I2C_TransferConfig>
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	b2da      	uxtb	r2, r3
 8001744:	8979      	ldrh	r1, [r7, #10]
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fb70 	bl	8001e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d19e      	bne.n	800169c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	6a39      	ldr	r1, [r7, #32]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f9d0 	bl	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e01a      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2220      	movs	r2, #32
 8001778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001786:	400b      	ands	r3, r1
 8001788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
  }
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	80002000 	.word	0x80002000
 80017b4:	fe00e800 	.word	0xfe00e800

080017b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	461a      	mov	r2, r3
 80017c4:	460b      	mov	r3, r1
 80017c6:	817b      	strh	r3, [r7, #10]
 80017c8:	4613      	mov	r3, r2
 80017ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	f040 80db 	bne.w	8001990 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_I2C_Master_Receive+0x30>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e0d4      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017f0:	f7ff fb70 	bl	8000ed4 <HAL_GetTick>
 80017f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2319      	movs	r3, #25
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f900 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0bf      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2222      	movs	r2, #34	; 0x22
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2210      	movs	r2, #16
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	893a      	ldrh	r2, [r7, #8]
 8001832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	d90e      	bls.n	8001862 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	b2da      	uxtb	r2, r3
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	4b52      	ldr	r3, [pc, #328]	; (800199c <HAL_I2C_Master_Receive+0x1e4>)
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 faea 	bl	8001e34 <I2C_TransferConfig>
 8001860:	e06d      	b.n	800193e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	b2da      	uxtb	r2, r3
 8001872:	8979      	ldrh	r1, [r7, #10]
 8001874:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_I2C_Master_Receive+0x1e4>)
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 fad9 	bl	8001e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001882:	e05c      	b.n	800193e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	6a39      	ldr	r1, [r7, #32]
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f979 	bl	8001b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e07c      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d034      	beq.n	800193e <HAL_I2C_Master_Receive+0x186>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d130      	bne.n	800193e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	2200      	movs	r2, #0
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f88e 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e04d      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d90e      	bls.n	800191e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	b2da      	uxtb	r2, r3
 800190c:	8979      	ldrh	r1, [r7, #10]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fa8c 	bl	8001e34 <I2C_TransferConfig>
 800191c:	e00f      	b.n	800193e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	b2da      	uxtb	r2, r3
 800192e:	8979      	ldrh	r1, [r7, #10]
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fa7b 	bl	8001e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d19d      	bne.n	8001884 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	6a39      	ldr	r1, [r7, #32]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f8db 	bl	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e01a      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2220      	movs	r2, #32
 8001962:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_I2C_Master_Receive+0x1e8>)
 8001970:	400b      	ands	r3, r1
 8001972:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	80002400 	.word	0x80002400
 80019a0:	fe00e800 	.word	0xfe00e800

080019a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b2:	b2db      	uxtb	r3, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d103      	bne.n	80019de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d007      	beq.n	80019fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	619a      	str	r2, [r3, #24]
  }
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a18:	e022      	b.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d01e      	beq.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a22:	f7ff fa57 	bl	8000ed4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d302      	bcc.n	8001a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d113      	bne.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f043 0220 	orr.w	r2, r3, #32
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00f      	b.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d0cd      	beq.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a94:	e02c      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f8ea 	bl	8001c74 <I2C_IsErrorOccurred>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e02a      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d01e      	beq.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7ff fa0f 	bl	8000ed4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d113      	bne.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e007      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d1cb      	bne.n	8001a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	e028      	b.n	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f8aa 	bl	8001c74 <I2C_IsErrorOccurred>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e026      	b.n	8001b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2a:	f7ff f9d3 	bl	8000ed4 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d113      	bne.n	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	f043 0220 	orr.w	r2, r3, #32
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e007      	b.n	8001b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d1cf      	bne.n	8001b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b8c:	e064      	b.n	8001c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f86e 	bl	8001c74 <I2C_IsErrorOccurred>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e062      	b.n	8001c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d138      	bne.n	8001c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d105      	bne.n	8001bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e04e      	b.n	8001c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d107      	bne.n	8001be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2204      	movs	r2, #4
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
 8001be6:	e002      	b.n	8001bee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001c02:	400b      	ands	r3, r1
 8001c04:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e022      	b.n	8001c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c22:	f7ff f957 	bl	8000ed4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d302      	bcc.n	8001c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10f      	bne.n	8001c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e007      	b.n	8001c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d193      	bne.n	8001b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	fe00e800 	.word	0xfe00e800

08001c74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d068      	beq.n	8001d72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ca8:	e049      	b.n	8001d3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d045      	beq.n	8001d3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7ff f90f 	bl	8000ed4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_IsErrorOccurred+0x54>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d13a      	bne.n	8001d3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cea:	d121      	bne.n	8001d30 <I2C_IsErrorOccurred+0xbc>
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cf2:	d01d      	beq.n	8001d30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001cf4:	7cfb      	ldrb	r3, [r7, #19]
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d01a      	beq.n	8001d30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d0a:	f7ff f8e3 	bl	8000ed4 <HAL_GetTick>
 8001d0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d10:	e00e      	b.n	8001d30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d12:	f7ff f8df 	bl	8000ed4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b19      	cmp	r3, #25
 8001d1e:	d907      	bls.n	8001d30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f043 0320 	orr.w	r3, r3, #32
 8001d26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001d2e:	e006      	b.n	8001d3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d1e9      	bne.n	8001d12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	d003      	beq.n	8001d54 <I2C_IsErrorOccurred+0xe0>
 8001d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0aa      	beq.n	8001caa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00b      	beq.n	8001d9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01c      	beq.n	8001e22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fde9 	bl	80019c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <I2C_IsErrorOccurred+0x1bc>)
 8001dfa:	400b      	ands	r3, r1
 8001dfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	fe00e800 	.word	0xfe00e800

08001e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	817b      	strh	r3, [r7, #10]
 8001e42:	4613      	mov	r3, r2
 8001e44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e4c:	7a7b      	ldrb	r3, [r7, #9]
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	0d5b      	lsrs	r3, r3, #21
 8001e6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <I2C_TransferConfig+0x60>)
 8001e74:	430b      	orrs	r3, r1
 8001e76:	43db      	mvns	r3, r3
 8001e78:	ea02 0103 	and.w	r1, r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	03ff63ff 	.word	0x03ff63ff

08001e98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d138      	bne.n	8001f20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e032      	b.n	8001f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d139      	bne.n	8001fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e033      	b.n	8001fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2224      	movs	r2, #36	; 0x24
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e29b      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fec:	4b96      	ldr	r3, [pc, #600]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d00c      	beq.n	8002012 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff8:	4b93      	ldr	r3, [pc, #588]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d112      	bne.n	800202a <HAL_RCC_OscConfig+0x62>
 8002004:	4b90      	ldr	r3, [pc, #576]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002010:	d10b      	bne.n	800202a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	4b8d      	ldr	r3, [pc, #564]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d06c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x130>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d168      	bne.n	80020f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e275      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x7a>
 8002034:	4b84      	ldr	r3, [pc, #528]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a83      	ldr	r2, [pc, #524]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e02e      	b.n	80020a0 <HAL_RCC_OscConfig+0xd8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x9c>
 800204a:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7e      	ldr	r2, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7b      	ldr	r2, [pc, #492]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800205c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xd8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0xc0>
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a72      	ldr	r2, [pc, #456]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xd8>
 8002088:	4b6f      	ldr	r3, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b6c      	ldr	r3, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6b      	ldr	r2, [pc, #428]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff14 	bl	8000ed4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7fe ff10 	bl	8000ed4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e229      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xe8>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe ff00 	bl	8000ed4 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe fefc 	bl	8000ed4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e215      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b57      	ldr	r3, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x110>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d069      	beq.n	80021da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002106:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x190>
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x17a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1e9      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	493d      	ldr	r1, [pc, #244]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e040      	b.n	80021da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe feb2 	bl	8000ed4 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002174:	f7fe feae 	bl	8000ed4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1c7      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4929      	ldr	r1, [pc, #164]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
 80021a6:	e018      	b.n	80021da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fe8e 	bl	8000ed4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7fe fe8a 	bl	8000ed4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1a3      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d038      	beq.n	8002258 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d019      	beq.n	8002222 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe fe6b 	bl	8000ed4 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe fe67 	bl	8000ed4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e180      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x23a>
 8002220:	e01a      	b.n	8002258 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_RCC_OscConfig+0x280>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fe51 	bl	8000ed4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe fe4d 	bl	8000ed4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d903      	bls.n	800224c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e166      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
 8002248:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a4 	beq.w	80023ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a88      	ldr	r2, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	4b83      	ldr	r3, [pc, #524]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800229a:	4b80      	ldr	r3, [pc, #512]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7f      	ldr	r2, [pc, #508]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fe15 	bl	8000ed4 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ae:	f7fe fe11 	bl	8000ed4 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e12a      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c0:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x4d4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x31a>
 80022d4:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6713      	str	r3, [r2, #112]	; 0x70
 80022e0:	e02d      	b.n	800233e <HAL_RCC_OscConfig+0x376>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x33c>
 80022ea:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6713      	str	r3, [r2, #112]	; 0x70
 80022f6:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a67      	ldr	r2, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	e01c      	b.n	800233e <HAL_RCC_OscConfig+0x376>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x35e>
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a61      	ldr	r2, [pc, #388]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0x376>
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d015      	beq.n	8002372 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fdc5 	bl	8000ed4 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fdc1 	bl	8000ed4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0d8      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ee      	beq.n	800234e <HAL_RCC_OscConfig+0x386>
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe fdaf 	bl	8000ed4 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7fe fdab 	bl	8000ed4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0c2      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a3c      	ldr	r2, [pc, #240]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80ae 	beq.w	8002514 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d06d      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d14b      	bne.n	8002464 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a31      	ldr	r2, [pc, #196]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fd7c 	bl	8000ed4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fd78 	bl	8000ed4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e091      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	071b      	lsls	r3, r3, #28
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fd4a 	bl	8000ed4 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fd46 	bl	8000ed4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e05f      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x47c>
 8002462:	e057      	b.n	8002514 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fd30 	bl	8000ed4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fd2c 	bl	8000ed4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e045      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_OscConfig+0x4d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x4b0>
 8002496:	e03d      	b.n	8002514 <HAL_RCC_OscConfig+0x54c>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_RCC_OscConfig+0x558>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d030      	beq.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d129      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d122      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d0:	4013      	ands	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d8:	4293      	cmp	r3, r2
 80024da:	d119      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	3b01      	subs	r3, #1
 80024ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d10f      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d0      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 020f 	bic.w	r2, r3, #15
 8002552:	4965      	ldr	r1, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d040      	beq.n	8002648 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d115      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e073      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4936      	ldr	r1, [pc, #216]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7fe fc5c 	bl	8000ed4 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7fe fc58 	bl	8000ed4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e053      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d210      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 020f 	bic.w	r2, r3, #15
 800265e:	4922      	ldr	r1, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f821 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1cc>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1d0>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1d4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fbb8 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08005ea4 	.word	0x08005ea4
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002700:	b090      	sub	sp, #64	; 0x40
 8002702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
 8002708:	2300      	movs	r3, #0
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270c:	2300      	movs	r3, #0
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_GetSysClockFreq+0x180>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d00d      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x40>
 8002720:	2b08      	cmp	r3, #8
 8002722:	f200 80a1 	bhi.w	8002868 <HAL_RCC_GetSysClockFreq+0x16c>
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x34>
 800272a:	2b04      	cmp	r3, #4
 800272c:	d003      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x3a>
 800272e:	e09b      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_GetSysClockFreq+0x184>)
 8002732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002734:	e09b      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_GetSysClockFreq+0x188>)
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800273a:	e098      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273c:	4b4f      	ldr	r3, [pc, #316]	; (800287c <HAL_RCC_GetSysClockFreq+0x180>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002746:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_RCC_GetSysClockFreq+0x180>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d028      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_RCC_GetSysClockFreq+0x180>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	2200      	movs	r2, #0
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	627a      	str	r2, [r7, #36]	; 0x24
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002764:	2100      	movs	r1, #0
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_GetSysClockFreq+0x188>)
 8002768:	fb03 f201 	mul.w	r2, r3, r1
 800276c:	2300      	movs	r3, #0
 800276e:	fb00 f303 	mul.w	r3, r0, r3
 8002772:	4413      	add	r3, r2
 8002774:	4a43      	ldr	r2, [pc, #268]	; (8002884 <HAL_RCC_GetSysClockFreq+0x188>)
 8002776:	fba0 1202 	umull	r1, r2, r0, r2
 800277a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800277c:	460a      	mov	r2, r1
 800277e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002782:	4413      	add	r3, r2
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	2200      	movs	r2, #0
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	61fa      	str	r2, [r7, #28]
 800278e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002792:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002796:	f7fd fda3 	bl	80002e0 <__aeabi_uldivmod>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4613      	mov	r3, r2
 80027a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a2:	e053      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a4:	4b35      	ldr	r3, [pc, #212]	; (800287c <HAL_RCC_GetSysClockFreq+0x180>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	2200      	movs	r2, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	617a      	str	r2, [r7, #20]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027b6:	f04f 0b00 	mov.w	fp, #0
 80027ba:	4652      	mov	r2, sl
 80027bc:	465b      	mov	r3, fp
 80027be:	f04f 0000 	mov.w	r0, #0
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	0159      	lsls	r1, r3, #5
 80027c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027cc:	0150      	lsls	r0, r2, #5
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	ebb2 080a 	subs.w	r8, r2, sl
 80027d6:	eb63 090b 	sbc.w	r9, r3, fp
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ee:	ebb2 0408 	subs.w	r4, r2, r8
 80027f2:	eb63 0509 	sbc.w	r5, r3, r9
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	00eb      	lsls	r3, r5, #3
 8002800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002804:	00e2      	lsls	r2, r4, #3
 8002806:	4614      	mov	r4, r2
 8002808:	461d      	mov	r5, r3
 800280a:	eb14 030a 	adds.w	r3, r4, sl
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	eb45 030b 	adc.w	r3, r5, fp
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002822:	4629      	mov	r1, r5
 8002824:	028b      	lsls	r3, r1, #10
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800282c:	4621      	mov	r1, r4
 800282e:	028a      	lsls	r2, r1, #10
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	2200      	movs	r2, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	60fa      	str	r2, [r7, #12]
 800283c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002840:	f7fd fd4e 	bl	80002e0 <__aeabi_uldivmod>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4613      	mov	r3, r2
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_GetSysClockFreq+0x180>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	3301      	adds	r3, #1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800285c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002866:	e002      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetSysClockFreq+0x184>)
 800286a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800286c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002870:	4618      	mov	r0, r3
 8002872:	3740      	adds	r7, #64	; 0x40
 8002874:	46bd      	mov	sp, r7
 8002876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	00f42400 	.word	0x00f42400
 8002884:	017d7840 	.word	0x017d7840

08002888 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_RCC_GetHCLKFreq+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000000 	.word	0x20000000

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a4:	f7ff fff0 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0a9b      	lsrs	r3, r3, #10
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08005eb4 	.word	0x08005eb4

080028c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028cc:	f7ff ffdc 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0b5b      	lsrs	r3, r3, #13
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08005eb4 	.word	0x08005eb4

080028f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d012      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002918:	4b69      	ldr	r3, [pc, #420]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a68      	ldr	r2, [pc, #416]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002922:	6093      	str	r3, [r2, #8]
 8002924:	4b66      	ldr	r3, [pc, #408]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	4964      	ldr	r1, [pc, #400]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d017      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	4959      	ldr	r1, [pc, #356]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002968:	d101      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d017      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002986:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	494a      	ldr	r1, [pc, #296]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a4:	d101      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 808b 	beq.w	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	4a39      	ldr	r2, [pc, #228]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029de:	6413      	str	r3, [r2, #64]	; 0x40
 80029e0:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a34      	ldr	r2, [pc, #208]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe fa6c 	bl	8000ed4 <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7fe fa68 	bl	8000ed4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e38f      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a12:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a1e:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d035      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d02e      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a5e:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d114      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fa30 	bl	8000ed4 <HAL_GetTick>
 8002a74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa2c 	bl	8000ed4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e351      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ee      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa6:	d111      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	4901      	ldr	r1, [pc, #4]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	0ffffcff 	.word	0x0ffffcff
 8002acc:	4bac      	ldr	r3, [pc, #688]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4aab      	ldr	r2, [pc, #684]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	4ba9      	ldr	r3, [pc, #676]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ada:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	49a6      	ldr	r1, [pc, #664]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d010      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002af6:	4ba2      	ldr	r3, [pc, #648]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afc:	4aa0      	ldr	r2, [pc, #640]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b06:	4b9e      	ldr	r3, [pc, #632]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	499b      	ldr	r1, [pc, #620]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b24:	4b96      	ldr	r3, [pc, #600]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b32:	4993      	ldr	r1, [pc, #588]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b46:	4b8e      	ldr	r3, [pc, #568]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b54:	498a      	ldr	r1, [pc, #552]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b68:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b76:	4982      	ldr	r1, [pc, #520]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4979      	ldr	r1, [pc, #484]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bac:	4b74      	ldr	r3, [pc, #464]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4971      	ldr	r1, [pc, #452]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bce:	4b6c      	ldr	r3, [pc, #432]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	f023 020c 	bic.w	r2, r3, #12
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bdc:	4968      	ldr	r1, [pc, #416]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf0:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	4960      	ldr	r1, [pc, #384]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c12:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c20:	4957      	ldr	r1, [pc, #348]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c34:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	494f      	ldr	r1, [pc, #316]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c56:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	4946      	ldr	r1, [pc, #280]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c78:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	493e      	ldr	r1, [pc, #248]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	4935      	ldr	r1, [pc, #212]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cca:	492d      	ldr	r1, [pc, #180]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d011      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cec:	4924      	ldr	r1, [pc, #144]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	4914      	ldr	r1, [pc, #80]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d50:	490b      	ldr	r1, [pc, #44]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00f      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d74:	4902      	ldr	r1, [pc, #8]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d90:	4b8a      	ldr	r3, [pc, #552]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	4986      	ldr	r1, [pc, #536]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002db4:	4b81      	ldr	r3, [pc, #516]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc4:	497d      	ldr	r1, [pc, #500]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d006      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80d6 	beq.w	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002de0:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a75      	ldr	r2, [pc, #468]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7fe f872 	bl	8000ed4 <HAL_GetTick>
 8002df0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002df4:	f7fe f86e 	bl	8000ed4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e195      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d021      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11d      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e34:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3a:	0e1b      	lsrs	r3, r3, #24
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	019a      	lsls	r2, r3, #6
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	071b      	lsls	r3, r3, #28
 8002e5a:	4958      	ldr	r1, [pc, #352]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02e      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8c:	d129      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e9c:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	0f1b      	lsrs	r3, r3, #28
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	019a      	lsls	r2, r3, #6
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	071b      	lsls	r3, r3, #28
 8002ec2:	493e      	ldr	r1, [pc, #248]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eca:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed0:	f023 021f 	bic.w	r2, r3, #31
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	4938      	ldr	r1, [pc, #224]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01d      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eee:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	0e1b      	lsrs	r3, r3, #24
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002efc:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f02:	0f1b      	lsrs	r3, r3, #28
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	019a      	lsls	r2, r3, #6
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	431a      	orrs	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	071b      	lsls	r3, r3, #28
 8002f22:	4926      	ldr	r1, [pc, #152]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d011      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	071b      	lsls	r3, r3, #28
 8002f52:	491a      	ldr	r1, [pc, #104]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f66:	f7fd ffb5 	bl	8000ed4 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f6e:	f7fd ffb1 	bl	8000ed4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0d8      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	f040 80ce 	bne.w	8003130 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fd ff98 	bl	8000ed4 <HAL_GetTick>
 8002fa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fa8:	f7fd ff94 	bl	8000ed4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d904      	bls.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0bb      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fc0:	4b5e      	ldr	r3, [pc, #376]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fcc:	d0ec      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d02e      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ff6:	4b51      	ldr	r3, [pc, #324]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003004:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	0f1b      	lsrs	r3, r3, #28
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	019a      	lsls	r2, r3, #6
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	4944      	ldr	r1, [pc, #272]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003032:	4b42      	ldr	r3, [pc, #264]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003038:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d022      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800305c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003060:	d11d      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003062:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	0e1b      	lsrs	r3, r3, #24
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003070:	4b32      	ldr	r3, [pc, #200]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	0f1b      	lsrs	r3, r3, #28
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	019a      	lsls	r2, r3, #6
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	431a      	orrs	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	071b      	lsls	r3, r3, #28
 8003096:	4929      	ldr	r1, [pc, #164]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d028      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	0e1b      	lsrs	r3, r3, #24
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	019a      	lsls	r2, r3, #6
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	431a      	orrs	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	071b      	lsls	r3, r3, #28
 80030de:	4917      	ldr	r1, [pc, #92]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	4911      	ldr	r1, [pc, #68]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003108:	f7fd fee4 	bl	8000ed4 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003110:	f7fd fee0 	bl	8000ed4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e007      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800312e:	d1ef      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800

08003140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e049      	b.n	80031e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fd74 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 fb30 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d001      	beq.n	8003208 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e04c      	b.n	80032a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <HAL_TIM_Base_Start+0xc0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d022      	beq.n	8003260 <HAL_TIM_Base_Start+0x70>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d01d      	beq.n	8003260 <HAL_TIM_Base_Start+0x70>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_TIM_Base_Start+0xc4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <HAL_TIM_Base_Start+0x70>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_TIM_Base_Start+0xc8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <HAL_TIM_Base_Start+0x70>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_TIM_Base_Start+0xcc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_TIM_Base_Start+0x70>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_TIM_Base_Start+0xd0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_TIM_Base_Start+0x70>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_TIM_Base_Start+0xd4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_Base_Start+0x70>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_TIM_Base_Start+0xd8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d115      	bne.n	800328c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_TIM_Base_Start+0xdc>)
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d015      	beq.n	800329e <HAL_TIM_Base_Start+0xae>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d011      	beq.n	800329e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	e008      	b.n	800329e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e000      	b.n	80032a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40010400 	.word	0x40010400
 80032c4:	40014000 	.word	0x40014000
 80032c8:	40001800 	.word	0x40001800
 80032cc:	00010007 	.word	0x00010007

080032d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d001      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e054      	b.n	8003392 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d022      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x80>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003312:	d01d      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x80>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d018      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x80>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x80>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <HAL_TIM_Base_Start_IT+0xdc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x80>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x80>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x80>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d115      	bne.n	800337c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_TIM_Base_Start_IT+0xec>)
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d015      	beq.n	800338e <HAL_TIM_Base_Start_IT+0xbe>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d011      	beq.n	800338e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	e008      	b.n	800338e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e000      	b.n	8003390 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40010400 	.word	0x40010400
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40001800 	.word	0x40001800
 80033bc:	00010007 	.word	0x00010007

080033c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0202 	mvn.w	r2, #2
 80033ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9d0 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9c2 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f9d3 	bl	80037bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0204 	mvn.w	r2, #4
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9a6 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f998 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f9a9 	bl	80037bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b08      	cmp	r3, #8
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0208 	mvn.w	r2, #8
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f97c 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f96e 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f97f 	bl	80037bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0210 	mvn.w	r2, #16
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f952 	bl	80037a8 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f944 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f955 	bl	80037bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0201 	mvn.w	r2, #1
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f001 f9fa 	bl	8004938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b80      	cmp	r3, #128	; 0x80
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d107      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fb0c 	bl	8003b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d10e      	bne.n	800359e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d107      	bne.n	800359e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 faff 	bl	8003b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d10e      	bne.n	80035ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f903 	bl	80037d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d10e      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d107      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f06f 0220 	mvn.w	r2, #32
 80035ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fabf 	bl	8003b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIM_ConfigClockSource+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e0b4      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x186>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_TIM_ConfigClockSource+0x190>)
 8003638:	4013      	ands	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003654:	d03e      	beq.n	80036d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365a:	f200 8087 	bhi.w	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003662:	f000 8086 	beq.w	8003772 <HAL_TIM_ConfigClockSource+0x172>
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366a:	d87f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b70      	cmp	r3, #112	; 0x70
 800366e:	d01a      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003670:	2b70      	cmp	r3, #112	; 0x70
 8003672:	d87b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b60      	cmp	r3, #96	; 0x60
 8003676:	d050      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x11a>
 8003678:	2b60      	cmp	r3, #96	; 0x60
 800367a:	d877      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b50      	cmp	r3, #80	; 0x50
 800367e:	d03c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xfa>
 8003680:	2b50      	cmp	r3, #80	; 0x50
 8003682:	d873      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d058      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x13a>
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d86f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b30      	cmp	r3, #48	; 0x30
 800368e:	d064      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b30      	cmp	r3, #48	; 0x30
 8003692:	d86b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b20      	cmp	r3, #32
 8003696:	d060      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d867      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05c      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d05a      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a4:	e062      	b.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f000 f9af 	bl	8003a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
      break;
 80036d2:	e04f      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f000 f998 	bl	8003a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e03c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	f000 f90c 	bl	8003924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2150      	movs	r1, #80	; 0x50
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f965 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 8003718:	e02c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	461a      	mov	r2, r3
 8003728:	f000 f92b 	bl	8003982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2160      	movs	r1, #96	; 0x60
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f955 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 8003738:	e01c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	461a      	mov	r2, r3
 8003748:	f000 f8ec 	bl	8003924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f945 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 8003758:	e00c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 f93c 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 800376a:	e003      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e000      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	fffeff88 	.word	0xfffeff88

08003794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <TIM_Base_SetConfig+0x114>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d013      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d00f      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <TIM_Base_SetConfig+0x118>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00b      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <TIM_Base_SetConfig+0x11c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <TIM_Base_SetConfig+0x120>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3a      	ldr	r2, [pc, #232]	; (8003908 <TIM_Base_SetConfig+0x124>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2f      	ldr	r2, [pc, #188]	; (80038f8 <TIM_Base_SetConfig+0x114>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d02b      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d027      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <TIM_Base_SetConfig+0x118>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d023      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <TIM_Base_SetConfig+0x11c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01f      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <TIM_Base_SetConfig+0x120>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01b      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a29      	ldr	r2, [pc, #164]	; (8003908 <TIM_Base_SetConfig+0x124>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d017      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <TIM_Base_SetConfig+0x128>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a27      	ldr	r2, [pc, #156]	; (8003910 <TIM_Base_SetConfig+0x12c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00f      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a26      	ldr	r2, [pc, #152]	; (8003914 <TIM_Base_SetConfig+0x130>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00b      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a25      	ldr	r2, [pc, #148]	; (8003918 <TIM_Base_SetConfig+0x134>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a24      	ldr	r2, [pc, #144]	; (800391c <TIM_Base_SetConfig+0x138>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a23      	ldr	r2, [pc, #140]	; (8003920 <TIM_Base_SetConfig+0x13c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d108      	bne.n	80038a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <TIM_Base_SetConfig+0x114>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0xf8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <TIM_Base_SetConfig+0x124>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d103      	bne.n	80038e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	615a      	str	r2, [r3, #20]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00
 8003908:	40010400 	.word	0x40010400
 800390c:	40014000 	.word	0x40014000
 8003910:	40014400 	.word	0x40014400
 8003914:	40014800 	.word	0x40014800
 8003918:	40001800 	.word	0x40001800
 800391c:	40001c00 	.word	0x40001c00
 8003920:	40002000 	.word	0x40002000

08003924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 030a 	bic.w	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b087      	sub	sp, #28
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0210 	bic.w	r2, r3, #16
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f043 0307 	orr.w	r3, r3, #7
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	021a      	lsls	r2, r3, #8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e06d      	b.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003aaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d022      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d01d      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d018      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10c      	bne.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40010400 	.word	0x40010400
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40001800 	.word	0x40001800

08003b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e040      	b.n	8003c44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd f8a6 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8b0 	bl	8003d54 <UART_SetConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e022      	b.n	8003c44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fb08 	bl	800421c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fb8f 	bl	8004360 <UART_CheckIdleState>
 8003c42:	4603      	mov	r3, r0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d171      	bne.n	8003d48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_UART_Transmit+0x24>
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e06a      	b.n	8003d4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2221      	movs	r2, #33	; 0x21
 8003c80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c82:	f7fd f927 	bl	8000ed4 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Transmit+0x68>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cbc:	e02c      	b.n	8003d18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fb96 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e038      	b.n	8003d4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	3301      	adds	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1cc      	bne.n	8003cbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fb63 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e005      	b.n	8003d4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4ba6      	ldr	r3, [pc, #664]	; (8004018 <UART_SetConfig+0x2c4>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	6979      	ldr	r1, [r7, #20]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a94      	ldr	r2, [pc, #592]	; (800401c <UART_SetConfig+0x2c8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d120      	bne.n	8003e12 <UART_SetConfig+0xbe>
 8003dd0:	4b93      	ldr	r3, [pc, #588]	; (8004020 <UART_SetConfig+0x2cc>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d816      	bhi.n	8003e0c <UART_SetConfig+0xb8>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x90>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e01 	.word	0x08003e01
 8003dec:	08003dfb 	.word	0x08003dfb
 8003df0:	08003e07 	.word	0x08003e07
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e150      	b.n	800409c <UART_SetConfig+0x348>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e14d      	b.n	800409c <UART_SetConfig+0x348>
 8003e00:	2304      	movs	r3, #4
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e14a      	b.n	800409c <UART_SetConfig+0x348>
 8003e06:	2308      	movs	r3, #8
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e147      	b.n	800409c <UART_SetConfig+0x348>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e144      	b.n	800409c <UART_SetConfig+0x348>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a83      	ldr	r2, [pc, #524]	; (8004024 <UART_SetConfig+0x2d0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d132      	bne.n	8003e82 <UART_SetConfig+0x12e>
 8003e1c:	4b80      	ldr	r3, [pc, #512]	; (8004020 <UART_SetConfig+0x2cc>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d828      	bhi.n	8003e7c <UART_SetConfig+0x128>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0xdc>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003e7d 	.word	0x08003e7d
 8003e38:	08003e7d 	.word	0x08003e7d
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e7d 	.word	0x08003e7d
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003e7d 	.word	0x08003e7d
 8003e50:	08003e6b 	.word	0x08003e6b
 8003e54:	08003e7d 	.word	0x08003e7d
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e7d 	.word	0x08003e7d
 8003e60:	08003e77 	.word	0x08003e77
 8003e64:	2300      	movs	r3, #0
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e118      	b.n	800409c <UART_SetConfig+0x348>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e115      	b.n	800409c <UART_SetConfig+0x348>
 8003e70:	2304      	movs	r3, #4
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e112      	b.n	800409c <UART_SetConfig+0x348>
 8003e76:	2308      	movs	r3, #8
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e10f      	b.n	800409c <UART_SetConfig+0x348>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e10c      	b.n	800409c <UART_SetConfig+0x348>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a68      	ldr	r2, [pc, #416]	; (8004028 <UART_SetConfig+0x2d4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d120      	bne.n	8003ece <UART_SetConfig+0x17a>
 8003e8c:	4b64      	ldr	r3, [pc, #400]	; (8004020 <UART_SetConfig+0x2cc>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e96:	2b30      	cmp	r3, #48	; 0x30
 8003e98:	d013      	beq.n	8003ec2 <UART_SetConfig+0x16e>
 8003e9a:	2b30      	cmp	r3, #48	; 0x30
 8003e9c:	d814      	bhi.n	8003ec8 <UART_SetConfig+0x174>
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d009      	beq.n	8003eb6 <UART_SetConfig+0x162>
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d810      	bhi.n	8003ec8 <UART_SetConfig+0x174>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <UART_SetConfig+0x15c>
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d006      	beq.n	8003ebc <UART_SetConfig+0x168>
 8003eae:	e00b      	b.n	8003ec8 <UART_SetConfig+0x174>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e0f2      	b.n	800409c <UART_SetConfig+0x348>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e0ef      	b.n	800409c <UART_SetConfig+0x348>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e0ec      	b.n	800409c <UART_SetConfig+0x348>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e0e9      	b.n	800409c <UART_SetConfig+0x348>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e0e6      	b.n	800409c <UART_SetConfig+0x348>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a56      	ldr	r2, [pc, #344]	; (800402c <UART_SetConfig+0x2d8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d120      	bne.n	8003f1a <UART_SetConfig+0x1c6>
 8003ed8:	4b51      	ldr	r3, [pc, #324]	; (8004020 <UART_SetConfig+0x2cc>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee4:	d013      	beq.n	8003f0e <UART_SetConfig+0x1ba>
 8003ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee8:	d814      	bhi.n	8003f14 <UART_SetConfig+0x1c0>
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d009      	beq.n	8003f02 <UART_SetConfig+0x1ae>
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d810      	bhi.n	8003f14 <UART_SetConfig+0x1c0>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <UART_SetConfig+0x1a8>
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d006      	beq.n	8003f08 <UART_SetConfig+0x1b4>
 8003efa:	e00b      	b.n	8003f14 <UART_SetConfig+0x1c0>
 8003efc:	2300      	movs	r3, #0
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e0cc      	b.n	800409c <UART_SetConfig+0x348>
 8003f02:	2302      	movs	r3, #2
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e0c9      	b.n	800409c <UART_SetConfig+0x348>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e0c6      	b.n	800409c <UART_SetConfig+0x348>
 8003f0e:	2308      	movs	r3, #8
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e0c3      	b.n	800409c <UART_SetConfig+0x348>
 8003f14:	2310      	movs	r3, #16
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e0c0      	b.n	800409c <UART_SetConfig+0x348>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a44      	ldr	r2, [pc, #272]	; (8004030 <UART_SetConfig+0x2dc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d125      	bne.n	8003f70 <UART_SetConfig+0x21c>
 8003f24:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <UART_SetConfig+0x2cc>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d017      	beq.n	8003f64 <UART_SetConfig+0x210>
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f38:	d817      	bhi.n	8003f6a <UART_SetConfig+0x216>
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3e:	d00b      	beq.n	8003f58 <UART_SetConfig+0x204>
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f44:	d811      	bhi.n	8003f6a <UART_SetConfig+0x216>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <UART_SetConfig+0x1fe>
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d006      	beq.n	8003f5e <UART_SetConfig+0x20a>
 8003f50:	e00b      	b.n	8003f6a <UART_SetConfig+0x216>
 8003f52:	2300      	movs	r3, #0
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e0a1      	b.n	800409c <UART_SetConfig+0x348>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e09e      	b.n	800409c <UART_SetConfig+0x348>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e09b      	b.n	800409c <UART_SetConfig+0x348>
 8003f64:	2308      	movs	r3, #8
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e098      	b.n	800409c <UART_SetConfig+0x348>
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e095      	b.n	800409c <UART_SetConfig+0x348>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <UART_SetConfig+0x2e0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d125      	bne.n	8003fc6 <UART_SetConfig+0x272>
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <UART_SetConfig+0x2cc>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f88:	d017      	beq.n	8003fba <UART_SetConfig+0x266>
 8003f8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8e:	d817      	bhi.n	8003fc0 <UART_SetConfig+0x26c>
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f94:	d00b      	beq.n	8003fae <UART_SetConfig+0x25a>
 8003f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9a:	d811      	bhi.n	8003fc0 <UART_SetConfig+0x26c>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <UART_SetConfig+0x254>
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa4:	d006      	beq.n	8003fb4 <UART_SetConfig+0x260>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x26c>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e076      	b.n	800409c <UART_SetConfig+0x348>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e073      	b.n	800409c <UART_SetConfig+0x348>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e070      	b.n	800409c <UART_SetConfig+0x348>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e06d      	b.n	800409c <UART_SetConfig+0x348>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e06a      	b.n	800409c <UART_SetConfig+0x348>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <UART_SetConfig+0x2e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d138      	bne.n	8004042 <UART_SetConfig+0x2ee>
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <UART_SetConfig+0x2cc>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fde:	d017      	beq.n	8004010 <UART_SetConfig+0x2bc>
 8003fe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fe4:	d82a      	bhi.n	800403c <UART_SetConfig+0x2e8>
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fea:	d00b      	beq.n	8004004 <UART_SetConfig+0x2b0>
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff0:	d824      	bhi.n	800403c <UART_SetConfig+0x2e8>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <UART_SetConfig+0x2aa>
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffa:	d006      	beq.n	800400a <UART_SetConfig+0x2b6>
 8003ffc:	e01e      	b.n	800403c <UART_SetConfig+0x2e8>
 8003ffe:	2300      	movs	r3, #0
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e04b      	b.n	800409c <UART_SetConfig+0x348>
 8004004:	2302      	movs	r3, #2
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e048      	b.n	800409c <UART_SetConfig+0x348>
 800400a:	2304      	movs	r3, #4
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e045      	b.n	800409c <UART_SetConfig+0x348>
 8004010:	2308      	movs	r3, #8
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e042      	b.n	800409c <UART_SetConfig+0x348>
 8004016:	bf00      	nop
 8004018:	efff69f3 	.word	0xefff69f3
 800401c:	40011000 	.word	0x40011000
 8004020:	40023800 	.word	0x40023800
 8004024:	40004400 	.word	0x40004400
 8004028:	40004800 	.word	0x40004800
 800402c:	40004c00 	.word	0x40004c00
 8004030:	40005000 	.word	0x40005000
 8004034:	40011400 	.word	0x40011400
 8004038:	40007800 	.word	0x40007800
 800403c:	2310      	movs	r3, #16
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e02c      	b.n	800409c <UART_SetConfig+0x348>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a72      	ldr	r2, [pc, #456]	; (8004210 <UART_SetConfig+0x4bc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d125      	bne.n	8004098 <UART_SetConfig+0x344>
 800404c:	4b71      	ldr	r3, [pc, #452]	; (8004214 <UART_SetConfig+0x4c0>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004056:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800405a:	d017      	beq.n	800408c <UART_SetConfig+0x338>
 800405c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004060:	d817      	bhi.n	8004092 <UART_SetConfig+0x33e>
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004066:	d00b      	beq.n	8004080 <UART_SetConfig+0x32c>
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406c:	d811      	bhi.n	8004092 <UART_SetConfig+0x33e>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <UART_SetConfig+0x326>
 8004072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004076:	d006      	beq.n	8004086 <UART_SetConfig+0x332>
 8004078:	e00b      	b.n	8004092 <UART_SetConfig+0x33e>
 800407a:	2300      	movs	r3, #0
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e00d      	b.n	800409c <UART_SetConfig+0x348>
 8004080:	2302      	movs	r3, #2
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e00a      	b.n	800409c <UART_SetConfig+0x348>
 8004086:	2304      	movs	r3, #4
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e007      	b.n	800409c <UART_SetConfig+0x348>
 800408c:	2308      	movs	r3, #8
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e004      	b.n	800409c <UART_SetConfig+0x348>
 8004092:	2310      	movs	r3, #16
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e001      	b.n	800409c <UART_SetConfig+0x348>
 8004098:	2310      	movs	r3, #16
 800409a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a4:	d15b      	bne.n	800415e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040a6:	7ffb      	ldrb	r3, [r7, #31]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d828      	bhi.n	80040fe <UART_SetConfig+0x3aa>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0x360>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040d9 	.word	0x080040d9
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	080040e9 	.word	0x080040e9
 80040c0:	080040ff 	.word	0x080040ff
 80040c4:	080040ef 	.word	0x080040ef
 80040c8:	080040ff 	.word	0x080040ff
 80040cc:	080040ff 	.word	0x080040ff
 80040d0:	080040ff 	.word	0x080040ff
 80040d4:	080040f7 	.word	0x080040f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7fe fbe2 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 80040dc:	61b8      	str	r0, [r7, #24]
        break;
 80040de:	e013      	b.n	8004108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7fe fbf2 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 80040e4:	61b8      	str	r0, [r7, #24]
        break;
 80040e6:	e00f      	b.n	8004108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e8:	4b4b      	ldr	r3, [pc, #300]	; (8004218 <UART_SetConfig+0x4c4>)
 80040ea:	61bb      	str	r3, [r7, #24]
        break;
 80040ec:	e00c      	b.n	8004108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ee:	f7fe fb05 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80040f2:	61b8      	str	r0, [r7, #24]
        break;
 80040f4:	e008      	b.n	8004108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fa:	61bb      	str	r3, [r7, #24]
        break;
 80040fc:	e004      	b.n	8004108 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	77bb      	strb	r3, [r7, #30]
        break;
 8004106:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d074      	beq.n	80041f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	005a      	lsls	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	441a      	add	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b0f      	cmp	r3, #15
 8004128:	d916      	bls.n	8004158 <UART_SetConfig+0x404>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d212      	bcs.n	8004158 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f023 030f 	bic.w	r3, r3, #15
 800413a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	b29b      	uxth	r3, r3
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	b29a      	uxth	r2, r3
 8004148:	89fb      	ldrh	r3, [r7, #14]
 800414a:	4313      	orrs	r3, r2
 800414c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	89fa      	ldrh	r2, [r7, #14]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	e04f      	b.n	80041f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	77bb      	strb	r3, [r7, #30]
 800415c:	e04c      	b.n	80041f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800415e:	7ffb      	ldrb	r3, [r7, #31]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d828      	bhi.n	80041b6 <UART_SetConfig+0x462>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x418>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	080041b7 	.word	0x080041b7
 800417c:	080041a7 	.word	0x080041a7
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041b7 	.word	0x080041b7
 8004188:	080041b7 	.word	0x080041b7
 800418c:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe fb86 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8004194:	61b8      	str	r0, [r7, #24]
        break;
 8004196:	e013      	b.n	80041c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fe fb96 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 800419c:	61b8      	str	r0, [r7, #24]
        break;
 800419e:	e00f      	b.n	80041c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <UART_SetConfig+0x4c4>)
 80041a2:	61bb      	str	r3, [r7, #24]
        break;
 80041a4:	e00c      	b.n	80041c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe faa9 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80041aa:	61b8      	str	r0, [r7, #24]
        break;
 80041ac:	e008      	b.n	80041c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b2:	61bb      	str	r3, [r7, #24]
        break;
 80041b4:	e004      	b.n	80041c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	77bb      	strb	r3, [r7, #30]
        break;
 80041be:	bf00      	nop
    }

    if (pclk != 0U)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	085a      	lsrs	r2, r3, #1
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	441a      	add	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b0f      	cmp	r3, #15
 80041de:	d909      	bls.n	80041f4 <UART_SetConfig+0x4a0>
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e6:	d205      	bcs.n	80041f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	e001      	b.n	80041f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004204:	7fbb      	ldrb	r3, [r7, #30]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40007c00 	.word	0x40007c00
 8004214:	40023800 	.word	0x40023800
 8004218:	00f42400 	.word	0x00f42400

0800421c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01a      	beq.n	8004332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431a:	d10a      	bne.n	8004332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  }
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004370:	f7fc fdb0 	bl	8000ed4 <HAL_GetTick>
 8004374:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d10e      	bne.n	80043a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f831 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e027      	b.n	80043f2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d10e      	bne.n	80043ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f81b 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e011      	b.n	80043f2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b09c      	sub	sp, #112	; 0x70
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440a:	e0a7      	b.n	800455c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	f000 80a3 	beq.w	800455c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004416:	f7fc fd5d 	bl	8000ed4 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004422:	429a      	cmp	r2, r3
 8004424:	d302      	bcc.n	800442c <UART_WaitOnFlagUntilTimeout+0x32>
 8004426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004428:	2b00      	cmp	r3, #0
 800442a:	d13f      	bne.n	80044ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004440:	667b      	str	r3, [r7, #100]	; 0x64
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800444a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800444c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004450:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e6      	bne.n	800442c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	663b      	str	r3, [r7, #96]	; 0x60
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800447e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e068      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d050      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c8:	d148      	bne.n	800455c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
 80044f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e6      	bne.n	80044d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	613b      	str	r3, [r7, #16]
   return(result);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	66bb      	str	r3, [r7, #104]	; 0x68
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004526:	623a      	str	r2, [r7, #32]
 8004528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	69f9      	ldr	r1, [r7, #28]
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	61bb      	str	r3, [r7, #24]
   return(result);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e5      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e010      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	429a      	cmp	r2, r3
 8004578:	f43f af48 	beq.w	800440c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3770      	adds	r7, #112	; 0x70
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <check_cid>:
/*
 * @brief: check chip id if touch sensor
 * @ret  : return cid if true and 0 otherwise
*/
uint8_t check_cid(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af02      	add	r7, sp, #8
	uint8_t reg = 0x00;
 800458e:	2300      	movs	r3, #0
 8004590:	71bb      	strb	r3, [r7, #6]
	uint8_t ret=0;
 8004592:	2300      	movs	r3, #0
 8004594:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8004596:	2300      	movs	r3, #0
 8004598:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_GetState(I2C_HANDLE)!= HAL_I2C_STATE_READY);
 800459a:	bf00      	nop
 800459c:	481b      	ldr	r0, [pc, #108]	; (800460c <check_cid+0x84>)
 800459e:	f7fd fa01 	bl	80019a4 <HAL_I2C_GetState>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d1f9      	bne.n	800459c <check_cid+0x14>
	ret = HAL_I2C_Master_Transmit(I2C_HANDLE, DEV_ADDR, &reg, 1, HAL_MAX_DELAY);
 80045a8:	1dba      	adds	r2, r7, #6
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2301      	movs	r3, #1
 80045b2:	2138      	movs	r1, #56	; 0x38
 80045b4:	4815      	ldr	r0, [pc, #84]	; (800460c <check_cid+0x84>)
 80045b6:	f7fd f80b 	bl	80015d0 <HAL_I2C_Master_Transmit>
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
	if(ret!=HAL_OK){
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <check_cid+0x40>

		Error_Handler();
 80045c4:	f7fc f98e 	bl	80008e4 <Error_Handler>
	}
	while(HAL_I2C_GetState(I2C_HANDLE)!= HAL_I2C_STATE_READY);
 80045c8:	bf00      	nop
 80045ca:	4810      	ldr	r0, [pc, #64]	; (800460c <check_cid+0x84>)
 80045cc:	f7fd f9ea 	bl	80019a4 <HAL_I2C_GetState>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d1f9      	bne.n	80045ca <check_cid+0x42>
	ret = HAL_I2C_Master_Receive(I2C_HANDLE, DEV_ADDR, &data, 1, HAL_MAX_DELAY);
 80045d6:	1d7a      	adds	r2, r7, #5
 80045d8:	f04f 33ff 	mov.w	r3, #4294967295
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2301      	movs	r3, #1
 80045e0:	2138      	movs	r1, #56	; 0x38
 80045e2:	480a      	ldr	r0, [pc, #40]	; (800460c <check_cid+0x84>)
 80045e4:	f7fd f8e8 	bl	80017b8 <HAL_I2C_Master_Receive>
 80045e8:	4603      	mov	r3, r0
 80045ea:	71fb      	strb	r3, [r7, #7]
	if(ret!=HAL_OK){
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <check_cid+0x6e>

		Error_Handler();
 80045f2:	f7fc f977 	bl	80008e4 <Error_Handler>
	}

	if(data != CID)
 80045f6:	797b      	ldrb	r3, [r7, #5]
 80045f8:	2b3e      	cmp	r3, #62	; 0x3e
 80045fa:	d001      	beq.n	8004600 <check_cid+0x78>
		return 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <check_cid+0x7a>
	else
		return data;
 8004600:	797b      	ldrb	r3, [r7, #5]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2000008c 	.word	0x2000008c

08004610 <read8_i2c>:
/*
 * @brief: read 8-bit register value of touch sensor
 * @ret  : return register value if true or go to error handler otherwise
*/
uint8_t read8_i2c(uint8_t reg)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
		uint8_t ret=0;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
		uint8_t data=0;
 800461e:	2300      	movs	r3, #0
 8004620:	73bb      	strb	r3, [r7, #14]
		while(HAL_I2C_GetState(I2C_HANDLE)!= HAL_I2C_STATE_READY);
 8004622:	bf00      	nop
 8004624:	4819      	ldr	r0, [pc, #100]	; (800468c <read8_i2c+0x7c>)
 8004626:	f7fd f9bd 	bl	80019a4 <HAL_I2C_GetState>
 800462a:	4603      	mov	r3, r0
 800462c:	2b20      	cmp	r3, #32
 800462e:	d1f9      	bne.n	8004624 <read8_i2c+0x14>
		ret = HAL_I2C_Master_Transmit(I2C_HANDLE, DEV_ADDR, &reg, 1, HAL_MAX_DELAY);
 8004630:	1dfa      	adds	r2, r7, #7
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2301      	movs	r3, #1
 800463a:	2138      	movs	r1, #56	; 0x38
 800463c:	4813      	ldr	r0, [pc, #76]	; (800468c <read8_i2c+0x7c>)
 800463e:	f7fc ffc7 	bl	80015d0 <HAL_I2C_Master_Transmit>
 8004642:	4603      	mov	r3, r0
 8004644:	73fb      	strb	r3, [r7, #15]
		if(ret!=HAL_OK){
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <read8_i2c+0x40>

			Error_Handler();
 800464c:	f7fc f94a 	bl	80008e4 <Error_Handler>
		}
		while(HAL_I2C_GetState(I2C_HANDLE)!= HAL_I2C_STATE_READY);
 8004650:	bf00      	nop
 8004652:	480e      	ldr	r0, [pc, #56]	; (800468c <read8_i2c+0x7c>)
 8004654:	f7fd f9a6 	bl	80019a4 <HAL_I2C_GetState>
 8004658:	4603      	mov	r3, r0
 800465a:	2b20      	cmp	r3, #32
 800465c:	d1f9      	bne.n	8004652 <read8_i2c+0x42>
		ret = HAL_I2C_Master_Receive(I2C_HANDLE, DEV_ADDR, &data, 1, HAL_MAX_DELAY);
 800465e:	f107 020e 	add.w	r2, r7, #14
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2301      	movs	r3, #1
 800466a:	2138      	movs	r1, #56	; 0x38
 800466c:	4807      	ldr	r0, [pc, #28]	; (800468c <read8_i2c+0x7c>)
 800466e:	f7fd f8a3 	bl	80017b8 <HAL_I2C_Master_Receive>
 8004672:	4603      	mov	r3, r0
 8004674:	73fb      	strb	r3, [r7, #15]
		if(ret!=HAL_OK){
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <read8_i2c+0x70>

			Error_Handler();
 800467c:	f7fc f932 	bl	80008e4 <Error_Handler>
		}

		return data;
 8004680:	7bbb      	ldrb	r3, [r7, #14]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	2000008c 	.word	0x2000008c

08004690 <write8_i2c>:
 * @arg1 : register address
 * @arg2 : value to write
 * @ret  : return 0 if write ok otherwise go to error handler
*/
uint8_t write8_i2c(uint8_t reg, uint8_t value)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af02      	add	r7, sp, #8
 8004696:	4603      	mov	r3, r0
 8004698:	460a      	mov	r2, r1
 800469a:	71fb      	strb	r3, [r7, #7]
 800469c:	4613      	mov	r3, r2
 800469e:	71bb      	strb	r3, [r7, #6]
		uint8_t ret=0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
		uint8_t val[2]={0};
 80046a4:	2300      	movs	r3, #0
 80046a6:	81bb      	strh	r3, [r7, #12]
		val[0]=reg;
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	733b      	strb	r3, [r7, #12]
		val[1]=value;
 80046ac:	79bb      	ldrb	r3, [r7, #6]
 80046ae:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_GetState(I2C_HANDLE)!= HAL_I2C_STATE_READY);
 80046b0:	bf00      	nop
 80046b2:	480e      	ldr	r0, [pc, #56]	; (80046ec <write8_i2c+0x5c>)
 80046b4:	f7fd f976 	bl	80019a4 <HAL_I2C_GetState>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d1f9      	bne.n	80046b2 <write8_i2c+0x22>
		ret = HAL_I2C_Master_Transmit(I2C_HANDLE, DEV_ADDR, val, 2, HAL_MAX_DELAY);
 80046be:	f107 020c 	add.w	r2, r7, #12
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2302      	movs	r3, #2
 80046ca:	2138      	movs	r1, #56	; 0x38
 80046cc:	4807      	ldr	r0, [pc, #28]	; (80046ec <write8_i2c+0x5c>)
 80046ce:	f7fc ff7f 	bl	80015d0 <HAL_I2C_Master_Transmit>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
		if(ret!=HAL_OK){
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <write8_i2c+0x50>

			Error_Handler();
 80046dc:	f7fc f902 	bl	80008e4 <Error_Handler>
		}

		return 0;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	2000008c 	.word	0x2000008c

080046f0 <enable_slider>:

/*
 * @brief: enable slider
*/
void enable_slider(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
	write8_i2c(SLIDER_OPTIONS_REG, 0x80);
 80046f4:	2180      	movs	r1, #128	; 0x80
 80046f6:	200e      	movs	r0, #14
 80046f8:	f7ff ffca 	bl	8004690 <write8_i2c>
}
 80046fc:	bf00      	nop
 80046fe:	bd80      	pop	{r7, pc}

08004700 <key_detect>:
/*
 * @brief: detect key
 * @ret  : returns 1 if detected and 0 otherwise
*/
uint8_t key_detect(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
	uint8_t detectStatus = read8_i2c(DETECTION_STATUS_REG);
 8004706:	2002      	movs	r0, #2
 8004708:	f7ff ff82 	bl	8004610 <read8_i2c>
 800470c:	4603      	mov	r3, r0
 800470e:	71fb      	strb	r3, [r7, #7]
	if(is_bitSet(detectStatus,0))
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f000 f80a 	bl	800472e <is_bitSet>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <key_detect+0x24>
		return 1;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <key_detect+0x26>
	else
		return 0;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <is_bitSet>:
 * @arg1 : register value
 * @arg2 : position whose bit needs to be detected
 * @ret  : rerturns 1 if that bit is 1 otherwise returns 0
*/
uint8_t is_bitSet(uint8_t byte, uint8_t pos)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	460a      	mov	r2, r1
 8004738:	71fb      	strb	r3, [r7, #7]
 800473a:	4613      	mov	r3, r2
 800473c:	71bb      	strb	r3, [r7, #6]
	if(byte & (1 << pos))
 800473e:	79fa      	ldrb	r2, [r7, #7]
 8004740:	79bb      	ldrb	r3, [r7, #6]
 8004742:	fa42 f303 	asr.w	r3, r2, r3
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <is_bitSet+0x24>
		return 1;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <is_bitSet+0x26>
	else
		return 0;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <sliderPosition>:

/*
 * @brief: returns slider position
*/
uint8_t sliderPosition(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
	uint8_t position = read8_i2c(SLIDER_POSITION_REG);
 8004766:	2005      	movs	r0, #5
 8004768:	f7ff ff52 	bl	8004610 <read8_i2c>
 800476c:	4603      	mov	r3, r0
 800476e:	71fb      	strb	r3, [r7, #7]
	return position;
 8004770:	79fb      	ldrb	r3, [r7, #7]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <set_detectIntegrator>:

/*
 * @brief: set detection integrator
*/
void set_detectIntegrator(uint8_t value)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	71fb      	strb	r3, [r7, #7]
	if(value <= 0) value = 1;
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <set_detectIntegrator+0x14>
 800478a:	2301      	movs	r3, #1
 800478c:	71fb      	strb	r3, [r7, #7]
	if(value > 32) value = 32;
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	2b20      	cmp	r3, #32
 8004792:	d901      	bls.n	8004798 <set_detectIntegrator+0x1e>
 8004794:	2320      	movs	r3, #32
 8004796:	71fb      	strb	r3, [r7, #7]

	write8_i2c(DI_REG, value);
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	4619      	mov	r1, r3
 800479c:	200b      	movs	r0, #11
 800479e:	f7ff ff77 	bl	8004690 <write8_i2c>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <set_keyThreshold>:
 * @brief: set key threshold
 * @arg1 : key index
 * @arg2 : threshold
*/
void set_keyThreshold(uint8_t index, uint8_t threshold)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4603      	mov	r3, r0
 80047b2:	460a      	mov	r2, r1
 80047b4:	71fb      	strb	r3, [r7, #7]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71bb      	strb	r3, [r7, #6]
	if(index > 11) return;
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b0b      	cmp	r3, #11
 80047be:	d809      	bhi.n	80047d4 <set_keyThreshold+0x2a>
	uint8_t address = KEY0_DETECT_THRESHOLD_REG + index;
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	3310      	adds	r3, #16
 80047c4:	73fb      	strb	r3, [r7, #15]
	write8_i2c(address, threshold);
 80047c6:	79ba      	ldrb	r2, [r7, #6]
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff5f 	bl	8004690 <write8_i2c>
 80047d2:	e000      	b.n	80047d6 <set_keyThreshold+0x2c>
	if(index > 11) return;
 80047d4:	bf00      	nop
}
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <set_timeRecalDelay>:

/*
 * @brief: set time recalliberation delay
*/
void set_timeRecalDelay(uint8_t delay)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
	write8_i2c(TRD_REG, delay);
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	4619      	mov	r1, r3
 80047ea:	200c      	movs	r0, #12
 80047ec:	f7ff ff50 	bl	8004690 <write8_i2c>
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <set_TTD>:

/*
 * @brief: set towards touch detection
*/
void set_TTD(uint8_t value)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
	write8_i2c(TTD_REG, value);
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	4619      	mov	r1, r3
 8004806:	2009      	movs	r0, #9
 8004808:	f7ff ff42 	bl	8004690 <write8_i2c>
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <set_ATD>:

/*
 * @brief: set away from touch detection
*/
void set_ATD(uint8_t value)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
	write8_i2c(ATD_REG, value);
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	4619      	mov	r1, r3
 8004822:	200a      	movs	r0, #10
 8004824:	f7ff ff34 	bl	8004690 <write8_i2c>
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <set_DHT>:

/*
 * @brief: returns DHT value
*/
void set_DHT(uint8_t time)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
	write8_i2c(DHT_REG, time);
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	4619      	mov	r1, r3
 800483e:	200d      	movs	r0, #13
 8004840:	f7ff ff26 	bl	8004690 <write8_i2c>
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <touchSensor_Init>:

/*
 * @brief: touch sensor initialization function
*/
void touchSensor_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	  //check chip id
	  cid=check_cid();
 8004850:	f7ff fe9a 	bl	8004588 <check_cid>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <touchSensor_Init+0x50>)
 800485a:	701a      	strb	r2, [r3, #0]

	  //enable slider
	  enable_slider();
 800485c:	f7ff ff48 	bl	80046f0 <enable_slider>

	  //set key 0,1,2 threshold values
	  set_keyThreshold(0, KEYS_THRESHOLD);
 8004860:	2108      	movs	r1, #8
 8004862:	2000      	movs	r0, #0
 8004864:	f7ff ffa1 	bl	80047aa <set_keyThreshold>
	  set_keyThreshold(1, KEYS_THRESHOLD);
 8004868:	2108      	movs	r1, #8
 800486a:	2001      	movs	r0, #1
 800486c:	f7ff ff9d 	bl	80047aa <set_keyThreshold>
	  set_keyThreshold(2, KEYS_THRESHOLD);
 8004870:	2108      	movs	r1, #8
 8004872:	2002      	movs	r0, #2
 8004874:	f7ff ff99 	bl	80047aa <set_keyThreshold>

	  //set no. of samples before a valid key detect
	  set_detectIntegrator(3);
 8004878:	2003      	movs	r0, #3
 800487a:	f7ff ff7e 	bl	800477a <set_detectIntegrator>

	  //set re-caliberation timer(30 * 0.16s)
	  set_timeRecalDelay(30);
 800487e:	201e      	movs	r0, #30
 8004880:	f7ff ffac 	bl	80047dc <set_timeRecalDelay>

	  //set drift hold time, touch towards drift and touch away from drift
	  set_DHT(25);
 8004884:	2019      	movs	r0, #25
 8004886:	f7ff ffd3 	bl	8004830 <set_DHT>
	  set_TTD(6);
 800488a:	2006      	movs	r0, #6
 800488c:	f7ff ffb4 	bl	80047f8 <set_TTD>
	  set_ATD(5);
 8004890:	2005      	movs	r0, #5
 8004892:	f7ff ffbf 	bl	8004814 <set_ATD>
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	2000020d 	.word	0x2000020d

080048a0 <touchSensor_Process>:

/*
 * @brief: touch sensor process function
*/
void touchSensor_Process(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0

	tap_detect = 0;
 80048a4:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <touchSensor_Process+0x48>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
	slider_detected = 0;
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <touchSensor_Process+0x4c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

	 /*--------------------------SLIDER DIRECTION DETECTION + TAP DETECTION + HOLD DETECTION------------------------------*/
		touch_status = mvp_touch_forward_backward_tap_detect();
 80048b0:	f000 f89a 	bl	80049e8 <mvp_touch_forward_backward_tap_detect>
 80048b4:	4603      	mov	r3, r0
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <touchSensor_Process+0x50>)
 80048ba:	701a      	strb	r2, [r3, #0]

		  printf("Slider: %d\r\n", sliderPosition());
 80048bc:	f7ff ff50 	bl	8004760 <sliderPosition>
 80048c0:	4603      	mov	r3, r0
 80048c2:	4619      	mov	r1, r3
 80048c4:	480b      	ldr	r0, [pc, #44]	; (80048f4 <touchSensor_Process+0x54>)
 80048c6:	f000 faa7 	bl	8004e18 <iprintf>
		  slider_newVal = 0;
 80048ca:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <touchSensor_Process+0x58>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
		  slider_previousVal = 0;
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <touchSensor_Process+0x5c>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
		  slider_previousVal1 = 0;
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <touchSensor_Process+0x60>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
		  delay_us(100);
 80048dc:	2064      	movs	r0, #100	; 0x64
 80048de:	f000 f811 	bl	8004904 <delay_us>
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000020b 	.word	0x2000020b
 80048ec:	20000214 	.word	0x20000214
 80048f0:	2000020c 	.word	0x2000020c
 80048f4:	08005e38 	.word	0x08005e38
 80048f8:	20000210 	.word	0x20000210
 80048fc:	20000208 	.word	0x20000208
 8004900:	20000209 	.word	0x20000209

08004904 <delay_us>:
/*
 * @brief: function to provide delay using timer 2 (1ms time period)
 * @arg1 : value in milliseconds to provide required delay
*/
void delay_us (uint16_t us)
	  {
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	80fb      	strh	r3, [r7, #6]

	  	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <delay_us+0x30>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2200      	movs	r2, #0
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
	  	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8004916:	bf00      	nop
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <delay_us+0x30>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	429a      	cmp	r2, r3
 8004922:	d3f9      	bcc.n	8004918 <delay_us+0x14>
	  }
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	200000e4 	.word	0x200000e4

08004938 <HAL_TIM_PeriodElapsedCallback>:
/*
 * @brief: timer 5 callback function which has whole touch logic (20ms time period)
 * @arg1 : timer handle
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //20ms timer 5(gives interrupt)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a21      	ldr	r2, [pc, #132]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d13b      	bne.n	80049c2 <HAL_TIM_PeriodElapsedCallback+0x8a>
	{
		if(key_detect())
 800494a:	f7ff fed9 	bl	8004700 <key_detect>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			  press++;
 8004954:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800495e:	701a      	strb	r2, [r3, #0]
			  if(press == 1)
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <HAL_TIM_PeriodElapsedCallback+0x3c>
			  {
			  slider_previousVal = sliderPosition();
 8004968:	f7ff fefa 	bl	8004760 <sliderPosition>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004972:	701a      	strb	r2, [r3, #0]
			  }
			  release = 0;
 8004974:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
				press = 0;

		}

	}
}
 800497a:	e022      	b.n	80049c2 <HAL_TIM_PeriodElapsedCallback+0x8a>
			release++;
 800497c:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004986:	701a      	strb	r2, [r3, #0]
			if(release == 1)
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d115      	bne.n	80049bc <HAL_TIM_PeriodElapsedCallback+0x84>
				slider_previousVal1 = sliderPosition();
 8004990:	f7ff fee6 	bl	8004760 <sliderPosition>
 8004994:	4603      	mov	r3, r0
 8004996:	461a      	mov	r2, r3
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800499a:	701a      	strb	r2, [r3, #0]
				touchSensor_Process();
 800499c:	f7ff ff80 	bl	80048a0 <touchSensor_Process>
				if(press > 50 && press < 250)
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b32      	cmp	r3, #50	; 0x32
 80049a6:	d909      	bls.n	80049bc <HAL_TIM_PeriodElapsedCallback+0x84>
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2bf9      	cmp	r3, #249	; 0xf9
 80049ae:	d805      	bhi.n	80049bc <HAL_TIM_PeriodElapsedCallback+0x84>
					printf("\t\tHold Detected\r\n");
 80049b0:	480b      	ldr	r0, [pc, #44]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80049b2:	f000 fab7 	bl	8004f24 <puts>
					touch_status = HOLD;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
				press = 0;
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	20000220 	.word	0x20000220
 80049d4:	20000208 	.word	0x20000208
 80049d8:	20000221 	.word	0x20000221
 80049dc:	20000209 	.word	0x20000209
 80049e0:	08005e48 	.word	0x08005e48
 80049e4:	2000020c 	.word	0x2000020c

080049e8 <mvp_touch_forward_backward_tap_detect>:
/*
 * @brief: function with forward and backward slide logic with single tap detection logic
 * @ret  : returns forward/backward/tap detection status(check enum in at42qt2120.h)
*/
int8_t mvp_touch_forward_backward_tap_detect(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	 	  sl_prev_val = sl_new_val;
 80049ec:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <mvp_touch_forward_backward_tap_detect+0xbc>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2d      	ldr	r2, [pc, #180]	; (8004aa8 <mvp_touch_forward_backward_tap_detect+0xc0>)
 80049f2:	6013      	str	r3, [r2, #0]
	      sl_new_val = slider_previousVal1;
 80049f4:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <mvp_touch_forward_backward_tap_detect+0xc4>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <mvp_touch_forward_backward_tap_detect+0xbc>)
 80049fc:	601a      	str	r2, [r3, #0]
	      //compare that position with previous value
	      if(sl_new_val != sl_prev_val)
 80049fe:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <mvp_touch_forward_backward_tap_detect+0xbc>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <mvp_touch_forward_backward_tap_detect+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d007      	beq.n	8004a1a <mvp_touch_forward_backward_tap_detect+0x32>
	      {
	    	  slider_newVal = slider_previousVal1 - slider_previousVal;
 8004a0a:	4b28      	ldr	r3, [pc, #160]	; (8004aac <mvp_touch_forward_backward_tap_detect+0xc4>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <mvp_touch_forward_backward_tap_detect+0xc8>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a18:	6013      	str	r3, [r2, #0]
	      }

		  //print direction of slide
		  if(slider_newVal > 0 && slider_newVal >= SLIDER_SENSITIVITY){
 8004a1a:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	dd0b      	ble.n	8004a3a <mvp_touch_forward_backward_tap_detect+0x52>
 8004a22:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b59      	cmp	r3, #89	; 0x59
 8004a28:	dd07      	ble.n	8004a3a <mvp_touch_forward_backward_tap_detect+0x52>
			  printf("Slider FORWARD Direction\r\n");
 8004a2a:	4823      	ldr	r0, [pc, #140]	; (8004ab8 <mvp_touch_forward_backward_tap_detect+0xd0>)
 8004a2c:	f000 fa7a 	bl	8004f24 <puts>
			  slider_detected = 1;
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <mvp_touch_forward_backward_tap_detect+0xd4>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
			  return SLIDE_FORWARD;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e032      	b.n	8004aa0 <mvp_touch_forward_backward_tap_detect+0xb8>
		  }
		  else if(slider_newVal < 0 && slider_newVal <= -SLIDER_SENSITIVITY){
 8004a3a:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da0c      	bge.n	8004a5c <mvp_touch_forward_backward_tap_detect+0x74>
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8004a4a:	da07      	bge.n	8004a5c <mvp_touch_forward_backward_tap_detect+0x74>
			  printf("Slider BACKWARD Direction\r\n");
 8004a4c:	481c      	ldr	r0, [pc, #112]	; (8004ac0 <mvp_touch_forward_backward_tap_detect+0xd8>)
 8004a4e:	f000 fa69 	bl	8004f24 <puts>
			  slider_detected = 1;
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <mvp_touch_forward_backward_tap_detect+0xd4>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
			  return SLIDE_BACKWARD;
 8004a58:	2304      	movs	r3, #4
 8004a5a:	e021      	b.n	8004aa0 <mvp_touch_forward_backward_tap_detect+0xb8>
		  }
		  else if(1)
		  {
			  if(slider_newVal < 0)
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da07      	bge.n	8004a74 <mvp_touch_forward_backward_tap_detect+0x8c>
				  tap_speed = -slider_newVal;
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	425b      	negs	r3, r3
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <mvp_touch_forward_backward_tap_detect+0xdc>)
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e004      	b.n	8004a7e <mvp_touch_forward_backward_tap_detect+0x96>
			  else
				  tap_speed = slider_newVal;
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <mvp_touch_forward_backward_tap_detect+0xcc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <mvp_touch_forward_backward_tap_detect+0xdc>)
 8004a7c:	701a      	strb	r2, [r3, #0]
			  if(tap_speed < TAP_SENSITIVITY && tap_speed > 0)
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <mvp_touch_forward_backward_tap_detect+0xdc>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b1d      	cmp	r3, #29
 8004a84:	d80b      	bhi.n	8004a9e <mvp_touch_forward_backward_tap_detect+0xb6>
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <mvp_touch_forward_backward_tap_detect+0xdc>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <mvp_touch_forward_backward_tap_detect+0xb6>
			  {
				  printf("\tTap Detected\r\n");
 8004a8e:	480e      	ldr	r0, [pc, #56]	; (8004ac8 <mvp_touch_forward_backward_tap_detect+0xe0>)
 8004a90:	f000 fa48 	bl	8004f24 <puts>
				  tap_detect = 1;
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <mvp_touch_forward_backward_tap_detect+0xe4>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
				  return TAP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e000      	b.n	8004aa0 <mvp_touch_forward_backward_tap_detect+0xb8>
			  }
		  }

			  return NO_TOUCH;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	2000021c 	.word	0x2000021c
 8004aa8:	20000218 	.word	0x20000218
 8004aac:	20000209 	.word	0x20000209
 8004ab0:	20000208 	.word	0x20000208
 8004ab4:	20000210 	.word	0x20000210
 8004ab8:	08005e5c 	.word	0x08005e5c
 8004abc:	20000214 	.word	0x20000214
 8004ac0:	08005e78 	.word	0x08005e78
 8004ac4:	2000020a 	.word	0x2000020a
 8004ac8:	08005e94 	.word	0x08005e94
 8004acc:	2000020b 	.word	0x2000020b

08004ad0 <__io_putchar>:


//@brief: This function is used to print values on uart using printf
//@note : used with UART support only
//extern "C" {
int __io_putchar(uint8_t ch){
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, &ch, sizeof(ch), HAL_MAX_DELAY);
 8004ada:	1df9      	adds	r1, r7, #7
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4804      	ldr	r0, [pc, #16]	; (8004af4 <__io_putchar+0x24>)
 8004ae4:	f7ff f8b2 	bl	8003c4c <HAL_UART_Transmit>

	return ch;
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	2000017c 	.word	0x2000017c

08004af8 <_ZN16Appfruits_QTouchC1Ev>:
//Appfruits_QTouch::Appfruits_QTouch(uint8_t changePin)

#define QT_Handler &hi2c1


Appfruits_QTouch::Appfruits_QTouch()
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
{
	_delegate = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
	//_changePin = changePin;
	
	
	for (int i=0;i<QT2120_NUMBER_OF_SAMPLES;i++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dc0b      	bgt.n	8004b28 <_ZN16Appfruits_QTouchC1Ev+0x30>
	{
		_deltas[i] = 0.0f;
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3304      	adds	r3, #4
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
	for (int i=0;i<QT2120_NUMBER_OF_SAMPLES;i++)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e7f0      	b.n	8004b0a <_ZN16Appfruits_QTouchC1Ev+0x12>
	}
	_currentDelta = 0;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	751a      	strb	r2, [r3, #20]

}
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_ZN16Appfruits_QTouch11setDelegateEP25Appfruits_QTouch_Delegate>:
{
	return this->_lastSliderPos;
}

void Appfruits_QTouch::setDelegate(Appfruits_QTouch_Delegate *delegate)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
	this->_delegate = delegate;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <_Z41__static_initialization_and_destruction_0ii>:
	return false;
}


#ifdef __cplusplus
}
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10b      	bne.n	8004b80 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d106      	bne.n	8004b80 <_Z41__static_initialization_and_destruction_0ii+0x28>
Appfruits_QTouch qtouch = Appfruits_QTouch();
 8004b72:	4805      	ldr	r0, [pc, #20]	; (8004b88 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8004b74:	f7ff ffc0 	bl	8004af8 <_ZN16Appfruits_QTouchC1Ev>
TouchWheel touchWheel(&qtouch);
 8004b78:	4903      	ldr	r1, [pc, #12]	; (8004b88 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8004b7a:	4804      	ldr	r0, [pc, #16]	; (8004b8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004b7c:	f000 f870 	bl	8004c60 <_ZN10TouchWheelC1EP16Appfruits_QTouch>
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000224 	.word	0x20000224
 8004b8c:	2000023c 	.word	0x2000023c

08004b90 <_GLOBAL__sub_I_qtouch>:
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f7ff ffdd 	bl	8004b58 <_Z41__static_initialization_and_destruction_0ii>
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_ZN25Appfruits_QTouch_Delegate24onTouchLeftButtonPressedEm>:
#define millis() HAL_GetTick()/1000

class Appfruits_QTouch_Delegate
{
public:
  virtual void onTouchLeftButtonPressed(uint32_t duration) {};
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <_ZN25Appfruits_QTouch_Delegate23onTouchTopButtonPressedEm>:
  virtual void onTouchTopButtonPressed(uint32_t duration) {};
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <_ZN25Appfruits_QTouch_Delegate25onTouchRightButtonPressedEm>:
  virtual void onTouchRightButtonPressed(uint32_t duration) {};
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <_ZN25Appfruits_QTouch_Delegate26onTouchBottomButtonPressedEm>:
  virtual void onTouchBottomButtonPressed(uint32_t duration) {};
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <_ZN25Appfruits_QTouch_Delegate8onSliderEha>:

  virtual void onSlider(uint8_t sliderPos, int8_t sliderDelta) {};
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
 8004c04:	4613      	mov	r3, r2
 8004c06:	70bb      	strb	r3, [r7, #2]
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <_ZN25Appfruits_QTouch_Delegate11onTouchDownEv>:
  virtual void onTouchDown() {};
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <_ZN25Appfruits_QTouch_Delegate9onTouchUpEm>:
  virtual void onTouchUp(uint32_t duration) {};
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <_ZN25Appfruits_QTouch_DelegateC1Ev>:
class Appfruits_QTouch_Delegate
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <_ZN25Appfruits_QTouch_DelegateC1Ev+0x1c>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	08005ee8 	.word	0x08005ee8

08004c60 <_ZN10TouchWheelC1EP16Appfruits_QTouch>:
 * MIT-License
 */

#include "TouchWheel.h"

TouchWheel::TouchWheel(Appfruits_QTouch* driver)
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff ffe7 	bl	8004c40 <_ZN25Appfruits_QTouch_DelegateC1Ev>
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <_ZN10TouchWheelC1EP16Appfruits_QTouch+0x3c>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
{
	this->_driver = driver;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	609a      	str	r2, [r3, #8]
	this->_driver->setDelegate(this);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ff58 	bl	8004b3c <_ZN16Appfruits_QTouch11setDelegateEP25Appfruits_QTouch_Delegate>
	this->resetStates();
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f807 	bl	8004ca0 <_ZN10TouchWheel11resetStatesEv>
}
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	08005ec4 	.word	0x08005ec4

08004ca0 <_ZN10TouchWheel11resetStatesEv>:
		}
	}
}

void TouchWheel::resetStates()
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	for (int i=0;i<4;i++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	dc0a      	bgt.n	8004cc8 <_ZN10TouchWheel11resetStatesEv+0x28>
	{
		this->_button[i] = 0;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
	for (int i=0;i<4;i++)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e7f1      	b.n	8004cac <_ZN10TouchWheel11resetStatesEv+0xc>
	}

	this->_sliderDelta = 0;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	719a      	strb	r2, [r3, #6]
	this->_sliderPos = 0;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	71da      	strb	r2, [r3, #7]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_ZN10TouchWheel24onTouchLeftButtonPressedEm>:
{
	return this->_sliderPos;
}

void TouchWheel::onTouchLeftButtonPressed(uint32_t duration)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
	_button[Direction::Left] = duration;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	60da      	str	r2, [r3, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <_ZN10TouchWheel23onTouchTopButtonPressedEm>:

void TouchWheel::onTouchTopButtonPressed(uint32_t duration)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	_button[Direction::Top] = duration;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	611a      	str	r2, [r3, #16]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <_ZN10TouchWheel25onTouchRightButtonPressedEm>:

void TouchWheel::onTouchRightButtonPressed(uint32_t duration)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	_button[Direction::Right] = duration;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	615a      	str	r2, [r3, #20]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_ZN10TouchWheel26onTouchBottomButtonPressedEm>:

void TouchWheel::onTouchBottomButtonPressed(uint32_t duration)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
	_button[Direction::Bottom] = duration;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	619a      	str	r2, [r3, #24]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <_ZN10TouchWheel8onSliderEha>:

void TouchWheel::onSlider(uint8_t sliderPos, int8_t sliderDelta)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	70bb      	strb	r3, [r7, #2]
	//LOG_VALUE("Slider detected",sliderDelta);
	this->_sliderPos = sliderPos;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	71da      	strb	r2, [r3, #7]
	this->_sliderDelta = sliderDelta;
 8004d66:	78ba      	ldrb	r2, [r7, #2]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	719a      	strb	r2, [r3, #6]

	this->_sliding = true;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	711a      	strb	r2, [r3, #4]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <_ZN10TouchWheel11onTouchDownEv>:

void TouchWheel::onTouchDown()
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
	this->_touching = true;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	715a      	strb	r2, [r3, #5]
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <_ZN10TouchWheel9onTouchUpEm>:

void TouchWheel::onTouchUp(uint32_t duration)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
	this->_touching = false;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	715a      	strb	r2, [r3, #5]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <__errno>:
 8004db4:	4b01      	ldr	r3, [pc, #4]	; (8004dbc <__errno+0x8>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <__libc_init_array>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4d0d      	ldr	r5, [pc, #52]	; (8004df8 <__libc_init_array+0x38>)
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	; (8004dfc <__libc_init_array+0x3c>)
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	2600      	movs	r6, #0
 8004dcc:	42a6      	cmp	r6, r4
 8004dce:	d109      	bne.n	8004de4 <__libc_init_array+0x24>
 8004dd0:	4d0b      	ldr	r5, [pc, #44]	; (8004e00 <__libc_init_array+0x40>)
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	; (8004e04 <__libc_init_array+0x44>)
 8004dd4:	f001 f824 	bl	8005e20 <_init>
 8004dd8:	1b64      	subs	r4, r4, r5
 8004dda:	10a4      	asrs	r4, r4, #2
 8004ddc:	2600      	movs	r6, #0
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	d105      	bne.n	8004dee <__libc_init_array+0x2e>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de8:	4798      	blx	r3
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7ee      	b.n	8004dcc <__libc_init_array+0xc>
 8004dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df2:	4798      	blx	r3
 8004df4:	3601      	adds	r6, #1
 8004df6:	e7f2      	b.n	8004dde <__libc_init_array+0x1e>
 8004df8:	08005fa4 	.word	0x08005fa4
 8004dfc:	08005fa4 	.word	0x08005fa4
 8004e00:	08005fa4 	.word	0x08005fa4
 8004e04:	08005fac 	.word	0x08005fac

08004e08 <memset>:
 8004e08:	4402      	add	r2, r0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <iprintf>:
 8004e18:	b40f      	push	{r0, r1, r2, r3}
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <iprintf+0x2c>)
 8004e1c:	b513      	push	{r0, r1, r4, lr}
 8004e1e:	681c      	ldr	r4, [r3, #0]
 8004e20:	b124      	cbz	r4, 8004e2c <iprintf+0x14>
 8004e22:	69a3      	ldr	r3, [r4, #24]
 8004e24:	b913      	cbnz	r3, 8004e2c <iprintf+0x14>
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 fa5e 	bl	80052e8 <__sinit>
 8004e2c:	ab05      	add	r3, sp, #20
 8004e2e:	9a04      	ldr	r2, [sp, #16]
 8004e30:	68a1      	ldr	r1, [r4, #8]
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	4620      	mov	r0, r4
 8004e36:	f000 fc67 	bl	8005708 <_vfiprintf_r>
 8004e3a:	b002      	add	sp, #8
 8004e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e40:	b004      	add	sp, #16
 8004e42:	4770      	bx	lr
 8004e44:	2000000c 	.word	0x2000000c

08004e48 <_puts_r>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	460e      	mov	r6, r1
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	b118      	cbz	r0, 8004e58 <_puts_r+0x10>
 8004e50:	6983      	ldr	r3, [r0, #24]
 8004e52:	b90b      	cbnz	r3, 8004e58 <_puts_r+0x10>
 8004e54:	f000 fa48 	bl	80052e8 <__sinit>
 8004e58:	69ab      	ldr	r3, [r5, #24]
 8004e5a:	68ac      	ldr	r4, [r5, #8]
 8004e5c:	b913      	cbnz	r3, 8004e64 <_puts_r+0x1c>
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 fa42 	bl	80052e8 <__sinit>
 8004e64:	4b2c      	ldr	r3, [pc, #176]	; (8004f18 <_puts_r+0xd0>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d120      	bne.n	8004eac <_puts_r+0x64>
 8004e6a:	686c      	ldr	r4, [r5, #4]
 8004e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e6e:	07db      	lsls	r3, r3, #31
 8004e70:	d405      	bmi.n	8004e7e <_puts_r+0x36>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	0598      	lsls	r0, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_puts_r+0x36>
 8004e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7a:	f000 fad3 	bl	8005424 <__retarget_lock_acquire_recursive>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	0719      	lsls	r1, r3, #28
 8004e82:	d51d      	bpl.n	8004ec0 <_puts_r+0x78>
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	b1db      	cbz	r3, 8004ec0 <_puts_r+0x78>
 8004e88:	3e01      	subs	r6, #1
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e90:	3b01      	subs	r3, #1
 8004e92:	60a3      	str	r3, [r4, #8]
 8004e94:	bb39      	cbnz	r1, 8004ee6 <_puts_r+0x9e>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da38      	bge.n	8004f0c <_puts_r+0xc4>
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	210a      	movs	r1, #10
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 f848 	bl	8004f34 <__swbuf_r>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d011      	beq.n	8004ecc <_puts_r+0x84>
 8004ea8:	250a      	movs	r5, #10
 8004eaa:	e011      	b.n	8004ed0 <_puts_r+0x88>
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <_puts_r+0xd4>)
 8004eae:	429c      	cmp	r4, r3
 8004eb0:	d101      	bne.n	8004eb6 <_puts_r+0x6e>
 8004eb2:	68ac      	ldr	r4, [r5, #8]
 8004eb4:	e7da      	b.n	8004e6c <_puts_r+0x24>
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <_puts_r+0xd8>)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	bf08      	it	eq
 8004ebc:	68ec      	ldreq	r4, [r5, #12]
 8004ebe:	e7d5      	b.n	8004e6c <_puts_r+0x24>
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 f888 	bl	8004fd8 <__swsetup_r>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d0dd      	beq.n	8004e88 <_puts_r+0x40>
 8004ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8004ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed2:	07da      	lsls	r2, r3, #31
 8004ed4:	d405      	bmi.n	8004ee2 <_puts_r+0x9a>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	059b      	lsls	r3, r3, #22
 8004eda:	d402      	bmi.n	8004ee2 <_puts_r+0x9a>
 8004edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ede:	f000 faa2 	bl	8005426 <__retarget_lock_release_recursive>
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da04      	bge.n	8004ef4 <_puts_r+0xac>
 8004eea:	69a2      	ldr	r2, [r4, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	dc06      	bgt.n	8004efe <_puts_r+0xb6>
 8004ef0:	290a      	cmp	r1, #10
 8004ef2:	d004      	beq.n	8004efe <_puts_r+0xb6>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	6022      	str	r2, [r4, #0]
 8004efa:	7019      	strb	r1, [r3, #0]
 8004efc:	e7c5      	b.n	8004e8a <_puts_r+0x42>
 8004efe:	4622      	mov	r2, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 f817 	bl	8004f34 <__swbuf_r>
 8004f06:	3001      	adds	r0, #1
 8004f08:	d1bf      	bne.n	8004e8a <_puts_r+0x42>
 8004f0a:	e7df      	b.n	8004ecc <_puts_r+0x84>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	250a      	movs	r5, #10
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	6022      	str	r2, [r4, #0]
 8004f14:	701d      	strb	r5, [r3, #0]
 8004f16:	e7db      	b.n	8004ed0 <_puts_r+0x88>
 8004f18:	08005f28 	.word	0x08005f28
 8004f1c:	08005f48 	.word	0x08005f48
 8004f20:	08005f08 	.word	0x08005f08

08004f24 <puts>:
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <puts+0xc>)
 8004f26:	4601      	mov	r1, r0
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	f7ff bf8d 	b.w	8004e48 <_puts_r>
 8004f2e:	bf00      	nop
 8004f30:	2000000c 	.word	0x2000000c

08004f34 <__swbuf_r>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	460e      	mov	r6, r1
 8004f38:	4614      	mov	r4, r2
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	b118      	cbz	r0, 8004f46 <__swbuf_r+0x12>
 8004f3e:	6983      	ldr	r3, [r0, #24]
 8004f40:	b90b      	cbnz	r3, 8004f46 <__swbuf_r+0x12>
 8004f42:	f000 f9d1 	bl	80052e8 <__sinit>
 8004f46:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <__swbuf_r+0x98>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	d12b      	bne.n	8004fa4 <__swbuf_r+0x70>
 8004f4c:	686c      	ldr	r4, [r5, #4]
 8004f4e:	69a3      	ldr	r3, [r4, #24]
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	071a      	lsls	r2, r3, #28
 8004f56:	d52f      	bpl.n	8004fb8 <__swbuf_r+0x84>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	b36b      	cbz	r3, 8004fb8 <__swbuf_r+0x84>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	6820      	ldr	r0, [r4, #0]
 8004f60:	1ac0      	subs	r0, r0, r3
 8004f62:	6963      	ldr	r3, [r4, #20]
 8004f64:	b2f6      	uxtb	r6, r6
 8004f66:	4283      	cmp	r3, r0
 8004f68:	4637      	mov	r7, r6
 8004f6a:	dc04      	bgt.n	8004f76 <__swbuf_r+0x42>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f000 f926 	bl	80051c0 <_fflush_r>
 8004f74:	bb30      	cbnz	r0, 8004fc4 <__swbuf_r+0x90>
 8004f76:	68a3      	ldr	r3, [r4, #8]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	60a3      	str	r3, [r4, #8]
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	6022      	str	r2, [r4, #0]
 8004f82:	701e      	strb	r6, [r3, #0]
 8004f84:	6963      	ldr	r3, [r4, #20]
 8004f86:	3001      	adds	r0, #1
 8004f88:	4283      	cmp	r3, r0
 8004f8a:	d004      	beq.n	8004f96 <__swbuf_r+0x62>
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	07db      	lsls	r3, r3, #31
 8004f90:	d506      	bpl.n	8004fa0 <__swbuf_r+0x6c>
 8004f92:	2e0a      	cmp	r6, #10
 8004f94:	d104      	bne.n	8004fa0 <__swbuf_r+0x6c>
 8004f96:	4621      	mov	r1, r4
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 f911 	bl	80051c0 <_fflush_r>
 8004f9e:	b988      	cbnz	r0, 8004fc4 <__swbuf_r+0x90>
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <__swbuf_r+0x9c>)
 8004fa6:	429c      	cmp	r4, r3
 8004fa8:	d101      	bne.n	8004fae <__swbuf_r+0x7a>
 8004faa:	68ac      	ldr	r4, [r5, #8]
 8004fac:	e7cf      	b.n	8004f4e <__swbuf_r+0x1a>
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <__swbuf_r+0xa0>)
 8004fb0:	429c      	cmp	r4, r3
 8004fb2:	bf08      	it	eq
 8004fb4:	68ec      	ldreq	r4, [r5, #12]
 8004fb6:	e7ca      	b.n	8004f4e <__swbuf_r+0x1a>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 f80c 	bl	8004fd8 <__swsetup_r>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d0cb      	beq.n	8004f5c <__swbuf_r+0x28>
 8004fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8004fc8:	e7ea      	b.n	8004fa0 <__swbuf_r+0x6c>
 8004fca:	bf00      	nop
 8004fcc:	08005f28 	.word	0x08005f28
 8004fd0:	08005f48 	.word	0x08005f48
 8004fd4:	08005f08 	.word	0x08005f08

08004fd8 <__swsetup_r>:
 8004fd8:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <__swsetup_r+0xcc>)
 8004fda:	b570      	push	{r4, r5, r6, lr}
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	b125      	cbz	r5, 8004fee <__swsetup_r+0x16>
 8004fe4:	69ab      	ldr	r3, [r5, #24]
 8004fe6:	b913      	cbnz	r3, 8004fee <__swsetup_r+0x16>
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 f97d 	bl	80052e8 <__sinit>
 8004fee:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <__swsetup_r+0xd0>)
 8004ff0:	429c      	cmp	r4, r3
 8004ff2:	d10f      	bne.n	8005014 <__swsetup_r+0x3c>
 8004ff4:	686c      	ldr	r4, [r5, #4]
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ffc:	0719      	lsls	r1, r3, #28
 8004ffe:	d42c      	bmi.n	800505a <__swsetup_r+0x82>
 8005000:	06dd      	lsls	r5, r3, #27
 8005002:	d411      	bmi.n	8005028 <__swsetup_r+0x50>
 8005004:	2309      	movs	r3, #9
 8005006:	6033      	str	r3, [r6, #0]
 8005008:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	f04f 30ff 	mov.w	r0, #4294967295
 8005012:	e03e      	b.n	8005092 <__swsetup_r+0xba>
 8005014:	4b25      	ldr	r3, [pc, #148]	; (80050ac <__swsetup_r+0xd4>)
 8005016:	429c      	cmp	r4, r3
 8005018:	d101      	bne.n	800501e <__swsetup_r+0x46>
 800501a:	68ac      	ldr	r4, [r5, #8]
 800501c:	e7eb      	b.n	8004ff6 <__swsetup_r+0x1e>
 800501e:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <__swsetup_r+0xd8>)
 8005020:	429c      	cmp	r4, r3
 8005022:	bf08      	it	eq
 8005024:	68ec      	ldreq	r4, [r5, #12]
 8005026:	e7e6      	b.n	8004ff6 <__swsetup_r+0x1e>
 8005028:	0758      	lsls	r0, r3, #29
 800502a:	d512      	bpl.n	8005052 <__swsetup_r+0x7a>
 800502c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800502e:	b141      	cbz	r1, 8005042 <__swsetup_r+0x6a>
 8005030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005034:	4299      	cmp	r1, r3
 8005036:	d002      	beq.n	800503e <__swsetup_r+0x66>
 8005038:	4630      	mov	r0, r6
 800503a:	f000 fa5b 	bl	80054f4 <_free_r>
 800503e:	2300      	movs	r3, #0
 8005040:	6363      	str	r3, [r4, #52]	; 0x34
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	2300      	movs	r3, #0
 800504c:	6063      	str	r3, [r4, #4]
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	f043 0308 	orr.w	r3, r3, #8
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	b94b      	cbnz	r3, 8005072 <__swsetup_r+0x9a>
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005068:	d003      	beq.n	8005072 <__swsetup_r+0x9a>
 800506a:	4621      	mov	r1, r4
 800506c:	4630      	mov	r0, r6
 800506e:	f000 fa01 	bl	8005474 <__smakebuf_r>
 8005072:	89a0      	ldrh	r0, [r4, #12]
 8005074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005078:	f010 0301 	ands.w	r3, r0, #1
 800507c:	d00a      	beq.n	8005094 <__swsetup_r+0xbc>
 800507e:	2300      	movs	r3, #0
 8005080:	60a3      	str	r3, [r4, #8]
 8005082:	6963      	ldr	r3, [r4, #20]
 8005084:	425b      	negs	r3, r3
 8005086:	61a3      	str	r3, [r4, #24]
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	b943      	cbnz	r3, 800509e <__swsetup_r+0xc6>
 800508c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005090:	d1ba      	bne.n	8005008 <__swsetup_r+0x30>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	0781      	lsls	r1, r0, #30
 8005096:	bf58      	it	pl
 8005098:	6963      	ldrpl	r3, [r4, #20]
 800509a:	60a3      	str	r3, [r4, #8]
 800509c:	e7f4      	b.n	8005088 <__swsetup_r+0xb0>
 800509e:	2000      	movs	r0, #0
 80050a0:	e7f7      	b.n	8005092 <__swsetup_r+0xba>
 80050a2:	bf00      	nop
 80050a4:	2000000c 	.word	0x2000000c
 80050a8:	08005f28 	.word	0x08005f28
 80050ac:	08005f48 	.word	0x08005f48
 80050b0:	08005f08 	.word	0x08005f08

080050b4 <__sflush_r>:
 80050b4:	898a      	ldrh	r2, [r1, #12]
 80050b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ba:	4605      	mov	r5, r0
 80050bc:	0710      	lsls	r0, r2, #28
 80050be:	460c      	mov	r4, r1
 80050c0:	d458      	bmi.n	8005174 <__sflush_r+0xc0>
 80050c2:	684b      	ldr	r3, [r1, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dc05      	bgt.n	80050d4 <__sflush_r+0x20>
 80050c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dc02      	bgt.n	80050d4 <__sflush_r+0x20>
 80050ce:	2000      	movs	r0, #0
 80050d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050d6:	2e00      	cmp	r6, #0
 80050d8:	d0f9      	beq.n	80050ce <__sflush_r+0x1a>
 80050da:	2300      	movs	r3, #0
 80050dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050e0:	682f      	ldr	r7, [r5, #0]
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	d032      	beq.n	800514c <__sflush_r+0x98>
 80050e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	075a      	lsls	r2, r3, #29
 80050ec:	d505      	bpl.n	80050fa <__sflush_r+0x46>
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	1ac0      	subs	r0, r0, r3
 80050f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050f4:	b10b      	cbz	r3, 80050fa <__sflush_r+0x46>
 80050f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050f8:	1ac0      	subs	r0, r0, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	4602      	mov	r2, r0
 80050fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005100:	6a21      	ldr	r1, [r4, #32]
 8005102:	4628      	mov	r0, r5
 8005104:	47b0      	blx	r6
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	d106      	bne.n	800511a <__sflush_r+0x66>
 800510c:	6829      	ldr	r1, [r5, #0]
 800510e:	291d      	cmp	r1, #29
 8005110:	d82c      	bhi.n	800516c <__sflush_r+0xb8>
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <__sflush_r+0x108>)
 8005114:	40ca      	lsrs	r2, r1
 8005116:	07d6      	lsls	r6, r2, #31
 8005118:	d528      	bpl.n	800516c <__sflush_r+0xb8>
 800511a:	2200      	movs	r2, #0
 800511c:	6062      	str	r2, [r4, #4]
 800511e:	04d9      	lsls	r1, r3, #19
 8005120:	6922      	ldr	r2, [r4, #16]
 8005122:	6022      	str	r2, [r4, #0]
 8005124:	d504      	bpl.n	8005130 <__sflush_r+0x7c>
 8005126:	1c42      	adds	r2, r0, #1
 8005128:	d101      	bne.n	800512e <__sflush_r+0x7a>
 800512a:	682b      	ldr	r3, [r5, #0]
 800512c:	b903      	cbnz	r3, 8005130 <__sflush_r+0x7c>
 800512e:	6560      	str	r0, [r4, #84]	; 0x54
 8005130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005132:	602f      	str	r7, [r5, #0]
 8005134:	2900      	cmp	r1, #0
 8005136:	d0ca      	beq.n	80050ce <__sflush_r+0x1a>
 8005138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800513c:	4299      	cmp	r1, r3
 800513e:	d002      	beq.n	8005146 <__sflush_r+0x92>
 8005140:	4628      	mov	r0, r5
 8005142:	f000 f9d7 	bl	80054f4 <_free_r>
 8005146:	2000      	movs	r0, #0
 8005148:	6360      	str	r0, [r4, #52]	; 0x34
 800514a:	e7c1      	b.n	80050d0 <__sflush_r+0x1c>
 800514c:	6a21      	ldr	r1, [r4, #32]
 800514e:	2301      	movs	r3, #1
 8005150:	4628      	mov	r0, r5
 8005152:	47b0      	blx	r6
 8005154:	1c41      	adds	r1, r0, #1
 8005156:	d1c7      	bne.n	80050e8 <__sflush_r+0x34>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0c4      	beq.n	80050e8 <__sflush_r+0x34>
 800515e:	2b1d      	cmp	r3, #29
 8005160:	d001      	beq.n	8005166 <__sflush_r+0xb2>
 8005162:	2b16      	cmp	r3, #22
 8005164:	d101      	bne.n	800516a <__sflush_r+0xb6>
 8005166:	602f      	str	r7, [r5, #0]
 8005168:	e7b1      	b.n	80050ce <__sflush_r+0x1a>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	e7ad      	b.n	80050d0 <__sflush_r+0x1c>
 8005174:	690f      	ldr	r7, [r1, #16]
 8005176:	2f00      	cmp	r7, #0
 8005178:	d0a9      	beq.n	80050ce <__sflush_r+0x1a>
 800517a:	0793      	lsls	r3, r2, #30
 800517c:	680e      	ldr	r6, [r1, #0]
 800517e:	bf08      	it	eq
 8005180:	694b      	ldreq	r3, [r1, #20]
 8005182:	600f      	str	r7, [r1, #0]
 8005184:	bf18      	it	ne
 8005186:	2300      	movne	r3, #0
 8005188:	eba6 0807 	sub.w	r8, r6, r7
 800518c:	608b      	str	r3, [r1, #8]
 800518e:	f1b8 0f00 	cmp.w	r8, #0
 8005192:	dd9c      	ble.n	80050ce <__sflush_r+0x1a>
 8005194:	6a21      	ldr	r1, [r4, #32]
 8005196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005198:	4643      	mov	r3, r8
 800519a:	463a      	mov	r2, r7
 800519c:	4628      	mov	r0, r5
 800519e:	47b0      	blx	r6
 80051a0:	2800      	cmp	r0, #0
 80051a2:	dc06      	bgt.n	80051b2 <__sflush_r+0xfe>
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051aa:	81a3      	strh	r3, [r4, #12]
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e78e      	b.n	80050d0 <__sflush_r+0x1c>
 80051b2:	4407      	add	r7, r0
 80051b4:	eba8 0800 	sub.w	r8, r8, r0
 80051b8:	e7e9      	b.n	800518e <__sflush_r+0xda>
 80051ba:	bf00      	nop
 80051bc:	20400001 	.word	0x20400001

080051c0 <_fflush_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	690b      	ldr	r3, [r1, #16]
 80051c4:	4605      	mov	r5, r0
 80051c6:	460c      	mov	r4, r1
 80051c8:	b913      	cbnz	r3, 80051d0 <_fflush_r+0x10>
 80051ca:	2500      	movs	r5, #0
 80051cc:	4628      	mov	r0, r5
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	b118      	cbz	r0, 80051da <_fflush_r+0x1a>
 80051d2:	6983      	ldr	r3, [r0, #24]
 80051d4:	b90b      	cbnz	r3, 80051da <_fflush_r+0x1a>
 80051d6:	f000 f887 	bl	80052e8 <__sinit>
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <_fflush_r+0x6c>)
 80051dc:	429c      	cmp	r4, r3
 80051de:	d11b      	bne.n	8005218 <_fflush_r+0x58>
 80051e0:	686c      	ldr	r4, [r5, #4]
 80051e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0ef      	beq.n	80051ca <_fflush_r+0xa>
 80051ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051ec:	07d0      	lsls	r0, r2, #31
 80051ee:	d404      	bmi.n	80051fa <_fflush_r+0x3a>
 80051f0:	0599      	lsls	r1, r3, #22
 80051f2:	d402      	bmi.n	80051fa <_fflush_r+0x3a>
 80051f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051f6:	f000 f915 	bl	8005424 <__retarget_lock_acquire_recursive>
 80051fa:	4628      	mov	r0, r5
 80051fc:	4621      	mov	r1, r4
 80051fe:	f7ff ff59 	bl	80050b4 <__sflush_r>
 8005202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005204:	07da      	lsls	r2, r3, #31
 8005206:	4605      	mov	r5, r0
 8005208:	d4e0      	bmi.n	80051cc <_fflush_r+0xc>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	059b      	lsls	r3, r3, #22
 800520e:	d4dd      	bmi.n	80051cc <_fflush_r+0xc>
 8005210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005212:	f000 f908 	bl	8005426 <__retarget_lock_release_recursive>
 8005216:	e7d9      	b.n	80051cc <_fflush_r+0xc>
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <_fflush_r+0x70>)
 800521a:	429c      	cmp	r4, r3
 800521c:	d101      	bne.n	8005222 <_fflush_r+0x62>
 800521e:	68ac      	ldr	r4, [r5, #8]
 8005220:	e7df      	b.n	80051e2 <_fflush_r+0x22>
 8005222:	4b04      	ldr	r3, [pc, #16]	; (8005234 <_fflush_r+0x74>)
 8005224:	429c      	cmp	r4, r3
 8005226:	bf08      	it	eq
 8005228:	68ec      	ldreq	r4, [r5, #12]
 800522a:	e7da      	b.n	80051e2 <_fflush_r+0x22>
 800522c:	08005f28 	.word	0x08005f28
 8005230:	08005f48 	.word	0x08005f48
 8005234:	08005f08 	.word	0x08005f08

08005238 <std>:
 8005238:	2300      	movs	r3, #0
 800523a:	b510      	push	{r4, lr}
 800523c:	4604      	mov	r4, r0
 800523e:	e9c0 3300 	strd	r3, r3, [r0]
 8005242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005246:	6083      	str	r3, [r0, #8]
 8005248:	8181      	strh	r1, [r0, #12]
 800524a:	6643      	str	r3, [r0, #100]	; 0x64
 800524c:	81c2      	strh	r2, [r0, #14]
 800524e:	6183      	str	r3, [r0, #24]
 8005250:	4619      	mov	r1, r3
 8005252:	2208      	movs	r2, #8
 8005254:	305c      	adds	r0, #92	; 0x5c
 8005256:	f7ff fdd7 	bl	8004e08 <memset>
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <std+0x38>)
 800525c:	6263      	str	r3, [r4, #36]	; 0x24
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <std+0x3c>)
 8005260:	62a3      	str	r3, [r4, #40]	; 0x28
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <std+0x40>)
 8005264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <std+0x44>)
 8005268:	6224      	str	r4, [r4, #32]
 800526a:	6323      	str	r3, [r4, #48]	; 0x30
 800526c:	bd10      	pop	{r4, pc}
 800526e:	bf00      	nop
 8005270:	08005cb1 	.word	0x08005cb1
 8005274:	08005cd3 	.word	0x08005cd3
 8005278:	08005d0b 	.word	0x08005d0b
 800527c:	08005d2f 	.word	0x08005d2f

08005280 <_cleanup_r>:
 8005280:	4901      	ldr	r1, [pc, #4]	; (8005288 <_cleanup_r+0x8>)
 8005282:	f000 b8af 	b.w	80053e4 <_fwalk_reent>
 8005286:	bf00      	nop
 8005288:	080051c1 	.word	0x080051c1

0800528c <__sfmoreglue>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	2268      	movs	r2, #104	; 0x68
 8005290:	1e4d      	subs	r5, r1, #1
 8005292:	4355      	muls	r5, r2
 8005294:	460e      	mov	r6, r1
 8005296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800529a:	f000 f997 	bl	80055cc <_malloc_r>
 800529e:	4604      	mov	r4, r0
 80052a0:	b140      	cbz	r0, 80052b4 <__sfmoreglue+0x28>
 80052a2:	2100      	movs	r1, #0
 80052a4:	e9c0 1600 	strd	r1, r6, [r0]
 80052a8:	300c      	adds	r0, #12
 80052aa:	60a0      	str	r0, [r4, #8]
 80052ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052b0:	f7ff fdaa 	bl	8004e08 <memset>
 80052b4:	4620      	mov	r0, r4
 80052b6:	bd70      	pop	{r4, r5, r6, pc}

080052b8 <__sfp_lock_acquire>:
 80052b8:	4801      	ldr	r0, [pc, #4]	; (80052c0 <__sfp_lock_acquire+0x8>)
 80052ba:	f000 b8b3 	b.w	8005424 <__retarget_lock_acquire_recursive>
 80052be:	bf00      	nop
 80052c0:	2000025d 	.word	0x2000025d

080052c4 <__sfp_lock_release>:
 80052c4:	4801      	ldr	r0, [pc, #4]	; (80052cc <__sfp_lock_release+0x8>)
 80052c6:	f000 b8ae 	b.w	8005426 <__retarget_lock_release_recursive>
 80052ca:	bf00      	nop
 80052cc:	2000025d 	.word	0x2000025d

080052d0 <__sinit_lock_acquire>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__sinit_lock_acquire+0x8>)
 80052d2:	f000 b8a7 	b.w	8005424 <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	2000025e 	.word	0x2000025e

080052dc <__sinit_lock_release>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__sinit_lock_release+0x8>)
 80052de:	f000 b8a2 	b.w	8005426 <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	2000025e 	.word	0x2000025e

080052e8 <__sinit>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4604      	mov	r4, r0
 80052ec:	f7ff fff0 	bl	80052d0 <__sinit_lock_acquire>
 80052f0:	69a3      	ldr	r3, [r4, #24]
 80052f2:	b11b      	cbz	r3, 80052fc <__sinit+0x14>
 80052f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f8:	f7ff bff0 	b.w	80052dc <__sinit_lock_release>
 80052fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005300:	6523      	str	r3, [r4, #80]	; 0x50
 8005302:	4b13      	ldr	r3, [pc, #76]	; (8005350 <__sinit+0x68>)
 8005304:	4a13      	ldr	r2, [pc, #76]	; (8005354 <__sinit+0x6c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	62a2      	str	r2, [r4, #40]	; 0x28
 800530a:	42a3      	cmp	r3, r4
 800530c:	bf04      	itt	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	61a3      	streq	r3, [r4, #24]
 8005312:	4620      	mov	r0, r4
 8005314:	f000 f820 	bl	8005358 <__sfp>
 8005318:	6060      	str	r0, [r4, #4]
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f81c 	bl	8005358 <__sfp>
 8005320:	60a0      	str	r0, [r4, #8]
 8005322:	4620      	mov	r0, r4
 8005324:	f000 f818 	bl	8005358 <__sfp>
 8005328:	2200      	movs	r2, #0
 800532a:	60e0      	str	r0, [r4, #12]
 800532c:	2104      	movs	r1, #4
 800532e:	6860      	ldr	r0, [r4, #4]
 8005330:	f7ff ff82 	bl	8005238 <std>
 8005334:	68a0      	ldr	r0, [r4, #8]
 8005336:	2201      	movs	r2, #1
 8005338:	2109      	movs	r1, #9
 800533a:	f7ff ff7d 	bl	8005238 <std>
 800533e:	68e0      	ldr	r0, [r4, #12]
 8005340:	2202      	movs	r2, #2
 8005342:	2112      	movs	r1, #18
 8005344:	f7ff ff78 	bl	8005238 <std>
 8005348:	2301      	movs	r3, #1
 800534a:	61a3      	str	r3, [r4, #24]
 800534c:	e7d2      	b.n	80052f4 <__sinit+0xc>
 800534e:	bf00      	nop
 8005350:	08005f04 	.word	0x08005f04
 8005354:	08005281 	.word	0x08005281

08005358 <__sfp>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	4607      	mov	r7, r0
 800535c:	f7ff ffac 	bl	80052b8 <__sfp_lock_acquire>
 8005360:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <__sfp+0x84>)
 8005362:	681e      	ldr	r6, [r3, #0]
 8005364:	69b3      	ldr	r3, [r6, #24]
 8005366:	b913      	cbnz	r3, 800536e <__sfp+0x16>
 8005368:	4630      	mov	r0, r6
 800536a:	f7ff ffbd 	bl	80052e8 <__sinit>
 800536e:	3648      	adds	r6, #72	; 0x48
 8005370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005374:	3b01      	subs	r3, #1
 8005376:	d503      	bpl.n	8005380 <__sfp+0x28>
 8005378:	6833      	ldr	r3, [r6, #0]
 800537a:	b30b      	cbz	r3, 80053c0 <__sfp+0x68>
 800537c:	6836      	ldr	r6, [r6, #0]
 800537e:	e7f7      	b.n	8005370 <__sfp+0x18>
 8005380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005384:	b9d5      	cbnz	r5, 80053bc <__sfp+0x64>
 8005386:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <__sfp+0x88>)
 8005388:	60e3      	str	r3, [r4, #12]
 800538a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800538e:	6665      	str	r5, [r4, #100]	; 0x64
 8005390:	f000 f847 	bl	8005422 <__retarget_lock_init_recursive>
 8005394:	f7ff ff96 	bl	80052c4 <__sfp_lock_release>
 8005398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800539c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053a0:	6025      	str	r5, [r4, #0]
 80053a2:	61a5      	str	r5, [r4, #24]
 80053a4:	2208      	movs	r2, #8
 80053a6:	4629      	mov	r1, r5
 80053a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053ac:	f7ff fd2c 	bl	8004e08 <memset>
 80053b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053b8:	4620      	mov	r0, r4
 80053ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053bc:	3468      	adds	r4, #104	; 0x68
 80053be:	e7d9      	b.n	8005374 <__sfp+0x1c>
 80053c0:	2104      	movs	r1, #4
 80053c2:	4638      	mov	r0, r7
 80053c4:	f7ff ff62 	bl	800528c <__sfmoreglue>
 80053c8:	4604      	mov	r4, r0
 80053ca:	6030      	str	r0, [r6, #0]
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d1d5      	bne.n	800537c <__sfp+0x24>
 80053d0:	f7ff ff78 	bl	80052c4 <__sfp_lock_release>
 80053d4:	230c      	movs	r3, #12
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	e7ee      	b.n	80053b8 <__sfp+0x60>
 80053da:	bf00      	nop
 80053dc:	08005f04 	.word	0x08005f04
 80053e0:	ffff0001 	.word	0xffff0001

080053e4 <_fwalk_reent>:
 80053e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e8:	4606      	mov	r6, r0
 80053ea:	4688      	mov	r8, r1
 80053ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053f0:	2700      	movs	r7, #0
 80053f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053f6:	f1b9 0901 	subs.w	r9, r9, #1
 80053fa:	d505      	bpl.n	8005408 <_fwalk_reent+0x24>
 80053fc:	6824      	ldr	r4, [r4, #0]
 80053fe:	2c00      	cmp	r4, #0
 8005400:	d1f7      	bne.n	80053f2 <_fwalk_reent+0xe>
 8005402:	4638      	mov	r0, r7
 8005404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005408:	89ab      	ldrh	r3, [r5, #12]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d907      	bls.n	800541e <_fwalk_reent+0x3a>
 800540e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005412:	3301      	adds	r3, #1
 8005414:	d003      	beq.n	800541e <_fwalk_reent+0x3a>
 8005416:	4629      	mov	r1, r5
 8005418:	4630      	mov	r0, r6
 800541a:	47c0      	blx	r8
 800541c:	4307      	orrs	r7, r0
 800541e:	3568      	adds	r5, #104	; 0x68
 8005420:	e7e9      	b.n	80053f6 <_fwalk_reent+0x12>

08005422 <__retarget_lock_init_recursive>:
 8005422:	4770      	bx	lr

08005424 <__retarget_lock_acquire_recursive>:
 8005424:	4770      	bx	lr

08005426 <__retarget_lock_release_recursive>:
 8005426:	4770      	bx	lr

08005428 <__swhatbuf_r>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	460e      	mov	r6, r1
 800542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005430:	2900      	cmp	r1, #0
 8005432:	b096      	sub	sp, #88	; 0x58
 8005434:	4614      	mov	r4, r2
 8005436:	461d      	mov	r5, r3
 8005438:	da08      	bge.n	800544c <__swhatbuf_r+0x24>
 800543a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	061a      	lsls	r2, r3, #24
 8005444:	d410      	bmi.n	8005468 <__swhatbuf_r+0x40>
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544a:	e00e      	b.n	800546a <__swhatbuf_r+0x42>
 800544c:	466a      	mov	r2, sp
 800544e:	f000 fc95 	bl	8005d7c <_fstat_r>
 8005452:	2800      	cmp	r0, #0
 8005454:	dbf1      	blt.n	800543a <__swhatbuf_r+0x12>
 8005456:	9a01      	ldr	r2, [sp, #4]
 8005458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800545c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005460:	425a      	negs	r2, r3
 8005462:	415a      	adcs	r2, r3
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	e7ee      	b.n	8005446 <__swhatbuf_r+0x1e>
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	2000      	movs	r0, #0
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	b016      	add	sp, #88	; 0x58
 8005470:	bd70      	pop	{r4, r5, r6, pc}
	...

08005474 <__smakebuf_r>:
 8005474:	898b      	ldrh	r3, [r1, #12]
 8005476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005478:	079d      	lsls	r5, r3, #30
 800547a:	4606      	mov	r6, r0
 800547c:	460c      	mov	r4, r1
 800547e:	d507      	bpl.n	8005490 <__smakebuf_r+0x1c>
 8005480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	2301      	movs	r3, #1
 800548a:	6163      	str	r3, [r4, #20]
 800548c:	b002      	add	sp, #8
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	ab01      	add	r3, sp, #4
 8005492:	466a      	mov	r2, sp
 8005494:	f7ff ffc8 	bl	8005428 <__swhatbuf_r>
 8005498:	9900      	ldr	r1, [sp, #0]
 800549a:	4605      	mov	r5, r0
 800549c:	4630      	mov	r0, r6
 800549e:	f000 f895 	bl	80055cc <_malloc_r>
 80054a2:	b948      	cbnz	r0, 80054b8 <__smakebuf_r+0x44>
 80054a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a8:	059a      	lsls	r2, r3, #22
 80054aa:	d4ef      	bmi.n	800548c <__smakebuf_r+0x18>
 80054ac:	f023 0303 	bic.w	r3, r3, #3
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	e7e3      	b.n	8005480 <__smakebuf_r+0xc>
 80054b8:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <__smakebuf_r+0x7c>)
 80054ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	6020      	str	r0, [r4, #0]
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	9b00      	ldr	r3, [sp, #0]
 80054c8:	6163      	str	r3, [r4, #20]
 80054ca:	9b01      	ldr	r3, [sp, #4]
 80054cc:	6120      	str	r0, [r4, #16]
 80054ce:	b15b      	cbz	r3, 80054e8 <__smakebuf_r+0x74>
 80054d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054d4:	4630      	mov	r0, r6
 80054d6:	f000 fc63 	bl	8005da0 <_isatty_r>
 80054da:	b128      	cbz	r0, 80054e8 <__smakebuf_r+0x74>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	81a3      	strh	r3, [r4, #12]
 80054e8:	89a0      	ldrh	r0, [r4, #12]
 80054ea:	4305      	orrs	r5, r0
 80054ec:	81a5      	strh	r5, [r4, #12]
 80054ee:	e7cd      	b.n	800548c <__smakebuf_r+0x18>
 80054f0:	08005281 	.word	0x08005281

080054f4 <_free_r>:
 80054f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d044      	beq.n	8005584 <_free_r+0x90>
 80054fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fe:	9001      	str	r0, [sp, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f1a1 0404 	sub.w	r4, r1, #4
 8005506:	bfb8      	it	lt
 8005508:	18e4      	addlt	r4, r4, r3
 800550a:	f000 fc6b 	bl	8005de4 <__malloc_lock>
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <_free_r+0x94>)
 8005510:	9801      	ldr	r0, [sp, #4]
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	b933      	cbnz	r3, 8005524 <_free_r+0x30>
 8005516:	6063      	str	r3, [r4, #4]
 8005518:	6014      	str	r4, [r2, #0]
 800551a:	b003      	add	sp, #12
 800551c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005520:	f000 bc66 	b.w	8005df0 <__malloc_unlock>
 8005524:	42a3      	cmp	r3, r4
 8005526:	d908      	bls.n	800553a <_free_r+0x46>
 8005528:	6825      	ldr	r5, [r4, #0]
 800552a:	1961      	adds	r1, r4, r5
 800552c:	428b      	cmp	r3, r1
 800552e:	bf01      	itttt	eq
 8005530:	6819      	ldreq	r1, [r3, #0]
 8005532:	685b      	ldreq	r3, [r3, #4]
 8005534:	1949      	addeq	r1, r1, r5
 8005536:	6021      	streq	r1, [r4, #0]
 8005538:	e7ed      	b.n	8005516 <_free_r+0x22>
 800553a:	461a      	mov	r2, r3
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	b10b      	cbz	r3, 8005544 <_free_r+0x50>
 8005540:	42a3      	cmp	r3, r4
 8005542:	d9fa      	bls.n	800553a <_free_r+0x46>
 8005544:	6811      	ldr	r1, [r2, #0]
 8005546:	1855      	adds	r5, r2, r1
 8005548:	42a5      	cmp	r5, r4
 800554a:	d10b      	bne.n	8005564 <_free_r+0x70>
 800554c:	6824      	ldr	r4, [r4, #0]
 800554e:	4421      	add	r1, r4
 8005550:	1854      	adds	r4, r2, r1
 8005552:	42a3      	cmp	r3, r4
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	d1e0      	bne.n	800551a <_free_r+0x26>
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	6053      	str	r3, [r2, #4]
 800555e:	4421      	add	r1, r4
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	e7da      	b.n	800551a <_free_r+0x26>
 8005564:	d902      	bls.n	800556c <_free_r+0x78>
 8005566:	230c      	movs	r3, #12
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	e7d6      	b.n	800551a <_free_r+0x26>
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1961      	adds	r1, r4, r5
 8005570:	428b      	cmp	r3, r1
 8005572:	bf04      	itt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	bf04      	itt	eq
 800557c:	1949      	addeq	r1, r1, r5
 800557e:	6021      	streq	r1, [r4, #0]
 8005580:	6054      	str	r4, [r2, #4]
 8005582:	e7ca      	b.n	800551a <_free_r+0x26>
 8005584:	b003      	add	sp, #12
 8005586:	bd30      	pop	{r4, r5, pc}
 8005588:	20000260 	.word	0x20000260

0800558c <sbrk_aligned>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4e0e      	ldr	r6, [pc, #56]	; (80055c8 <sbrk_aligned+0x3c>)
 8005590:	460c      	mov	r4, r1
 8005592:	6831      	ldr	r1, [r6, #0]
 8005594:	4605      	mov	r5, r0
 8005596:	b911      	cbnz	r1, 800559e <sbrk_aligned+0x12>
 8005598:	f000 fb7a 	bl	8005c90 <_sbrk_r>
 800559c:	6030      	str	r0, [r6, #0]
 800559e:	4621      	mov	r1, r4
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 fb75 	bl	8005c90 <_sbrk_r>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d00a      	beq.n	80055c0 <sbrk_aligned+0x34>
 80055aa:	1cc4      	adds	r4, r0, #3
 80055ac:	f024 0403 	bic.w	r4, r4, #3
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	d007      	beq.n	80055c4 <sbrk_aligned+0x38>
 80055b4:	1a21      	subs	r1, r4, r0
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 fb6a 	bl	8005c90 <_sbrk_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d101      	bne.n	80055c4 <sbrk_aligned+0x38>
 80055c0:	f04f 34ff 	mov.w	r4, #4294967295
 80055c4:	4620      	mov	r0, r4
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	20000264 	.word	0x20000264

080055cc <_malloc_r>:
 80055cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d0:	1ccd      	adds	r5, r1, #3
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	2d00      	cmp	r5, #0
 80055e0:	4607      	mov	r7, r0
 80055e2:	db01      	blt.n	80055e8 <_malloc_r+0x1c>
 80055e4:	42a9      	cmp	r1, r5
 80055e6:	d905      	bls.n	80055f4 <_malloc_r+0x28>
 80055e8:	230c      	movs	r3, #12
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	2600      	movs	r6, #0
 80055ee:	4630      	mov	r0, r6
 80055f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f4:	4e2e      	ldr	r6, [pc, #184]	; (80056b0 <_malloc_r+0xe4>)
 80055f6:	f000 fbf5 	bl	8005de4 <__malloc_lock>
 80055fa:	6833      	ldr	r3, [r6, #0]
 80055fc:	461c      	mov	r4, r3
 80055fe:	bb34      	cbnz	r4, 800564e <_malloc_r+0x82>
 8005600:	4629      	mov	r1, r5
 8005602:	4638      	mov	r0, r7
 8005604:	f7ff ffc2 	bl	800558c <sbrk_aligned>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	4604      	mov	r4, r0
 800560c:	d14d      	bne.n	80056aa <_malloc_r+0xde>
 800560e:	6834      	ldr	r4, [r6, #0]
 8005610:	4626      	mov	r6, r4
 8005612:	2e00      	cmp	r6, #0
 8005614:	d140      	bne.n	8005698 <_malloc_r+0xcc>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	4631      	mov	r1, r6
 800561a:	4638      	mov	r0, r7
 800561c:	eb04 0803 	add.w	r8, r4, r3
 8005620:	f000 fb36 	bl	8005c90 <_sbrk_r>
 8005624:	4580      	cmp	r8, r0
 8005626:	d13a      	bne.n	800569e <_malloc_r+0xd2>
 8005628:	6821      	ldr	r1, [r4, #0]
 800562a:	3503      	adds	r5, #3
 800562c:	1a6d      	subs	r5, r5, r1
 800562e:	f025 0503 	bic.w	r5, r5, #3
 8005632:	3508      	adds	r5, #8
 8005634:	2d0c      	cmp	r5, #12
 8005636:	bf38      	it	cc
 8005638:	250c      	movcc	r5, #12
 800563a:	4629      	mov	r1, r5
 800563c:	4638      	mov	r0, r7
 800563e:	f7ff ffa5 	bl	800558c <sbrk_aligned>
 8005642:	3001      	adds	r0, #1
 8005644:	d02b      	beq.n	800569e <_malloc_r+0xd2>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	442b      	add	r3, r5
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	e00e      	b.n	800566c <_malloc_r+0xa0>
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	1b52      	subs	r2, r2, r5
 8005652:	d41e      	bmi.n	8005692 <_malloc_r+0xc6>
 8005654:	2a0b      	cmp	r2, #11
 8005656:	d916      	bls.n	8005686 <_malloc_r+0xba>
 8005658:	1961      	adds	r1, r4, r5
 800565a:	42a3      	cmp	r3, r4
 800565c:	6025      	str	r5, [r4, #0]
 800565e:	bf18      	it	ne
 8005660:	6059      	strne	r1, [r3, #4]
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	bf08      	it	eq
 8005666:	6031      	streq	r1, [r6, #0]
 8005668:	5162      	str	r2, [r4, r5]
 800566a:	604b      	str	r3, [r1, #4]
 800566c:	4638      	mov	r0, r7
 800566e:	f104 060b 	add.w	r6, r4, #11
 8005672:	f000 fbbd 	bl	8005df0 <__malloc_unlock>
 8005676:	f026 0607 	bic.w	r6, r6, #7
 800567a:	1d23      	adds	r3, r4, #4
 800567c:	1af2      	subs	r2, r6, r3
 800567e:	d0b6      	beq.n	80055ee <_malloc_r+0x22>
 8005680:	1b9b      	subs	r3, r3, r6
 8005682:	50a3      	str	r3, [r4, r2]
 8005684:	e7b3      	b.n	80055ee <_malloc_r+0x22>
 8005686:	6862      	ldr	r2, [r4, #4]
 8005688:	42a3      	cmp	r3, r4
 800568a:	bf0c      	ite	eq
 800568c:	6032      	streq	r2, [r6, #0]
 800568e:	605a      	strne	r2, [r3, #4]
 8005690:	e7ec      	b.n	800566c <_malloc_r+0xa0>
 8005692:	4623      	mov	r3, r4
 8005694:	6864      	ldr	r4, [r4, #4]
 8005696:	e7b2      	b.n	80055fe <_malloc_r+0x32>
 8005698:	4634      	mov	r4, r6
 800569a:	6876      	ldr	r6, [r6, #4]
 800569c:	e7b9      	b.n	8005612 <_malloc_r+0x46>
 800569e:	230c      	movs	r3, #12
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	4638      	mov	r0, r7
 80056a4:	f000 fba4 	bl	8005df0 <__malloc_unlock>
 80056a8:	e7a1      	b.n	80055ee <_malloc_r+0x22>
 80056aa:	6025      	str	r5, [r4, #0]
 80056ac:	e7de      	b.n	800566c <_malloc_r+0xa0>
 80056ae:	bf00      	nop
 80056b0:	20000260 	.word	0x20000260

080056b4 <__sfputc_r>:
 80056b4:	6893      	ldr	r3, [r2, #8]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	b410      	push	{r4}
 80056bc:	6093      	str	r3, [r2, #8]
 80056be:	da08      	bge.n	80056d2 <__sfputc_r+0x1e>
 80056c0:	6994      	ldr	r4, [r2, #24]
 80056c2:	42a3      	cmp	r3, r4
 80056c4:	db01      	blt.n	80056ca <__sfputc_r+0x16>
 80056c6:	290a      	cmp	r1, #10
 80056c8:	d103      	bne.n	80056d2 <__sfputc_r+0x1e>
 80056ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ce:	f7ff bc31 	b.w	8004f34 <__swbuf_r>
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	1c58      	adds	r0, r3, #1
 80056d6:	6010      	str	r0, [r2, #0]
 80056d8:	7019      	strb	r1, [r3, #0]
 80056da:	4608      	mov	r0, r1
 80056dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <__sfputs_r>:
 80056e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e4:	4606      	mov	r6, r0
 80056e6:	460f      	mov	r7, r1
 80056e8:	4614      	mov	r4, r2
 80056ea:	18d5      	adds	r5, r2, r3
 80056ec:	42ac      	cmp	r4, r5
 80056ee:	d101      	bne.n	80056f4 <__sfputs_r+0x12>
 80056f0:	2000      	movs	r0, #0
 80056f2:	e007      	b.n	8005704 <__sfputs_r+0x22>
 80056f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f8:	463a      	mov	r2, r7
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7ff ffda 	bl	80056b4 <__sfputc_r>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d1f3      	bne.n	80056ec <__sfputs_r+0xa>
 8005704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005708 <_vfiprintf_r>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	460d      	mov	r5, r1
 800570e:	b09d      	sub	sp, #116	; 0x74
 8005710:	4614      	mov	r4, r2
 8005712:	4698      	mov	r8, r3
 8005714:	4606      	mov	r6, r0
 8005716:	b118      	cbz	r0, 8005720 <_vfiprintf_r+0x18>
 8005718:	6983      	ldr	r3, [r0, #24]
 800571a:	b90b      	cbnz	r3, 8005720 <_vfiprintf_r+0x18>
 800571c:	f7ff fde4 	bl	80052e8 <__sinit>
 8005720:	4b89      	ldr	r3, [pc, #548]	; (8005948 <_vfiprintf_r+0x240>)
 8005722:	429d      	cmp	r5, r3
 8005724:	d11b      	bne.n	800575e <_vfiprintf_r+0x56>
 8005726:	6875      	ldr	r5, [r6, #4]
 8005728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800572a:	07d9      	lsls	r1, r3, #31
 800572c:	d405      	bmi.n	800573a <_vfiprintf_r+0x32>
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	059a      	lsls	r2, r3, #22
 8005732:	d402      	bmi.n	800573a <_vfiprintf_r+0x32>
 8005734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005736:	f7ff fe75 	bl	8005424 <__retarget_lock_acquire_recursive>
 800573a:	89ab      	ldrh	r3, [r5, #12]
 800573c:	071b      	lsls	r3, r3, #28
 800573e:	d501      	bpl.n	8005744 <_vfiprintf_r+0x3c>
 8005740:	692b      	ldr	r3, [r5, #16]
 8005742:	b9eb      	cbnz	r3, 8005780 <_vfiprintf_r+0x78>
 8005744:	4629      	mov	r1, r5
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff fc46 	bl	8004fd8 <__swsetup_r>
 800574c:	b1c0      	cbz	r0, 8005780 <_vfiprintf_r+0x78>
 800574e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005750:	07dc      	lsls	r4, r3, #31
 8005752:	d50e      	bpl.n	8005772 <_vfiprintf_r+0x6a>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	b01d      	add	sp, #116	; 0x74
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	4b7b      	ldr	r3, [pc, #492]	; (800594c <_vfiprintf_r+0x244>)
 8005760:	429d      	cmp	r5, r3
 8005762:	d101      	bne.n	8005768 <_vfiprintf_r+0x60>
 8005764:	68b5      	ldr	r5, [r6, #8]
 8005766:	e7df      	b.n	8005728 <_vfiprintf_r+0x20>
 8005768:	4b79      	ldr	r3, [pc, #484]	; (8005950 <_vfiprintf_r+0x248>)
 800576a:	429d      	cmp	r5, r3
 800576c:	bf08      	it	eq
 800576e:	68f5      	ldreq	r5, [r6, #12]
 8005770:	e7da      	b.n	8005728 <_vfiprintf_r+0x20>
 8005772:	89ab      	ldrh	r3, [r5, #12]
 8005774:	0598      	lsls	r0, r3, #22
 8005776:	d4ed      	bmi.n	8005754 <_vfiprintf_r+0x4c>
 8005778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800577a:	f7ff fe54 	bl	8005426 <__retarget_lock_release_recursive>
 800577e:	e7e9      	b.n	8005754 <_vfiprintf_r+0x4c>
 8005780:	2300      	movs	r3, #0
 8005782:	9309      	str	r3, [sp, #36]	; 0x24
 8005784:	2320      	movs	r3, #32
 8005786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800578a:	f8cd 800c 	str.w	r8, [sp, #12]
 800578e:	2330      	movs	r3, #48	; 0x30
 8005790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005954 <_vfiprintf_r+0x24c>
 8005794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005798:	f04f 0901 	mov.w	r9, #1
 800579c:	4623      	mov	r3, r4
 800579e:	469a      	mov	sl, r3
 80057a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a4:	b10a      	cbz	r2, 80057aa <_vfiprintf_r+0xa2>
 80057a6:	2a25      	cmp	r2, #37	; 0x25
 80057a8:	d1f9      	bne.n	800579e <_vfiprintf_r+0x96>
 80057aa:	ebba 0b04 	subs.w	fp, sl, r4
 80057ae:	d00b      	beq.n	80057c8 <_vfiprintf_r+0xc0>
 80057b0:	465b      	mov	r3, fp
 80057b2:	4622      	mov	r2, r4
 80057b4:	4629      	mov	r1, r5
 80057b6:	4630      	mov	r0, r6
 80057b8:	f7ff ff93 	bl	80056e2 <__sfputs_r>
 80057bc:	3001      	adds	r0, #1
 80057be:	f000 80aa 	beq.w	8005916 <_vfiprintf_r+0x20e>
 80057c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057c4:	445a      	add	r2, fp
 80057c6:	9209      	str	r2, [sp, #36]	; 0x24
 80057c8:	f89a 3000 	ldrb.w	r3, [sl]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80a2 	beq.w	8005916 <_vfiprintf_r+0x20e>
 80057d2:	2300      	movs	r3, #0
 80057d4:	f04f 32ff 	mov.w	r2, #4294967295
 80057d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057dc:	f10a 0a01 	add.w	sl, sl, #1
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	9307      	str	r3, [sp, #28]
 80057e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057e8:	931a      	str	r3, [sp, #104]	; 0x68
 80057ea:	4654      	mov	r4, sl
 80057ec:	2205      	movs	r2, #5
 80057ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f2:	4858      	ldr	r0, [pc, #352]	; (8005954 <_vfiprintf_r+0x24c>)
 80057f4:	f7fa fd24 	bl	8000240 <memchr>
 80057f8:	9a04      	ldr	r2, [sp, #16]
 80057fa:	b9d8      	cbnz	r0, 8005834 <_vfiprintf_r+0x12c>
 80057fc:	06d1      	lsls	r1, r2, #27
 80057fe:	bf44      	itt	mi
 8005800:	2320      	movmi	r3, #32
 8005802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005806:	0713      	lsls	r3, r2, #28
 8005808:	bf44      	itt	mi
 800580a:	232b      	movmi	r3, #43	; 0x2b
 800580c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005810:	f89a 3000 	ldrb.w	r3, [sl]
 8005814:	2b2a      	cmp	r3, #42	; 0x2a
 8005816:	d015      	beq.n	8005844 <_vfiprintf_r+0x13c>
 8005818:	9a07      	ldr	r2, [sp, #28]
 800581a:	4654      	mov	r4, sl
 800581c:	2000      	movs	r0, #0
 800581e:	f04f 0c0a 	mov.w	ip, #10
 8005822:	4621      	mov	r1, r4
 8005824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005828:	3b30      	subs	r3, #48	; 0x30
 800582a:	2b09      	cmp	r3, #9
 800582c:	d94e      	bls.n	80058cc <_vfiprintf_r+0x1c4>
 800582e:	b1b0      	cbz	r0, 800585e <_vfiprintf_r+0x156>
 8005830:	9207      	str	r2, [sp, #28]
 8005832:	e014      	b.n	800585e <_vfiprintf_r+0x156>
 8005834:	eba0 0308 	sub.w	r3, r0, r8
 8005838:	fa09 f303 	lsl.w	r3, r9, r3
 800583c:	4313      	orrs	r3, r2
 800583e:	9304      	str	r3, [sp, #16]
 8005840:	46a2      	mov	sl, r4
 8005842:	e7d2      	b.n	80057ea <_vfiprintf_r+0xe2>
 8005844:	9b03      	ldr	r3, [sp, #12]
 8005846:	1d19      	adds	r1, r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	9103      	str	r1, [sp, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	bfbb      	ittet	lt
 8005850:	425b      	neglt	r3, r3
 8005852:	f042 0202 	orrlt.w	r2, r2, #2
 8005856:	9307      	strge	r3, [sp, #28]
 8005858:	9307      	strlt	r3, [sp, #28]
 800585a:	bfb8      	it	lt
 800585c:	9204      	strlt	r2, [sp, #16]
 800585e:	7823      	ldrb	r3, [r4, #0]
 8005860:	2b2e      	cmp	r3, #46	; 0x2e
 8005862:	d10c      	bne.n	800587e <_vfiprintf_r+0x176>
 8005864:	7863      	ldrb	r3, [r4, #1]
 8005866:	2b2a      	cmp	r3, #42	; 0x2a
 8005868:	d135      	bne.n	80058d6 <_vfiprintf_r+0x1ce>
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	1d1a      	adds	r2, r3, #4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	9203      	str	r2, [sp, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	bfb8      	it	lt
 8005876:	f04f 33ff 	movlt.w	r3, #4294967295
 800587a:	3402      	adds	r4, #2
 800587c:	9305      	str	r3, [sp, #20]
 800587e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005964 <_vfiprintf_r+0x25c>
 8005882:	7821      	ldrb	r1, [r4, #0]
 8005884:	2203      	movs	r2, #3
 8005886:	4650      	mov	r0, sl
 8005888:	f7fa fcda 	bl	8000240 <memchr>
 800588c:	b140      	cbz	r0, 80058a0 <_vfiprintf_r+0x198>
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	eba0 000a 	sub.w	r0, r0, sl
 8005894:	fa03 f000 	lsl.w	r0, r3, r0
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	4303      	orrs	r3, r0
 800589c:	3401      	adds	r4, #1
 800589e:	9304      	str	r3, [sp, #16]
 80058a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a4:	482c      	ldr	r0, [pc, #176]	; (8005958 <_vfiprintf_r+0x250>)
 80058a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058aa:	2206      	movs	r2, #6
 80058ac:	f7fa fcc8 	bl	8000240 <memchr>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d03f      	beq.n	8005934 <_vfiprintf_r+0x22c>
 80058b4:	4b29      	ldr	r3, [pc, #164]	; (800595c <_vfiprintf_r+0x254>)
 80058b6:	bb1b      	cbnz	r3, 8005900 <_vfiprintf_r+0x1f8>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	3307      	adds	r3, #7
 80058bc:	f023 0307 	bic.w	r3, r3, #7
 80058c0:	3308      	adds	r3, #8
 80058c2:	9303      	str	r3, [sp, #12]
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	443b      	add	r3, r7
 80058c8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ca:	e767      	b.n	800579c <_vfiprintf_r+0x94>
 80058cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d0:	460c      	mov	r4, r1
 80058d2:	2001      	movs	r0, #1
 80058d4:	e7a5      	b.n	8005822 <_vfiprintf_r+0x11a>
 80058d6:	2300      	movs	r3, #0
 80058d8:	3401      	adds	r4, #1
 80058da:	9305      	str	r3, [sp, #20]
 80058dc:	4619      	mov	r1, r3
 80058de:	f04f 0c0a 	mov.w	ip, #10
 80058e2:	4620      	mov	r0, r4
 80058e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e8:	3a30      	subs	r2, #48	; 0x30
 80058ea:	2a09      	cmp	r2, #9
 80058ec:	d903      	bls.n	80058f6 <_vfiprintf_r+0x1ee>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0c5      	beq.n	800587e <_vfiprintf_r+0x176>
 80058f2:	9105      	str	r1, [sp, #20]
 80058f4:	e7c3      	b.n	800587e <_vfiprintf_r+0x176>
 80058f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058fa:	4604      	mov	r4, r0
 80058fc:	2301      	movs	r3, #1
 80058fe:	e7f0      	b.n	80058e2 <_vfiprintf_r+0x1da>
 8005900:	ab03      	add	r3, sp, #12
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	462a      	mov	r2, r5
 8005906:	4b16      	ldr	r3, [pc, #88]	; (8005960 <_vfiprintf_r+0x258>)
 8005908:	a904      	add	r1, sp, #16
 800590a:	4630      	mov	r0, r6
 800590c:	f3af 8000 	nop.w
 8005910:	4607      	mov	r7, r0
 8005912:	1c78      	adds	r0, r7, #1
 8005914:	d1d6      	bne.n	80058c4 <_vfiprintf_r+0x1bc>
 8005916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005918:	07d9      	lsls	r1, r3, #31
 800591a:	d405      	bmi.n	8005928 <_vfiprintf_r+0x220>
 800591c:	89ab      	ldrh	r3, [r5, #12]
 800591e:	059a      	lsls	r2, r3, #22
 8005920:	d402      	bmi.n	8005928 <_vfiprintf_r+0x220>
 8005922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005924:	f7ff fd7f 	bl	8005426 <__retarget_lock_release_recursive>
 8005928:	89ab      	ldrh	r3, [r5, #12]
 800592a:	065b      	lsls	r3, r3, #25
 800592c:	f53f af12 	bmi.w	8005754 <_vfiprintf_r+0x4c>
 8005930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005932:	e711      	b.n	8005758 <_vfiprintf_r+0x50>
 8005934:	ab03      	add	r3, sp, #12
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	462a      	mov	r2, r5
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <_vfiprintf_r+0x258>)
 800593c:	a904      	add	r1, sp, #16
 800593e:	4630      	mov	r0, r6
 8005940:	f000 f880 	bl	8005a44 <_printf_i>
 8005944:	e7e4      	b.n	8005910 <_vfiprintf_r+0x208>
 8005946:	bf00      	nop
 8005948:	08005f28 	.word	0x08005f28
 800594c:	08005f48 	.word	0x08005f48
 8005950:	08005f08 	.word	0x08005f08
 8005954:	08005f68 	.word	0x08005f68
 8005958:	08005f72 	.word	0x08005f72
 800595c:	00000000 	.word	0x00000000
 8005960:	080056e3 	.word	0x080056e3
 8005964:	08005f6e 	.word	0x08005f6e

08005968 <_printf_common>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	4616      	mov	r6, r2
 800596e:	4699      	mov	r9, r3
 8005970:	688a      	ldr	r2, [r1, #8]
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005978:	4293      	cmp	r3, r2
 800597a:	bfb8      	it	lt
 800597c:	4613      	movlt	r3, r2
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005984:	4607      	mov	r7, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b10a      	cbz	r2, 800598e <_printf_common+0x26>
 800598a:	3301      	adds	r3, #1
 800598c:	6033      	str	r3, [r6, #0]
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	0699      	lsls	r1, r3, #26
 8005992:	bf42      	ittt	mi
 8005994:	6833      	ldrmi	r3, [r6, #0]
 8005996:	3302      	addmi	r3, #2
 8005998:	6033      	strmi	r3, [r6, #0]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	f015 0506 	ands.w	r5, r5, #6
 80059a0:	d106      	bne.n	80059b0 <_printf_common+0x48>
 80059a2:	f104 0a19 	add.w	sl, r4, #25
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	6832      	ldr	r2, [r6, #0]
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc26      	bgt.n	80059fe <_printf_common+0x96>
 80059b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059b4:	1e13      	subs	r3, r2, #0
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	bf18      	it	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	0692      	lsls	r2, r2, #26
 80059be:	d42b      	bmi.n	8005a18 <_printf_common+0xb0>
 80059c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c4:	4649      	mov	r1, r9
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c0      	blx	r8
 80059ca:	3001      	adds	r0, #1
 80059cc:	d01e      	beq.n	8005a0c <_printf_common+0xa4>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	68e5      	ldr	r5, [r4, #12]
 80059d2:	6832      	ldr	r2, [r6, #0]
 80059d4:	f003 0306 	and.w	r3, r3, #6
 80059d8:	2b04      	cmp	r3, #4
 80059da:	bf08      	it	eq
 80059dc:	1aad      	subeq	r5, r5, r2
 80059de:	68a3      	ldr	r3, [r4, #8]
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	bf0c      	ite	eq
 80059e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e8:	2500      	movne	r5, #0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bfc4      	itt	gt
 80059ee:	1a9b      	subgt	r3, r3, r2
 80059f0:	18ed      	addgt	r5, r5, r3
 80059f2:	2600      	movs	r6, #0
 80059f4:	341a      	adds	r4, #26
 80059f6:	42b5      	cmp	r5, r6
 80059f8:	d11a      	bne.n	8005a30 <_printf_common+0xc8>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e008      	b.n	8005a10 <_printf_common+0xa8>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	4649      	mov	r1, r9
 8005a04:	4638      	mov	r0, r7
 8005a06:	47c0      	blx	r8
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d103      	bne.n	8005a14 <_printf_common+0xac>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	3501      	adds	r5, #1
 8005a16:	e7c6      	b.n	80059a6 <_printf_common+0x3e>
 8005a18:	18e1      	adds	r1, r4, r3
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	2030      	movs	r0, #48	; 0x30
 8005a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a22:	4422      	add	r2, r4
 8005a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	e7c7      	b.n	80059c0 <_printf_common+0x58>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4622      	mov	r2, r4
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0e6      	beq.n	8005a0c <_printf_common+0xa4>
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7d9      	b.n	80059f6 <_printf_common+0x8e>
	...

08005a44 <_printf_i>:
 8005a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	7e0f      	ldrb	r7, [r1, #24]
 8005a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a4c:	2f78      	cmp	r7, #120	; 0x78
 8005a4e:	4691      	mov	r9, r2
 8005a50:	4680      	mov	r8, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	469a      	mov	sl, r3
 8005a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a5a:	d807      	bhi.n	8005a6c <_printf_i+0x28>
 8005a5c:	2f62      	cmp	r7, #98	; 0x62
 8005a5e:	d80a      	bhi.n	8005a76 <_printf_i+0x32>
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	f000 80d8 	beq.w	8005c16 <_printf_i+0x1d2>
 8005a66:	2f58      	cmp	r7, #88	; 0x58
 8005a68:	f000 80a3 	beq.w	8005bb2 <_printf_i+0x16e>
 8005a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a74:	e03a      	b.n	8005aec <_printf_i+0xa8>
 8005a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a7a:	2b15      	cmp	r3, #21
 8005a7c:	d8f6      	bhi.n	8005a6c <_printf_i+0x28>
 8005a7e:	a101      	add	r1, pc, #4	; (adr r1, 8005a84 <_printf_i+0x40>)
 8005a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005a6d 	.word	0x08005a6d
 8005a90:	08005a6d 	.word	0x08005a6d
 8005a94:	08005a6d 	.word	0x08005a6d
 8005a98:	08005a6d 	.word	0x08005a6d
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005a6d 	.word	0x08005a6d
 8005aa4:	08005a6d 	.word	0x08005a6d
 8005aa8:	08005a6d 	.word	0x08005a6d
 8005aac:	08005a6d 	.word	0x08005a6d
 8005ab0:	08005bfd 	.word	0x08005bfd
 8005ab4:	08005b21 	.word	0x08005b21
 8005ab8:	08005bdf 	.word	0x08005bdf
 8005abc:	08005a6d 	.word	0x08005a6d
 8005ac0:	08005a6d 	.word	0x08005a6d
 8005ac4:	08005c1f 	.word	0x08005c1f
 8005ac8:	08005a6d 	.word	0x08005a6d
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005a6d 	.word	0x08005a6d
 8005ad4:	08005a6d 	.word	0x08005a6d
 8005ad8:	08005be7 	.word	0x08005be7
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	1d1a      	adds	r2, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	602a      	str	r2, [r5, #0]
 8005ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0a3      	b.n	8005c38 <_printf_i+0x1f4>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	6829      	ldr	r1, [r5, #0]
 8005af4:	0606      	lsls	r6, r0, #24
 8005af6:	f101 0304 	add.w	r3, r1, #4
 8005afa:	d50a      	bpl.n	8005b12 <_printf_i+0xce>
 8005afc:	680e      	ldr	r6, [r1, #0]
 8005afe:	602b      	str	r3, [r5, #0]
 8005b00:	2e00      	cmp	r6, #0
 8005b02:	da03      	bge.n	8005b0c <_printf_i+0xc8>
 8005b04:	232d      	movs	r3, #45	; 0x2d
 8005b06:	4276      	negs	r6, r6
 8005b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0c:	485e      	ldr	r0, [pc, #376]	; (8005c88 <_printf_i+0x244>)
 8005b0e:	230a      	movs	r3, #10
 8005b10:	e019      	b.n	8005b46 <_printf_i+0x102>
 8005b12:	680e      	ldr	r6, [r1, #0]
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b1a:	bf18      	it	ne
 8005b1c:	b236      	sxthne	r6, r6
 8005b1e:	e7ef      	b.n	8005b00 <_printf_i+0xbc>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	1d19      	adds	r1, r3, #4
 8005b26:	6029      	str	r1, [r5, #0]
 8005b28:	0601      	lsls	r1, r0, #24
 8005b2a:	d501      	bpl.n	8005b30 <_printf_i+0xec>
 8005b2c:	681e      	ldr	r6, [r3, #0]
 8005b2e:	e002      	b.n	8005b36 <_printf_i+0xf2>
 8005b30:	0646      	lsls	r6, r0, #25
 8005b32:	d5fb      	bpl.n	8005b2c <_printf_i+0xe8>
 8005b34:	881e      	ldrh	r6, [r3, #0]
 8005b36:	4854      	ldr	r0, [pc, #336]	; (8005c88 <_printf_i+0x244>)
 8005b38:	2f6f      	cmp	r7, #111	; 0x6f
 8005b3a:	bf0c      	ite	eq
 8005b3c:	2308      	moveq	r3, #8
 8005b3e:	230a      	movne	r3, #10
 8005b40:	2100      	movs	r1, #0
 8005b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b46:	6865      	ldr	r5, [r4, #4]
 8005b48:	60a5      	str	r5, [r4, #8]
 8005b4a:	2d00      	cmp	r5, #0
 8005b4c:	bfa2      	ittt	ge
 8005b4e:	6821      	ldrge	r1, [r4, #0]
 8005b50:	f021 0104 	bicge.w	r1, r1, #4
 8005b54:	6021      	strge	r1, [r4, #0]
 8005b56:	b90e      	cbnz	r6, 8005b5c <_printf_i+0x118>
 8005b58:	2d00      	cmp	r5, #0
 8005b5a:	d04d      	beq.n	8005bf8 <_printf_i+0x1b4>
 8005b5c:	4615      	mov	r5, r2
 8005b5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b62:	fb03 6711 	mls	r7, r3, r1, r6
 8005b66:	5dc7      	ldrb	r7, [r0, r7]
 8005b68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b6c:	4637      	mov	r7, r6
 8005b6e:	42bb      	cmp	r3, r7
 8005b70:	460e      	mov	r6, r1
 8005b72:	d9f4      	bls.n	8005b5e <_printf_i+0x11a>
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d10b      	bne.n	8005b90 <_printf_i+0x14c>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	07de      	lsls	r6, r3, #31
 8005b7c:	d508      	bpl.n	8005b90 <_printf_i+0x14c>
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	6861      	ldr	r1, [r4, #4]
 8005b82:	4299      	cmp	r1, r3
 8005b84:	bfde      	ittt	le
 8005b86:	2330      	movle	r3, #48	; 0x30
 8005b88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b90:	1b52      	subs	r2, r2, r5
 8005b92:	6122      	str	r2, [r4, #16]
 8005b94:	f8cd a000 	str.w	sl, [sp]
 8005b98:	464b      	mov	r3, r9
 8005b9a:	aa03      	add	r2, sp, #12
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f7ff fee2 	bl	8005968 <_printf_common>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d14c      	bne.n	8005c42 <_printf_i+0x1fe>
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	b004      	add	sp, #16
 8005bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb2:	4835      	ldr	r0, [pc, #212]	; (8005c88 <_printf_i+0x244>)
 8005bb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bb8:	6829      	ldr	r1, [r5, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bc0:	6029      	str	r1, [r5, #0]
 8005bc2:	061d      	lsls	r5, r3, #24
 8005bc4:	d514      	bpl.n	8005bf0 <_printf_i+0x1ac>
 8005bc6:	07df      	lsls	r7, r3, #31
 8005bc8:	bf44      	itt	mi
 8005bca:	f043 0320 	orrmi.w	r3, r3, #32
 8005bce:	6023      	strmi	r3, [r4, #0]
 8005bd0:	b91e      	cbnz	r6, 8005bda <_printf_i+0x196>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	f023 0320 	bic.w	r3, r3, #32
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	2310      	movs	r3, #16
 8005bdc:	e7b0      	b.n	8005b40 <_printf_i+0xfc>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	f043 0320 	orr.w	r3, r3, #32
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	2378      	movs	r3, #120	; 0x78
 8005be8:	4828      	ldr	r0, [pc, #160]	; (8005c8c <_printf_i+0x248>)
 8005bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bee:	e7e3      	b.n	8005bb8 <_printf_i+0x174>
 8005bf0:	0659      	lsls	r1, r3, #25
 8005bf2:	bf48      	it	mi
 8005bf4:	b2b6      	uxthmi	r6, r6
 8005bf6:	e7e6      	b.n	8005bc6 <_printf_i+0x182>
 8005bf8:	4615      	mov	r5, r2
 8005bfa:	e7bb      	b.n	8005b74 <_printf_i+0x130>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	6826      	ldr	r6, [r4, #0]
 8005c00:	6961      	ldr	r1, [r4, #20]
 8005c02:	1d18      	adds	r0, r3, #4
 8005c04:	6028      	str	r0, [r5, #0]
 8005c06:	0635      	lsls	r5, r6, #24
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	d501      	bpl.n	8005c10 <_printf_i+0x1cc>
 8005c0c:	6019      	str	r1, [r3, #0]
 8005c0e:	e002      	b.n	8005c16 <_printf_i+0x1d2>
 8005c10:	0670      	lsls	r0, r6, #25
 8005c12:	d5fb      	bpl.n	8005c0c <_printf_i+0x1c8>
 8005c14:	8019      	strh	r1, [r3, #0]
 8005c16:	2300      	movs	r3, #0
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	4615      	mov	r5, r2
 8005c1c:	e7ba      	b.n	8005b94 <_printf_i+0x150>
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	1d1a      	adds	r2, r3, #4
 8005c22:	602a      	str	r2, [r5, #0]
 8005c24:	681d      	ldr	r5, [r3, #0]
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f7fa fb08 	bl	8000240 <memchr>
 8005c30:	b108      	cbz	r0, 8005c36 <_printf_i+0x1f2>
 8005c32:	1b40      	subs	r0, r0, r5
 8005c34:	6060      	str	r0, [r4, #4]
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	e7a8      	b.n	8005b94 <_printf_i+0x150>
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	462a      	mov	r2, r5
 8005c46:	4649      	mov	r1, r9
 8005c48:	4640      	mov	r0, r8
 8005c4a:	47d0      	blx	sl
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d0ab      	beq.n	8005ba8 <_printf_i+0x164>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	079b      	lsls	r3, r3, #30
 8005c54:	d413      	bmi.n	8005c7e <_printf_i+0x23a>
 8005c56:	68e0      	ldr	r0, [r4, #12]
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	4298      	cmp	r0, r3
 8005c5c:	bfb8      	it	lt
 8005c5e:	4618      	movlt	r0, r3
 8005c60:	e7a4      	b.n	8005bac <_printf_i+0x168>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4632      	mov	r2, r6
 8005c66:	4649      	mov	r1, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	47d0      	blx	sl
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d09b      	beq.n	8005ba8 <_printf_i+0x164>
 8005c70:	3501      	adds	r5, #1
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	9903      	ldr	r1, [sp, #12]
 8005c76:	1a5b      	subs	r3, r3, r1
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	dcf2      	bgt.n	8005c62 <_printf_i+0x21e>
 8005c7c:	e7eb      	b.n	8005c56 <_printf_i+0x212>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	f104 0619 	add.w	r6, r4, #25
 8005c84:	e7f5      	b.n	8005c72 <_printf_i+0x22e>
 8005c86:	bf00      	nop
 8005c88:	08005f79 	.word	0x08005f79
 8005c8c:	08005f8a 	.word	0x08005f8a

08005c90 <_sbrk_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4d06      	ldr	r5, [pc, #24]	; (8005cac <_sbrk_r+0x1c>)
 8005c94:	2300      	movs	r3, #0
 8005c96:	4604      	mov	r4, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	f7fa fef6 	bl	8000a8c <_sbrk>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_sbrk_r+0x1a>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_sbrk_r+0x1a>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20000268 	.word	0x20000268

08005cb0 <__sread>:
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	f000 f8a0 	bl	8005dfc <_read_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	bfab      	itete	ge
 8005cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc4:	181b      	addge	r3, r3, r0
 8005cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cca:	bfac      	ite	ge
 8005ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cce:	81a3      	strhlt	r3, [r4, #12]
 8005cd0:	bd10      	pop	{r4, pc}

08005cd2 <__swrite>:
 8005cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	05db      	lsls	r3, r3, #23
 8005cdc:	4605      	mov	r5, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	d505      	bpl.n	8005cf0 <__swrite+0x1e>
 8005ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	2200      	movs	r2, #0
 8005cec:	f000 f868 	bl	8005dc0 <_lseek_r>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	463b      	mov	r3, r7
 8005d00:	4628      	mov	r0, r5
 8005d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d06:	f000 b817 	b.w	8005d38 <_write_r>

08005d0a <__sseek>:
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d12:	f000 f855 	bl	8005dc0 <_lseek_r>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	bf15      	itete	ne
 8005d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d26:	81a3      	strheq	r3, [r4, #12]
 8005d28:	bf18      	it	ne
 8005d2a:	81a3      	strhne	r3, [r4, #12]
 8005d2c:	bd10      	pop	{r4, pc}

08005d2e <__sclose>:
 8005d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d32:	f000 b813 	b.w	8005d5c <_close_r>
	...

08005d38 <_write_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d07      	ldr	r5, [pc, #28]	; (8005d58 <_write_r+0x20>)
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	4608      	mov	r0, r1
 8005d40:	4611      	mov	r1, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f7fa fe4f 	bl	80009ea <_write>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_write_r+0x1e>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_write_r+0x1e>
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	20000268 	.word	0x20000268

08005d5c <_close_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d06      	ldr	r5, [pc, #24]	; (8005d78 <_close_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f7fa fe5b 	bl	8000a22 <_close>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_close_r+0x1a>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_close_r+0x1a>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	20000268 	.word	0x20000268

08005d7c <_fstat_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d07      	ldr	r5, [pc, #28]	; (8005d9c <_fstat_r+0x20>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	f7fa fe56 	bl	8000a3a <_fstat>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d102      	bne.n	8005d98 <_fstat_r+0x1c>
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	b103      	cbz	r3, 8005d98 <_fstat_r+0x1c>
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000268 	.word	0x20000268

08005da0 <_isatty_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d06      	ldr	r5, [pc, #24]	; (8005dbc <_isatty_r+0x1c>)
 8005da4:	2300      	movs	r3, #0
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	f7fa fe55 	bl	8000a5a <_isatty>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_isatty_r+0x1a>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_isatty_r+0x1a>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20000268 	.word	0x20000268

08005dc0 <_lseek_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d07      	ldr	r5, [pc, #28]	; (8005de0 <_lseek_r+0x20>)
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	4611      	mov	r1, r2
 8005dca:	2200      	movs	r2, #0
 8005dcc:	602a      	str	r2, [r5, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f7fa fe4e 	bl	8000a70 <_lseek>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_lseek_r+0x1e>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_lseek_r+0x1e>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	20000268 	.word	0x20000268

08005de4 <__malloc_lock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__malloc_lock+0x8>)
 8005de6:	f7ff bb1d 	b.w	8005424 <__retarget_lock_acquire_recursive>
 8005dea:	bf00      	nop
 8005dec:	2000025c 	.word	0x2000025c

08005df0 <__malloc_unlock>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__malloc_unlock+0x8>)
 8005df2:	f7ff bb18 	b.w	8005426 <__retarget_lock_release_recursive>
 8005df6:	bf00      	nop
 8005df8:	2000025c 	.word	0x2000025c

08005dfc <_read_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	; (8005e1c <_read_r+0x20>)
 8005e00:	4604      	mov	r4, r0
 8005e02:	4608      	mov	r0, r1
 8005e04:	4611      	mov	r1, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fa fdd0 	bl	80009b0 <_read>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_read_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_read_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	20000268 	.word	0x20000268

08005e20 <_init>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr

08005e2c <_fini>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr
