
motion_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b8  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e7  0800dbec  0800dbec  0001dbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfd4  0800dfd4  0001dfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dfdc  0800dfdc  0001dfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dfe0  0800dfe0  0001dfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800dfe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000234  20000074  0800e058  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002a8  0800e058  000202a8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031d23  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003976  00000000  00000000  00051dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002280  00000000  00000000  00055748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002170  00000000  00000000  000579c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b04  00000000  00000000  00059b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000230dd  00000000  00000000  0008f63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cbf8  00000000  00000000  000b2719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ff311  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009bd8  00000000  00000000  001ff364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000074 	.word	0x20000074
 8000250:	00000000 	.word	0x00000000
 8000254:	0800dbd4 	.word	0x0800dbd4

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000078 	.word	0x20000078
 8000270:	0800dbd4 	.word	0x0800dbd4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <MX_GPIO_Init+0x158>)
 80005ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005b0:	4a4e      	ldr	r2, [pc, #312]	; (80006ec <MX_GPIO_Init+0x158>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005ba:	4b4c      	ldr	r3, [pc, #304]	; (80006ec <MX_GPIO_Init+0x158>)
 80005bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b48      	ldr	r3, [pc, #288]	; (80006ec <MX_GPIO_Init+0x158>)
 80005ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ce:	4a47      	ldr	r2, [pc, #284]	; (80006ec <MX_GPIO_Init+0x158>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005d8:	4b44      	ldr	r3, [pc, #272]	; (80006ec <MX_GPIO_Init+0x158>)
 80005da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b41      	ldr	r3, [pc, #260]	; (80006ec <MX_GPIO_Init+0x158>)
 80005e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ec:	4a3f      	ldr	r2, [pc, #252]	; (80006ec <MX_GPIO_Init+0x158>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005f6:	4b3d      	ldr	r3, [pc, #244]	; (80006ec <MX_GPIO_Init+0x158>)
 80005f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000604:	4b39      	ldr	r3, [pc, #228]	; (80006ec <MX_GPIO_Init+0x158>)
 8000606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800060a:	4a38      	ldr	r2, [pc, #224]	; (80006ec <MX_GPIO_Init+0x158>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000614:	4b35      	ldr	r3, [pc, #212]	; (80006ec <MX_GPIO_Init+0x158>)
 8000616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <MX_GPIO_Init+0x158>)
 8000624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000628:	4a30      	ldr	r2, [pc, #192]	; (80006ec <MX_GPIO_Init+0x158>)
 800062a:	f043 0320 	orr.w	r3, r3, #32
 800062e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <MX_GPIO_Init+0x158>)
 8000634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000638:	f003 0320 	and.w	r3, r3, #32
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	482a      	ldr	r0, [pc, #168]	; (80006f0 <MX_GPIO_Init+0x15c>)
 8000646:	f002 fa8d 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	4828      	ldr	r0, [pc, #160]	; (80006f4 <MX_GPIO_Init+0x160>)
 8000652:	f002 fa87 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4820      	ldr	r0, [pc, #128]	; (80006f0 <MX_GPIO_Init+0x15c>)
 800066e:	f002 f8a1 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8000672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_GPIO_Init+0x164>)
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	481d      	ldr	r0, [pc, #116]	; (80006fc <MX_GPIO_Init+0x168>)
 8000688:	f002 f894 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT2_Pin;
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_GPIO_Init+0x164>)
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_GPIO_Init+0x15c>)
 80006a0:	f002 f888 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_GPIO_Init+0x160>)
 80006be:	f002 f879 	bl	80027b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2012      	movs	r0, #18
 80006c8:	f002 f831 	bl	800272e <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI7_IRQn);
  HAL_NVIC_DisableIRQ(EXTI7_IRQn);
 80006cc:	2012      	movs	r0, #18
 80006ce:	f002 f856 	bl	800277e <HAL_NVIC_DisableIRQ>

  HAL_NVIC_SetPriority(EXTI15_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	201a      	movs	r0, #26
 80006d8:	f002 f829 	bl	800272e <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI15_IRQn);
  HAL_NVIC_DisableIRQ(EXTI15_IRQn);
 80006dc:	201a      	movs	r0, #26
 80006de:	f002 f84e 	bl	800277e <HAL_NVIC_DisableIRQ>
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	46020c00 	.word	0x46020c00
 80006f0:	42021000 	.word	0x42021000
 80006f4:	42021400 	.word	0x42021400
 80006f8:	10110000 	.word	0x10110000
 80006fc:	42020c00 	.word	0x42020c00

08000700 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_I2C1_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_I2C1_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_I2C1_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <MX_I2C1_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_I2C1_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_I2C1_Init+0x74>)
 800073c:	f002 fa5b 	bl	8002bf6 <HAL_I2C_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 f900 	bl	800094a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_I2C1_Init+0x74>)
 800074e:	f002 ff43 	bl	80035d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 f8f7 	bl	800094a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_I2C1_Init+0x74>)
 8000760:	f002 ff85 	bl	800366e <HAL_I2CEx_ConfigDigitalFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 f8ee 	bl	800094a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000090 	.word	0x20000090
 8000778:	40005400 	.word	0x40005400
 800077c:	00303d5b 	.word	0x00303d5b

08000780 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b0bc      	sub	sp, #240	; 0xf0
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	22c8      	movs	r2, #200	; 0xc8
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00c f9fd 	bl	800cba0 <memset>
  if(i2cHandle->Instance==I2C1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <HAL_I2C_MspInit+0xc4>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d145      	bne.n	800083c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007b0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007bc:	2300      	movs	r3, #0
 80007be:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 fb1d 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 80007d0:	f000 f8bb 	bl	800094a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_I2C_MspInit+0xc8>)
 80007d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_I2C_MspInit+0xc8>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_I2C_MspInit+0xc8>)
 80007e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80007f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fa:	2312      	movs	r3, #18
 80007fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080c:	2304      	movs	r3, #4
 800080e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <HAL_I2C_MspInit+0xcc>)
 800081a:	f001 ffcb 	bl	80027b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_I2C_MspInit+0xc8>)
 8000820:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000824:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_I2C_MspInit+0xc8>)
 8000826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_I2C_MspInit+0xc8>)
 8000830:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800083c:	bf00      	nop
 800083e:	37f0      	adds	r7, #240	; 0xf0
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40005400 	.word	0x40005400
 8000848:	46020c00 	.word	0x46020c00
 800084c:	42020400 	.word	0x42020400

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f001 fdc4 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f80f 	bl	800087a <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800085c:	f000 f869 	bl	8000932 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f7ff fe98 	bl	8000594 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000864:	f000 f876 	bl	8000954 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000868:	f000 fa7c 	bl	8000d64 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800086c:	f7ff ff48 	bl	8000700 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  	  mtn_bsp_init(); //initialize motion sensor
 8000870:	f001 fb6e 	bl	8001f50 <mtn_bsp_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  mtn_bsp_process(); //process for motion sensor
 8000874:	f001 fc3e 	bl	80020f4 <mtn_bsp_process>
 8000878:	e7fc      	b.n	8000874 <main+0x24>

0800087a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b09e      	sub	sp, #120	; 0x78
 800087e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	2260      	movs	r2, #96	; 0x60
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f00c f989 	bl	800cba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80008a2:	f002 ff31 	bl	8003708 <HAL_PWREx_ControlVoltageScaling>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008ac:	f000 f84d 	bl	800094a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008b0:	2310      	movs	r3, #16
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80008bc:	2300      	movs	r3, #0
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80008ce:	2303      	movs	r3, #3
 80008d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008d2:	2308      	movs	r3, #8
 80008d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80008e2:	230c      	movs	r3, #12
 80008e4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 ffdc 	bl	80038ac <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008fa:	f000 f826 	bl	800094a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	231f      	movs	r3, #31
 8000900:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2303      	movs	r3, #3
 8000904:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000906:	230a      	movs	r3, #10
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fe9c 	bl	8004658 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000926:	f000 f810 	bl	800094a <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3778      	adds	r7, #120	; 0x78
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000936:	2002      	movs	r0, #2
 8000938:	f002 ff68 	bl	800380c <HAL_PWREx_ConfigSupply>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000942:	f000 f802 	bl	800094a <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094e:	b672      	cpsid	i
}
 8000950:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000952:	e7fe      	b.n	8000952 <Error_Handler+0x8>

08000954 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000964:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <MX_SPI1_Init+0xd8>)
 8000966:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <MX_SPI1_Init+0xdc>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_SPI1_Init+0xd8>)
 800096c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MX_SPI1_Init+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_SPI1_Init+0xd8>)
 800097a:	2207      	movs	r2, #7
 800097c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_SPI1_Init+0xd8>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_SPI1_Init+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_SPI1_Init+0xd8>)
 800098c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000990:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_SPI1_Init+0xd8>)
 8000994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000998:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_SPI1_Init+0xd8>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <MX_SPI1_Init+0xd8>)
 80009f2:	f006 fe51 	bl	8007698 <HAL_SPI_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 80009fc:	f7ff ffa5 	bl	800094a <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000a04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_SPI1_Init+0xd8>)
 8000a14:	f006 ff53 	bl	80078be <HAL_SPIEx_SetConfigAutonomousMode>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000a1e:	f7ff ff94 	bl	800094a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000dc 	.word	0x200000dc
 8000a30:	40013000 	.word	0x40013000

08000a34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0bc      	sub	sp, #240	; 0xf0
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	22c8      	movs	r2, #200	; 0xc8
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00c f8a3 	bl	800cba0 <memset>
  if(spiHandle->Instance==SPI1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a27      	ldr	r2, [pc, #156]	; (8000afc <HAL_SPI_MspInit+0xc8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d147      	bne.n	8000af4 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000a70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f004 f9c1 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000a88:	f7ff ff5f 	bl	800094a <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <HAL_SPI_MspInit+0xcc>)
 8000a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a92:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <HAL_SPI_MspInit+0xcc>)
 8000a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a98:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_SPI_MspInit+0xcc>)
 8000a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_SPI_MspInit+0xcc>)
 8000aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <HAL_SPI_MspInit+0xcc>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_SPI_MspInit+0xcc>)
 8000abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PE14     ------> SPI1_MISO
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8000ac8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000acc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aec:	4619      	mov	r1, r3
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_SPI_MspInit+0xd0>)
 8000af0:	f001 fe60 	bl	80027b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000af4:	bf00      	nop
 8000af6:	37f0      	adds	r7, #240	; 0xf0
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40013000 	.word	0x40013000
 8000b00:	46020c00 	.word	0x46020c00
 8000b04:	42021000 	.word	0x42021000

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_MspInit+0x30>)
 8000b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b14:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x30>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x30>)
 8000b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	46020c00 	.word	0x46020c00

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f001 fc8e 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	f001 fffd 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <EXTI15_IRQHandler>:

/**
  * @brief This function handles EXTI Line15 interrupt.
  */
void EXTI15_IRQHandler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_IRQn 0 */

  /* USER CODE END EXTI15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8000ba2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ba6:	f001 fff5 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_IRQn 1 */

  /* USER CODE END EXTI15_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e00a      	b.n	8000bd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc0:	e000      	b.n	8000bc4 <_read+0x16>
 8000bc2:	bf00      	nop
 8000bc4:	4601      	mov	r1, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	60ba      	str	r2, [r7, #8]
 8000bcc:	b2ca      	uxtb	r2, r1
 8000bce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dbf0      	blt.n	8000bc0 <_read+0x12>
	}

return len;
 8000bde:	687b      	ldr	r3, [r7, #4]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e009      	b.n	8000c0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	60ba      	str	r2, [r7, #8]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fbda 	bl	80023bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbf1      	blt.n	8000bfa <_write+0x12>
	}
	return len;
 8000c16:	687b      	ldr	r3, [r7, #4]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_close>:

int _close(int file)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c48:	605a      	str	r2, [r3, #4]
	return 0;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_isatty>:

int _isatty(int file)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
	return 0;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c90:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <_sbrk+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <_sbrk+0x60>)
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <_sbrk+0x64>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <_sbrk+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d207      	bcs.n	8000cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb8:	f00b ff48 	bl	800cb4c <__errno>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200c0000 	.word	0x200c0000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	2000016c 	.word	0x2000016c
 8000cf0:	200002a8 	.word	0x200002a8

08000cf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <SystemInit+0x68>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <SystemInit+0x68>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <SystemInit+0x6c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <SystemInit+0x6c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <SystemInit+0x6c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <SystemInit+0x6c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <SystemInit+0x6c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <SystemInit+0x6c>)
 8000d26:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d2a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <SystemInit+0x6c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <SystemInit+0x6c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <SystemInit+0x6c>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <SystemInit+0x6c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SystemInit+0x68>)
 8000d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	46020c00 	.word	0x46020c00

08000d64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d6a:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <MX_USART1_UART_Init+0x94>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000dae:	f006 fdc7 	bl	8007940 <HAL_UART_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000db8:	f7ff fdc7 	bl	800094a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000dc0:	f007 fa44 	bl	800824c <HAL_UARTEx_SetTxFifoThreshold>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dca:	f7ff fdbe 	bl	800094a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000dd2:	f007 fa79 	bl	80082c8 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ddc:	f7ff fdb5 	bl	800094a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_USART1_UART_Init+0x90>)
 8000de2:	f007 f9fa 	bl	80081da <HAL_UARTEx_DisableFifoMode>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dec:	f7ff fdad 	bl	800094a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000170 	.word	0x20000170
 8000df8:	40013800 	.word	0x40013800

08000dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0bc      	sub	sp, #240	; 0xf0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	22c8      	movs	r2, #200	; 0xc8
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00b febf 	bl	800cba0 <memset>
  if(uartHandle->Instance==USART1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d145      	bne.n	8000eb8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e2c:	f04f 0201 	mov.w	r2, #1
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 ffdf 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e4c:	f7ff fd7d 	bl	800094a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000e8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0xcc>)
 8000eb4:	f001 fc7e 	bl	80027b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eb8:	bf00      	nop
 8000eba:	37f0      	adds	r7, #240	; 0xf0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	46020c00 	.word	0x46020c00
 8000ec8:	42020000 	.word	0x42020000

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ed0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ed2:	e003      	b.n	8000edc <LoopCopyDataInit>

08000ed4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ed6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ed8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eda:	3104      	adds	r1, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ee0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ee2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee4:	d3f6      	bcc.n	8000ed4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ee8:	e002      	b.n	8000ef0 <LoopFillZerobss>

08000eea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eec:	f842 3b04 	str.w	r3, [r2], #4

08000ef0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <LoopForever+0x16>)
	cmp	r2, r3
 8000ef2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef4:	d3f9      	bcc.n	8000eea <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef6:	f7ff fefd 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f00b fe2d 	bl	800cb58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fca7 	bl	8000850 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f04:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000f08:	0800dfe4 	.word	0x0800dfe4
	ldr	r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f10:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000f14:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000f18:	200002a8 	.word	0x200002a8

08000f1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_IRQHandler>
	...

08000f20 <spi_i2c_acc_gyro_setup>:
/*@breif - initialize the structure "LSM6DSOX_Object_t" for LSM6DSOX(ACC & GYRO)
 *         with custom read/write register api's.
 *@param - void.
 *@ret   - void.*/
void spi_i2c_acc_gyro_setup(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	obj.IO.BusType = 1;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <spi_i2c_acc_gyro_setup+0x38>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	609a      	str	r2, [r3, #8]
	obj.IO.Address = 0xD7;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <spi_i2c_acc_gyro_setup+0x38>)
 8000f2c:	22d7      	movs	r2, #215	; 0xd7
 8000f2e:	731a      	strb	r2, [r3, #12]
#if (I2C_SPI_EN == 0)
	obj.Ctx.read_reg = spi_read_reg_mtn_snsr;
	obj.Ctx.write_reg = spi_write_reg_mtn_snsr;
	obj.Ctx.handle = &hspi1;
#elif (I2C_SPI_EN == 1)
	obj.Ctx.read_reg = i2c_read_8bit;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <spi_i2c_acc_gyro_setup+0x38>)
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <spi_i2c_acc_gyro_setup+0x3c>)
 8000f34:	621a      	str	r2, [r3, #32]
	obj.Ctx.write_reg = i2c_write_8bit;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <spi_i2c_acc_gyro_setup+0x38>)
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <spi_i2c_acc_gyro_setup+0x40>)
 8000f3a:	61da      	str	r2, [r3, #28]
	obj.Ctx.handle = &hi2c1;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <spi_i2c_acc_gyro_setup+0x38>)
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <spi_i2c_acc_gyro_setup+0x44>)
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	obj.IO.GetTick = mtn_snsr_delay;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <spi_i2c_acc_gyro_setup+0x38>)
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <spi_i2c_acc_gyro_setup+0x48>)
 8000f46:	619a      	str	r2, [r3, #24]
	pObj = &obj;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <spi_i2c_acc_gyro_setup+0x4c>)
 8000f4a:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <spi_i2c_acc_gyro_setup+0x38>)
 8000f4c:	601a      	str	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000204 	.word	0x20000204
 8000f5c:	0800211d 	.word	0x0800211d
 8000f60:	0800218d 	.word	0x0800218d
 8000f64:	20000090 	.word	0x20000090
 8000f68:	080015f1 	.word	0x080015f1
 8000f6c:	20000200 	.word	0x20000200

08000f70 <spi_i2c_mag_setup>:
/*@breif - initialize the structure "LIS2MDL_Object_t" for LIS2MDL(Magnetometer)
 *         with custom read/write api's.
 *@param - void.
 *@ret   - void.*/
void spi_i2c_mag_setup(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	mag.IO.BusType   = LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <spi_i2c_mag_setup+0x34>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	609a      	str	r2, [r3, #8]
	mag.IO.Address   = LIS2MDL_I2C_ADD;
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <spi_i2c_mag_setup+0x34>)
 8000f7c:	223d      	movs	r2, #61	; 0x3d
 8000f7e:	731a      	strb	r2, [r3, #12]
#if (I2C_SPI_EN == 0)
	mag.Ctx.read_reg = spi_read_reg_mtn_snsr;
	mag.Ctx.write_reg = spi_write_reg_mtn_snsr;
	mag.Ctx.handle    = &hspi1;
#elif (I2C_SPI_EN == 1)
	mag.Ctx.read_reg = i2c_read_8bit;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <spi_i2c_mag_setup+0x34>)
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <spi_i2c_mag_setup+0x38>)
 8000f84:	621a      	str	r2, [r3, #32]
	mag.Ctx.write_reg = i2c_write_8bit;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <spi_i2c_mag_setup+0x34>)
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <spi_i2c_mag_setup+0x3c>)
 8000f8a:	61da      	str	r2, [r3, #28]
	mag.Ctx.handle    = &hi2c1;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <spi_i2c_mag_setup+0x34>)
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <spi_i2c_mag_setup+0x40>)
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	mObj = &mag;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <spi_i2c_mag_setup+0x44>)
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <spi_i2c_mag_setup+0x34>)
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000250 	.word	0x20000250
 8000fa8:	0800211d 	.word	0x0800211d
 8000fac:	0800218d 	.word	0x0800218d
 8000fb0:	20000090 	.word	0x20000090
 8000fb4:	2000024c 	.word	0x2000024c

08000fb8 <mtn_read_sensorhub_reg>:

int32_t mtn_read_sensorhub_reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	72fb      	strb	r3, [r7, #11]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	813b      	strh	r3, [r7, #8]
	  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  uint8_t shub_reg_access_en = 0x40U;
 8000fd2:	2340      	movs	r3, #64	; 0x40
 8000fd4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  uint8_t shub_reg_access_dis = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3020 	strb.w	r3, [r7, #32]
	  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8000fde:	233d      	movs	r3, #61	; 0x3d
 8000fe0:	77fb      	strb	r3, [r7, #31]
	  uint8_t slv0_add = 0x15U;
 8000fe2:	2315      	movs	r3, #21
 8000fe4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  uint8_t slv0_subadd = 0x16U;
 8000fe8:	2316      	movs	r3, #22
 8000fea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  uint8_t slave0_config = 0x17U;
 8000fee:	2317      	movs	r3, #23
 8000ff0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  uint8_t master_config = 0x14U;
 8000ff4:	2314      	movs	r3, #20
 8000ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  uint8_t write_once_i2c_en = 0x44U;
 8000ffa:	2344      	movs	r3, #68	; 0x44
 8000ffc:	77bb      	strb	r3, [r7, #30]
	  uint8_t sensor_hub_1 = 0x02U;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  uint8_t status_master_mainpage = 0x39U;
 8001004:	2339      	movs	r3, #57	; 0x39
 8001006:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  uint8_t sens_hub_endop = 0x01U;
 800100a:	2301      	movs	r3, #1
 800100c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8001010:	2329      	movs	r3, #41	; 0x29
 8001012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  uint8_t lsm6dsox_status_reg = 0x1EU;
 8001016:	231e      	movs	r3, #30
 8001018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  uint8_t xlda = 0x01U;
 800101c:	2301      	movs	r3, #1
 800101e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  uint8_t len = (uint8_t)Length;
 8001022:	893b      	ldrh	r3, [r7, #8]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	777b      	strb	r3, [r7, #29]
	  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8001028:	2310      	movs	r3, #16
 800102a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  uint8_t lsm6dsox_xl_prev_odr;
	  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8001034:	2340      	movs	r3, #64	; 0x40
 8001036:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t data;
	  uint8_t data_array[6];

	  /* Enable access to sensor hub registers */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f103 001c 	add.w	r0, r3, #28
 8001040:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8001044:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001048:	2301      	movs	r3, #1
 800104a:	f007 fe63 	bl	8008d14 <lis2mdl_write_reg>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <mtn_read_sensorhub_reg+0xa2>
	  {
	    return LIS2MDL_ERROR;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	e0e9      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Configure external device address, Enable read operation (rw_0 = 1) */
	  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f103 001c 	add.w	r0, r3, #28
 8001060:	f107 021f 	add.w	r2, r7, #31
 8001064:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8001068:	2301      	movs	r3, #1
 800106a:	f007 fe53 	bl	8008d14 <lis2mdl_write_reg>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <mtn_read_sensorhub_reg+0xc2>
	  {
	    return LIS2MDL_ERROR;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	e0d9      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Configure address of the LIS2MDL register to be read */
	  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f103 001c 	add.w	r0, r3, #28
 8001080:	f107 020b 	add.w	r2, r7, #11
 8001084:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001088:	2301      	movs	r3, #1
 800108a:	f007 fe43 	bl	8008d14 <lis2mdl_write_reg>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <mtn_read_sensorhub_reg+0xe2>
	  {
	    return LIS2MDL_ERROR;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	e0c9      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
	  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f103 001c 	add.w	r0, r3, #28
 80010a0:	f107 021d 	add.w	r2, r7, #29
 80010a4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80010a8:	2301      	movs	r3, #1
 80010aa:	f007 fe33 	bl	8008d14 <lis2mdl_write_reg>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <mtn_read_sensorhub_reg+0x102>
	  {
	    return LIS2MDL_ERROR;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e0b9      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
	  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f103 001c 	add.w	r0, r3, #28
 80010c0:	f107 021e 	add.w	r2, r7, #30
 80010c4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80010c8:	2301      	movs	r3, #1
 80010ca:	f007 fe23 	bl	8008d14 <lis2mdl_write_reg>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <mtn_read_sensorhub_reg+0x122>
	  {
	    return LIS2MDL_ERROR;
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	e0a9      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Disable access to sensor hub registers */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f103 001c 	add.w	r0, r3, #28
 80010e0:	f107 0220 	add.w	r2, r7, #32
 80010e4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80010e8:	2301      	movs	r3, #1
 80010ea:	f007 fe13 	bl	8008d14 <lis2mdl_write_reg>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <mtn_read_sensorhub_reg+0x142>
	  {
	    return LIS2MDL_ERROR;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	e099      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Read LSM6DSOX ODR */
	  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f103 001c 	add.w	r0, r3, #28
 8001100:	f107 021c 	add.w	r2, r7, #28
 8001104:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001108:	2301      	movs	r3, #1
 800110a:	f007 fdeb 	bl	8008ce4 <lis2mdl_read_reg>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <mtn_read_sensorhub_reg+0x162>
	  {
	    return LIS2MDL_ERROR;
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	e089      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Set XL_ODR_104HZ if the accelerometer is disabled */
	  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800111a:	7f3b      	ldrb	r3, [r7, #28]
 800111c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001120:	429a      	cmp	r2, r3
 8001122:	d102      	bne.n	800112a <mtn_read_sensorhub_reg+0x172>
	  {
	    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8001124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001128:	773b      	strb	r3, [r7, #28]
	  }

	  /* Enable accelerometer to trigger Sensor Hub operation */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f103 001c 	add.w	r0, r3, #28
 8001130:	f107 021c 	add.w	r2, r7, #28
 8001134:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001138:	2301      	movs	r3, #1
 800113a:	f007 fdeb 	bl	8008d14 <lis2mdl_write_reg>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <mtn_read_sensorhub_reg+0x192>
	  {
	    return LIS2MDL_ERROR;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	e071      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
	  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f103 001c 	add.w	r0, r3, #28
 8001150:	f107 0214 	add.w	r2, r7, #20
 8001154:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001158:	2306      	movs	r3, #6
 800115a:	f007 fdc3 	bl	8008ce4 <lis2mdl_read_reg>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <mtn_read_sensorhub_reg+0x1b2>
	  {
	    return LIS2MDL_ERROR;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	e061      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
	  do
	  {
	    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f103 001c 	add.w	r0, r3, #28
 8001170:	f107 021b 	add.w	r2, r7, #27
 8001174:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001178:	2301      	movs	r3, #1
 800117a:	f007 fdb3 	bl	8008ce4 <lis2mdl_read_reg>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <mtn_read_sensorhub_reg+0x1d2>
	    {
	      return LIS2MDL_ERROR;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	e051      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	    }
	  } while ((data & xlda) != xlda);
 800118a:	7efa      	ldrb	r2, [r7, #27]
 800118c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001190:	4013      	ands	r3, r2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001198:	429a      	cmp	r2, r3
 800119a:	d1e6      	bne.n	800116a <mtn_read_sensorhub_reg+0x1b2>

	  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
	  do
	  {
	    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f103 001c 	add.w	r0, r3, #28
 80011a2:	f107 021b 	add.w	r2, r7, #27
 80011a6:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80011aa:	2301      	movs	r3, #1
 80011ac:	f007 fd9a 	bl	8008ce4 <lis2mdl_read_reg>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <mtn_read_sensorhub_reg+0x204>
	    {
	      return LIS2MDL_ERROR;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e038      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	    }
	  } while ((data & sens_hub_endop) != sens_hub_endop);
 80011bc:	7efa      	ldrb	r2, [r7, #27]
 80011be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011c2:	4013      	ands	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d1e6      	bne.n	800119c <mtn_read_sensorhub_reg+0x1e4>

	  /* Enable access to sensor hub registers */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f103 001c 	add.w	r0, r3, #28
 80011d4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80011d8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80011dc:	2301      	movs	r3, #1
 80011de:	f007 fd99 	bl	8008d14 <lis2mdl_write_reg>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <mtn_read_sensorhub_reg+0x236>
	  {
	    return LIS2MDL_ERROR;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	e01f      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
	  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f103 001c 	add.w	r0, r3, #28
 80011f4:	893b      	ldrh	r3, [r7, #8]
 80011f6:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	f007 fd72 	bl	8008ce4 <lis2mdl_read_reg>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <mtn_read_sensorhub_reg+0x254>
	  {
	    return LIS2MDL_ERROR;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e010      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  /* Disable access to sensor hub registers */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f103 001c 	add.w	r0, r3, #28
 8001212:	f107 0220 	add.w	r2, r7, #32
 8001216:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800121a:	2301      	movs	r3, #1
 800121c:	f007 fd7a 	bl	8008d14 <lis2mdl_write_reg>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <mtn_read_sensorhub_reg+0x274>
	  {
	    return LIS2MDL_ERROR;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e000      	b.n	800122e <mtn_read_sensorhub_reg+0x276>
	  }

	  return LIS2MDL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <mtn_write_sensorhub_reg>:

int32_t mtn_write_sensorhub_reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b08c      	sub	sp, #48	; 0x30
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	461a      	mov	r2, r3
 8001242:	460b      	mov	r3, r1
 8001244:	72fb      	strb	r3, [r7, #11]
 8001246:	4613      	mov	r3, r2
 8001248:	813b      	strh	r3, [r7, #8]
	  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800124a:	2301      	movs	r3, #1
 800124c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  uint8_t shub_reg_access_en = 0x40U;
 8001250:	2340      	movs	r3, #64	; 0x40
 8001252:	777b      	strb	r3, [r7, #29]
	  uint8_t shub_reg_access_dis = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	773b      	strb	r3, [r7, #28]
	  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8001258:	233c      	movs	r3, #60	; 0x3c
 800125a:	76fb      	strb	r3, [r7, #27]
	  uint8_t slv0_add = 0x15U;
 800125c:	2315      	movs	r3, #21
 800125e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  uint8_t slv0_subadd = 0x16U;
 8001262:	2316      	movs	r3, #22
 8001264:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  uint8_t slave0_config = 0x17U;
 8001268:	2317      	movs	r3, #23
 800126a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  uint8_t shub_odr_104 = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	76bb      	strb	r3, [r7, #26]
	  uint8_t master_config = 0x14U;
 8001272:	2314      	movs	r3, #20
 8001274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  uint8_t write_once_i2c_en = 0x44U;
 8001278:	2344      	movs	r3, #68	; 0x44
 800127a:	767b      	strb	r3, [r7, #25]
	  uint8_t status_master_mainpage = 0x39U;
 800127c:	2339      	movs	r3, #57	; 0x39
 800127e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  uint8_t wr_once_done = 0x80U;
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8001288:	2329      	movs	r3, #41	; 0x29
 800128a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  uint8_t lsm6dsox_status_reg = 0x1EU;
 800128e:	231e      	movs	r3, #30
 8001290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t xlda = 0x01U;
 8001294:	2301      	movs	r3, #1
 8001296:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800129a:	2310      	movs	r3, #16
 800129c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  uint8_t lsm6dsox_xl_prev_odr;
	  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 3020 	strb.w	r3, [r7, #32]
	  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80012a6:	2340      	movs	r3, #64	; 0x40
 80012a8:	77fb      	strb	r3, [r7, #31]
	  //uint8_t datawrite_slv0 = 0x0EU;
	  uint8_t datawrite_slv0 = 0x21;
 80012aa:	2321      	movs	r3, #33	; 0x21
 80012ac:	77bb      	strb	r3, [r7, #30]
	  uint8_t data;
	  uint8_t data_array[6];

	  /* Enable access to sensor hub registers */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f103 001c 	add.w	r0, r3, #28
 80012b4:	f107 021d 	add.w	r2, r7, #29
 80012b8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80012bc:	2301      	movs	r3, #1
 80012be:	f007 fd29 	bl	8008d14 <lis2mdl_write_reg>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <mtn_write_sensorhub_reg+0x98>
	  {
	    return LIS2MDL_ERROR;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	e0d2      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Configure external device address, Enable write operation (rw_0 = 0) */
	  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f103 001c 	add.w	r0, r3, #28
 80012d4:	f107 021b 	add.w	r2, r7, #27
 80012d8:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80012dc:	2301      	movs	r3, #1
 80012de:	f007 fd19 	bl	8008d14 <lis2mdl_write_reg>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <mtn_write_sensorhub_reg+0xb8>
	  {
	    return LIS2MDL_ERROR;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e0c2      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Configure address of the LIS2MDL register to be written to */
	  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f103 001c 	add.w	r0, r3, #28
 80012f4:	f107 020b 	add.w	r2, r7, #11
 80012f8:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80012fc:	2301      	movs	r3, #1
 80012fe:	f007 fd09 	bl	8008d14 <lis2mdl_write_reg>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <mtn_write_sensorhub_reg+0xd8>
	  {
	    return LIS2MDL_ERROR;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	e0b2      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Set SHUB_ODR = 104 Hz */
	  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f103 001c 	add.w	r0, r3, #28
 8001314:	f107 021a 	add.w	r2, r7, #26
 8001318:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800131c:	2301      	movs	r3, #1
 800131e:	f007 fcf9 	bl	8008d14 <lis2mdl_write_reg>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <mtn_write_sensorhub_reg+0xf8>
	  {
	    return LIS2MDL_ERROR;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	e0a2      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
	  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f103 001c 	add.w	r0, r3, #28
 8001334:	7fb9      	ldrb	r1, [r7, #30]
 8001336:	2301      	movs	r3, #1
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	f007 fceb 	bl	8008d14 <lis2mdl_write_reg>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <mtn_write_sensorhub_reg+0x114>
	  {
	    return LIS2MDL_ERROR;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	e094      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
	  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f103 001c 	add.w	r0, r3, #28
 8001350:	f107 0219 	add.w	r2, r7, #25
 8001354:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001358:	2301      	movs	r3, #1
 800135a:	f007 fcdb 	bl	8008d14 <lis2mdl_write_reg>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <mtn_write_sensorhub_reg+0x134>
	  {
	    return LIS2MDL_ERROR;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	e084      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Disable access to sensor hub registers */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f103 001c 	add.w	r0, r3, #28
 8001370:	f107 021c 	add.w	r2, r7, #28
 8001374:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001378:	2301      	movs	r3, #1
 800137a:	f007 fccb 	bl	8008d14 <lis2mdl_write_reg>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <mtn_write_sensorhub_reg+0x154>
	  {
	    return LIS2MDL_ERROR;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	e074      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Read LSM6DSOX ODR */
	  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f103 001c 	add.w	r0, r3, #28
 8001390:	f107 0218 	add.w	r2, r7, #24
 8001394:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001398:	2301      	movs	r3, #1
 800139a:	f007 fca3 	bl	8008ce4 <lis2mdl_read_reg>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <mtn_write_sensorhub_reg+0x174>
	  {
	    return LIS2MDL_ERROR;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	e064      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Set XL_ODR_104HZ if the accelerometer is disabled */
	  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80013aa:	7e3b      	ldrb	r3, [r7, #24]
 80013ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d101      	bne.n	80013b8 <mtn_write_sensorhub_reg+0x182>
	  {
	    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	763b      	strb	r3, [r7, #24]
	  }

	  /* Enable accelerometer to trigger Sensor Hub operation */
	  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f103 001c 	add.w	r0, r3, #28
 80013be:	f107 0218 	add.w	r2, r7, #24
 80013c2:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80013c6:	2301      	movs	r3, #1
 80013c8:	f007 fca4 	bl	8008d14 <lis2mdl_write_reg>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <mtn_write_sensorhub_reg+0x1a2>
	  {
	    return LIS2MDL_ERROR;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e04d      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
	  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f103 001c 	add.w	r0, r3, #28
 80013de:	f107 0210 	add.w	r2, r7, #16
 80013e2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80013e6:	2306      	movs	r3, #6
 80013e8:	f007 fc7c 	bl	8008ce4 <lis2mdl_read_reg>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <mtn_write_sensorhub_reg+0x1c2>
	  {
	    return LIS2MDL_ERROR;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e03d      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	  }

	  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
	  do
	  {
	    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f103 001c 	add.w	r0, r3, #28
 80013fe:	f107 0217 	add.w	r2, r7, #23
 8001402:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001406:	2301      	movs	r3, #1
 8001408:	f007 fc6c 	bl	8008ce4 <lis2mdl_read_reg>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <mtn_write_sensorhub_reg+0x1e2>
	    {
	      return LIS2MDL_ERROR;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e02d      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	    }
	  } while ((data & xlda) != xlda);
 8001418:	7dfa      	ldrb	r2, [r7, #23]
 800141a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800141e:	4013      	ands	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001426:	429a      	cmp	r2, r3
 8001428:	d1e6      	bne.n	80013f8 <mtn_write_sensorhub_reg+0x1c2>

	  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
	  for(int i=0; i< 50000; i++);
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142e:	e002      	b.n	8001436 <mtn_write_sensorhub_reg+0x200>
 8001430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001432:	3301      	adds	r3, #1
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800143c:	4293      	cmp	r3, r2
 800143e:	ddf7      	ble.n	8001430 <mtn_write_sensorhub_reg+0x1fa>
	  do
	  {
	    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f103 001c 	add.w	r0, r3, #28
 8001446:	f107 0217 	add.w	r2, r7, #23
 800144a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800144e:	2301      	movs	r3, #1
 8001450:	f007 fc48 	bl	8008ce4 <lis2mdl_read_reg>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <mtn_write_sensorhub_reg+0x22a>
	    {
	      return LIS2MDL_ERROR;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <mtn_write_sensorhub_reg+0x23e>
	    }
	  } while ((data & wr_once_done) != wr_once_done);
 8001460:	7dfa      	ldrb	r2, [r7, #23]
 8001462:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001466:	4013      	ands	r3, r2
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800146e:	429a      	cmp	r2, r3
 8001470:	d1e6      	bne.n	8001440 <mtn_write_sensorhub_reg+0x20a>

	  return LIS2MDL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <mtn_acc_init>:
	  pObj->gyro_odr = LSM6DSOX_GY_ODR_OFF;
	  return LSM6DSOX_OK;

}
uint8_t mtn_acc_init(LSM6DSOX_Object_t *pObj)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	/* Disable I3C */
	  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	331c      	adds	r3, #28
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	4618      	mov	r0, r3
 800148c:	f009 fba5 	bl	800abda <lsm6dsox_i3c_disable_set>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <mtn_acc_init+0x1e>
	  {
	    return LSM6DSOX_ERROR;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	e03b      	b.n	8001512 <mtn_acc_init+0x96>
	  }

	  /* Enable register address automatically incremented during a multiple byte
	  access with a serial interface. */
	  if (lsm6dsox_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	331c      	adds	r3, #28
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f009 fb74 	bl	800ab8e <lsm6dsox_auto_increment_set>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <mtn_acc_init+0x34>
	  {
	    return LSM6DSOX_ERROR;
 80014ac:	23ff      	movs	r3, #255	; 0xff
 80014ae:	e030      	b.n	8001512 <mtn_acc_init+0x96>
	  }

	  /* Enable BDU */
	  if (lsm6dsox_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	331c      	adds	r3, #28
 80014b4:	2101      	movs	r1, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f009 f930 	bl	800a71c <lsm6dsox_block_data_update_set>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <mtn_acc_init+0x4a>
	  {
	    return LSM6DSOX_ERROR;
 80014c2:	23ff      	movs	r3, #255	; 0xff
 80014c4:	e025      	b.n	8001512 <mtn_acc_init+0x96>
	  }

	  /* FIFO mode selection */
	  if (lsm6dsox_fifo_mode_set(&(pObj->Ctx), LSM6DSOX_BYPASS_MODE) != LSM6DSOX_OK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	331c      	adds	r3, #28
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f009 fc62 	bl	800ad96 <lsm6dsox_fifo_mode_set>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <mtn_acc_init+0x60>
	  {
	    return LSM6DSOX_ERROR;
 80014d8:	23ff      	movs	r3, #255	; 0xff
 80014da:	e01a      	b.n	8001512 <mtn_acc_init+0x96>
	  }

	  /* Select default output data rate. */
	    pObj->acc_odr = LSM6DSOX_XL_ODR_104Hz;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2204      	movs	r2, #4
 80014e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	    /* Output data rate selection - power down. */
	    if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	331c      	adds	r3, #28
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f008 fcfc 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <mtn_acc_init+0x7e>
	    {
	      return LSM6DSOX_ERROR;
 80014f6:	23ff      	movs	r3, #255	; 0xff
 80014f8:	e00b      	b.n	8001512 <mtn_acc_init+0x96>
	    }

	    /* Full scale selection. */
	    if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), LSM6DSOX_2g) != LSM6DSOX_OK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	331c      	adds	r3, #28
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f008 fc93 	bl	8009e2c <lsm6dsox_xl_full_scale_set>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <mtn_acc_init+0x94>
	    {
	      return LSM6DSOX_ERROR;
 800150c:	23ff      	movs	r3, #255	; 0xff
 800150e:	e000      	b.n	8001512 <mtn_acc_init+0x96>
	    }

	     return LSM6DSOX_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <mtn_gyro_init>:

uint8_t mtn_gyro_init(LSM6DSOX_Object_t *pObj)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	/* Disable I3C */
	  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	331c      	adds	r3, #28
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	4618      	mov	r0, r3
 800152a:	f009 fb56 	bl	800abda <lsm6dsox_i3c_disable_set>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <mtn_gyro_init+0x1e>
	  {
	    return LSM6DSOX_ERROR;
 8001534:	23ff      	movs	r3, #255	; 0xff
 8001536:	e03b      	b.n	80015b0 <mtn_gyro_init+0x96>
	  }

	  /* Enable register address automatically incremented during a multiple byte
	  access with a serial interface. */
	  if (lsm6dsox_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	331c      	adds	r3, #28
 800153c:	2101      	movs	r1, #1
 800153e:	4618      	mov	r0, r3
 8001540:	f009 fb25 	bl	800ab8e <lsm6dsox_auto_increment_set>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <mtn_gyro_init+0x34>
	  {
	    return LSM6DSOX_ERROR;
 800154a:	23ff      	movs	r3, #255	; 0xff
 800154c:	e030      	b.n	80015b0 <mtn_gyro_init+0x96>
	  }

	  /* Enable BDU */
	  if (lsm6dsox_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	331c      	adds	r3, #28
 8001552:	2101      	movs	r1, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f009 f8e1 	bl	800a71c <lsm6dsox_block_data_update_set>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <mtn_gyro_init+0x4a>
	  {
	    return LSM6DSOX_ERROR;
 8001560:	23ff      	movs	r3, #255	; 0xff
 8001562:	e025      	b.n	80015b0 <mtn_gyro_init+0x96>
	  }

	  /* FIFO mode selection */
	  if (lsm6dsox_fifo_mode_set(&(pObj->Ctx), LSM6DSOX_BYPASS_MODE) != LSM6DSOX_OK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	331c      	adds	r3, #28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 fc13 	bl	800ad96 <lsm6dsox_fifo_mode_set>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <mtn_gyro_init+0x60>
	  {
	    return LSM6DSOX_ERROR;
 8001576:	23ff      	movs	r3, #255	; 0xff
 8001578:	e01a      	b.n	80015b0 <mtn_gyro_init+0x96>
	  }

	  /* Select default output data rate. */
	   pObj->gyro_odr = LSM6DSOX_GY_ODR_104Hz;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2204      	movs	r2, #4
 800157e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	   /* Output data rate selection - power down. */
	   if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	331c      	adds	r3, #28
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f008 fef1 	bl	800a370 <lsm6dsox_gy_data_rate_set>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <mtn_gyro_init+0x7e>
	   {
	     return LSM6DSOX_ERROR;
 8001594:	23ff      	movs	r3, #255	; 0xff
 8001596:	e00b      	b.n	80015b0 <mtn_gyro_init+0x96>
	   }

	   /* Full scale selection. */
	   if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), LSM6DSOX_2000dps) != LSM6DSOX_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	331c      	adds	r3, #28
 800159c:	2106      	movs	r1, #6
 800159e:	4618      	mov	r0, r3
 80015a0:	f008 fe7e 	bl	800a2a0 <lsm6dsox_gy_full_scale_set>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <mtn_gyro_init+0x94>
	   {
	     return LSM6DSOX_ERROR;
 80015aa:	23ff      	movs	r3, #255	; 0xff
 80015ac:	e000      	b.n	80015b0 <mtn_gyro_init+0x96>
	   }

	    return LSM6DSOX_OK;
 80015ae:	2300      	movs	r3, #0

}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <reg_ret_status>:
/*@brief - read register value, print it and return that value.
 *@param - register address from which to read.
 *@param - variable to save the read value.
 *@ret   - value of the register.*/
uint8_t reg_ret_status(uint8_t regAddr, uint8_t *buff)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
#if (I2C_SPI_EN == 0)
	spi_read_reg_mtn_snsr(&hspi1, regAddr, buff, 1);
#elif (I2C_SPI_EN == 1)
	i2c_read_8bit(&hi2c1, regAddr, buff, 1);
 80015c4:	79f9      	ldrb	r1, [r7, #7]
 80015c6:	2301      	movs	r3, #1
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <reg_ret_status+0x30>)
 80015cc:	f000 fda6 	bl	800211c <i2c_read_8bit>
#endif
	printf("\r\n0x%X",*buff);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <reg_ret_status+0x34>)
 80015d8:	f00b faea 	bl	800cbb0 <iprintf>
	return *buff;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000090 	.word	0x20000090
 80015ec:	0800dbec 	.word	0x0800dbec

080015f0 <mtn_snsr_delay>:

/*@breif - provide tick value.
 *@param - void.
 *@ret   - tick value in 32-bit format.*/
int32_t mtn_snsr_delay(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80015f4:	f000 ff6c 	bl	80024d0 <HAL_GetTick>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <mtn_acc_gyro_init>:

void mtn_acc_gyro_init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
#if (ACC_EN || GYRO_EN)

	LSM6DSOX_ReadID(pObj,&lsm6dsox_ID); //read chip ID of lsm6ds0x(0x6C).
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4936      	ldr	r1, [pc, #216]	; (80016e4 <mtn_acc_gyro_init+0xe4>)
 800160a:	4618      	mov	r0, r3
 800160c:	f007 fc8e 	bl	8008f2c <LSM6DSOX_ReadID>
	printf("\r\n1. 0x%X",lsm6dsox_ID);
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <mtn_acc_gyro_init+0xe4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4834      	ldr	r0, [pc, #208]	; (80016e8 <mtn_acc_gyro_init+0xe8>)
 8001618:	f00b faca 	bl	800cbb0 <iprintf>
	if(lsm6dsox_ID != 0x6C)
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <mtn_acc_gyro_init+0xe4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b6c      	cmp	r3, #108	; 0x6c
 8001622:	d01a      	beq.n	800165a <mtn_acc_gyro_init+0x5a>
	{
	  printf("\r\nreset function called");
 8001624:	4831      	ldr	r0, [pc, #196]	; (80016ec <mtn_acc_gyro_init+0xec>)
 8001626:	f00b fac3 	bl	800cbb0 <iprintf>

	  //software reset LSM6DSOX
	  LSM6DSOX_Write_Reg(pObj, acc_gyro_rst_reg, acc_gyro_rst_val);
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <mtn_acc_gyro_init+0xf0>)
 8001630:	7812      	ldrb	r2, [r2, #0]
 8001632:	2112      	movs	r1, #18
 8001634:	4618      	mov	r0, r3
 8001636:	f008 f87a 	bl	800972e <LSM6DSOX_Write_Reg>
	  HAL_Delay(500);
 800163a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163e:	f000 ff53 	bl	80024e8 <HAL_Delay>

	  //read chip id of lsm6dsox(0x6C)
	  LSM6DSOX_ReadID(pObj,&lsm6dsox_ID);
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4927      	ldr	r1, [pc, #156]	; (80016e4 <mtn_acc_gyro_init+0xe4>)
 8001648:	4618      	mov	r0, r3
 800164a:	f007 fc6f 	bl	8008f2c <LSM6DSOX_ReadID>
	  printf("\r\n2. 0x%X",lsm6dsox_ID);
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <mtn_acc_gyro_init+0xe4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	4827      	ldr	r0, [pc, #156]	; (80016f4 <mtn_acc_gyro_init+0xf4>)
 8001656:	f00b faab 	bl	800cbb0 <iprintf>
	}
	if(lsm6dsox_ID == 0x6C)
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <mtn_acc_gyro_init+0xe4>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b6c      	cmp	r3, #108	; 0x6c
 8001660:	d13c      	bne.n	80016dc <mtn_acc_gyro_init+0xdc>
	{
#if ACC_EN
	  mtn_acc_init(pObj);
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff08 	bl	800147c <mtn_acc_init>
	  LSM6DSOX_ACC_Enable(pObj); //Enable Accelerometer
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f007 fc71 	bl	8008f58 <LSM6DSOX_ACC_Enable>
	  LSM6DSOX_ACC_Enable_Wake_Up_Detection(pObj, LSM6DSOX_INT1_PIN); //Enable wake up detection on int1 pin
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f008 f8ff 	bl	8009880 <LSM6DSOX_ACC_Enable_Wake_Up_Detection>
	  LSM6DSOX_ACC_Set_Wake_Up_Threshold(pObj, wk_ths); //set wake up threshold to 0x06;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2106      	movs	r1, #6
 8001688:	4618      	mov	r0, r3
 800168a:	f008 f985 	bl	8009998 <LSM6DSOX_ACC_Set_Wake_Up_Threshold>

	  //enable pedometer for step detection.
	  LSM6DSOX_ACC_Enable_Pedometer(pObj);
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f008 f866 	bl	8009764 <LSM6DSOX_ACC_Enable_Pedometer>

	  //reset step counter of pedometer.
	  LSM6DSOX_ACC_Step_Counter_Reset(pObj);
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f008 f8db 	bl	8009858 <LSM6DSOX_ACC_Step_Counter_Reset>

	  //set pedometer debounce value bo 0x00.
	  lsm6dsox_pedo_debounce_steps_set(&(pObj->Ctx), &dben_set);
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	331c      	adds	r3, #28
 80016a8:	4913      	ldr	r1, [pc, #76]	; (80016f8 <mtn_acc_gyro_init+0xf8>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f009 fbcb 	bl	800ae46 <lsm6dsox_pedo_debounce_steps_set>

	  //Enable Inactivity detection.
	  LSM6DSOX_ACC_Enable_Inactivity_Detection(pObj, LSM6DSOX_XL_12Hz5_GY_PD, LSM6DSOX_INT1_PIN);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	2103      	movs	r1, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f008 fac7 	bl	8009c4c <LSM6DSOX_ACC_Enable_Inactivity_Detection>
#else
	  mtn_acc_deinit(pObj);
#endif
#if GYRO_EN
	  mtn_gyro_init(pObj);
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff29 	bl	800151a <mtn_gyro_init>
	  LSM6DSOX_GYRO_Enable(pObj); //Enable Gyrometer.
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f007 ff06 	bl	80094de <LSM6DSOX_GYRO_Enable>
#else
	  mtn_gyro_deinit(pObj);
#endif
#if (ACC_EN && GYRO_EN)
	  pObj->is_initialized = 1;
 80016d2:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <mtn_acc_gyro_init+0xe0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#elif (!(ACC_EN || GYRO_EN))
	  pObj->is_initialized = 0;
#endif
	 }
#endif
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000200 	.word	0x20000200
 80016e4:	20000288 	.word	0x20000288
 80016e8:	0800dbf4 	.word	0x0800dbf4
 80016ec:	0800dc00 	.word	0x0800dc00
 80016f0:	20000005 	.word	0x20000005
 80016f4:	0800dc18 	.word	0x0800dc18
 80016f8:	20000293 	.word	0x20000293

080016fc <mtn_acc_mode_set>:

void mtn_acc_mode_set(motion_sensor_pow_modes mode)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
	int32_t ret;
	switch(mode)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b04      	cmp	r3, #4
 800170a:	f200 8149 	bhi.w	80019a0 <mtn_acc_mode_set+0x2a4>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <mtn_acc_mode_set+0x18>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	0800187f 	.word	0x0800187f
 8001718:	080017ef 	.word	0x080017ef
 800171c:	08001737 	.word	0x08001737
 8001720:	08001915 	.word	0x08001915
 8001724:	08001729 	.word	0x08001729
	case POWER_DOWN_MODE:
	{
#if (I2C_SPI_EN == 0)
		spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl1_xl, &pw_dn, 1);
#elif (I2C_SPI_EN == 1)
		i2c_write_8bit(&hi2c1, mtn_ctrl1_xl, &pw_dn, 1);
 8001728:	2301      	movs	r3, #1
 800172a:	4a9f      	ldr	r2, [pc, #636]	; (80019a8 <mtn_acc_mode_set+0x2ac>)
 800172c:	2110      	movs	r1, #16
 800172e:	489f      	ldr	r0, [pc, #636]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001730:	f000 fd2c 	bl	800218c <i2c_write_8bit>
#endif
		break;
 8001734:	e134      	b.n	80019a0 <mtn_acc_mode_set+0x2a4>
		  lsm6dsox_ctrl5_c_t val1;
		  lsm6dsox_ctrl6_c_t val2;
#if (I2C_SPI_EN == 0)
		  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
		  ret = i2c_read_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 8001736:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800173a:	2301      	movs	r3, #1
 800173c:	2115      	movs	r1, #21
 800173e:	489b      	ldr	r0, [pc, #620]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001740:	f000 fcec 	bl	800211c <i2c_read_8bit>
 8001744:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
		  if(ret == 0)
 8001746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d113      	bne.n	8001774 <mtn_acc_mode_set+0x78>
		  {
			  if (val2.xl_hm_mode)
 800174c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00c      	beq.n	8001774 <mtn_acc_mode_set+0x78>
			  {
				  val2.xl_hm_mode = 0;
 800175a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800175e:	f36f 1304 	bfc	r3, #4, #1
 8001762:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (I2C_SPI_EN == 0)
				  spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
				  i2c_write_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 8001766:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800176a:	2301      	movs	r3, #1
 800176c:	2115      	movs	r1, #21
 800176e:	488f      	ldr	r0, [pc, #572]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001770:	f000 fd0c 	bl	800218c <i2c_write_8bit>
#endif
			  }
		  }

		  /* Disable Gyro */
		  if (pObj->gyro_is_enabled == 1U)
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800177c:	2b01      	cmp	r3, #1
 800177e:	d104      	bne.n	800178a <mtn_acc_mode_set+0x8e>
		  {
			LSM6DSOX_GYRO_Disable(pObj);
 8001780:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f007 fece 	bl	8009526 <LSM6DSOX_GYRO_Disable>
		  }
#if (I2C_SPI_EN == 0)
		  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
		  ret = i2c_read_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 800178a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800178e:	2301      	movs	r3, #1
 8001790:	2114      	movs	r1, #20
 8001792:	4886      	ldr	r0, [pc, #536]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001794:	f000 fcc2 	bl	800211c <i2c_read_8bit>
 8001798:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
		  if(ret == 0)
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d11e      	bne.n	80017de <mtn_acc_mode_set+0xe2>
		  {
			  if (!val1.xl_ulp_en)
 80017a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d117      	bne.n	80017de <mtn_acc_mode_set+0xe2>
			  {
				  /* Power off the accelerometer */
				  if (pObj->acc_is_enabled == 1U)
 80017ae:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d104      	bne.n	80017c4 <mtn_acc_mode_set+0xc8>
				  {
					 LSM6DSOX_ACC_Disable(pObj);
 80017ba:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f007 fbee 	bl	8008fa0 <LSM6DSOX_ACC_Disable>
				  }

				  val1.xl_ulp_en = 1U;
 80017c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#if (I2C_SPI_EN == 0)
				  spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
				  i2c_write_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 80017d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017d4:	2301      	movs	r3, #1
 80017d6:	2114      	movs	r1, #20
 80017d8:	4874      	ldr	r0, [pc, #464]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 80017da:	f000 fcd7 	bl	800218c <i2c_write_8bit>
#endif
			  }
		  }
		  lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_1Hz6);
 80017de:	4b74      	ldr	r3, [pc, #464]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	331c      	adds	r3, #28
 80017e4:	210b      	movs	r1, #11
 80017e6:	4618      	mov	r0, r3
 80017e8:	f008 fb7e 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
		  break;
 80017ec:	e0d8      	b.n	80019a0 <mtn_acc_mode_set+0x2a4>
		  lsm6dsox_ctrl5_c_t val1;
		  lsm6dsox_ctrl6_c_t val2;
#if (I2C_SPI_EN == 0)
		  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
		  ret = i2c_read_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 80017ee:	f107 0220 	add.w	r2, r7, #32
 80017f2:	2301      	movs	r3, #1
 80017f4:	2114      	movs	r1, #20
 80017f6:	486d      	ldr	r0, [pc, #436]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 80017f8:	f000 fc90 	bl	800211c <i2c_read_8bit>
 80017fc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
		  if(ret == 0)
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d118      	bne.n	8001836 <mtn_acc_mode_set+0x13a>
		  {
			  if (val1.xl_ulp_en)
 8001804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <mtn_acc_mode_set+0x120>
			  {
				  /* Power off the accelerometer */
				  LSM6DSOX_ACC_Disable(pObj);
 8001812:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f007 fbc2 	bl	8008fa0 <LSM6DSOX_ACC_Disable>
			  }

			val1.xl_ulp_en = 0;
 800181c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001820:	f36f 13c7 	bfc	r3, #7, #1
 8001824:	f887 3020 	strb.w	r3, [r7, #32]
#if (I2C_SPI_EN == 0)
			spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
			i2c_write_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 8001828:	f107 0220 	add.w	r2, r7, #32
 800182c:	2301      	movs	r3, #1
 800182e:	2114      	movs	r1, #20
 8001830:	485e      	ldr	r0, [pc, #376]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001832:	f000 fcab 	bl	800218c <i2c_write_8bit>
#endif
		  }
#if (I2C_SPI_EN == 0)
		  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
		  ret = i2c_read_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 8001836:	f107 021c 	add.w	r2, r7, #28
 800183a:	2301      	movs	r3, #1
 800183c:	2115      	movs	r1, #21
 800183e:	485b      	ldr	r0, [pc, #364]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001840:	f000 fc6c 	bl	800211c <i2c_read_8bit>
 8001844:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
		  if(ret == 0)
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d110      	bne.n	800186e <mtn_acc_mode_set+0x172>
		  {
			  if (!val2.xl_hm_mode)
 800184c:	7f3b      	ldrb	r3, [r7, #28]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10a      	bne.n	800186e <mtn_acc_mode_set+0x172>
			  {
				  val2.xl_hm_mode = 1U;
 8001858:	7f3b      	ldrb	r3, [r7, #28]
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	773b      	strb	r3, [r7, #28]
#if (I2C_SPI_EN == 0)
				  spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
				  i2c_write_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 8001860:	f107 021c 	add.w	r2, r7, #28
 8001864:	2301      	movs	r3, #1
 8001866:	2115      	movs	r1, #21
 8001868:	4850      	ldr	r0, [pc, #320]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 800186a:	f000 fc8f 	bl	800218c <i2c_write_8bit>
#endif
			  }
		  }
		  lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_12Hz5);
 800186e:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	331c      	adds	r3, #28
 8001874:	2101      	movs	r1, #1
 8001876:	4618      	mov	r0, r3
 8001878:	f008 fb36 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
		  break;
 800187c:	e090      	b.n	80019a0 <mtn_acc_mode_set+0x2a4>
	  lsm6dsox_ctrl5_c_t val1;
	  lsm6dsox_ctrl6_c_t val2;
#if (I2C_SPI_EN == 0)
	  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
	  ret = i2c_read_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 800187e:	f107 0218 	add.w	r2, r7, #24
 8001882:	2301      	movs	r3, #1
 8001884:	2114      	movs	r1, #20
 8001886:	4849      	ldr	r0, [pc, #292]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001888:	f000 fc48 	bl	800211c <i2c_read_8bit>
 800188c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
	  if(ret == 0)
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11b      	bne.n	80018cc <mtn_acc_mode_set+0x1d0>
	  {
		  if (val1.xl_ulp_en)
 8001894:	7e3b      	ldrb	r3, [r7, #24]
 8001896:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d015      	beq.n	80018cc <mtn_acc_mode_set+0x1d0>
		  {
			  /* Power off the accelerometer */
			  if (pObj->acc_is_enabled == 1U)
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d104      	bne.n	80018b6 <mtn_acc_mode_set+0x1ba>
			  {
				  LSM6DSOX_ACC_Disable(pObj);
 80018ac:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f007 fb75 	bl	8008fa0 <LSM6DSOX_ACC_Disable>
			  }

			  val1.xl_ulp_en = 0;
 80018b6:	7e3b      	ldrb	r3, [r7, #24]
 80018b8:	f36f 13c7 	bfc	r3, #7, #1
 80018bc:	763b      	strb	r3, [r7, #24]
#if (I2C_SPI_EN == 0)
			  spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
			  i2c_write_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 80018be:	f107 0218 	add.w	r2, r7, #24
 80018c2:	2301      	movs	r3, #1
 80018c4:	2114      	movs	r1, #20
 80018c6:	4839      	ldr	r0, [pc, #228]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 80018c8:	f000 fc60 	bl	800218c <i2c_write_8bit>
		  }
	  }
#if (I2C_SPI_EN == 0)
	  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
	  ret = i2c_read_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 80018cc:	f107 0214 	add.w	r2, r7, #20
 80018d0:	2301      	movs	r3, #1
 80018d2:	2115      	movs	r1, #21
 80018d4:	4835      	ldr	r0, [pc, #212]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 80018d6:	f000 fc21 	bl	800211c <i2c_read_8bit>
 80018da:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
	  if(ret == 0)
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d15d      	bne.n	800199e <mtn_acc_mode_set+0x2a2>
	  {
		  if (val2.xl_hm_mode)
 80018e2:	7d3b      	ldrb	r3, [r7, #20]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <mtn_acc_mode_set+0x208>
		  {
			  val2.xl_hm_mode = 0;
 80018ee:	7d3b      	ldrb	r3, [r7, #20]
 80018f0:	f36f 1304 	bfc	r3, #4, #1
 80018f4:	753b      	strb	r3, [r7, #20]
#if (I2C_SPI_EN == 0)
			  spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
			  i2c_write_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 80018f6:	f107 0214 	add.w	r2, r7, #20
 80018fa:	2301      	movs	r3, #1
 80018fc:	2115      	movs	r1, #21
 80018fe:	482b      	ldr	r0, [pc, #172]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001900:	f000 fc44 	bl	800218c <i2c_write_8bit>
#endif
		  }
		  lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_417Hz);
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	331c      	adds	r3, #28
 800190a:	2106      	movs	r1, #6
 800190c:	4618      	mov	r0, r3
 800190e:	f008 faeb 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
	  }
	  break;
 8001912:	e044      	b.n	800199e <mtn_acc_mode_set+0x2a2>
				  lsm6dsox_ctrl5_c_t val1;
				  lsm6dsox_ctrl6_c_t val2;
#if (I2C_SPI_EN == 0)
				  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
				  ret = i2c_read_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 8001914:	f107 0210 	add.w	r2, r7, #16
 8001918:	2301      	movs	r3, #1
 800191a:	2114      	movs	r1, #20
 800191c:	4823      	ldr	r0, [pc, #140]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 800191e:	f000 fbfd 	bl	800211c <i2c_read_8bit>
 8001922:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
				  if(ret == 0)
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d115      	bne.n	8001956 <mtn_acc_mode_set+0x25a>
				  {
					  if (val1.xl_ulp_en)
 800192a:	7c3b      	ldrb	r3, [r7, #16]
 800192c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <mtn_acc_mode_set+0x244>
					  {
						  /* Power off the accelerometer */
						  LSM6DSOX_ACC_Disable(pObj);
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f007 fb30 	bl	8008fa0 <LSM6DSOX_ACC_Disable>
					  }

					val1.xl_ulp_en = 0;
 8001940:	7c3b      	ldrb	r3, [r7, #16]
 8001942:	f36f 13c7 	bfc	r3, #7, #1
 8001946:	743b      	strb	r3, [r7, #16]
#if (I2C_SPI_EN == 0)
					spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
#elif (I2C_SPI_EN == 1)
					i2c_write_8bit(&hi2c1, mtn_ctrl5_c, (uint8_t *)&val1, 1);
 8001948:	f107 0210 	add.w	r2, r7, #16
 800194c:	2301      	movs	r3, #1
 800194e:	2114      	movs	r1, #20
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001952:	f000 fc1b 	bl	800218c <i2c_write_8bit>
#endif
				  }
#if (I2C_SPI_EN == 0)
				  ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
				  ret = i2c_read_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	2301      	movs	r3, #1
 800195c:	2115      	movs	r1, #21
 800195e:	4813      	ldr	r0, [pc, #76]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 8001960:	f000 fbdc 	bl	800211c <i2c_read_8bit>
 8001964:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif
				  if(ret == 0)
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d110      	bne.n	800198e <mtn_acc_mode_set+0x292>
				  {
					  if (!val2.xl_hm_mode)
 800196c:	7b3b      	ldrb	r3, [r7, #12]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <mtn_acc_mode_set+0x292>
					  {
						  val2.xl_hm_mode = 1U;
 8001978:	7b3b      	ldrb	r3, [r7, #12]
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	733b      	strb	r3, [r7, #12]
#if (I2C_SPI_EN == 0)
						  spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
#elif (I2C_SPI_EN == 1)
						  i2c_write_8bit(&hi2c1, mtn_ctrl6_c, (uint8_t *)&val2, 1);
 8001980:	f107 020c 	add.w	r2, r7, #12
 8001984:	2301      	movs	r3, #1
 8001986:	2115      	movs	r1, #21
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <mtn_acc_mode_set+0x2b0>)
 800198a:	f000 fbff 	bl	800218c <i2c_write_8bit>
#endif
					  }
				  }
				  lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_104Hz);
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <mtn_acc_mode_set+0x2b4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	331c      	adds	r3, #28
 8001994:	2104      	movs	r1, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f008 faa6 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
				  break;
 800199c:	e000      	b.n	80019a0 <mtn_acc_mode_set+0x2a4>
	  break;
 800199e:	bf00      	nop
	}
  }
}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000292 	.word	0x20000292
 80019ac:	20000090 	.word	0x20000090
 80019b0:	20000200 	.word	0x20000200

080019b4 <mtn_gyro_mode_set>:

void mtn_gyro_mode_set(motion_sensor_pow_modes mode)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	lsm6dsox_ctrl7_g_t val;
	int32_t ret;
	switch(mode)
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d86e      	bhi.n	8001aa2 <mtn_gyro_mode_set+0xee>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <mtn_gyro_mode_set+0x18>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	08001a2b 	.word	0x08001a2b
 80019d0:	080019ef 	.word	0x080019ef
 80019d4:	08001aa3 	.word	0x08001aa3
 80019d8:	08001a67 	.word	0x08001a67
 80019dc:	080019e1 	.word	0x080019e1
	case POWER_DOWN_MODE:
	{
#if (I2C_SPI_EN == 0)
		spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl2_g, &pw_dn, 1);
#elif (I2C_SPI_EN ==1)
		i2c_write_8bit(&hi2c1,  mtn_ctrl2_g, &pw_dn, 1);
 80019e0:	2301      	movs	r3, #1
 80019e2:	4a32      	ldr	r2, [pc, #200]	; (8001aac <mtn_gyro_mode_set+0xf8>)
 80019e4:	2111      	movs	r1, #17
 80019e6:	4832      	ldr	r0, [pc, #200]	; (8001ab0 <mtn_gyro_mode_set+0xfc>)
 80019e8:	f000 fbd0 	bl	800218c <i2c_write_8bit>
#endif
		break;
 80019ec:	e059      	b.n	8001aa2 <mtn_gyro_mode_set+0xee>
	case LOW_POWER_MODE:
	{
#if (I2C_SPI_EN == 0)
		ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl7_g, (uint8_t *)&val, 1);
#elif (I2C_SPI_EN == 1)
		ret = i2c_read_8bit(&hi2c1, mtn_ctrl7_g, (uint8_t *)&val, 1);
 80019ee:	f107 0208 	add.w	r2, r7, #8
 80019f2:	2301      	movs	r3, #1
 80019f4:	2116      	movs	r1, #22
 80019f6:	482e      	ldr	r0, [pc, #184]	; (8001ab0 <mtn_gyro_mode_set+0xfc>)
 80019f8:	f000 fb90 	bl	800211c <i2c_read_8bit>
 80019fc:	60f8      	str	r0, [r7, #12]
#endif

		if(ret == 0)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10a      	bne.n	8001a1a <mtn_gyro_mode_set+0x66>
		{
			val.g_hm_mode = 1U;
 8001a04:	7a3b      	ldrb	r3, [r7, #8]
 8001a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0a:	723b      	strb	r3, [r7, #8]
#if (I2C_SPI_EN == 0)
			spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl7_g, (uint8_t *)&val, 1);
#elif (I2C_SPI_EN == 1)
			i2c_write_8bit(&hi2c1, mtn_ctrl7_g, (uint8_t *)&val, 1);
 8001a0c:	f107 0208 	add.w	r2, r7, #8
 8001a10:	2301      	movs	r3, #1
 8001a12:	2116      	movs	r1, #22
 8001a14:	4826      	ldr	r0, [pc, #152]	; (8001ab0 <mtn_gyro_mode_set+0xfc>)
 8001a16:	f000 fbb9 	bl	800218c <i2c_write_8bit>
#endif
		}
		lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_12Hz5);
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <mtn_gyro_mode_set+0x100>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	331c      	adds	r3, #28
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f008 fca4 	bl	800a370 <lsm6dsox_gy_data_rate_set>
		break;
 8001a28:	e03b      	b.n	8001aa2 <mtn_gyro_mode_set+0xee>
	case HIGH_PERFORMANCE_MODE:
	{
#if (I2C_SPI_EN == 0)
		ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl7_g, (uint8_t *)&val, 1);
#elif (I2C_SPI_EN == 1)
		ret = i2c_read_8bit(&hi2c1, mtn_ctrl7_g, (uint8_t *)&val, 1);
 8001a2a:	f107 0208 	add.w	r2, r7, #8
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2116      	movs	r1, #22
 8001a32:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <mtn_gyro_mode_set+0xfc>)
 8001a34:	f000 fb72 	bl	800211c <i2c_read_8bit>
 8001a38:	60f8      	str	r0, [r7, #12]
#endif
		if(ret == 0)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <mtn_gyro_mode_set+0xa2>
		{
			val.g_hm_mode = 0U;
 8001a40:	7a3b      	ldrb	r3, [r7, #8]
 8001a42:	f36f 13c7 	bfc	r3, #7, #1
 8001a46:	723b      	strb	r3, [r7, #8]
#if (I2C_SPI_EN == 0)
			spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl7_g, (uint8_t *)&val, 1);
#elif (I2C_SPI_EN == 1)
			i2c_write_8bit(&hi2c1, mtn_ctrl7_g, (uint8_t *)&val, 1);
 8001a48:	f107 0208 	add.w	r2, r7, #8
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	2116      	movs	r1, #22
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <mtn_gyro_mode_set+0xfc>)
 8001a52:	f000 fb9b 	bl	800218c <i2c_write_8bit>
#endif
		}
		lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_417Hz);
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <mtn_gyro_mode_set+0x100>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	331c      	adds	r3, #28
 8001a5c:	2106      	movs	r1, #6
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f008 fc86 	bl	800a370 <lsm6dsox_gy_data_rate_set>
		break;
 8001a64:	e01d      	b.n	8001aa2 <mtn_gyro_mode_set+0xee>
	case NORMAL_MODE:
	{
#if (I2C_SPI_EN == 0)
				ret = spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl7_g, (uint8_t *)&val, 1);
#elif (I2C_SPI_EN == 1)
				ret = i2c_read_8bit(&hi2c1, mtn_ctrl7_g, (uint8_t *)&val, 1);
 8001a66:	f107 0208 	add.w	r2, r7, #8
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2116      	movs	r1, #22
 8001a6e:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <mtn_gyro_mode_set+0xfc>)
 8001a70:	f000 fb54 	bl	800211c <i2c_read_8bit>
 8001a74:	60f8      	str	r0, [r7, #12]
#endif
				if(ret == 0)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <mtn_gyro_mode_set+0xde>
				{
					val.g_hm_mode = 1U;
 8001a7c:	7a3b      	ldrb	r3, [r7, #8]
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	723b      	strb	r3, [r7, #8]
#if (I2C_SPI_EN == 0)
					spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl7_g, (uint8_t *)&val, 1);
#elif (I2C_SPI_EN == 1)
					i2c_write_8bit(&hi2c1, mtn_ctrl7_g, (uint8_t *)&val, 1);
 8001a84:	f107 0208 	add.w	r2, r7, #8
 8001a88:	2301      	movs	r3, #1
 8001a8a:	2116      	movs	r1, #22
 8001a8c:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <mtn_gyro_mode_set+0xfc>)
 8001a8e:	f000 fb7d 	bl	800218c <i2c_write_8bit>
#endif
				}
				lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_104Hz);
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <mtn_gyro_mode_set+0x100>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	331c      	adds	r3, #28
 8001a98:	2104      	movs	r1, #4
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 fc68 	bl	800a370 <lsm6dsox_gy_data_rate_set>
				break;
 8001aa0:	bf00      	nop
	}
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000292 	.word	0x20000292
 8001ab0:	20000090 	.word	0x20000090
 8001ab4:	20000200 	.word	0x20000200

08001ab8 <mtn_mag_mode_set>:

void mtn_mag_mode_set(motion_sensor_pow_modes mode)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	switch(mode)
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d006      	beq.n	8001ad6 <mtn_mag_mode_set+0x1e>
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	dc7e      	bgt.n	8001bca <mtn_mag_mode_set+0x112>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d040      	beq.n	8001b52 <mtn_mag_mode_set+0x9a>
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d006      	beq.n	8001ae2 <mtn_mag_mode_set+0x2a>
			mtn_write_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
		  }
		break;
	}
  }
}
 8001ad4:	e079      	b.n	8001bca <mtn_mag_mode_set+0x112>
		LIS2MDL_MAG_Disable(mObj);
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 fd6e 	bl	80085bc <LIS2MDL_MAG_Disable>
		break;
 8001ae0:	e073      	b.n	8001bca <mtn_mag_mode_set+0x112>
		uint8_t lval = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]
		  ret = mtn_read_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	f107 020c 	add.w	r2, r7, #12
 8001aee:	2301      	movs	r3, #1
 8001af0:	2160      	movs	r1, #96	; 0x60
 8001af2:	f7ff fa61 	bl	8000fb8 <mtn_read_sensorhub_reg>
 8001af6:	61b8      	str	r0, [r7, #24]
		  if (ret == 0)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d110      	bne.n	8001b20 <mtn_mag_mode_set+0x68>
		    reg.lp = (uint8_t)lval;
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	7b3b      	ldrb	r3, [r7, #12]
 8001b08:	f362 1304 	bfi	r3, r2, #4, #1
 8001b0c:	733b      	strb	r3, [r7, #12]
		    ret = mtn_write_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f107 020c 	add.w	r2, r7, #12
 8001b16:	2301      	movs	r3, #1
 8001b18:	2160      	movs	r1, #96	; 0x60
 8001b1a:	f7ff fb8c 	bl	8001236 <mtn_write_sensorhub_reg>
 8001b1e:	61b8      	str	r0, [r7, #24]
		  ret = mtn_read_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	f107 020c 	add.w	r2, r7, #12
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2160      	movs	r1, #96	; 0x60
 8001b2c:	f7ff fa44 	bl	8000fb8 <mtn_read_sensorhub_reg>
 8001b30:	61b8      	str	r0, [r7, #24]
		  if(ret == 0)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d145      	bne.n	8001bc4 <mtn_mag_mode_set+0x10c>
			  reg.odr = LIS2MDL_ODR_10Hz;
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	f36f 0383 	bfc	r3, #2, #2
 8001b3e:	733b      	strb	r3, [r7, #12]
			  mtn_write_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	f107 020c 	add.w	r2, r7, #12
 8001b48:	2301      	movs	r3, #1
 8001b4a:	2160      	movs	r1, #96	; 0x60
 8001b4c:	f7ff fb73 	bl	8001236 <mtn_write_sensorhub_reg>
		break;
 8001b50:	e038      	b.n	8001bc4 <mtn_mag_mode_set+0x10c>
		uint8_t hval = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
		  ret = mtn_read_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001b56:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	f107 0208 	add.w	r2, r7, #8
 8001b5e:	2301      	movs	r3, #1
 8001b60:	2160      	movs	r1, #96	; 0x60
 8001b62:	f7ff fa29 	bl	8000fb8 <mtn_read_sensorhub_reg>
 8001b66:	6138      	str	r0, [r7, #16]
		  if (ret == 0)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d110      	bne.n	8001b90 <mtn_mag_mode_set+0xd8>
			reg.lp = (uint8_t)hval;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	7a3b      	ldrb	r3, [r7, #8]
 8001b78:	f362 1304 	bfi	r3, r2, #4, #1
 8001b7c:	723b      	strb	r3, [r7, #8]
			ret = mtn_write_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	f107 0208 	add.w	r2, r7, #8
 8001b86:	2301      	movs	r3, #1
 8001b88:	2160      	movs	r1, #96	; 0x60
 8001b8a:	f7ff fb54 	bl	8001236 <mtn_write_sensorhub_reg>
 8001b8e:	6138      	str	r0, [r7, #16]
		  ret = mtn_read_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f107 0208 	add.w	r2, r7, #8
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2160      	movs	r1, #96	; 0x60
 8001b9c:	f7ff fa0c 	bl	8000fb8 <mtn_read_sensorhub_reg>
 8001ba0:	6138      	str	r0, [r7, #16]
		  if(ret == 0)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10f      	bne.n	8001bc8 <mtn_mag_mode_set+0x110>
			reg.odr = LIS2MDL_ODR_50Hz;
 8001ba8:	7a3b      	ldrb	r3, [r7, #8]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f362 0383 	bfi	r3, r2, #2, #2
 8001bb0:	723b      	strb	r3, [r7, #8]
			mtn_write_sensorhub_reg(mObj, cfg_reg_a, (uint8_t *)&reg, 1);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <mtn_mag_mode_set+0x11c>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f107 0208 	add.w	r2, r7, #8
 8001bba:	2301      	movs	r3, #1
 8001bbc:	2160      	movs	r1, #96	; 0x60
 8001bbe:	f7ff fb3a 	bl	8001236 <mtn_write_sensorhub_reg>
		break;
 8001bc2:	e001      	b.n	8001bc8 <mtn_mag_mode_set+0x110>
		break;
 8001bc4:	bf00      	nop
 8001bc6:	e000      	b.n	8001bca <mtn_mag_mode_set+0x112>
		break;
 8001bc8:	bf00      	nop
}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000024c 	.word	0x2000024c

08001bd8 <check_mtn_acc_mode>:

void check_mtn_acc_mode(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
	uint8_t buff=0, ret=0, ret1=0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	717b      	strb	r3, [r7, #5]
 8001be2:	2300      	movs	r3, #0
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	2300      	movs	r3, #0
 8001be8:	71bb      	strb	r3, [r7, #6]

	printf("\r\n Acc:");
 8001bea:	482b      	ldr	r0, [pc, #172]	; (8001c98 <check_mtn_acc_mode+0xc0>)
 8001bec:	f00a ffe0 	bl	800cbb0 <iprintf>

	//checking ODR
	reg_ret_status(0x10, &buff);
 8001bf0:	1d7b      	adds	r3, r7, #5
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2010      	movs	r0, #16
 8001bf6:	f7ff fcdf 	bl	80015b8 <reg_ret_status>
	if((buff & 0xF0) == 0x00)
 8001bfa:	797b      	ldrb	r3, [r7, #5]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <check_mtn_acc_mode+0x32>
		printf("\r\nPower down");
 8001c04:	4825      	ldr	r0, [pc, #148]	; (8001c9c <check_mtn_acc_mode+0xc4>)
 8001c06:	f00a ffd3 	bl	800cbb0 <iprintf>

	ret = buff;
 8001c0a:	797b      	ldrb	r3, [r7, #5]
 8001c0c:	71fb      	strb	r3, [r7, #7]
	//checking high performance or low power/normal mode
	reg_ret_status(0x15, &buff);
 8001c0e:	1d7b      	adds	r3, r7, #5
 8001c10:	4619      	mov	r1, r3
 8001c12:	2015      	movs	r0, #21
 8001c14:	f7ff fcd0 	bl	80015b8 <reg_ret_status>
	if((buff & 0x10) == 0x10 && ret == 0x40)
 8001c18:	797b      	ldrb	r3, [r7, #5]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <check_mtn_acc_mode+0x58>
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d103      	bne.n	8001c30 <check_mtn_acc_mode+0x58>
		printf("\r\nNormal mode");
 8001c28:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <check_mtn_acc_mode+0xc8>)
 8001c2a:	f00a ffc1 	bl	800cbb0 <iprintf>
 8001c2e:	e00a      	b.n	8001c46 <check_mtn_acc_mode+0x6e>
	else if((buff & 0x10) == 0x10 && ret == 0x10)
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <check_mtn_acc_mode+0x6e>
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d102      	bne.n	8001c46 <check_mtn_acc_mode+0x6e>
		printf("\r\nLow power mode");
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <check_mtn_acc_mode+0xcc>)
 8001c42:	f00a ffb5 	bl	800cbb0 <iprintf>

	ret1 = buff;
 8001c46:	797b      	ldrb	r3, [r7, #5]
 8001c48:	71bb      	strb	r3, [r7, #6]
	//checking ultra low power mode
	reg_ret_status(0x14, &buff);
 8001c4a:	1d7b      	adds	r3, r7, #5
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	2014      	movs	r0, #20
 8001c50:	f7ff fcb2 	bl	80015b8 <reg_ret_status>
	if((buff & 0x80) == 0x80 && (ret1 & 0x10) == 0x00)
 8001c54:	797b      	ldrb	r3, [r7, #5]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da08      	bge.n	8001c6e <check_mtn_acc_mode+0x96>
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <check_mtn_acc_mode+0x96>
		printf("\r\nUltra low power mode");
 8001c66:	4810      	ldr	r0, [pc, #64]	; (8001ca8 <check_mtn_acc_mode+0xd0>)
 8001c68:	f00a ffa2 	bl	800cbb0 <iprintf>
	else if((buff & 0x80) == 0x00 && (ret1 & 0x10) == 0x00 && (ret & 0xF0) == 0x60)
		printf("\r\nHigh performance mode");

}
 8001c6c:	e010      	b.n	8001c90 <check_mtn_acc_mode+0xb8>
	else if((buff & 0x80) == 0x00 && (ret1 & 0x10) == 0x00 && (ret & 0xF0) == 0x60)
 8001c6e:	797b      	ldrb	r3, [r7, #5]
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0c      	blt.n	8001c90 <check_mtn_acc_mode+0xb8>
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <check_mtn_acc_mode+0xb8>
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c86:	2b60      	cmp	r3, #96	; 0x60
 8001c88:	d102      	bne.n	8001c90 <check_mtn_acc_mode+0xb8>
		printf("\r\nHigh performance mode");
 8001c8a:	4808      	ldr	r0, [pc, #32]	; (8001cac <check_mtn_acc_mode+0xd4>)
 8001c8c:	f00a ff90 	bl	800cbb0 <iprintf>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	0800dc24 	.word	0x0800dc24
 8001c9c:	0800dc2c 	.word	0x0800dc2c
 8001ca0:	0800dc3c 	.word	0x0800dc3c
 8001ca4:	0800dc4c 	.word	0x0800dc4c
 8001ca8:	0800dc60 	.word	0x0800dc60
 8001cac:	0800dc78 	.word	0x0800dc78

08001cb0 <check_mtn_gyro_mode>:

void check_mtn_gyro_mode(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
	uint8_t buff=0, ret=0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71bb      	strb	r3, [r7, #6]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	71fb      	strb	r3, [r7, #7]

	printf("\r\n Gyro:");
 8001cbe:	4821      	ldr	r0, [pc, #132]	; (8001d44 <check_mtn_gyro_mode+0x94>)
 8001cc0:	f00a ff76 	bl	800cbb0 <iprintf>

	//checking ODR
	reg_ret_status(0x11, &buff);
 8001cc4:	1dbb      	adds	r3, r7, #6
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	2011      	movs	r0, #17
 8001cca:	f7ff fc75 	bl	80015b8 <reg_ret_status>
	if((buff & 0xF0) == 0x00)
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <check_mtn_gyro_mode+0x2e>
		printf("\r\nPower down mode");
 8001cd8:	481b      	ldr	r0, [pc, #108]	; (8001d48 <check_mtn_gyro_mode+0x98>)
 8001cda:	f00a ff69 	bl	800cbb0 <iprintf>

	ret = buff;
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	71fb      	strb	r3, [r7, #7]
	//checking high performance or low power/normal mode
	reg_ret_status(0x16, &buff);
 8001ce2:	1dbb      	adds	r3, r7, #6
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	2016      	movs	r0, #22
 8001ce8:	f7ff fc66 	bl	80015b8 <reg_ret_status>
	if(((buff & 0x80) == 0x80) && ((ret & 0xF0) == 0x10))
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da08      	bge.n	8001d06 <check_mtn_gyro_mode+0x56>
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d103      	bne.n	8001d06 <check_mtn_gyro_mode+0x56>
		printf("\r\nLow power mode");
 8001cfe:	4813      	ldr	r0, [pc, #76]	; (8001d4c <check_mtn_gyro_mode+0x9c>)
 8001d00:	f00a ff56 	bl	800cbb0 <iprintf>
 8001d04:	e019      	b.n	8001d3a <check_mtn_gyro_mode+0x8a>
	else if(((buff & 0x80) == 0x80) && ((ret & 0xF0) == 0x40))
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da08      	bge.n	8001d20 <check_mtn_gyro_mode+0x70>
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d103      	bne.n	8001d20 <check_mtn_gyro_mode+0x70>
		printf("\r\nNormal mode");
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <check_mtn_gyro_mode+0xa0>)
 8001d1a:	f00a ff49 	bl	800cbb0 <iprintf>
 8001d1e:	e00c      	b.n	8001d3a <check_mtn_gyro_mode+0x8a>
	else if((buff & 0x80) == 0x00 && (ret & 0xF0) == 0x60)
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db08      	blt.n	8001d3a <check_mtn_gyro_mode+0x8a>
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2e:	2b60      	cmp	r3, #96	; 0x60
 8001d30:	d103      	bne.n	8001d3a <check_mtn_gyro_mode+0x8a>
		printf("\r\nHigh performance mode");
 8001d32:	4808      	ldr	r0, [pc, #32]	; (8001d54 <check_mtn_gyro_mode+0xa4>)
 8001d34:	f00a ff3c 	bl	800cbb0 <iprintf>
}
 8001d38:	e7ff      	b.n	8001d3a <check_mtn_gyro_mode+0x8a>
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	0800dc90 	.word	0x0800dc90
 8001d48:	0800dc9c 	.word	0x0800dc9c
 8001d4c:	0800dc4c 	.word	0x0800dc4c
 8001d50:	0800dc3c 	.word	0x0800dc3c
 8001d54:	0800dc78 	.word	0x0800dc78

08001d58 <check_mag_mode>:

void check_mag_mode(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	lis2mdl_cfg_reg_a_t reg;

	printf("\r\n Mag:");
 8001d5e:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <check_mag_mode+0x70>)
 8001d60:	f00a ff26 	bl	800cbb0 <iprintf>
	LIS2MDL_Read_Reg(mObj, cfg_reg_a, (uint8_t *)&reg);
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <check_mag_mode+0x74>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	1d3a      	adds	r2, r7, #4
 8001d6a:	2160      	movs	r1, #96	; 0x60
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f006 fd02 	bl	8008776 <LIS2MDL_Read_Reg>
	printf("\r\n0x%X,",reg);
 8001d72:	7939      	ldrb	r1, [r7, #4]
 8001d74:	4816      	ldr	r0, [pc, #88]	; (8001dd0 <check_mag_mode+0x78>)
 8001d76:	f00a ff1b 	bl	800cbb0 <iprintf>

	//checking low power or high performance mode and power down mode
	if(reg.lp == 1)
 8001d7a:	793b      	ldrb	r3, [r7, #4]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <check_mag_mode+0x36>
		printf("\r\nLow power mode");
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <check_mag_mode+0x7c>)
 8001d88:	f00a ff12 	bl	800cbb0 <iprintf>
	else if(reg.lp == 0)
		printf("\r\nHigh performance mode");
	else if(reg.md == 2 || reg.md == 3)
		printf("power down mode");
}
 8001d8c:	e018      	b.n	8001dc0 <check_mag_mode+0x68>
	else if(reg.lp == 0)
 8001d8e:	793b      	ldrb	r3, [r7, #4]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <check_mag_mode+0x4a>
		printf("\r\nHigh performance mode");
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <check_mag_mode+0x80>)
 8001d9c:	f00a ff08 	bl	800cbb0 <iprintf>
}
 8001da0:	e00e      	b.n	8001dc0 <check_mag_mode+0x68>
	else if(reg.md == 2 || reg.md == 3)
 8001da2:	793b      	ldrb	r3, [r7, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d005      	beq.n	8001dba <check_mag_mode+0x62>
 8001dae:	793b      	ldrb	r3, [r7, #4]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d102      	bne.n	8001dc0 <check_mag_mode+0x68>
		printf("power down mode");
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <check_mag_mode+0x84>)
 8001dbc:	f00a fef8 	bl	800cbb0 <iprintf>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	0800dcb0 	.word	0x0800dcb0
 8001dcc:	2000024c 	.word	0x2000024c
 8001dd0:	0800dcb8 	.word	0x0800dcb8
 8001dd4:	0800dc4c 	.word	0x0800dc4c
 8001dd8:	0800dc78 	.word	0x0800dc78
 8001ddc:	0800dcc0 	.word	0x0800dcc0

08001de0 <mtn_mag_init>:

void mtn_mag_init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
#if MAG_EN

		uint8_t buff;

	    //read chip ID of magnetometer(0x40).
		LIS2MDL_ReadID(mObj, &lis2mdl_ID);
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <mtn_mag_init+0x148>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4950      	ldr	r1, [pc, #320]	; (8001f2c <mtn_mag_init+0x14c>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f006 fb7d 	bl	80084ec <LIS2MDL_ReadID>
		printf("\r\n1. 0x%X",lis2mdl_ID);
 8001df2:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <mtn_mag_init+0x14c>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	484d      	ldr	r0, [pc, #308]	; (8001f30 <mtn_mag_init+0x150>)
 8001dfa:	f00a fed9 	bl	800cbb0 <iprintf>
		if(lis2mdl_ID != 0x40)
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <mtn_mag_init+0x14c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d01f      	beq.n	8001e46 <mtn_mag_init+0x66>
		{
			printf("\r\nreset function call");
 8001e06:	484b      	ldr	r0, [pc, #300]	; (8001f34 <mtn_mag_init+0x154>)
 8001e08:	f00a fed2 	bl	800cbb0 <iprintf>
#if (I2C_SPI_EN == 0)
			spi_write_reg_mtn_snsr(&hspi1, acc_gyro_rst_reg, &acc_gyro_rst_val, 1);
#elif (I2C_SPI_EN == 1)
			//reset lsm6dsox
			i2c_write_8bit(&hi2c1, acc_gyro_rst_reg, &acc_gyro_rst_val, 1);
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	4a4a      	ldr	r2, [pc, #296]	; (8001f38 <mtn_mag_init+0x158>)
 8001e10:	2112      	movs	r1, #18
 8001e12:	484a      	ldr	r0, [pc, #296]	; (8001f3c <mtn_mag_init+0x15c>)
 8001e14:	f000 f9ba 	bl	800218c <i2c_write_8bit>
#endif
			//reset magnetometer(lis2mdl)
			LIS2MDL_Write_Reg(mObj, mag_rst_reg, mag_rst_val);
 8001e18:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <mtn_mag_init+0x148>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2223      	movs	r2, #35	; 0x23
 8001e1e:	2160      	movs	r1, #96	; 0x60
 8001e20:	4618      	mov	r0, r3
 8001e22:	f006 fcd2 	bl	80087ca <LIS2MDL_Write_Reg>

			//read chip ID of magnetometer(0x40).
			LIS2MDL_ReadID(mObj, &lis2mdl_ID);
 8001e26:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <mtn_mag_init+0x148>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4940      	ldr	r1, [pc, #256]	; (8001f2c <mtn_mag_init+0x14c>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f006 fb5d 	bl	80084ec <LIS2MDL_ReadID>
			HAL_Delay(500);
 8001e32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e36:	f000 fb57 	bl	80024e8 <HAL_Delay>
			printf("\r\n2. 0x%X",lis2mdl_ID);
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <mtn_mag_init+0x14c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	483f      	ldr	r0, [pc, #252]	; (8001f40 <mtn_mag_init+0x160>)
 8001e42:	f00a feb5 	bl	800cbb0 <iprintf>
		}
		if(lis2mdl_ID == 0x40)
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <mtn_mag_init+0x14c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d167      	bne.n	8001f1e <mtn_mag_init+0x13e>
		{
			 //Initialize magnetometer.
			LIS2MDL_Init(mObj);
 8001e4e:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <mtn_mag_init+0x148>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f006 fac4 	bl	80083e0 <LIS2MDL_Init>

			//Enable magnetometer.
			LIS2MDL_MAG_Enable(mObj);
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <mtn_mag_init+0x148>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fb6b 	bl	8008538 <LIS2MDL_MAG_Enable>

			//setting threshold lower byte (0xe8)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_THS_L_REG, int_ths_l_reg);
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <mtn_mag_init+0x148>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	22dc      	movs	r2, #220	; 0xdc
 8001e68:	2165      	movs	r1, #101	; 0x65
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f006 fcad 	bl	80087ca <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj,LIS2MDL_INT_THS_L_REG, &buff);
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <mtn_mag_init+0x148>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1dfa      	adds	r2, r7, #7
 8001e76:	2165      	movs	r1, #101	; 0x65
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f006 fc7c 	bl	8008776 <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", int_ths_l_reg);
 8001e7e:	21dc      	movs	r1, #220	; 0xdc
 8001e80:	4830      	ldr	r0, [pc, #192]	; (8001f44 <mtn_mag_init+0x164>)
 8001e82:	f00a fe95 	bl	800cbb0 <iprintf>

			//setting threshold higher byte (0x03)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_THS_H_REG, int_ths_h_reg);
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <mtn_mag_init+0x148>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	2166      	movs	r1, #102	; 0x66
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f006 fc9b 	bl	80087ca <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_THS_H_REG, &buff);
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <mtn_mag_init+0x148>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1dfa      	adds	r2, r7, #7
 8001e9a:	2166      	movs	r1, #102	; 0x66
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f006 fc6a 	bl	8008776 <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", int_ths_h_reg);
 8001ea2:	2105      	movs	r1, #5
 8001ea4:	4827      	ldr	r0, [pc, #156]	; (8001f44 <mtn_mag_init+0x164>)
 8001ea6:	f00a fe83 	bl	800cbb0 <iprintf>

			//putting full 16 bit value in threshold variable
			threshold = (int_ths_h_reg << 8) | int_ths_l_reg;
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <mtn_mag_init+0x168>)
 8001eac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001eb0:	601a      	str	r2, [r3, #0]

			 //enable interrupt on int/drdy pin of magnetometer
			LIS2MDL_Write_Reg(mObj, LIS2MDL_CFG_REG_C, cfg_reg_c);
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <mtn_mag_init+0x148>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2250      	movs	r2, #80	; 0x50
 8001eb8:	2162      	movs	r1, #98	; 0x62
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 fc85 	bl	80087ca <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_CFG_REG_C, &buff);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <mtn_mag_init+0x148>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1dfa      	adds	r2, r7, #7
 8001ec6:	2162      	movs	r1, #98	; 0x62
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f006 fc54 	bl	8008776 <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", cfg_reg_c);
 8001ece:	2150      	movs	r1, #80	; 0x50
 8001ed0:	481c      	ldr	r0, [pc, #112]	; (8001f44 <mtn_mag_init+0x164>)
 8001ed2:	f00a fe6d 	bl	800cbb0 <iprintf>

			 //configuring interrupt control register with pulsed, INT = 0(give interrupt when magnet is near)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, int_ctrl_reg);
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <mtn_mag_init+0x148>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	22e7      	movs	r2, #231	; 0xe7
 8001edc:	2163      	movs	r1, #99	; 0x63
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f006 fc73 	bl	80087ca <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_CRTL_REG, &buff);
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <mtn_mag_init+0x148>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1dfa      	adds	r2, r7, #7
 8001eea:	2163      	movs	r1, #99	; 0x63
 8001eec:	4618      	mov	r0, r3
 8001eee:	f006 fc42 	bl	8008776 <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", int_ctrl_reg);
 8001ef2:	21e7      	movs	r1, #231	; 0xe7
 8001ef4:	4813      	ldr	r0, [pc, #76]	; (8001f44 <mtn_mag_init+0x164>)
 8001ef6:	f00a fe5b 	bl	800cbb0 <iprintf>
			//configure all interrupts on int1 pin of lsm6dsox
#if (I2C_SPI_EN == 0)
			spi_write_reg_mtn_snsr(&hspi1, mtn_ctrl4_c, &ctrl_4, 1);
			spi_read_reg_mtn_snsr(&hspi1, mtn_ctrl4_c, &buff, 1);
#elif (I2C_SPI_EN == 1)
			i2c_write_8bit(&hi2c1, mtn_ctrl4_c, &ctrl_4, 1);
 8001efa:	2301      	movs	r3, #1
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <mtn_mag_init+0x16c>)
 8001efe:	2113      	movs	r1, #19
 8001f00:	480e      	ldr	r0, [pc, #56]	; (8001f3c <mtn_mag_init+0x15c>)
 8001f02:	f000 f943 	bl	800218c <i2c_write_8bit>
			i2c_read_8bit(&hi2c1, mtn_ctrl4_c, &buff, 1);
 8001f06:	1dfa      	adds	r2, r7, #7
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2113      	movs	r1, #19
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <mtn_mag_init+0x15c>)
 8001f0e:	f000 f905 	bl	800211c <i2c_read_8bit>
#endif
			printf("\r\n0x%X", ctrl_4);
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <mtn_mag_init+0x16c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	480a      	ldr	r0, [pc, #40]	; (8001f44 <mtn_mag_init+0x164>)
 8001f1a:	f00a fe49 	bl	800cbb0 <iprintf>
		}
#else
			LIS2MDL_DeInit(mObj);
#endif
	}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000024c 	.word	0x2000024c
 8001f2c:	20000289 	.word	0x20000289
 8001f30:	0800dbf4 	.word	0x0800dbf4
 8001f34:	0800dcd0 	.word	0x0800dcd0
 8001f38:	20000005 	.word	0x20000005
 8001f3c:	20000090 	.word	0x20000090
 8001f40:	0800dc18 	.word	0x0800dc18
 8001f44:	0800dbec 	.word	0x0800dbec
 8001f48:	2000028c 	.word	0x2000028c
 8001f4c:	20000006 	.word	0x20000006

08001f50 <mtn_bsp_init>:

void mtn_bsp_init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	// spi initialization setup
	spi_i2c_acc_gyro_setup(); //acc & gyro setup
 8001f54:	f7fe ffe4 	bl	8000f20 <spi_i2c_acc_gyro_setup>
	spi_i2c_mag_setup(); // mag setup
 8001f58:	f7ff f80a 	bl	8000f70 <spi_i2c_mag_setup>

	//initialize accelerometer and gyrometer.
	mtn_acc_gyro_init();
 8001f5c:	f7ff fb50 	bl	8001600 <mtn_acc_gyro_init>

	//initialize magnetometer.
	mtn_mag_init();
 8001f60:	f7ff ff3e 	bl	8001de0 <mtn_mag_init>

	//enable accelerometer/gyrometer interrupt
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8001f64:	2012      	movs	r0, #18
 8001f66:	f000 fbfc 	bl	8002762 <HAL_NVIC_EnableIRQ>

	//enable magnetometer interrupt
	HAL_NVIC_EnableIRQ(EXTI15_IRQn);
 8001f6a:	201a      	movs	r0, #26
 8001f6c:	f000 fbf9 	bl	8002762 <HAL_NVIC_EnableIRQ>
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <mtn_acc_gyro_process>:

void mtn_acc_gyro_process(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
#if ACC_EN
	  //get accelerometer axes values.
	  LSM6DSOX_ACC_GetAxes(pObj,&xl_axes);
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <mtn_acc_gyro_process+0x74>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	491b      	ldr	r1, [pc, #108]	; (8001fec <mtn_acc_gyro_process+0x78>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f007 fa56 	bl	8009430 <LSM6DSOX_ACC_GetAxes>
	  printf("\n\n");
 8001f84:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <mtn_acc_gyro_process+0x7c>)
 8001f86:	f00a fe99 	bl	800ccbc <puts>

	  //print accelerometer axes values.
	  printf("Acc x : %ld\r\n",xl_axes.x);
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <mtn_acc_gyro_process+0x78>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4818      	ldr	r0, [pc, #96]	; (8001ff4 <mtn_acc_gyro_process+0x80>)
 8001f92:	f00a fe0d 	bl	800cbb0 <iprintf>
	  printf("Acc y : %ld\r\n",xl_axes.y);
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <mtn_acc_gyro_process+0x78>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <mtn_acc_gyro_process+0x84>)
 8001f9e:	f00a fe07 	bl	800cbb0 <iprintf>
	  printf("Acc z : %ld\r\n",xl_axes.z);
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <mtn_acc_gyro_process+0x78>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4814      	ldr	r0, [pc, #80]	; (8001ffc <mtn_acc_gyro_process+0x88>)
 8001faa:	f00a fe01 	bl	800cbb0 <iprintf>
#endif
#if GYRO_EN
	  //get gyrometer axes values.
	  LSM6DSOX_GYRO_GetAxes(pObj,&g_axes);
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <mtn_acc_gyro_process+0x74>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4913      	ldr	r1, [pc, #76]	; (8002000 <mtn_acc_gyro_process+0x8c>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f007 fb66 	bl	8009686 <LSM6DSOX_GYRO_GetAxes>
	  printf("\n\n");
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <mtn_acc_gyro_process+0x7c>)
 8001fbc:	f00a fe7e 	bl	800ccbc <puts>

      //print gyrometer axes values.
 	  printf("Gyro x : %ld\r\n",g_axes.x);
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <mtn_acc_gyro_process+0x8c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	480f      	ldr	r0, [pc, #60]	; (8002004 <mtn_acc_gyro_process+0x90>)
 8001fc8:	f00a fdf2 	bl	800cbb0 <iprintf>
	  printf("Gyro y : %ld\r\n",g_axes.y);
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <mtn_acc_gyro_process+0x8c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <mtn_acc_gyro_process+0x94>)
 8001fd4:	f00a fdec 	bl	800cbb0 <iprintf>
	  printf("Gyro z : %ld\r\n",g_axes.z);
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <mtn_acc_gyro_process+0x8c>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480b      	ldr	r0, [pc, #44]	; (800200c <mtn_acc_gyro_process+0x98>)
 8001fe0:	f00a fde6 	bl	800cbb0 <iprintf>
#endif
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000200 	.word	0x20000200
 8001fec:	20000234 	.word	0x20000234
 8001ff0:	0800dce8 	.word	0x0800dce8
 8001ff4:	0800dcec 	.word	0x0800dcec
 8001ff8:	0800dcfc 	.word	0x0800dcfc
 8001ffc:	0800dd0c 	.word	0x0800dd0c
 8002000:	20000240 	.word	0x20000240
 8002004:	0800dd1c 	.word	0x0800dd1c
 8002008:	0800dd2c 	.word	0x0800dd2c
 800200c:	0800dd3c 	.word	0x0800dd3c

08002010 <mtn_mag_process>:

void mtn_mag_process(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	2101      	movs	r1, #1
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <mtn_mag_process+0x50>)
 800201a:	f000 fda3 	bl	8002b64 <HAL_GPIO_WritePin>
#if MAG_EN
	  //get magnetometer axes values.
	  LIS2MDL_MAG_GetAxes(mObj, &mag_axes);
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <mtn_mag_process+0x54>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4911      	ldr	r1, [pc, #68]	; (8002068 <mtn_mag_process+0x58>)
 8002024:	4618      	mov	r0, r3
 8002026:	f006 fb1c 	bl	8008662 <LIS2MDL_MAG_GetAxes>
	  printf("\n\n");
 800202a:	4810      	ldr	r0, [pc, #64]	; (800206c <mtn_mag_process+0x5c>)
 800202c:	f00a fe46 	bl	800ccbc <puts>

	  //print magnetometer axes values.
	  printf("Mag x : %ld\r\n",mag_axes.x);
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <mtn_mag_process+0x58>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	480e      	ldr	r0, [pc, #56]	; (8002070 <mtn_mag_process+0x60>)
 8002038:	f00a fdba 	bl	800cbb0 <iprintf>
	  printf("Mag y : %ld\r\n",mag_axes.y);
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <mtn_mag_process+0x58>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	; (8002074 <mtn_mag_process+0x64>)
 8002044:	f00a fdb4 	bl	800cbb0 <iprintf>
	  printf("Mag z : %ld\r\n",mag_axes.z);
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <mtn_mag_process+0x58>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4619      	mov	r1, r3
 800204e:	480a      	ldr	r0, [pc, #40]	; (8002078 <mtn_mag_process+0x68>)
 8002050:	f00a fdae 	bl	800cbb0 <iprintf>
#endif
	    printf("\r\n");
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <mtn_mag_process+0x6c>)
 8002056:	f00a fe31 	bl	800ccbc <puts>
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	42021000 	.word	0x42021000
 8002064:	2000024c 	.word	0x2000024c
 8002068:	2000027c 	.word	0x2000027c
 800206c:	0800dce8 	.word	0x0800dce8
 8002070:	0800dd4c 	.word	0x0800dd4c
 8002074:	0800dd5c 	.word	0x0800dd5c
 8002078:	0800dd6c 	.word	0x0800dd6c
 800207c:	0800dd7c 	.word	0x0800dd7c

08002080 <mtn_mag_int_gen>:

void mtn_mag_int_gen(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
	 uint8_t buff;

		  //read magnetometer axes
		  LIS2MDL_MAG_GetAxes(mObj, &mag_axes);
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <mtn_mag_int_gen+0x68>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4918      	ldr	r1, [pc, #96]	; (80020ec <mtn_mag_int_gen+0x6c>)
 800208c:	4618      	mov	r0, r3
 800208e:	f006 fae8 	bl	8008662 <LIS2MDL_MAG_GetAxes>

		  //read magnetometer interrupt control register
		  LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_CRTL_REG, &buff);
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <mtn_mag_int_gen+0x68>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	1dfa      	adds	r2, r7, #7
 8002098:	2163      	movs	r1, #99	; 0x63
 800209a:	4618      	mov	r0, r3
 800209c:	f006 fb6b 	bl	8008776 <LIS2MDL_Read_Reg>
		  //printf("\r\n0x%X", buff);

	#if (LATCH_PULSE_EN == 1)
		  if(buff != 0xE3 || (mag_axes.x < threshold && mag_axes.y < threshold && mag_axes.z < threshold))
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	2be3      	cmp	r3, #227	; 0xe3
 80020a4:	d111      	bne.n	80020ca <mtn_mag_int_gen+0x4a>
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <mtn_mag_int_gen+0x6c>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <mtn_mag_int_gen+0x70>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	da12      	bge.n	80020d8 <mtn_mag_int_gen+0x58>
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <mtn_mag_int_gen+0x6c>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <mtn_mag_int_gen+0x70>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	da0c      	bge.n	80020d8 <mtn_mag_int_gen+0x58>
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <mtn_mag_int_gen+0x6c>)
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <mtn_mag_int_gen+0x70>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	da06      	bge.n	80020d8 <mtn_mag_int_gen+0x58>
		  {
		  //read magnetometer interrupt source register to clear latching
		  LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_SOURCE_REG, &buff);
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <mtn_mag_int_gen+0x68>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1dfa      	adds	r2, r7, #7
 80020d0:	2164      	movs	r1, #100	; 0x64
 80020d2:	4618      	mov	r0, r3
 80020d4:	f006 fb4f 	bl	8008776 <LIS2MDL_Read_Reg>
		  //printf("\r\n0x%X", buff);
		  }
	#endif
		  //enable magnetometer interrupt
		  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80020d8:	2012      	movs	r0, #18
 80020da:	f000 fb42 	bl	8002762 <HAL_NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000024c 	.word	0x2000024c
 80020ec:	2000027c 	.word	0x2000027c
 80020f0:	2000028c 	.word	0x2000028c

080020f4 <mtn_bsp_process>:

void mtn_bsp_process(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	//magnetometer interrupt on near magnet and far magnet
	mtn_mag_int_gen();
 80020f8:	f7ff ffc2 	bl	8002080 <mtn_mag_int_gen>

#if INT_FLAG
	if(int_flag != 1)
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <mtn_bsp_process+0x24>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d003      	beq.n	800210c <mtn_bsp_process+0x18>
	{
#endif

	//accelerometer/gyrometer process function
	mtn_acc_gyro_process();
 8002104:	f7ff ff36 	bl	8001f74 <mtn_acc_gyro_process>

	//magnetometer process function
	mtn_mag_process();
 8002108:	f7ff ff82 	bl	8002010 <mtn_mag_process>

#if INT_FLAG
	}
#endif

	HAL_Delay(500);
 800210c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002110:	f000 f9ea 	bl	80024e8 <HAL_Delay>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000291 	.word	0x20000291

0800211c <i2c_read_8bit>:


#if (I2C_SPI_EN == 1)
int32_t i2c_read_8bit(void *handle, uint8_t Reg, uint8_t *pdata, uint16_t Length)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	460b      	mov	r3, r1
 800212a:	72fb      	strb	r3, [r7, #11]
 800212c:	4613      	mov	r3, r2
 800212e:	813b      	strh	r3, [r7, #8]
	uint8_t err_code;
	err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddr, &Reg, 1, HAL_MAX_DELAY);
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <i2c_read_8bit+0x68>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b299      	uxth	r1, r3
 8002136:	f107 020b 	add.w	r2, r7, #11
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	4811      	ldr	r0, [pc, #68]	; (8002188 <i2c_read_8bit+0x6c>)
 8002144:	f000 fde6 	bl	8002d14 <HAL_I2C_Master_Transmit>
 8002148:	4603      	mov	r3, r0
 800214a:	75fb      	strb	r3, [r7, #23]
	if(err_code != HAL_OK)
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <i2c_read_8bit+0x3a>
		return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e012      	b.n	800217c <i2c_read_8bit+0x60>
	err_code = HAL_I2C_Master_Receive(&hi2c1, DevAddr, pdata, Length, HAL_MAX_DELAY);
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <i2c_read_8bit+0x68>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b299      	uxth	r1, r3
 800215c:	893b      	ldrh	r3, [r7, #8]
 800215e:	f04f 32ff 	mov.w	r2, #4294967295
 8002162:	9200      	str	r2, [sp, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <i2c_read_8bit+0x6c>)
 8002168:	f000 fec8 	bl	8002efc <HAL_I2C_Master_Receive>
 800216c:	4603      	mov	r3, r0
 800216e:	75fb      	strb	r3, [r7, #23]
	if(err_code != HAL_OK)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <i2c_read_8bit+0x5e>
		return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <i2c_read_8bit+0x60>
	return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000004 	.word	0x20000004
 8002188:	20000090 	.word	0x20000090

0800218c <i2c_write_8bit>:
int32_t i2c_write_8bit(void *handle, uint8_t Reg, uint8_t *pdata, uint16_t Length)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	460b      	mov	r3, r1
 800219a:	72fb      	strb	r3, [r7, #11]
 800219c:	4613      	mov	r3, r2
 800219e:	813b      	strh	r3, [r7, #8]
	uint8_t err_code, buff[2];
	buff[0] = Reg;
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	753b      	strb	r3, [r7, #20]
	buff[1] = *pdata;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	757b      	strb	r3, [r7, #21]
	err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddr, buff, Length+1, HAL_MAX_DELAY);
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <i2c_write_8bit+0x54>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b299      	uxth	r1, r3
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	3301      	adds	r3, #1
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f107 0214 	add.w	r2, r7, #20
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295
 80021be:	9000      	str	r0, [sp, #0]
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <i2c_write_8bit+0x58>)
 80021c2:	f000 fda7 	bl	8002d14 <HAL_I2C_Master_Transmit>
 80021c6:	4603      	mov	r3, r0
 80021c8:	75fb      	strb	r3, [r7, #23]
	if(err_code != HAL_OK)
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <i2c_write_8bit+0x48>
		return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <i2c_write_8bit+0x4a>
	return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000004 	.word	0x20000004
 80021e4:	20000090 	.word	0x20000090

080021e8 <HAL_GPIO_EXTI_Rising_Callback>:
/*@breif - INT1 interrupt callback function set priority, differentiates between different
 *         interrupts and print which interrupt occured.
 *param  - gpio interrupt pin.
 *ret    - void.*/
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
#if INT1
	if(GPIO_Pin == INT1_Pin)
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f8:	d167      	bne.n	80022ca <HAL_GPIO_EXTI_Rising_Callback+0xe2>
#if (LATCH_PULSE_EN == 0)
	uint8_t Reg;
	Reg = ALL_INT_SRC | 0x80;
	spi_read_reg_mtn_snsr(&hspi1, Reg, &buff, 1);
#elif (LATCH_PULSE_EN == 1)
	i2c_read_8bit(&hi2c1, ALL_INT_SRC, &buff, 1);
 80021fa:	f107 020f 	add.w	r2, r7, #15
 80021fe:	2301      	movs	r3, #1
 8002200:	211a      	movs	r1, #26
 8002202:	485f      	ldr	r0, [pc, #380]	; (8002380 <HAL_GPIO_EXTI_Rising_Callback+0x198>)
 8002204:	f7ff ff8a 	bl	800211c <i2c_read_8bit>

#if (LATCH_PULSE_EN == 0)
	Reg = WAKE_UP_SRC | 0x80;
	spi_read_reg_mtn_snsr(&hspi1, Reg, &buff1, 1);
#elif (LATCH_PULSE_EN == 1)
	i2c_read_8bit(&hi2c1, WAKE_UP_SRC, &buff1, 1);
 8002208:	f107 020e 	add.w	r2, r7, #14
 800220c:	2301      	movs	r3, #1
 800220e:	211b      	movs	r1, #27
 8002210:	485b      	ldr	r0, [pc, #364]	; (8002380 <HAL_GPIO_EXTI_Rising_Callback+0x198>)
 8002212:	f7ff ff83 	bl	800211c <i2c_read_8bit>

#if (LATCH_PULSE_EN == 0)
	Reg = EMB_FUNC_STATUS_MAINPAGE | 0x80;
	spi_read_reg_mtn_snsr(&hspi1, Reg, &buff2, 1);
#elif (LATCH_PULSE_EN == 1)
	i2c_read_8bit(&hi2c1, EMB_FUNC_STATUS_MAINPAGE, &buff2, 1);
 8002216:	f107 020d 	add.w	r2, r7, #13
 800221a:	2301      	movs	r3, #1
 800221c:	2135      	movs	r1, #53	; 0x35
 800221e:	4858      	ldr	r0, [pc, #352]	; (8002380 <HAL_GPIO_EXTI_Rising_Callback+0x198>)
 8002220:	f7ff ff7c 	bl	800211c <i2c_read_8bit>
#endif

	if((buff & 0x02) == 0x02 || (buff1 & 0x08) == 0x08) //check for wake up interrupt.
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <HAL_GPIO_EXTI_Rising_Callback+0x50>
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01a      	beq.n	800226e <HAL_GPIO_EXTI_Rising_Callback+0x86>
	{
		if(flag == 0)
 8002238:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_GPIO_EXTI_Rising_Callback+0x19c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 809b 	bne.w	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
		{
			flag = 1;
 8002242:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_GPIO_EXTI_Rising_Callback+0x19c>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
			printf("\r\nWake Up event\r\n");
 8002248:	484f      	ldr	r0, [pc, #316]	; (8002388 <HAL_GPIO_EXTI_Rising_Callback+0x1a0>)
 800224a:	f00a fd37 	bl	800ccbc <puts>
			mtn_acc_mode_set(NORMAL_MODE);
 800224e:	2003      	movs	r0, #3
 8002250:	f7ff fa54 	bl	80016fc <mtn_acc_mode_set>
			check_mtn_acc_mode();
 8002254:	f7ff fcc0 	bl	8001bd8 <check_mtn_acc_mode>
#if GYRO_EN
			mtn_gyro_mode_set(NORMAL_MODE);
 8002258:	2003      	movs	r0, #3
 800225a:	f7ff fbab 	bl	80019b4 <mtn_gyro_mode_set>
			check_mtn_gyro_mode();
 800225e:	f7ff fd27 	bl	8001cb0 <check_mtn_gyro_mode>
#endif
#if MAG_EN
			mtn_mag_mode_set(HIGH_PERFORMANCE_MODE);
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff fc28 	bl	8001ab8 <mtn_mag_mode_set>
			check_mag_mode();
 8002268:	f7ff fd76 	bl	8001d58 <check_mag_mode>
		if(flag == 0)
 800226c:	e084      	b.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
#endif
		}
	}
	else if((buff2 & 0x08) == 0x08) //check for step detection interrupt.
 800226e:	7b7b      	ldrb	r3, [r7, #13]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00d      	beq.n	8002294 <HAL_GPIO_EXTI_Rising_Callback+0xac>
	{
		printf("\r\nStep Detected\r\n");
 8002278:	4844      	ldr	r0, [pc, #272]	; (800238c <HAL_GPIO_EXTI_Rising_Callback+0x1a4>)
 800227a:	f00a fd1f 	bl	800ccbc <puts>
		printf("Counter ->%d\r\n",counter++);
 800227e:	4b44      	ldr	r3, [pc, #272]	; (8002390 <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	b291      	uxth	r1, r2
 8002286:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 8002288:	8011      	strh	r1, [r2, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	4841      	ldr	r0, [pc, #260]	; (8002394 <HAL_GPIO_EXTI_Rising_Callback+0x1ac>)
 800228e:	f00a fc8f 	bl	800cbb0 <iprintf>
			//interrupt pulsed when INT = 1(give interrupt when magnet is near sensor)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, int_ctrl_reg_near);
		}
	}
#endif
}
 8002292:	e071      	b.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
	else if((buff1 & 0x10) == 0x10) //check for inactivity interrupt.
 8002294:	7bbb      	ldrb	r3, [r7, #14]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06c      	beq.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
		flag = 0;
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_GPIO_EXTI_Rising_Callback+0x19c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
		printf("\r\nactivity/Inactivity event\r\n");
 80022a4:	483c      	ldr	r0, [pc, #240]	; (8002398 <HAL_GPIO_EXTI_Rising_Callback+0x1b0>)
 80022a6:	f00a fd09 	bl	800ccbc <puts>
			mtn_acc_mode_set(LOW_POWER_MODE);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff fa26 	bl	80016fc <mtn_acc_mode_set>
			check_mtn_acc_mode();
 80022b0:	f7ff fc92 	bl	8001bd8 <check_mtn_acc_mode>
			mtn_gyro_mode_set(POWER_DOWN_MODE);
 80022b4:	2004      	movs	r0, #4
 80022b6:	f7ff fb7d 	bl	80019b4 <mtn_gyro_mode_set>
			check_mtn_gyro_mode();
 80022ba:	f7ff fcf9 	bl	8001cb0 <check_mtn_gyro_mode>
			mtn_mag_mode_set(LOW_POWER_MODE);
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff fbfa 	bl	8001ab8 <mtn_mag_mode_set>
			check_mag_mode();
 80022c4:	f7ff fd48 	bl	8001d58 <check_mag_mode>
}
 80022c8:	e056      	b.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
	else if(GPIO_Pin == INT2_Pin)
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d153      	bne.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	2101      	movs	r1, #1
 80022d4:	4831      	ldr	r0, [pc, #196]	; (800239c <HAL_GPIO_EXTI_Rising_Callback+0x1b4>)
 80022d6:	f000 fc45 	bl	8002b64 <HAL_GPIO_WritePin>
		printf("\r\n********************Int2 interrupt occured from MAG********************");
 80022da:	4831      	ldr	r0, [pc, #196]	; (80023a0 <HAL_GPIO_EXTI_Rising_Callback+0x1b8>)
 80022dc:	f00a fc68 	bl	800cbb0 <iprintf>
		LIS2MDL_MAG_GetAxes(mObj, &mag_axes);
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_GPIO_EXTI_Rising_Callback+0x1bc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4930      	ldr	r1, [pc, #192]	; (80023a8 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f006 f9bb 	bl	8008662 <LIS2MDL_MAG_GetAxes>
		if((mag_axes.x >= threshold || mag_axes.y >= threshold || mag_axes.z >= threshold))
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_GPIO_EXTI_Rising_Callback+0x1c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	da0b      	bge.n	8002310 <HAL_GPIO_EXTI_Rising_Callback+0x128>
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_GPIO_EXTI_Rising_Callback+0x1c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	da05      	bge.n	8002310 <HAL_GPIO_EXTI_Rising_Callback+0x128>
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_GPIO_EXTI_Rising_Callback+0x1c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	db10      	blt.n	8002332 <HAL_GPIO_EXTI_Rising_Callback+0x14a>
			HAL_NVIC_DisableIRQ(EXTI7_IRQn);
 8002310:	2012      	movs	r0, #18
 8002312:	f000 fa34 	bl	800277e <HAL_NVIC_DisableIRQ>
			printf("\r\nPower OFF");
 8002316:	4826      	ldr	r0, [pc, #152]	; (80023b0 <HAL_GPIO_EXTI_Rising_Callback+0x1c8>)
 8002318:	f00a fc4a 	bl	800cbb0 <iprintf>
			int_flag = 1;
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_GPIO_EXTI_Rising_Callback+0x1cc>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, int_ctrl_reg_far);
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_GPIO_EXTI_Rising_Callback+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	22e3      	movs	r2, #227	; 0xe3
 8002328:	2163      	movs	r1, #99	; 0x63
 800232a:	4618      	mov	r0, r3
 800232c:	f006 fa4d 	bl	80087ca <LIS2MDL_Write_Reg>
 8002330:	e022      	b.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
		else if((mag_axes.x < threshold && mag_axes.y < threshold && mag_axes.z < threshold))
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_GPIO_EXTI_Rising_Callback+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	da1c      	bge.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <HAL_GPIO_EXTI_Rising_Callback+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	da16      	bge.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_GPIO_EXTI_Rising_Callback+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	da10      	bge.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
			HAL_NVIC_DisableIRQ(EXTI7_IRQn);
 8002356:	2012      	movs	r0, #18
 8002358:	f000 fa11 	bl	800277e <HAL_NVIC_DisableIRQ>
			printf("\r\nPower ON");
 800235c:	4816      	ldr	r0, [pc, #88]	; (80023b8 <HAL_GPIO_EXTI_Rising_Callback+0x1d0>)
 800235e:	f00a fc27 	bl	800cbb0 <iprintf>
			int_flag = 0;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_GPIO_EXTI_Rising_Callback+0x1cc>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, int_ctrl_reg_near);
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_GPIO_EXTI_Rising_Callback+0x1bc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	22e7      	movs	r2, #231	; 0xe7
 800236e:	2163      	movs	r1, #99	; 0x63
 8002370:	4618      	mov	r0, r3
 8002372:	f006 fa2a 	bl	80087ca <LIS2MDL_Write_Reg>
}
 8002376:	e7ff      	b.n	8002378 <HAL_GPIO_EXTI_Rising_Callback+0x190>
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000090 	.word	0x20000090
 8002384:	20000290 	.word	0x20000290
 8002388:	0800dd80 	.word	0x0800dd80
 800238c:	0800dd94 	.word	0x0800dd94
 8002390:	2000028a 	.word	0x2000028a
 8002394:	0800dda8 	.word	0x0800dda8
 8002398:	0800ddb8 	.word	0x0800ddb8
 800239c:	42021000 	.word	0x42021000
 80023a0:	0800ddd8 	.word	0x0800ddd8
 80023a4:	2000024c 	.word	0x2000024c
 80023a8:	2000027c 	.word	0x2000027c
 80023ac:	2000028c 	.word	0x2000028c
 80023b0:	0800de24 	.word	0x0800de24
 80023b4:	20000291 	.word	0x20000291
 80023b8:	0800de30 	.word	0x0800de30

080023bc <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80023c4:	1d39      	adds	r1, r7, #4
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	2201      	movs	r2, #1
 80023cc:	4803      	ldr	r0, [pc, #12]	; (80023dc <__io_putchar+0x20>)
 80023ce:	f005 fb07 	bl	80079e0 <HAL_UART_Transmit>

  return ch;
 80023d2:	687b      	ldr	r3, [r7, #4]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000170 	.word	0x20000170

080023e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_Init+0x4c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_Init+0x4c>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 f991 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023f6:	f002 fb21 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_Init+0x50>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	490b      	ldr	r1, [pc, #44]	; (8002434 <HAL_Init+0x54>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_Init+0x58>)
 800240e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002410:	200f      	movs	r0, #15
 8002412:	f000 f813 	bl	800243c <HAL_InitTick>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e002      	b.n	8002426 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002420:	f7fe fb72 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000
 8002430:	46020c00 	.word	0x46020c00
 8002434:	0800de3c 	.word	0x0800de3c
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_InitTick+0x60>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e021      	b.n	8002494 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_InitTick+0x64>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_InitTick+0x60>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f997 	bl	800279a <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 f953 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x68>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000000c 	.word	0x2000000c
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000008 	.word	0x20000008

080024a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000000c 	.word	0x2000000c
 80024cc:	20000294 	.word	0x20000294

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000294 	.word	0x20000294

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000000c 	.word	0x2000000c

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db12      	blt.n	8002608 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	490a      	ldr	r1, [pc, #40]	; (8002614 <__NVIC_DisableIRQ+0x44>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	3320      	adds	r3, #32
 80025f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025fc:	f3bf 8f4f 	dsb	sy
}
 8002600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002602:	f3bf 8f6f 	isb	sy
}
 8002606:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	; (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff05 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff1c 	bl	8002578 <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff90 	bl	800266c <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5f 	bl	8002618 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff0f 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff1f 	bl	80025d0 <__NVIC_DisableIRQ>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff96 	bl	80026d4 <SysTick_Config>
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80027c6:	e1ba      	b.n	8002b3e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 81aa 	beq.w	8002b38 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a55      	ldr	r2, [pc, #340]	; (800293c <HAL_GPIO_Init+0x188>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d15d      	bne.n	80028a8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80027f2:	2201      	movs	r2, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	4013      	ands	r3, r2
 8002800:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	4313      	orrs	r3, r2
 8002814:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800281c:	4a48      	ldr	r2, [pc, #288]	; (8002940 <HAL_GPIO_Init+0x18c>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002824:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002826:	4a46      	ldr	r2, [pc, #280]	; (8002940 <HAL_GPIO_Init+0x18c>)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	3208      	adds	r2, #8
 800283a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	4013      	ands	r3, r2
 8002854:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	220b      	movs	r2, #11
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	4313      	orrs	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3208      	adds	r2, #8
 8002872:	69f9      	ldr	r1, [r7, #28]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4013      	ands	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2202      	movs	r2, #2
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	4313      	orrs	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e067      	b.n	8002978 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x104>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d145      	bne.n	8002944 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	220f      	movs	r2, #15
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	4013      	ands	r3, r2
 80028da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	69f9      	ldr	r1, [r7, #28]
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	4313      	orrs	r3, r2
 8002930:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e01e      	b.n	8002978 <HAL_GPIO_Init+0x1c4>
 800293a:	bf00      	nop
 800293c:	46020000 	.word	0x46020000
 8002940:	0800de94 	.word	0x0800de94
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4013      	ands	r3, r2
 800295a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	4313      	orrs	r3, r2
 8002970:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d00b      	beq.n	8002998 <HAL_GPIO_Init+0x1e4>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800298c:	2b11      	cmp	r3, #17
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b12      	cmp	r3, #18
 8002996:	d130      	bne.n	80029fa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80029ce:	2201      	movs	r2, #1
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	4013      	ands	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 0201 	and.w	r2, r3, #1
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d017      	beq.n	8002a32 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d07c      	beq.n	8002b38 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002a3e:	4a47      	ldr	r2, [pc, #284]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3318      	adds	r3, #24
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0a9a      	lsrs	r2, r3, #10
 8002a66:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <HAL_GPIO_Init+0x3ac>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	f002 0203 	and.w	r2, r2, #3
 8002a70:	00d2      	lsls	r2, r2, #3
 8002a72:	4093      	lsls	r3, r2
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002a7a:	4938      	ldr	r1, [pc, #224]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3318      	adds	r3, #24
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002a88:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002aac:	4a2b      	ldr	r2, [pc, #172]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002ad6:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b10:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_GPIO_Init+0x3a8>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f ae3d 	bne.w	80027c8 <HAL_GPIO_Init+0x14>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	3724      	adds	r7, #36	; 0x24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	46022000 	.word	0x46022000
 8002b60:	002f7f7f 	.word	0x002f7f7f

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002b80:	e002      	b.n	8002b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fb18 	bl	80021e8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002bc4:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f807 	bl	8002be0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	46022000 	.word	0x46022000

08002be0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e081      	b.n	8002d0c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fd fdaf 	bl	8000780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2224      	movs	r2, #36	; 0x24
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d107      	bne.n	8002c70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	e006      	b.n	8002c7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d104      	bne.n	8002c90 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69d9      	ldr	r1, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
 8002d24:	4613      	mov	r3, r2
 8002d26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	f040 80da 	bne.w	8002eea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2C_Master_Transmit+0x30>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0d3      	b.n	8002eec <HAL_I2C_Master_Transmit+0x1d8>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d4c:	f7ff fbc0 	bl	80024d0 <HAL_GetTick>
 8002d50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2319      	movs	r3, #25
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f9e6 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0be      	b.n	8002eec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	; 0x21
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	893a      	ldrh	r2, [r7, #8]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2bff      	cmp	r3, #255	; 0xff
 8002d9e:	d90e      	bls.n	8002dbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	22ff      	movs	r2, #255	; 0xff
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	8979      	ldrh	r1, [r7, #10]
 8002dae:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fbdc 	bl	8003574 <I2C_TransferConfig>
 8002dbc:	e06c      	b.n	8002e98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fbcb 	bl	8003574 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002dde:	e05b      	b.n	8002e98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	6a39      	ldr	r1, [r7, #32]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f9e3 	bl	80031b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e07b      	b.n	8002eec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d034      	beq.n	8002e98 <HAL_I2C_Master_Transmit+0x184>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d130      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f975 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e04d      	b.n	8002eec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d90e      	bls.n	8002e78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	8979      	ldrh	r1, [r7, #10]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fb7f 	bl	8003574 <I2C_TransferConfig>
 8002e76:	e00f      	b.n	8002e98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	8979      	ldrh	r1, [r7, #10]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fb6e 	bl	8003574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d19e      	bne.n	8002de0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	6a39      	ldr	r1, [r7, #32]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f9c2 	bl	8003230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e01a      	b.n	8002eec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	80002000 	.word	0x80002000
 8002ef8:	fe00e800 	.word	0xfe00e800

08002efc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	461a      	mov	r2, r3
 8002f08:	460b      	mov	r3, r1
 8002f0a:	817b      	strh	r3, [r7, #10]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	f040 80db 	bne.w	80030d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_I2C_Master_Receive+0x30>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0d4      	b.n	80030d6 <HAL_I2C_Master_Receive+0x1da>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f34:	f7ff facc 	bl	80024d0 <HAL_GetTick>
 8002f38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2319      	movs	r3, #25
 8002f40:	2201      	movs	r2, #1
 8002f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f8f2 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0bf      	b.n	80030d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2222      	movs	r2, #34	; 0x22
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2210      	movs	r2, #16
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	893a      	ldrh	r2, [r7, #8]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2bff      	cmp	r3, #255	; 0xff
 8002f86:	d90e      	bls.n	8002fa6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	8979      	ldrh	r1, [r7, #10]
 8002f96:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fae8 	bl	8003574 <I2C_TransferConfig>
 8002fa4:	e06d      	b.n	8003082 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	8979      	ldrh	r1, [r7, #10]
 8002fb8:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fad7 	bl	8003574 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002fc6:	e05c      	b.n	8003082 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f96b 	bl	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e07c      	b.n	80030d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d034      	beq.n	8003082 <HAL_I2C_Master_Receive+0x186>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d130      	bne.n	8003082 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	2200      	movs	r2, #0
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f880 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e04d      	b.n	80030d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	2bff      	cmp	r3, #255	; 0xff
 8003042:	d90e      	bls.n	8003062 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	22ff      	movs	r2, #255	; 0xff
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	b2da      	uxtb	r2, r3
 8003050:	8979      	ldrh	r1, [r7, #10]
 8003052:	2300      	movs	r3, #0
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fa8a 	bl	8003574 <I2C_TransferConfig>
 8003060:	e00f      	b.n	8003082 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	2300      	movs	r3, #0
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fa79 	bl	8003574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d19d      	bne.n	8002fc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	6a39      	ldr	r1, [r7, #32]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f8cd 	bl	8003230 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e01a      	b.n	80030d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2220      	movs	r2, #32
 80030a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_I2C_Master_Receive+0x1e8>)
 80030b4:	400b      	ands	r3, r1
 80030b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	80002400 	.word	0x80002400
 80030e4:	fe00e800 	.word	0xfe00e800

080030e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d103      	bne.n	8003106 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d007      	beq.n	8003124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	619a      	str	r2, [r3, #24]
  }
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003140:	e022      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d01e      	beq.n	8003188 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7ff f9c1 	bl	80024d0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d113      	bne.n	8003188 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e00f      	b.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4013      	ands	r3, r2
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d0cd      	beq.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031bc:	e02c      	b.n	8003218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8ea 	bl	800339c <I2C_IsErrorOccurred>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e02a      	b.n	8003228 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d01e      	beq.n	8003218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7ff f979 	bl	80024d0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e007      	b.n	8003228 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d1cb      	bne.n	80031be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800323c:	e028      	b.n	8003290 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f8aa 	bl	800339c <I2C_IsErrorOccurred>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e026      	b.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003252:	f7ff f93d 	bl	80024d0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d113      	bne.n	8003290 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d1cf      	bne.n	800323e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b4:	e064      	b.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f86e 	bl	800339c <I2C_IsErrorOccurred>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e062      	b.n	8003390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d138      	bne.n	800334a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d105      	bne.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e04e      	b.n	8003390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d107      	bne.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2210      	movs	r2, #16
 8003306:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2204      	movs	r2, #4
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
 800330e:	e002      	b.n	8003316 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2220      	movs	r2, #32
 800331c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800332a:	400b      	ands	r3, r1
 800332c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e022      	b.n	8003390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334a:	f7ff f8c1 	bl	80024d0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	d302      	bcc.n	8003360 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10f      	bne.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d193      	bne.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	fe00e800 	.word	0xfe00e800

0800339c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d075      	beq.n	80034b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2210      	movs	r2, #16
 80033ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d0:	e056      	b.n	8003480 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d052      	beq.n	8003480 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7ff f879 	bl	80024d0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_IsErrorOccurred+0x54>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d147      	bne.n	8003480 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003402:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800340e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003412:	d12e      	bne.n	8003472 <I2C_IsErrorOccurred+0xd6>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341a:	d02a      	beq.n	8003472 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b20      	cmp	r3, #32
 8003420:	d027      	beq.n	8003472 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003430:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003432:	f7ff f84d 	bl	80024d0 <HAL_GetTick>
 8003436:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003438:	e01b      	b.n	8003472 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800343a:	f7ff f849 	bl	80024d0 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b19      	cmp	r3, #25
 8003446:	d914      	bls.n	8003472 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d1dc      	bne.n	800343a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b20      	cmp	r3, #32
 800348c:	d003      	beq.n	8003496 <I2C_IsErrorOccurred+0xfa>
 800348e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003492:	2b00      	cmp	r3, #0
 8003494:	d09d      	beq.n	80033d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2220      	movs	r2, #32
 80034a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f043 0308 	orr.w	r3, r3, #8
 80034ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01c      	beq.n	8003564 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fddc 	bl	80030e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <I2C_IsErrorOccurred+0x1d4>)
 800353c:	400b      	ands	r3, r1
 800353e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003568:	4618      	mov	r0, r3
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	fe00e800 	.word	0xfe00e800

08003574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	817b      	strh	r3, [r7, #10]
 8003582:	4613      	mov	r3, r2
 8003584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800358c:	7a7b      	ldrb	r3, [r7, #9]
 800358e:	041b      	lsls	r3, r3, #16
 8003590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	4313      	orrs	r3, r2
 800359e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	0d5b      	lsrs	r3, r3, #21
 80035ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <I2C_TransferConfig+0x60>)
 80035b4:	430b      	orrs	r3, r1
 80035b6:	43db      	mvns	r3, r3
 80035b8:	ea02 0103 	and.w	r1, r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	03ff63ff 	.word	0x03ff63ff

080035d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d138      	bne.n	8003660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e032      	b.n	8003662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800362a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b20      	cmp	r3, #32
 8003682:	d139      	bne.n	80036f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800368e:	2302      	movs	r3, #2
 8003690:	e033      	b.n	80036fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2224      	movs	r2, #36	; 0x24
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003710:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003718:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d101      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e057      	b.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d90a      	bls.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800372e:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4313      	orrs	r3, r2
 800373a:	4a2a      	ldr	r2, [pc, #168]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800373c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003740:	60d3      	str	r3, [r2, #12]
 8003742:	e007      	b.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800374c:	4925      	ldr	r1, [pc, #148]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4313      	orrs	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a24      	ldr	r2, [pc, #144]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	2232      	movs	r2, #50	; 0x32
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003772:	e002      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3b01      	subs	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800377a:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_PWREx_ControlVoltageScaling+0x84>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f3      	bne.n	8003774 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01b      	beq.n	80037ca <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	2232      	movs	r2, #50	; 0x32
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	3301      	adds	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80037b0:	e002      	b.n	80037b8 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0xc2>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f3      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e000      	b.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	46020800 	.word	0x46020800
 80037e8:	20000000 	.word	0x20000000
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_PWREx_GetVoltageRange+0x18>)
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	46020800 	.word	0x46020800

0800380c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_PWREx_ConfigSupply+0x94>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a22      	ldr	r2, [pc, #136]	; (80038a4 <HAL_PWREx_ConfigSupply+0x98>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	2232      	movs	r2, #50	; 0x32
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_PWREx_ConfigSupply+0x98>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	3301      	adds	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d113      	bne.n	8003860 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800383e:	f023 0302 	bic.w	r3, r3, #2
 8003842:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003844:	e002      	b.n	800384c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3b01      	subs	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d116      	bne.n	8003886 <HAL_PWREx_ConfigSupply+0x7a>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f3      	bne.n	8003846 <HAL_PWREx_ConfigSupply+0x3a>
 800385e:	e012      	b.n	8003886 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800386c:	e002      	b.n	8003874 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3b01      	subs	r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <HAL_PWREx_ConfigSupply+0x7a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f3      	bne.n	800386e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e000      	b.n	8003892 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000000 	.word	0x20000000
 80038a4:	10624dd3 	.word	0x10624dd3
 80038a8:	46020800 	.word	0x46020800

080038ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f000 bec3 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c6:	4b9c      	ldr	r3, [pc, #624]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d0:	4b99      	ldr	r3, [pc, #612]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8172 	beq.w	8003bcc <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_RCC_OscConfig+0x52>
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	f040 80e4 	bne.w	8003abe <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 80e0 	bne.w	8003abe <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038fe:	4b8e      	ldr	r3, [pc, #568]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d006      	beq.n	8003918 <HAL_RCC_OscConfig+0x6c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f000 be9a 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800391c:	4b86      	ldr	r3, [pc, #536]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_RCC_OscConfig+0x86>
 8003928:	4b83      	ldr	r3, [pc, #524]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003930:	e005      	b.n	800393e <HAL_RCC_OscConfig+0x92>
 8003932:	4b81      	ldr	r3, [pc, #516]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800393e:	4293      	cmp	r3, r2
 8003940:	d255      	bcs.n	80039ee <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f9d3 	bl	8004cf8 <RCC_SetFlashLatencyFromMSIRange>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f000 be77 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003964:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003968:	6093      	str	r3, [r2, #8]
 800396a:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	4970      	ldr	r1, [pc, #448]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003984:	d309      	bcc.n	800399a <HAL_RCC_OscConfig+0xee>
 8003986:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 021f 	bic.w	r2, r3, #31
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4969      	ldr	r1, [pc, #420]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
 8003998:	e07e      	b.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	da0a      	bge.n	80039b8 <HAL_RCC_OscConfig+0x10c>
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	015b      	lsls	r3, r3, #5
 80039b0:	4961      	ldr	r1, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60cb      	str	r3, [r1, #12]
 80039b6:	e06f      	b.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d30a      	bcc.n	80039d8 <HAL_RCC_OscConfig+0x12c>
 80039c2:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	029b      	lsls	r3, r3, #10
 80039d0:	4959      	ldr	r1, [pc, #356]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60cb      	str	r3, [r1, #12]
 80039d6:	e05f      	b.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
 80039d8:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	03db      	lsls	r3, r3, #15
 80039e6:	4954      	ldr	r1, [pc, #336]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60cb      	str	r3, [r1, #12]
 80039ec:	e054      	b.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039ee:	4b52      	ldr	r3, [pc, #328]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4a51      	ldr	r2, [pc, #324]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f8:	6093      	str	r3, [r2, #8]
 80039fa:	4b4f      	ldr	r3, [pc, #316]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	494c      	ldr	r1, [pc, #304]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003a14:	d309      	bcc.n	8003a2a <HAL_RCC_OscConfig+0x17e>
 8003a16:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 021f 	bic.w	r2, r3, #31
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4945      	ldr	r1, [pc, #276]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60cb      	str	r3, [r1, #12]
 8003a28:	e028      	b.n	8003a7c <HAL_RCC_OscConfig+0x1d0>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da0a      	bge.n	8003a48 <HAL_RCC_OscConfig+0x19c>
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	015b      	lsls	r3, r3, #5
 8003a40:	493d      	ldr	r1, [pc, #244]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60cb      	str	r3, [r1, #12]
 8003a46:	e019      	b.n	8003a7c <HAL_RCC_OscConfig+0x1d0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d30a      	bcc.n	8003a68 <HAL_RCC_OscConfig+0x1bc>
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	4935      	ldr	r1, [pc, #212]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
 8003a66:	e009      	b.n	8003a7c <HAL_RCC_OscConfig+0x1d0>
 8003a68:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	03db      	lsls	r3, r3, #15
 8003a76:	4930      	ldr	r1, [pc, #192]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 f936 	bl	8004cf8 <RCC_SetFlashLatencyFromMSIRange>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f000 bdda 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003a98:	f001 f8d8 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a9c:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <HAL_RCC_OscConfig+0x290>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fccb 	bl	800243c <HAL_InitTick>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 808a 	beq.w	8003bca <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aba:	f000 bdc7 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d066      	beq.n	8003b94 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003ad2:	f7fe fcfd 	bl	80024d0 <HAL_GetTick>
 8003ad6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ad8:	e009      	b.n	8003aee <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ada:	f7fe fcf9 	bl	80024d0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d902      	bls.n	8003aee <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	f000 bdaf 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0ef      	beq.n	8003ada <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4a0e      	ldr	r2, [pc, #56]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	4909      	ldr	r1, [pc, #36]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003b20:	d30e      	bcc.n	8003b40 <HAL_RCC_OscConfig+0x294>
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 021f 	bic.w	r2, r3, #31
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4902      	ldr	r1, [pc, #8]	; (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
 8003b34:	e04a      	b.n	8003bcc <HAL_RCC_OscConfig+0x320>
 8003b36:	bf00      	nop
 8003b38:	46020c00 	.word	0x46020c00
 8003b3c:	20000008 	.word	0x20000008
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da0a      	bge.n	8003b5e <HAL_RCC_OscConfig+0x2b2>
 8003b48:	4b9b      	ldr	r3, [pc, #620]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	015b      	lsls	r3, r3, #5
 8003b56:	4998      	ldr	r1, [pc, #608]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60cb      	str	r3, [r1, #12]
 8003b5c:	e036      	b.n	8003bcc <HAL_RCC_OscConfig+0x320>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b66:	d30a      	bcc.n	8003b7e <HAL_RCC_OscConfig+0x2d2>
 8003b68:	4b93      	ldr	r3, [pc, #588]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	029b      	lsls	r3, r3, #10
 8003b76:	4990      	ldr	r1, [pc, #576]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
 8003b7c:	e026      	b.n	8003bcc <HAL_RCC_OscConfig+0x320>
 8003b7e:	4b8e      	ldr	r3, [pc, #568]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	03db      	lsls	r3, r3, #15
 8003b8c:	498a      	ldr	r1, [pc, #552]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60cb      	str	r3, [r1, #12]
 8003b92:	e01b      	b.n	8003bcc <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003b94:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a87      	ldr	r2, [pc, #540]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003ba0:	f7fe fc96 	bl	80024d0 <HAL_GetTick>
 8003ba4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ba6:	e009      	b.n	8003bbc <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ba8:	f7fe fc92 	bl	80024d0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d902      	bls.n	8003bbc <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	f000 bd48 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003bbc:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ef      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2fc>
 8003bc8:	e000      	b.n	8003bcc <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8094 	beq.w	8003d02 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_OscConfig+0x340>
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d110      	bne.n	8003c08 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	4b72      	ldr	r3, [pc, #456]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8083 	beq.w	8003d00 <HAL_RCC_OscConfig+0x454>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d17e      	bne.n	8003d00 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f000 bd22 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d106      	bne.n	8003c20 <HAL_RCC_OscConfig+0x374>
 8003c12:	4b69      	ldr	r3, [pc, #420]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a68      	ldr	r2, [pc, #416]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e041      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3f8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x3a4>
 8003c2a:	4b63      	ldr	r3, [pc, #396]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a62      	ldr	r2, [pc, #392]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5f      	ldr	r2, [pc, #380]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b5d      	ldr	r3, [pc, #372]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a5c      	ldr	r2, [pc, #368]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e029      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3f8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003c58:	d112      	bne.n	8003c80 <HAL_RCC_OscConfig+0x3d4>
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a56      	ldr	r2, [pc, #344]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a53      	ldr	r2, [pc, #332]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a50      	ldr	r2, [pc, #320]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3f8>
 8003c80:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a4c      	ldr	r2, [pc, #304]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a49      	ldr	r2, [pc, #292]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a46      	ldr	r2, [pc, #280]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003c9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d014      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8003cac:	f7fe fc10 	bl	80024d0 <HAL_GetTick>
 8003cb0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb2:	e009      	b.n	8003cc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fc0c 	bl	80024d0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d902      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	f000 bcc2 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc8:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ef      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x408>
 8003cd4:	e015      	b.n	8003d02 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003cd6:	f7fe fbfb 	bl	80024d0 <HAL_GetTick>
 8003cda:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cdc:	e009      	b.n	8003cf2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cde:	f7fe fbf7 	bl	80024d0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	; 0x64
 8003cea:	d902      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	f000 bcad 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ef      	bne.n	8003cde <HAL_RCC_OscConfig+0x432>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d066      	beq.n	8003ddc <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_OscConfig+0x474>
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d11a      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d117      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d006      	beq.n	8003d3a <HAL_RCC_OscConfig+0x48e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f000 bc89 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	491b      	ldr	r1, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4e:	e045      	b.n	8003ddc <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d024      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003d58:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d64:	f7fe fbb4 	bl	80024d0 <HAL_GetTick>
 8003d68:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6a:	e009      	b.n	8003d80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fbb0 	bl	80024d0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d902      	bls.n	8003d80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	f000 bc66 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ef      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	4907      	ldr	r1, [pc, #28]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	610b      	str	r3, [r1, #16]
 8003da0:	e01c      	b.n	8003ddc <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <HAL_RCC_OscConfig+0x50c>)
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dae:	f7fe fb8f 	bl	80024d0 <HAL_GetTick>
 8003db2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db4:	e00c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x524>
 8003db6:	bf00      	nop
 8003db8:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbc:	f7fe fb88 	bl	80024d0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d902      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	f000 bc3e 	b.w	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd0:	4baf      	ldr	r3, [pc, #700]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ef      	bne.n	8003dbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80c7 	beq.w	8003f78 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df0:	4ba7      	ldr	r3, [pc, #668]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d111      	bne.n	8003e22 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4ba4      	ldr	r3, [pc, #656]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e04:	4aa2      	ldr	r2, [pc, #648]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e0e:	4ba0      	ldr	r3, [pc, #640]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e22:	4b9c      	ldr	r3, [pc, #624]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e2e:	4b99      	ldr	r3, [pc, #612]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	4a98      	ldr	r2, [pc, #608]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fb49 	bl	80024d0 <HAL_GetTick>
 8003e3e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe fb45 	bl	80024d0 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e3fb      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e54:	4b8f      	ldr	r3, [pc, #572]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d05f      	beq.n	8003f28 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003e68:	4b89      	ldr	r3, [pc, #548]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e6e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d037      	beq.n	8003eee <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e3da      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8003ea0:	4b7b      	ldr	r3, [pc, #492]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ea6:	4a7a      	ldr	r2, [pc, #488]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003ea8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003eac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003eb0:	f7fe fb0e 	bl	80024d0 <HAL_GetTick>
 8003eb4:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fb0a 	bl	80024d0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e3c0      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003eca:	4b71      	ldr	r3, [pc, #452]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003ed8:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ede:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	496a      	ldr	r1, [pc, #424]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	4b68      	ldr	r3, [pc, #416]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ef4:	4a66      	ldr	r2, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003efa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003efe:	f7fe fae7 	bl	80024d0 <HAL_GetTick>
 8003f02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f06:	f7fe fae3 	bl	80024d0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e399      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f18:	4b5d      	ldr	r3, [pc, #372]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ef      	beq.n	8003f06 <HAL_RCC_OscConfig+0x65a>
 8003f26:	e01b      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f2e:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f30:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003f34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003f38:	f7fe faca 	bl	80024d0 <HAL_GetTick>
 8003f3c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fe fac6 	bl	80024d0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e37c      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f52:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ef      	bne.n	8003f40 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f60:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f68:	4b49      	ldr	r3, [pc, #292]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6e:	4a48      	ldr	r2, [pc, #288]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8112 	beq.w	80041aa <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8c:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d111      	bne.n	8003fbe <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa0:	4a3b      	ldr	r2, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8003fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fbe:	4b35      	ldr	r3, [pc, #212]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	4a31      	ldr	r2, [pc, #196]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fa7b 	bl	80024d0 <HAL_GetTick>
 8003fda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fe fa77 	bl	80024d0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e32d      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCC_OscConfig+0x7e8>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01f      	beq.n	8004048 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d010      	beq.n	8004036 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004014:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8004016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8004026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800402a:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004034:	e018      	b.n	8004068 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004036:	4b16      	ldr	r3, [pc, #88]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8004038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800403c:	4a14      	ldr	r2, [pc, #80]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004046:	e00f      	b.n	8004068 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 800404a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800404e:	4a10      	ldr	r2, [pc, #64]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 800405a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800405e:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <HAL_RCC_OscConfig+0x7e4>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d058      	beq.n	8004122 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8004070:	f7fe fa2e 	bl	80024d0 <HAL_GetTick>
 8004074:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004076:	e00f      	b.n	8004098 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fe fa2a 	bl	80024d0 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d906      	bls.n	8004098 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e2de      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
 800408e:	bf00      	nop
 8004090:	46020c00 	.word	0x46020c00
 8004094:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004098:	4b9c      	ldr	r3, [pc, #624]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 800409a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0e8      	beq.n	8004078 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01b      	beq.n	80040ea <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040b2:	4b96      	ldr	r3, [pc, #600]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80040b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b8:	4a94      	ldr	r2, [pc, #592]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80040ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040c2:	e00a      	b.n	80040da <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fe fa04 	bl	80024d0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e2b8      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040da:	4b8c      	ldr	r3, [pc, #560]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80040dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ed      	beq.n	80040c4 <HAL_RCC_OscConfig+0x818>
 80040e8:	e053      	b.n	8004192 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040ea:	4b88      	ldr	r3, [pc, #544]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80040ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040f0:	4a86      	ldr	r2, [pc, #536]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80040f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fe f9e8 	bl	80024d0 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e29c      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004112:	4b7e      	ldr	r3, [pc, #504]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ed      	bne.n	80040fc <HAL_RCC_OscConfig+0x850>
 8004120:	e037      	b.n	8004192 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004122:	f7fe f9d5 	bl	80024d0 <HAL_GetTick>
 8004126:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004128:	e00a      	b.n	8004140 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fe f9d1 	bl	80024d0 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	; 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e285      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004140:	4b72      	ldr	r3, [pc, #456]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ed      	bne.n	800412a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800414e:	4b6f      	ldr	r3, [pc, #444]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01a      	beq.n	8004192 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800415c:	4b6b      	ldr	r3, [pc, #428]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 800415e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004162:	4a6a      	ldr	r2, [pc, #424]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004168:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800416c:	e00a      	b.n	8004184 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fe f9af 	bl	80024d0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	; 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e263      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004184:	4b61      	ldr	r3, [pc, #388]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800418a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1ed      	bne.n	800416e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004192:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419a:	4b5c      	ldr	r3, [pc, #368]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 800419c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a0:	4a5a      	ldr	r2, [pc, #360]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80041a2:	f023 0304 	bic.w	r3, r3, #4
 80041a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d036      	beq.n	8004224 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d019      	beq.n	80041f2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80041be:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80041c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041c8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041ca:	f7fe f981 	bl	80024d0 <HAL_GetTick>
 80041ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041d2:	f7fe f97d 	bl	80024d0 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e233      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041e4:	4b49      	ldr	r3, [pc, #292]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x926>
 80041f0:	e018      	b.n	8004224 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80041f2:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a45      	ldr	r2, [pc, #276]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041fe:	f7fe f967 	bl	80024d0 <HAL_GetTick>
 8004202:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004206:	f7fe f963 	bl	80024d0 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e219      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004218:	4b3c      	ldr	r3, [pc, #240]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f0      	bne.n	8004206 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d036      	beq.n	800429e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d019      	beq.n	800426c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004238:	4b34      	ldr	r3, [pc, #208]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a33      	ldr	r2, [pc, #204]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 800423e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004242:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004244:	f7fe f944 	bl	80024d0 <HAL_GetTick>
 8004248:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800424c:	f7fe f940 	bl	80024d0 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1f6      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x9a0>
 800426a:	e018      	b.n	800429e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004276:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004278:	f7fe f92a 	bl	80024d0 <HAL_GetTick>
 800427c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004280:	f7fe f926 	bl	80024d0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e1dc      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d07f      	beq.n	80043aa <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d062      	beq.n	8004378 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80042b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042bc:	6093      	str	r3, [r2, #8]
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	4910      	ldr	r1, [pc, #64]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80042d8:	d309      	bcc.n	80042ee <HAL_RCC_OscConfig+0xa42>
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f023 021f 	bic.w	r2, r3, #31
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4909      	ldr	r1, [pc, #36]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
 80042ec:	e02a      	b.n	8004344 <HAL_RCC_OscConfig+0xa98>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da0c      	bge.n	8004310 <HAL_RCC_OscConfig+0xa64>
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	015b      	lsls	r3, r3, #5
 8004304:	4901      	ldr	r1, [pc, #4]	; (800430c <HAL_RCC_OscConfig+0xa60>)
 8004306:	4313      	orrs	r3, r2
 8004308:	60cb      	str	r3, [r1, #12]
 800430a:	e01b      	b.n	8004344 <HAL_RCC_OscConfig+0xa98>
 800430c:	46020c00 	.word	0x46020c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d30a      	bcc.n	8004330 <HAL_RCC_OscConfig+0xa84>
 800431a:	4ba5      	ldr	r3, [pc, #660]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	49a1      	ldr	r1, [pc, #644]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800432a:	4313      	orrs	r3, r2
 800432c:	60cb      	str	r3, [r1, #12]
 800432e:	e009      	b.n	8004344 <HAL_RCC_OscConfig+0xa98>
 8004330:	4b9f      	ldr	r3, [pc, #636]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	03db      	lsls	r3, r3, #15
 800433e:	499c      	ldr	r1, [pc, #624]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004340:	4313      	orrs	r3, r2
 8004342:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004344:	4b9a      	ldr	r3, [pc, #616]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a99      	ldr	r2, [pc, #612]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800434a:	f043 0310 	orr.w	r3, r3, #16
 800434e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004350:	f7fe f8be 	bl	80024d0 <HAL_GetTick>
 8004354:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004358:	f7fe f8ba 	bl	80024d0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e170      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800436a:	4b91      	ldr	r3, [pc, #580]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xaac>
 8004376:	e018      	b.n	80043aa <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004378:	4b8d      	ldr	r3, [pc, #564]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a8c      	ldr	r2, [pc, #560]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004384:	f7fe f8a4 	bl	80024d0 <HAL_GetTick>
 8004388:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800438c:	f7fe f8a0 	bl	80024d0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e156      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800439e:	4b84      	ldr	r3, [pc, #528]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 814b 	beq.w	800464a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ba:	4b7d      	ldr	r3, [pc, #500]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	f000 80fa 	beq.w	80045bc <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	f040 80cc 	bne.w	800456a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b77      	ldr	r3, [pc, #476]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a76      	ldr	r2, [pc, #472]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80043d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043de:	f7fe f877 	bl	80024d0 <HAL_GetTick>
 80043e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe f873 	bl	80024d0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e129      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043f8:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004404:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d111      	bne.n	8004436 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004412:	4b67      	ldr	r3, [pc, #412]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	4a65      	ldr	r2, [pc, #404]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004436:	4b5f      	ldr	r3, [pc, #380]	; (80045b4 <HAL_RCC_OscConfig+0xd08>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004442:	d102      	bne.n	800444a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800444a:	4b5a      	ldr	r3, [pc, #360]	; (80045b4 <HAL_RCC_OscConfig+0xd08>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	4a59      	ldr	r2, [pc, #356]	; (80045b4 <HAL_RCC_OscConfig+0xd08>)
 8004450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004454:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004456:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445e:	f023 0303 	bic.w	r3, r3, #3
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800446a:	3a01      	subs	r2, #1
 800446c:	0212      	lsls	r2, r2, #8
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004474:	430a      	orrs	r2, r1
 8004476:	494e      	ldr	r1, [pc, #312]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004478:	4313      	orrs	r3, r2
 800447a:	628b      	str	r3, [r1, #40]	; 0x28
 800447c:	4b4c      	ldr	r3, [pc, #304]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800447e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004480:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <HAL_RCC_OscConfig+0xd0c>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004488:	3a01      	subs	r2, #1
 800448a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004492:	3a01      	subs	r2, #1
 8004494:	0252      	lsls	r2, r2, #9
 8004496:	b292      	uxth	r2, r2
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800449e:	3a01      	subs	r2, #1
 80044a0:	0412      	lsls	r2, r2, #16
 80044a2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80044a6:	4311      	orrs	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0612      	lsls	r2, r2, #24
 80044b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80044b4:	430a      	orrs	r2, r1
 80044b6:	493e      	ldr	r1, [pc, #248]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80044bc:	4b3c      	ldr	r3, [pc, #240]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044c2:	f023 0310 	bic.w	r3, r3, #16
 80044c6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044c8:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044d8:	00d2      	lsls	r2, r2, #3
 80044da:	4935      	ldr	r1, [pc, #212]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80044e0:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	4a32      	ldr	r2, [pc, #200]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044e6:	f043 0310 	orr.w	r3, r3, #16
 80044ea:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f023 020c 	bic.w	r2, r3, #12
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	492d      	ldr	r1, [pc, #180]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80044fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_OscConfig+0xd08>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <HAL_RCC_OscConfig+0xd08>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004510:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004512:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004516:	2b01      	cmp	r3, #1
 8004518:	d107      	bne.n	800452a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800451a:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004520:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004522:	f023 0304 	bic.w	r3, r3, #4
 8004526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800452a:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004534:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004536:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800453c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004540:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004542:	f7fd ffc5 	bl	80024d0 <HAL_GetTick>
 8004546:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fd ffc1 	bl	80024d0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e077      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0xc9e>
 8004568:	e06f      	b.n	800464a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a10      	ldr	r2, [pc, #64]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004574:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004576:	f7fd ffab 	bl	80024d0 <HAL_GetTick>
 800457a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457e:	f7fd ffa7 	bl	80024d0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e05d      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0xd04>)
 80045a2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	6293      	str	r3, [r2, #40]	; 0x28
 80045ac:	e04d      	b.n	800464a <HAL_RCC_OscConfig+0xd9e>
 80045ae:	bf00      	nop
 80045b0:	46020c00 	.word	0x46020c00
 80045b4:	46020800 	.word	0x46020800
 80045b8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_RCC_OscConfig+0xda8>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0xda8>)
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d03a      	beq.n	8004646 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d133      	bne.n	8004646 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d12a      	bne.n	8004646 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	0b1b      	lsrs	r3, r3, #12
 80045f4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d122      	bne.n	8004646 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d11a      	bne.n	8004646 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	0a5b      	lsrs	r3, r3, #9
 8004614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d111      	bne.n	8004646 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d108      	bne.n	8004646 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	0e1b      	lsrs	r3, r3, #24
 8004638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3738      	adds	r7, #56	; 0x38
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	46020c00 	.word	0x46020c00

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e1d9      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800466c:	4b9b      	ldr	r3, [pc, #620]	; (80048dc <HAL_RCC_ClockConfig+0x284>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d910      	bls.n	800469c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b98      	ldr	r3, [pc, #608]	; (80048dc <HAL_RCC_ClockConfig+0x284>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 020f 	bic.w	r2, r3, #15
 8004682:	4996      	ldr	r1, [pc, #600]	; (80048dc <HAL_RCC_ClockConfig+0x284>)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b94      	ldr	r3, [pc, #592]	; (80048dc <HAL_RCC_ClockConfig+0x284>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e1c1      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d010      	beq.n	80046ca <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	4b8c      	ldr	r3, [pc, #560]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d908      	bls.n	80046ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80046b8:	4b89      	ldr	r3, [pc, #548]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	4986      	ldr	r1, [pc, #536]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	4b81      	ldr	r3, [pc, #516]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d909      	bls.n	80046fc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80046e8:	4b7d      	ldr	r3, [pc, #500]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	497a      	ldr	r1, [pc, #488]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d010      	beq.n	800472a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	4b74      	ldr	r3, [pc, #464]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004714:	429a      	cmp	r2, r3
 8004716:	d908      	bls.n	800472a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004718:	4b71      	ldr	r3, [pc, #452]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	496e      	ldr	r1, [pc, #440]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004726:	4313      	orrs	r3, r2
 8004728:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	4b69      	ldr	r3, [pc, #420]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	429a      	cmp	r2, r3
 8004744:	d908      	bls.n	8004758 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004746:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 020f 	bic.w	r2, r3, #15
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	4963      	ldr	r1, [pc, #396]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004754:	4313      	orrs	r3, r2
 8004756:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80d2 	beq.w	800490a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004766:	2300      	movs	r3, #0
 8004768:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b03      	cmp	r3, #3
 8004770:	d143      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004772:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004780:	4b57      	ldr	r3, [pc, #348]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004786:	4a56      	ldr	r2, [pc, #344]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80047a2:	f7fd fe95 	bl	80024d0 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80047a8:	4b4e      	ldr	r3, [pc, #312]	; (80048e4 <HAL_RCC_ClockConfig+0x28c>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00f      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80047b6:	f7fd fe8b 	bl	80024d0 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e12b      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80047c8:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_RCC_ClockConfig+0x28c>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e0:	4a3f      	ldr	r2, [pc, #252]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80047e2:	f023 0304 	bic.w	r3, r3, #4
 80047e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80047ea:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d121      	bne.n	800483a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e112      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d115      	bne.n	800483a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e106      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800481a:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0fa      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800482a:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e0f2      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800483a:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4926      	ldr	r1, [pc, #152]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004848:	4313      	orrs	r3, r2
 800484a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800484c:	f7fd fe40 	bl	80024d0 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d112      	bne.n	8004880 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800485a:	e00a      	b.n	8004872 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485c:	f7fd fe38 	bl	80024d0 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0d6      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d1ee      	bne.n	800485c <HAL_RCC_ClockConfig+0x204>
 800487e:	e044      	b.n	800490a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d112      	bne.n	80048ae <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004888:	e00a      	b.n	80048a0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488a:	f7fd fe21 	bl	80024d0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f241 3288 	movw	r2, #5000	; 0x1388
 8004898:	4293      	cmp	r3, r2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0bf      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d1ee      	bne.n	800488a <HAL_RCC_ClockConfig+0x232>
 80048ac:	e02d      	b.n	800490a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d123      	bne.n	80048fe <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fd fe0a 	bl	80024d0 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0a8      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <HAL_RCC_ClockConfig+0x288>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ee      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x260>
 80048da:	e016      	b.n	800490a <HAL_RCC_ClockConfig+0x2b2>
 80048dc:	40022000 	.word	0x40022000
 80048e0:	46020c00 	.word	0x46020c00
 80048e4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fd fdf2 	bl	80024d0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e090      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048fe:	4b4a      	ldr	r3, [pc, #296]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b04      	cmp	r3, #4
 8004908:	d1ee      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d010      	beq.n	8004938 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	4b43      	ldr	r3, [pc, #268]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	429a      	cmp	r2, r3
 8004924:	d208      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004926:	4b40      	ldr	r3, [pc, #256]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 020f 	bic.w	r2, r3, #15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	493d      	ldr	r1, [pc, #244]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004938:	4b3c      	ldr	r3, [pc, #240]	; (8004a2c <HAL_RCC_ClockConfig+0x3d4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d210      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b39      	ldr	r3, [pc, #228]	; (8004a2c <HAL_RCC_ClockConfig+0x3d4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 020f 	bic.w	r2, r3, #15
 800494e:	4937      	ldr	r1, [pc, #220]	; (8004a2c <HAL_RCC_ClockConfig+0x3d4>)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <HAL_RCC_ClockConfig+0x3d4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e05b      	b.n	8004a20 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d010      	beq.n	8004996 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004980:	429a      	cmp	r2, r3
 8004982:	d208      	bcs.n	8004996 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004984:	4b28      	ldr	r3, [pc, #160]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4925      	ldr	r1, [pc, #148]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 8004992:	4313      	orrs	r3, r2
 8004994:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d012      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d209      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80049b4:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4919      	ldr	r1, [pc, #100]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d208      	bcs.n	80049f6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80049e4:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	490d      	ldr	r1, [pc, #52]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80049f6:	f000 f821 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80049fa:	4602      	mov	r2, r0
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x3d0>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	490a      	ldr	r1, [pc, #40]	; (8004a30 <HAL_RCC_ClockConfig+0x3d8>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x3dc>)
 8004a0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x3e0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fd fd11 	bl	800243c <HAL_InitTick>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	46020c00 	.word	0x46020c00
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	0800de3c 	.word	0x0800de3c
 8004a34:	20000000 	.word	0x20000000
 8004a38:	20000008 	.word	0x20000008

08004a3c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b08b      	sub	sp, #44	; 0x2c
 8004a40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4a:	4b7b      	ldr	r3, [pc, #492]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a54:	4b78      	ldr	r3, [pc, #480]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x34>
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d121      	bne.n	8004aae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d11e      	bne.n	8004aae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004a70:	4b71      	ldr	r3, [pc, #452]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004a7c:	4b6e      	ldr	r3, [pc, #440]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a82:	0b1b      	lsrs	r3, r3, #12
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	e005      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	0f1b      	lsrs	r3, r3, #28
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a98:	4a68      	ldr	r2, [pc, #416]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d110      	bne.n	8004aca <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004aac:	e00d      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aae:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aba:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004abc:	623b      	str	r3, [r7, #32]
 8004abe:	e004      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ac6:	4b5e      	ldr	r3, [pc, #376]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	f040 80ac 	bne.w	8004c2a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004ad2:	4b59      	ldr	r3, [pc, #356]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004adc:	4b56      	ldr	r3, [pc, #344]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004aea:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004af6:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	08db      	lsrs	r3, r3, #3
 8004afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8086 	beq.w	8004c26 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0xec>
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d022      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x130>
 8004b26:	e043      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004c44 <HAL_RCC_GetSysClockFreq+0x208>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b4a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b4e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x20c>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004b6a:	e046      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004c44 <HAL_RCC_GetSysClockFreq+0x208>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b2e      	ldr	r3, [pc, #184]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b8e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b92:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x20c>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004bae:	e024      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bd8:	ed97 6a01 	vldr	s12, [r7, #4]
 8004bdc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004c48 <HAL_RCC_GetSysClockFreq+0x20c>
 8004be0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004be8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004bf8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	0e1b      	lsrs	r3, r3, #24
 8004c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c04:	3301      	adds	r3, #1
 8004c06:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1e:	ee17 3a90 	vmov	r3, s15
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	e001      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	372c      	adds	r7, #44	; 0x2c
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	46020c00 	.word	0x46020c00
 8004c3c:	0800de54 	.word	0x0800de54
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	4b742400 	.word	0x4b742400
 8004c48:	46000000 	.word	0x46000000

08004c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c50:	f7ff fef4 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <HAL_RCC_GetHCLKFreq+0x28>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	4906      	ldr	r1, [pc, #24]	; (8004c78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004c60:	5ccb      	ldrb	r3, [r1, r3]
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x30>)
 8004c68:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x30>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	46020c00 	.word	0x46020c00
 8004c78:	0800de3c 	.word	0x0800de3c
 8004c7c:	20000000 	.word	0x20000000

08004c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004c84:	f7ff ffe2 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	46020c00 	.word	0x46020c00
 8004ca4:	0800de4c 	.word	0x0800de4c

08004ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004cac:	f7ff ffce 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4903      	ldr	r1, [pc, #12]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	46020c00 	.word	0x46020c00
 8004ccc:	0800de4c 	.word	0x0800de4c

08004cd0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004cd4:	f7ff ffba 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4903      	ldr	r1, [pc, #12]	; (8004cf4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	46020c00 	.word	0x46020c00
 8004cf4:	0800de4c 	.word	0x0800de4c

08004cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d00:	4b3e      	ldr	r3, [pc, #248]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d0e:	f7fe fd6f 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004d12:	6178      	str	r0, [r7, #20]
 8004d14:	e019      	b.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	4b39      	ldr	r3, [pc, #228]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d1c:	4a37      	ldr	r2, [pc, #220]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004d26:	4b35      	ldr	r3, [pc, #212]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d34:	f7fe fd5c 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d3a:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d40:	4a2e      	ldr	r2, [pc, #184]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d42:	f023 0304 	bic.w	r3, r3, #4
 8004d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d50:	d003      	beq.n	8004d5a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d58:	d109      	bne.n	8004d6e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d60:	d202      	bcs.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004d62:	2301      	movs	r3, #1
 8004d64:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d66:	e033      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d6c:	e030      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d74:	d208      	bcs.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d102      	bne.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004d7e:	2303      	movs	r3, #3
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e025      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e035      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8e:	d90f      	bls.n	8004db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d9c:	d902      	bls.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e015      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004da4:	2301      	movs	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e012      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e00f      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db6:	d109      	bne.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d102      	bne.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e004      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	e001      	b.n	8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004dcc:	2301      	movs	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 020f 	bic.w	r2, r3, #15
 8004dd8:	4909      	ldr	r1, [pc, #36]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	46020c00 	.word	0x46020c00
 8004e00:	40022000 	.word	0x40022000

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b0ba      	sub	sp, #232	; 0xe8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e16:	2300      	movs	r3, #0
 8004e18:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f002 0401 	and.w	r4, r2, #1
 8004e28:	2500      	movs	r5, #0
 8004e2a:	ea54 0305 	orrs.w	r3, r4, r5
 8004e2e:	d00b      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004e30:	4bcb      	ldr	r3, [pc, #812]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e36:	f023 0103 	bic.w	r1, r3, #3
 8004e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	4ac7      	ldr	r2, [pc, #796]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f002 0802 	and.w	r8, r2, #2
 8004e54:	f04f 0900 	mov.w	r9, #0
 8004e58:	ea58 0309 	orrs.w	r3, r8, r9
 8004e5c:	d00b      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e5e:	4bc0      	ldr	r3, [pc, #768]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e64:	f023 010c 	bic.w	r1, r3, #12
 8004e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	4abc      	ldr	r2, [pc, #752]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f002 0a04 	and.w	sl, r2, #4
 8004e82:	f04f 0b00 	mov.w	fp, #0
 8004e86:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004e8c:	4bb4      	ldr	r3, [pc, #720]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e92:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	4ab0      	ldr	r2, [pc, #704]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f002 0308 	and.w	r3, r2, #8
 8004eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004ec4:	4ba6      	ldr	r3, [pc, #664]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	4aa2      	ldr	r2, [pc, #648]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f002 0310 	and.w	r3, r2, #16
 8004ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ef2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d00b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004efc:	4b98      	ldr	r3, [pc, #608]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	4a94      	ldr	r2, [pc, #592]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f002 0320 	and.w	r3, r2, #32
 8004f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f34:	4b8a      	ldr	r3, [pc, #552]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f3a:	f023 0107 	bic.w	r1, r3, #7
 8004f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f44:	4a86      	ldr	r2, [pc, #536]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f46:	430b      	orrs	r3, r1
 8004f48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f6c:	4b7c      	ldr	r3, [pc, #496]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f72:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7c:	4a78      	ldr	r2, [pc, #480]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f9a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004fa4:	4b6e      	ldr	r3, [pc, #440]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb4:	4a6a      	ldr	r2, [pc, #424]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fd2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004fdc:	4b60      	ldr	r3, [pc, #384]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fe2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a5c      	ldr	r2, [pc, #368]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800500a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d00b      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005014:	4b52      	ldr	r3, [pc, #328]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800501a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800501e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	4a4e      	ldr	r2, [pc, #312]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005026:	430b      	orrs	r3, r1
 8005028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800503c:	2300      	movs	r3, #0
 800503e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005042:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005046:	460b      	mov	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	d00b      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800504c:	4b44      	ldr	r3, [pc, #272]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800504e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005052:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800505a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505c:	4a40      	ldr	r2, [pc, #256]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800505e:	430b      	orrs	r3, r1
 8005060:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800507a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d00b      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800508a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800508e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005094:	4a32      	ldr	r2, [pc, #200]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005096:	430b      	orrs	r3, r1
 8005098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800509c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80050a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80050b6:	460b      	mov	r3, r1
 80050b8:	4313      	orrs	r3, r2
 80050ba:	d00c      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80050bc:	4b28      	ldr	r3, [pc, #160]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ce:	4a24      	ldr	r2, [pc, #144]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80050e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80050e4:	2300      	movs	r3, #0
 80050e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80050ec:	460b      	mov	r3, r1
 80050ee:	4313      	orrs	r3, r2
 80050f0:	d04f      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80050f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d02d      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80050fe:	2b80      	cmp	r3, #128	; 0x80
 8005100:	d827      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005102:	2b60      	cmp	r3, #96	; 0x60
 8005104:	d02e      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005106:	2b60      	cmp	r3, #96	; 0x60
 8005108:	d823      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d006      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d81f      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005116:	2b20      	cmp	r3, #32
 8005118:	d011      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800511a:	e01a      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800511c:	4b10      	ldr	r3, [pc, #64]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005126:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005128:	e01d      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800512a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800512e:	3308      	adds	r3, #8
 8005130:	4618      	mov	r0, r3
 8005132:	f002 f981 	bl	8007438 <RCCEx_PLL2_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800513c:	e013      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800513e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005142:	332c      	adds	r3, #44	; 0x2c
 8005144:	4618      	mov	r0, r3
 8005146:	f002 fa0f 	bl	8007568 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005150:	e009      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005158:	e005      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800515a:	bf00      	nop
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800515e:	bf00      	nop
 8005160:	46020c00 	.word	0x46020c00
        break;
 8005164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005166:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800516e:	4bb6      	ldr	r3, [pc, #728]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005174:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005180:	4ab1      	ldr	r2, [pc, #708]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005182:	430b      	orrs	r3, r1
 8005184:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005188:	e003      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800518e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800519e:	673b      	str	r3, [r7, #112]	; 0x70
 80051a0:	2300      	movs	r3, #0
 80051a2:	677b      	str	r3, [r7, #116]	; 0x74
 80051a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80051a8:	460b      	mov	r3, r1
 80051aa:	4313      	orrs	r3, r2
 80051ac:	d053      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80051ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d033      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80051bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c0:	d82c      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80051c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c6:	d02f      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80051c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051cc:	d826      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80051ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d2:	d008      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d8:	d820      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80051de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e2:	d011      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80051e4:	e01a      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051e6:	4b98      	ldr	r3, [pc, #608]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	4a97      	ldr	r2, [pc, #604]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051f2:	e01a      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f8:	3308      	adds	r3, #8
 80051fa:	4618      	mov	r0, r3
 80051fc:	f002 f91c 	bl	8007438 <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005206:	e010      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800520c:	332c      	adds	r3, #44	; 0x2c
 800520e:	4618      	mov	r0, r3
 8005210:	f002 f9aa 	bl	8007568 <RCCEx_PLL3_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800521a:	e006      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005222:	e002      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800522a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005232:	4b85      	ldr	r3, [pc, #532]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005238:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800523c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005244:	4a80      	ldr	r2, [pc, #512]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005246:	430b      	orrs	r3, r1
 8005248:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800524c:	e003      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005252:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005262:	66bb      	str	r3, [r7, #104]	; 0x68
 8005264:	2300      	movs	r3, #0
 8005266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005268:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800526c:	460b      	mov	r3, r1
 800526e:	4313      	orrs	r3, r2
 8005270:	d046      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800527a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800527e:	d028      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005280:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005284:	d821      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800528a:	d022      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800528c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005290:	d81b      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005296:	d01c      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005298:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800529c:	d815      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800529e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a2:	d008      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a8:	d80f      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b2:	d00e      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80052b4:	e009      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ba:	3308      	adds	r3, #8
 80052bc:	4618      	mov	r0, r3
 80052be:	f002 f8bb 	bl	8007438 <RCCEx_PLL2_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80052c8:	e004      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80052d0:	e000      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80052d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10d      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80052dc:	4b5a      	ldr	r3, [pc, #360]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80052de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052e2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80052e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052ee:	4a56      	ldr	r2, [pc, #344]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80052f0:	430b      	orrs	r3, r1
 80052f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052f6:	e003      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052fc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800530c:	663b      	str	r3, [r7, #96]	; 0x60
 800530e:	2300      	movs	r3, #0
 8005310:	667b      	str	r3, [r7, #100]	; 0x64
 8005312:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005316:	460b      	mov	r3, r1
 8005318:	4313      	orrs	r3, r2
 800531a:	d03f      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800531c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	2b04      	cmp	r3, #4
 8005326:	d81e      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	0800536f 	.word	0x0800536f
 8005334:	08005345 	.word	0x08005345
 8005338:	08005353 	.word	0x08005353
 800533c:	0800536f 	.word	0x0800536f
 8005340:	0800536f 	.word	0x0800536f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005344:	4b40      	ldr	r3, [pc, #256]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800534a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005350:	e00e      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005356:	332c      	adds	r3, #44	; 0x2c
 8005358:	4618      	mov	r0, r3
 800535a:	f002 f905 	bl	8007568 <RCCEx_PLL3_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005364:	e004      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800536c:	e000      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800536e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005370:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005378:	4b33      	ldr	r3, [pc, #204]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800537a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800537e:	f023 0107 	bic.w	r1, r3, #7
 8005382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	4a2f      	ldr	r2, [pc, #188]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800538c:	430b      	orrs	r3, r1
 800538e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005392:	e003      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005398:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800539c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80053a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80053aa:	2300      	movs	r3, #0
 80053ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d04d      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80053b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053c4:	d028      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80053c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ca:	d821      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80053cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053d0:	d024      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x618>
 80053d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053d6:	d81b      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80053d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053dc:	d00e      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80053de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053e2:	d815      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01b      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ec:	d110      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053ee:	4b16      	ldr	r3, [pc, #88]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	4a15      	ldr	r2, [pc, #84]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80053fa:	e012      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005400:	332c      	adds	r3, #44	; 0x2c
 8005402:	4618      	mov	r0, r3
 8005404:	f002 f8b0 	bl	8007568 <RCCEx_PLL3_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800540e:	e008      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005416:	e004      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005418:	bf00      	nop
 800541a:	e002      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800541c:	bf00      	nop
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005420:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005422:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d110      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800542c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005430:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543c:	4a02      	ldr	r2, [pc, #8]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800543e:	430b      	orrs	r3, r1
 8005440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005444:	e006      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005446:	bf00      	nop
 8005448:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005450:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005454:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005460:	653b      	str	r3, [r7, #80]	; 0x50
 8005462:	2300      	movs	r3, #0
 8005464:	657b      	str	r3, [r7, #84]	; 0x54
 8005466:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	f000 80b5 	beq.w	80055dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005478:	4b9d      	ldr	r3, [pc, #628]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d113      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	4b9a      	ldr	r3, [pc, #616]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800548c:	4a98      	ldr	r2, [pc, #608]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005496:	4b96      	ldr	r3, [pc, #600]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80054ae:	4b91      	ldr	r3, [pc, #580]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	4a90      	ldr	r2, [pc, #576]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054ba:	f7fd f809 	bl	80024d0 <HAL_GetTick>
 80054be:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054c2:	e00b      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c4:	f7fd f804 	bl	80024d0 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d903      	bls.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80054da:	e005      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054dc:	4b85      	ldr	r3, [pc, #532]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ed      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80054e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d165      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f0:	4b7f      	ldr	r3, [pc, #508]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d023      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	4293      	cmp	r3, r2
 8005514:	d01b      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005516:	4b76      	ldr	r3, [pc, #472]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800551c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005524:	4b72      	ldr	r3, [pc, #456]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800552a:	4a71      	ldr	r2, [pc, #452]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005534:	4b6e      	ldr	r3, [pc, #440]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800553a:	4a6d      	ldr	r2, [pc, #436]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005544:	4a6a      	ldr	r2, [pc, #424]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d019      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fc ffb9 	bl	80024d0 <HAL_GetTick>
 800555e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005562:	e00d      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fc ffb4 	bl	80024d0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	f241 3388 	movw	r3, #5000	; 0x1388
 8005574:	429a      	cmp	r2, r3
 8005576:	d903      	bls.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800557e:	e006      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005580:	4b5b      	ldr	r3, [pc, #364]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ea      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800558e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10d      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005596:	4b56      	ldr	r3, [pc, #344]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800559c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055a8:	4a51      	ldr	r2, [pc, #324]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055aa:	430b      	orrs	r3, r1
 80055ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055b0:	e008      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055b6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80055ba:	e003      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055c0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055c4:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d107      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055cc:	4b48      	ldr	r3, [pc, #288]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d2:	4a47      	ldr	r2, [pc, #284]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80055dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80055e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ea:	2300      	movs	r3, #0
 80055ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80055f2:	460b      	mov	r3, r1
 80055f4:	4313      	orrs	r3, r2
 80055f6:	d042      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80055f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005600:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005604:	d022      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005606:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800560a:	d81b      	bhi.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800560c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005610:	d011      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005616:	d815      	bhi.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d019      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800561c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005620:	d110      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005626:	3308      	adds	r3, #8
 8005628:	4618      	mov	r0, r3
 800562a:	f001 ff05 	bl	8007438 <RCCEx_PLL2_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005634:	e00d      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005636:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	4a2d      	ldr	r2, [pc, #180]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800563c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005640:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005642:	e006      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800564a:	e002      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800564c:	bf00      	nop
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005650:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005652:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800565a:	4b25      	ldr	r3, [pc, #148]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800565c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005660:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005668:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800566c:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800566e:	430b      	orrs	r3, r1
 8005670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800567a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800568a:	643b      	str	r3, [r7, #64]	; 0x40
 800568c:	2300      	movs	r3, #0
 800568e:	647b      	str	r3, [r7, #68]	; 0x44
 8005690:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005694:	460b      	mov	r3, r1
 8005696:	4313      	orrs	r3, r2
 8005698:	d032      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a6:	d00b      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ac:	d804      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d007      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80056c0:	bf00      	nop
 80056c2:	e002      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80056c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d112      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e4:	4a02      	ldr	r2, [pc, #8]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80056ec:	e008      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80056ee:	bf00      	nop
 80056f0:	46020c00 	.word	0x46020c00
 80056f4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80056fc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800570c:	63bb      	str	r3, [r7, #56]	; 0x38
 800570e:	2300      	movs	r3, #0
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005712:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d00c      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800571c:	4b98      	ldr	r3, [pc, #608]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800571e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005722:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800572a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800572e:	4a94      	ldr	r2, [pc, #592]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005730:	430b      	orrs	r3, r1
 8005732:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005742:	633b      	str	r3, [r7, #48]	; 0x30
 8005744:	2300      	movs	r3, #0
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
 8005748:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800574c:	460b      	mov	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	d019      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800575a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005760:	4b87      	ldr	r3, [pc, #540]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	4a86      	ldr	r2, [pc, #536]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800576c:	4b84      	ldr	r3, [pc, #528]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800576e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005772:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800577a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800577e:	4a80      	ldr	r2, [pc, #512]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005780:	430b      	orrs	r3, r1
 8005782:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
 8005794:	2300      	movs	r3, #0
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005798:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800579c:	460b      	mov	r3, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	d00c      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80057a2:	4b77      	ldr	r3, [pc, #476]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057b4:	4972      	ldr	r1, [pc, #456]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80057bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	2300      	movs	r3, #0
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057d2:	460b      	mov	r3, r1
 80057d4:	4313      	orrs	r3, r2
 80057d6:	d00c      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80057d8:	4b69      	ldr	r3, [pc, #420]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057ea:	4965      	ldr	r1, [pc, #404]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80057f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	2300      	movs	r3, #0
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005808:	460b      	mov	r3, r1
 800580a:	4313      	orrs	r3, r2
 800580c:	d00c      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800580e:	4b5c      	ldr	r3, [pc, #368]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005814:	f023 0218 	bic.w	r2, r3, #24
 8005818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800581c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005820:	4957      	ldr	r1, [pc, #348]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d032      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800584c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005850:	d105      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005852:	4b4b      	ldr	r3, [pc, #300]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	4a4a      	ldr	r2, [pc, #296]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800585e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005866:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800586a:	d108      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800586c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005870:	3308      	adds	r3, #8
 8005872:	4618      	mov	r0, r3
 8005874:	f001 fde0 	bl	8007438 <RCCEx_PLL2_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800587e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10d      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005886:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800588c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005898:	4939      	ldr	r1, [pc, #228]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80058a0:	e003      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058a6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80058aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d03a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80058c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d2:	d00e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80058d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d8:	d815      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d017      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80058de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058e2:	d110      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e4:	4b26      	ldr	r3, [pc, #152]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	4a25      	ldr	r2, [pc, #148]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ee:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80058f0:	e00e      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f6:	3308      	adds	r3, #8
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 fd9d 	bl	8007438 <RCCEx_PLL2_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005904:	e004      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800590e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005910:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800591a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800591e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592a:	4915      	ldr	r1, [pc, #84]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005932:	e003      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005938:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800593c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005952:	460b      	mov	r3, r1
 8005954:	4313      	orrs	r3, r2
 8005956:	d00c      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800595a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800595e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800596a:	4905      	ldr	r1, [pc, #20]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005972:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005976:	4618      	mov	r0, r3
 8005978:	37e8      	adds	r7, #232	; 0xe8
 800597a:	46bd      	mov	sp, r7
 800597c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005980:	46020c00 	.word	0x46020c00

08005984 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005984:	b480      	push	{r7}
 8005986:	b089      	sub	sp, #36	; 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800598c:	4bac      	ldr	r3, [pc, #688]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005996:	4baa      	ldr	r3, [pc, #680]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80059a0:	4ba7      	ldr	r3, [pc, #668]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3301      	adds	r3, #1
 80059ac:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80059ae:	4ba4      	ldr	r3, [pc, #656]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80059b8:	4ba1      	ldr	r3, [pc, #644]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	08db      	lsrs	r3, r3, #3
 80059be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8123 	beq.w	8005c22 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d062      	beq.n	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	f200 8081 	bhi.w	8005aec <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d024      	beq.n	8005a3a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d17a      	bne.n	8005aec <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a00:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a08:	4b8d      	ldr	r3, [pc, #564]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a18:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a1c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a38:	e08f      	b.n	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a3a:	4b81      	ldr	r3, [pc, #516]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8005a46:	4b7e      	ldr	r3, [pc, #504]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	0f1b      	lsrs	r3, r3, #28
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	e006      	b.n	8005a60 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005a52:	4b7b      	ldr	r3, [pc, #492]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	0f1b      	lsrs	r3, r3, #28
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	4a7a      	ldr	r2, [pc, #488]	; (8005c4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a8a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aa6:	e058      	b.n	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ace:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aea:	e036      	b.n	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005aec:	4b54      	ldr	r3, [pc, #336]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005af8:	4b51      	ldr	r3, [pc, #324]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	0f1b      	lsrs	r3, r3, #28
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	e006      	b.n	8005b12 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005b04:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	0f1b      	lsrs	r3, r3, #28
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	4a4e      	ldr	r2, [pc, #312]	; (8005c4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	ee07 3a90 	vmov	s15, r3
 8005b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b38:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b58:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005b5a:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d017      	beq.n	8005b96 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b66:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	0a5b      	lsrs	r3, r3, #9
 8005b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8c:	ee17 2a90 	vmov	r2, s15
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005b9c:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d017      	beq.n	8005bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bce:	ee17 2a90 	vmov	r2, s15
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	605a      	str	r2, [r3, #4]
 8005bd6:	e002      	b.n	8005bde <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bee:	0e1b      	lsrs	r3, r3, #24
 8005bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c00:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c10:	ee17 2a90 	vmov	r2, s15
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005c18:	e00c      	b.n	8005c34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	e008      	b.n	8005c34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	3724      	adds	r7, #36	; 0x24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	46020c00 	.word	0x46020c00
 8005c44:	4b742400 	.word	0x4b742400
 8005c48:	46000000 	.word	0x46000000
 8005c4c:	0800de54 	.word	0x0800de54

08005c50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005c58:	4bac      	ldr	r3, [pc, #688]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c60:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005c62:	4baa      	ldr	r3, [pc, #680]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005c6c:	4ba7      	ldr	r3, [pc, #668]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	3301      	adds	r3, #1
 8005c78:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005c7a:	4ba4      	ldr	r3, [pc, #656]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005c84:	4ba1      	ldr	r3, [pc, #644]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	08db      	lsrs	r3, r3, #3
 8005c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 8123 	beq.w	8005eee <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d062      	beq.n	8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	f200 8081 	bhi.w	8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d024      	beq.n	8005d06 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d17a      	bne.n	8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ccc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd4:	4b8d      	ldr	r3, [pc, #564]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ce4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ce8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005cec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d04:	e08f      	b.n	8005e26 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005d06:	4b81      	ldr	r3, [pc, #516]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8005d12:	4b7e      	ldr	r3, [pc, #504]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	0f1b      	lsrs	r3, r3, #28
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8005d1e:	4b7b      	ldr	r3, [pc, #492]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	0f1b      	lsrs	r3, r3, #28
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	4a7a      	ldr	r2, [pc, #488]	; (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d56:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d72:	e058      	b.n	8005e26 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d86:	4b61      	ldr	r3, [pc, #388]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d9a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005db6:	e036      	b.n	8005e26 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005db8:	4b54      	ldr	r3, [pc, #336]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005dc4:	4b51      	ldr	r3, [pc, #324]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	0f1b      	lsrs	r3, r3, #28
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	e006      	b.n	8005dde <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8005dd0:	4b4e      	ldr	r3, [pc, #312]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	0f1b      	lsrs	r3, r3, #28
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	4a4e      	ldr	r2, [pc, #312]	; (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e04:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e08:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e24:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d017      	beq.n	8005e62 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e32:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	0a5b      	lsrs	r3, r3, #9
 8005e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e48:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e58:	ee17 2a90 	vmov	r2, s15
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e002      	b.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005e68:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d017      	beq.n	8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9a:	ee17 2a90 	vmov	r2, s15
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	e002      	b.n	8005eaa <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005eaa:	4b18      	ldr	r3, [pc, #96]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d017      	beq.n	8005ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	0e1b      	lsrs	r3, r3, #24
 8005ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec0:	ee07 3a90 	vmov	s15, r3
 8005ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005edc:	ee17 2a90 	vmov	r2, s15
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ee4:	e00c      	b.n	8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	609a      	str	r2, [r3, #8]
}
 8005eec:	e008      	b.n	8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	3724      	adds	r7, #36	; 0x24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	46020c00 	.word	0x46020c00
 8005f10:	4b742400 	.word	0x4b742400
 8005f14:	46000000 	.word	0x46000000
 8005f18:	0800de54 	.word	0x0800de54

08005f1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	; 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005f24:	4bac      	ldr	r3, [pc, #688]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005f2e:	4baa      	ldr	r3, [pc, #680]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005f38:	4ba7      	ldr	r3, [pc, #668]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	3301      	adds	r3, #1
 8005f44:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005f46:	4ba4      	ldr	r3, [pc, #656]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005f50:	4ba1      	ldr	r3, [pc, #644]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f68:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8123 	beq.w	80061ba <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d062      	beq.n	8006040 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	f200 8081 	bhi.w	8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d024      	beq.n	8005fd2 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d17a      	bne.n	8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	eddf 6a90 	vldr	s13, [pc, #576]	; 80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa0:	4b8d      	ldr	r3, [pc, #564]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8005fd0:	e08f      	b.n	80060f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005fd2:	4b81      	ldr	r3, [pc, #516]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8005fde:	4b7e      	ldr	r3, [pc, #504]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	0f1b      	lsrs	r3, r3, #28
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8005fea:	4b7b      	ldr	r3, [pc, #492]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	0f1b      	lsrs	r3, r3, #28
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006022:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800603e:	e058      	b.n	80060f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b61      	ldr	r3, [pc, #388]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006062:	ed97 6a02 	vldr	s12, [r7, #8]
 8006066:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006082:	e036      	b.n	80060f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006084:	4b54      	ldr	r3, [pc, #336]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006090:	4b51      	ldr	r3, [pc, #324]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	0f1b      	lsrs	r3, r3, #28
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	e006      	b.n	80060aa <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800609c:	4b4e      	ldr	r3, [pc, #312]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800609e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060a2:	041b      	lsls	r3, r3, #16
 80060a4:	0f1b      	lsrs	r3, r3, #28
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	4a4e      	ldr	r2, [pc, #312]	; (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80060ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80060d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80060e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80060f2:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d017      	beq.n	800612e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060fe:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	0a5b      	lsrs	r3, r3, #9
 8006104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006114:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006118:	edd7 6a07 	vldr	s13, [r7, #28]
 800611c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006124:	ee17 2a90 	vmov	r2, s15
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e002      	b.n	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006134:	4b28      	ldr	r3, [pc, #160]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d017      	beq.n	8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006140:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	0c1b      	lsrs	r3, r3, #16
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006156:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800615a:	edd7 6a07 	vldr	s13, [r7, #28]
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006166:	ee17 2a90 	vmov	r2, s15
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	e002      	b.n	8006176 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006176:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d017      	beq.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	0e1b      	lsrs	r3, r3, #24
 8006188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006198:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800619c:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a8:	ee17 2a90 	vmov	r2, s15
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80061b0:	e00c      	b.n	80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	609a      	str	r2, [r3, #8]
}
 80061b8:	e008      	b.n	80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	3724      	adds	r7, #36	; 0x24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	46020c00 	.word	0x46020c00
 80061dc:	4b742400 	.word	0x4b742400
 80061e0:	46000000 	.word	0x46000000
 80061e4:	0800de54 	.word	0x0800de54

080061e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	; 0x38
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80061f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80061fa:	430b      	orrs	r3, r1
 80061fc:	d145      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80061fe:	4ba7      	ldr	r3, [pc, #668]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006208:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800620a:	4ba4      	ldr	r3, [pc, #656]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800620c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b02      	cmp	r3, #2
 8006216:	d108      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621e:	d104      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
 8006226:	f001 b8fc 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800622a:	4b9c      	ldr	r3, [pc, #624]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800622c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006238:	d114      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006240:	d110      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006242:	4b96      	ldr	r3, [pc, #600]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006250:	d103      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006252:	23fa      	movs	r3, #250	; 0xfa
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006256:	f001 b8e4 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800625a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006260:	f001 b8df 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006264:	4b8d      	ldr	r3, [pc, #564]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006270:	d107      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006278:	d103      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800627a:	4b89      	ldr	r3, [pc, #548]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
 800627e:	f001 b8d0 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
 8006286:	f001 b8cc 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800628a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006292:	430b      	orrs	r3, r1
 8006294:	d151      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006296:	4b81      	ldr	r3, [pc, #516]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006298:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800629c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2b80      	cmp	r3, #128	; 0x80
 80062a6:	d035      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d841      	bhi.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	2b60      	cmp	r3, #96	; 0x60
 80062b2:	d02a      	beq.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2b60      	cmp	r3, #96	; 0x60
 80062b8:	d83b      	bhi.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d009      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d835      	bhi.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00c      	beq.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d012      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80062d2:	e02e      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fb53 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062e2:	f001 b89e 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e6:	f107 0318 	add.w	r3, r7, #24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fcb0 	bl	8005c50 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062f4:	f001 b895 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f8:	f107 030c 	add.w	r3, r7, #12
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fe0d 	bl	8005f1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006306:	f001 b88c 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800630a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006310:	f001 b887 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006314:	4b61      	ldr	r3, [pc, #388]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d103      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006322:	4b60      	ldr	r3, [pc, #384]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006326:	f001 b87c 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800632e:	f001 b878 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006336:	f001 b874 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800633a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006342:	430b      	orrs	r3, r1
 8006344:	d158      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006346:	4b55      	ldr	r3, [pc, #340]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006348:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800634c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006350:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006358:	d03b      	beq.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d846      	bhi.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006368:	d02e      	beq.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006370:	d83e      	bhi.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006378:	d00b      	beq.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006380:	d836      	bhi.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00d      	beq.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638e:	d012      	beq.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006390:	e02e      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff faf4 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063a0:	f001 b83f 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a4:	f107 0318 	add.w	r3, r7, #24
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fc51 	bl	8005c50 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063b2:	f001 b836 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063b6:	f107 030c 	add.w	r3, r7, #12
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fdae 	bl	8005f1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063c4:	f001 b82d 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80063c8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ce:	f001 b828 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063d2:	4b32      	ldr	r3, [pc, #200]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063de:	d103      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80063e0:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063e4:	f001 b81d 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ec:	f001 b819 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063f4:	f001 b815 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80063f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006400:	430b      	orrs	r3, r1
 8006402:	d126      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006404:	4b25      	ldr	r3, [pc, #148]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006406:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800640a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006410:	4b22      	ldr	r3, [pc, #136]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641c:	d106      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006424:	4b1f      	ldr	r3, [pc, #124]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
 8006428:	f000 bffb 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d107      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006440:	d103      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006442:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	f000 bfec 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
 800644e:	f000 bfe8 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800645a:	430b      	orrs	r3, r1
 800645c:	d164      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006464:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006468:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006470:	d03d      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006478:	d852      	bhi.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006480:	d014      	beq.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006488:	d84a      	bhi.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01f      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006496:	d012      	beq.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006498:	e042      	b.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800649a:	bf00      	nop
 800649c:	46020c00 	.word	0x46020c00
 80064a0:	0007a120 	.word	0x0007a120
 80064a4:	00f42400 	.word	0x00f42400
 80064a8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fa67 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064ba:	f000 bfb2 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064be:	f107 0318 	add.w	r3, r7, #24
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fbc4 	bl	8005c50 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064cc:	f000 bfa9 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80064d0:	4bab      	ldr	r3, [pc, #684]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064dc:	d103      	bne.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80064de:	4ba9      	ldr	r3, [pc, #676]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80064e2:	f000 bf9e 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064ea:	f000 bf9a 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064ee:	4ba4      	ldr	r3, [pc, #656]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80064fa:	4ba1      	ldr	r3, [pc, #644]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	0e1b      	lsrs	r3, r3, #24
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	e006      	b.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006506:	4b9e      	ldr	r3, [pc, #632]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	0e1b      	lsrs	r3, r3, #24
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	4a9c      	ldr	r2, [pc, #624]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800651c:	f000 bf81 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006524:	f000 bf7d 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800652c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006530:	430b      	orrs	r3, r1
 8006532:	d175      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006534:	4b92      	ldr	r3, [pc, #584]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800653a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2b00      	cmp	r3, #0
 8006544:	d15b      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006546:	4b8e      	ldr	r3, [pc, #568]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800654c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006550:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006558:	d034      	beq.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006560:	d849      	bhi.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006568:	d00b      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006570:	d841      	bhi.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2b00      	cmp	r3, #0
 8006576:	d016      	beq.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657e:	d009      	beq.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006580:	e039      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff f9fc 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006590:	f000 bf47 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006594:	f107 0318 	add.w	r3, r7, #24
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fb59 	bl	8005c50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80065a2:	f000 bf3e 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80065a6:	4b76      	ldr	r3, [pc, #472]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	d103      	bne.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80065b4:	4b73      	ldr	r3, [pc, #460]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80065b8:	f000 bf33 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80065c0:	f000 bf2f 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065c4:	4b6e      	ldr	r3, [pc, #440]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80065d0:	4b6b      	ldr	r3, [pc, #428]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	e006      	b.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80065dc:	4b68      	ldr	r3, [pc, #416]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80065de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	0e1b      	lsrs	r3, r3, #24
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	4a67      	ldr	r2, [pc, #412]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80065ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80065f2:	f000 bf16 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80065fa:	f000 bf12 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006604:	d108      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff f9ba 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
 8006614:	f000 bf05 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
 800661c:	f000 bf01 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006624:	1e51      	subs	r1, r2, #1
 8006626:	430b      	orrs	r3, r1
 8006628:	d136      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800662a:	4b55      	ldr	r3, [pc, #340]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800662c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fe fb34 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
 8006640:	6378      	str	r0, [r7, #52]	; 0x34
 8006642:	f000 beee 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	d104      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800664c:	f7fe f9f6 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006650:	6378      	str	r0, [r7, #52]	; 0x34
 8006652:	f000 bee6 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006656:	4b4a      	ldr	r3, [pc, #296]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006662:	d106      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	2b02      	cmp	r3, #2
 8006668:	d103      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800666a:	4b48      	ldr	r3, [pc, #288]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
 800666e:	f000 bed8 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006672:	4b43      	ldr	r3, [pc, #268]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b02      	cmp	r3, #2
 800667e:	d107      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	2b03      	cmp	r3, #3
 8006684:	d104      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
 800668c:	f000 bec9 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
 8006694:	f000 bec5 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800669c:	1e91      	subs	r1, r2, #2
 800669e:	430b      	orrs	r3, r1
 80066a0:	d136      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80066a2:	4b37      	ldr	r3, [pc, #220]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066a8:	f003 030c 	and.w	r3, r3, #12
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066b4:	f7fe fae4 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 80066b8:	6378      	str	r0, [r7, #52]	; 0x34
 80066ba:	f000 beb2 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d104      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066c4:	f7fe f9ba 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80066c8:	6378      	str	r0, [r7, #52]	; 0x34
 80066ca:	f000 beaa 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80066ce:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066da:	d106      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d103      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80066e2:	4b2a      	ldr	r3, [pc, #168]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
 80066e6:	f000 be9c 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80066ea:	4b25      	ldr	r3, [pc, #148]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80066ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d107      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d104      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
 8006704:	f000 be8d 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
 800670c:	f000 be89 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006714:	1f11      	subs	r1, r2, #4
 8006716:	430b      	orrs	r3, r1
 8006718:	d13e      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800671a:	4b19      	ldr	r3, [pc, #100]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800671c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006724:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800672c:	f7fe faa8 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8006730:	6378      	str	r0, [r7, #52]	; 0x34
 8006732:	f000 be76 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	2b10      	cmp	r3, #16
 800673a:	d104      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800673c:	f7fe f97e 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006740:	6378      	str	r0, [r7, #52]	; 0x34
 8006742:	f000 be6e 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006746:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006752:	d106      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2b20      	cmp	r3, #32
 8006758:	d103      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
 800675e:	f000 be60 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006762:	4b07      	ldr	r3, [pc, #28]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b02      	cmp	r3, #2
 800676e:	d10f      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	2b30      	cmp	r3, #48	; 0x30
 8006774:	d10c      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
 800677c:	f000 be51 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006780:	46020c00 	.word	0x46020c00
 8006784:	02dc6c00 	.word	0x02dc6c00
 8006788:	0800de54 	.word	0x0800de54
 800678c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
 8006794:	f000 be45 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	f1a2 0108 	sub.w	r1, r2, #8
 80067a0:	430b      	orrs	r3, r1
 80067a2:	d136      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80067a4:	4b9f      	ldr	r3, [pc, #636]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067b6:	f7fe fa63 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 80067ba:	6378      	str	r0, [r7, #52]	; 0x34
 80067bc:	f000 be31 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d104      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067c6:	f7fe f939 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80067ca:	6378      	str	r0, [r7, #52]	; 0x34
 80067cc:	f000 be29 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80067d0:	4b94      	ldr	r3, [pc, #592]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067dc:	d106      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	2b80      	cmp	r3, #128	; 0x80
 80067e2:	d103      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80067e4:	4b90      	ldr	r3, [pc, #576]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
 80067e8:	f000 be1b 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80067ec:	4b8d      	ldr	r3, [pc, #564]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d107      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2bc0      	cmp	r3, #192	; 0xc0
 80067fe:	d104      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
 8006806:	f000 be0c 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
 800680e:	f000 be08 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006816:	f1a2 0110 	sub.w	r1, r2, #16
 800681a:	430b      	orrs	r3, r1
 800681c:	d139      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800681e:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006828:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fe fa26 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8006834:	6378      	str	r0, [r7, #52]	; 0x34
 8006836:	f000 bdf4 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006840:	d104      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe f8fb 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006846:	6378      	str	r0, [r7, #52]	; 0x34
 8006848:	f000 bdeb 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800684c:	4b75      	ldr	r3, [pc, #468]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006858:	d107      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006860:	d103      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006862:	4b71      	ldr	r3, [pc, #452]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	f000 bddc 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800686a:	4b6e      	ldr	r3, [pc, #440]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800686c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b02      	cmp	r3, #2
 8006876:	d108      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687e:	d104      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
 8006886:	f000 bdcc 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
 800688e:	f000 bdc8 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006896:	f1a2 0120 	sub.w	r1, r2, #32
 800689a:	430b      	orrs	r3, r1
 800689c:	d158      	bne.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800689e:	4b61      	ldr	r3, [pc, #388]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80068b0:	f7fe fa0e 	bl	8004cd0 <HAL_RCC_GetPCLK3Freq>
 80068b4:	6378      	str	r0, [r7, #52]	; 0x34
 80068b6:	f000 bdb4 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d104      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068c0:	f7fe f8bc 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80068c4:	6378      	str	r0, [r7, #52]	; 0x34
 80068c6:	f000 bdac 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80068ca:	4b56      	ldr	r3, [pc, #344]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d6:	d106      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d103      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80068de:	4b52      	ldr	r3, [pc, #328]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
 80068e2:	f000 bd9e 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80068e6:	4b4f      	ldr	r3, [pc, #316]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d107      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d104      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80068fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006900:	f000 bd8f 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006904:	4b47      	ldr	r3, [pc, #284]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b20      	cmp	r3, #32
 800690e:	d11b      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	2b04      	cmp	r3, #4
 8006914:	d118      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006916:	4b43      	ldr	r3, [pc, #268]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006922:	4b40      	ldr	r3, [pc, #256]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	0e1b      	lsrs	r3, r3, #24
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	e006      	b.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800692e:	4b3d      	ldr	r3, [pc, #244]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006934:	041b      	lsls	r3, r3, #16
 8006936:	0e1b      	lsrs	r3, r3, #24
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4a3b      	ldr	r2, [pc, #236]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800693e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
 8006944:	f000 bd6d 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
 800694c:	f000 bd69 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006954:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006958:	430b      	orrs	r3, r1
 800695a:	d169      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800695c:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800695e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006962:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006966:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696e:	d104      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006970:	f7fe f864 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006974:	6378      	str	r0, [r7, #52]	; 0x34
 8006976:	f000 bd54 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006980:	d108      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006982:	f107 0318 	add.w	r3, r7, #24
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff f962 	bl	8005c50 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	637b      	str	r3, [r7, #52]	; 0x34
 8006990:	f000 bd47 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800699a:	f7fe f957 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 800699e:	6378      	str	r0, [r7, #52]	; 0x34
 80069a0:	f000 bd3f 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80069aa:	d118      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80069ac:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80069b8:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	0f1b      	lsrs	r3, r3, #28
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	e006      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80069c4:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	0f1b      	lsrs	r3, r3, #28
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
 80069da:	f000 bd22 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069f2:	d103      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
 80069f8:	f000 bd13 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80069fc:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a08:	d107      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a10:	d103      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	f000 bd04 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	f000 bd00 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006a22:	bf00      	nop
 8006a24:	46020c00 	.word	0x46020c00
 8006a28:	00f42400 	.word	0x00f42400
 8006a2c:	0800de54 	.word	0x0800de54
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a34:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	d14e      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006a3c:	4ba8      	ldr	r3, [pc, #672]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d841      	bhi.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a8d 	.word	0x08006a8d
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a7b 	.word	0x08006a7b
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006aa1 	.word	0x08006aa1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe ff89 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a76:	f000 bcd4 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fa4c 	bl	8005f1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a88:	f000 bccb 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006a8c:	f7fe f8de 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8006a90:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006a92:	f000 bcc6 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a9c:	f000 bcc1 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aa0:	4b8f      	ldr	r3, [pc, #572]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006aac:	4b8c      	ldr	r3, [pc, #560]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	e006      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006ab8:	4b89      	ldr	r3, [pc, #548]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	4a87      	ldr	r2, [pc, #540]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ace:	f000 bca8 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ad6:	f000 bca4 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ade:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	d15d      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006ae6:	4b7e      	ldr	r3, [pc, #504]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006af0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006af8:	d036      	beq.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b00:	d84b      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b08:	d029      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b10:	d843      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b18:	d013      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b20:	d83b      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d015      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2e:	d134      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe ff25 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b3e:	f000 bc70 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b42:	f107 030c 	add.w	r3, r7, #12
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff f9e8 	bl	8005f1c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b50:	f000 bc67 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006b54:	f7fe f87a 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8006b58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b5a:	f000 bc62 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b64:	f000 bc5d 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b68:	4b5d      	ldr	r3, [pc, #372]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006b74:	4b5a      	ldr	r3, [pc, #360]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	0e1b      	lsrs	r3, r3, #24
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	e006      	b.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006b80:	4b57      	ldr	r3, [pc, #348]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b86:	041b      	lsls	r3, r3, #16
 8006b88:	0e1b      	lsrs	r3, r3, #24
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	4a55      	ldr	r2, [pc, #340]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b96:	f000 bc44 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b9e:	f000 bc40 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006baa:	430b      	orrs	r3, r1
 8006bac:	d14a      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006bae:	4b4c      	ldr	r3, [pc, #304]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bb8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bc0:	f7fe f85e 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8006bc4:	6378      	str	r0, [r7, #52]	; 0x34
 8006bc6:	f000 bc2c 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd0:	d104      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bd2:	f7fd ff33 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006bd6:	6378      	str	r0, [r7, #52]	; 0x34
 8006bd8:	f000 bc23 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006bdc:	4b40      	ldr	r3, [pc, #256]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be8:	d107      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf0:	d103      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8006bf2:	4b3d      	ldr	r3, [pc, #244]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf6:	f000 bc14 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006bfa:	4b39      	ldr	r3, [pc, #228]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d11b      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c0c:	d117      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c0e:	4b34      	ldr	r3, [pc, #208]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006c1a:	4b31      	ldr	r3, [pc, #196]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	0e1b      	lsrs	r3, r3, #24
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	e006      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006c26:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	0e1b      	lsrs	r3, r3, #24
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	4a2b      	ldr	r2, [pc, #172]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3c:	e3f1      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
 8006c42:	e3ee      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c48:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	d14d      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006c50:	4b23      	ldr	r3, [pc, #140]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c5a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c62:	f7fe f80d 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8006c66:	6378      	str	r0, [r7, #52]	; 0x34
 8006c68:	e3db      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d103      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c72:	f7fd fee3 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006c76:	6378      	str	r0, [r7, #52]	; 0x34
 8006c78:	e3d3      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006c7a:	4b19      	ldr	r3, [pc, #100]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c86:	d106      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d102      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8006c90:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
 8006c94:	e3c5      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006c96:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d11b      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ca8:	d117      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006caa:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	0e1b      	lsrs	r3, r3, #24
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	0e1b      	lsrs	r3, r3, #24
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd8:	e3a3      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	e3a0      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006ce0:	46020c00 	.word	0x46020c00
 8006ce4:	0800de54 	.word	0x0800de54
 8006ce8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	d148      	bne.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006cf8:	4b9d      	ldr	r3, [pc, #628]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	2bc0      	cmp	r3, #192	; 0xc0
 8006d08:	d024      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8006d0e:	d839      	bhi.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d00d      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2b80      	cmp	r3, #128	; 0x80
 8006d1a:	d833      	bhi.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d011      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006d28:	e02c      	b.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006d2a:	f7fd ffd1 	bl	8004cd0 <HAL_RCC_GetPCLK3Freq>
 8006d2e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d30:	e377      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d32:	4b8f      	ldr	r3, [pc, #572]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3e:	d102      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8006d40:	4b8c      	ldr	r3, [pc, #560]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d44:	e36d      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d4a:	e36a      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006d4c:	f7fd fe76 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006d50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d52:	e366      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006d54:	4b86      	ldr	r3, [pc, #536]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006d60:	4b83      	ldr	r3, [pc, #524]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	0f1b      	lsrs	r3, r3, #28
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	e006      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006d6c:	4b80      	ldr	r3, [pc, #512]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d72:	041b      	lsls	r3, r3, #16
 8006d74:	0f1b      	lsrs	r3, r3, #28
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	4a7f      	ldr	r2, [pc, #508]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d82:	e34e      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d88:	e34b      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006d92:	430b      	orrs	r3, r1
 8006d94:	d147      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006d96:	4b76      	ldr	r3, [pc, #472]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006da0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d103      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fd ff6a 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8006dac:	6378      	str	r0, [r7, #52]	; 0x34
 8006dae:	e338      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db6:	d103      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006db8:	f7fd fe40 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8006dbc:	6378      	str	r0, [r7, #52]	; 0x34
 8006dbe:	e330      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006dc0:	4b6b      	ldr	r3, [pc, #428]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd4:	d102      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006dd6:	4b67      	ldr	r3, [pc, #412]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dda:	e322      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006ddc:	4b64      	ldr	r3, [pc, #400]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d11b      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dee:	d117      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006df0:	4b5f      	ldr	r3, [pc, #380]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006dfc:	4b5c      	ldr	r3, [pc, #368]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	0e1b      	lsrs	r3, r3, #24
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	e006      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8006e08:	4b59      	ldr	r3, [pc, #356]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	0e1b      	lsrs	r3, r3, #24
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	4a58      	ldr	r2, [pc, #352]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1e:	e300      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	e2fd      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e2a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	d15b      	bne.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006e32:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d117      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e44:	4b4a      	ldr	r3, [pc, #296]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8006e50:	4b47      	ldr	r3, [pc, #284]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	0e1b      	lsrs	r3, r3, #24
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	e006      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8006e5c:	4b44      	ldr	r3, [pc, #272]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	0e1b      	lsrs	r3, r3, #24
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	4a43      	ldr	r2, [pc, #268]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
 8006e72:	e2d6      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006e74:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e82:	d112      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d10e      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e8c:	4b38      	ldr	r3, [pc, #224]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e9a:	d102      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006e9c:	23fa      	movs	r3, #250	; 0xfa
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ea0:	e2bf      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ea2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ea8:	e2bb      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006eaa:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d106      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebe:	d102      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8006ec0:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec4:	e2ad      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006ec6:	4b2a      	ldr	r3, [pc, #168]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eda:	d103      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee2:	e29e      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee8:	e29b      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eee:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	d162      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006efc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d117      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f08:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006f14:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	0e1b      	lsrs	r3, r3, #24
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	e006      	b.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	0e1b      	lsrs	r3, r3, #24
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
 8006f36:	e274      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f46:	d119      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4e:	d115      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f5e:	d102      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8006f60:	23fa      	movs	r3, #250	; 0xfa
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f64:	e25d      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006f66:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f6a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f6c:	e259      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006f6e:	bf00      	nop
 8006f70:	46020c00 	.word	0x46020c00
 8006f74:	00f42400 	.word	0x00f42400
 8006f78:	0800de54 	.word	0x0800de54
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006f7c:	4b9d      	ldr	r3, [pc, #628]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f88:	d106      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f90:	d102      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8006f92:	4b99      	ldr	r3, [pc, #612]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
 8006f96:	e244      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006f98:	4b96      	ldr	r3, [pc, #600]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fac:	d103      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8006fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb4:	e235      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	e232      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	d147      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006fc8:	4b8a      	ldr	r3, [pc, #552]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006fd2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fda:	f7fd fe51 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8006fde:	6378      	str	r0, [r7, #52]	; 0x34
 8006fe0:	e21f      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006fe2:	4b84      	ldr	r3, [pc, #528]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff0:	d112      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ff8:	d10e      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ffa:	4b7e      	ldr	r3, [pc, #504]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007008:	d102      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800700a:	23fa      	movs	r3, #250	; 0xfa
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800700e:	e208      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007010:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007016:	e204      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007018:	4b76      	ldr	r3, [pc, #472]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007024:	d106      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800702c:	d102      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800702e:	4b72      	ldr	r3, [pc, #456]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
 8007032:	e1f6      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007034:	4b6f      	ldr	r3, [pc, #444]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d107      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007048:	d103      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800704a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
 8007050:	e1e7      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
 8007056:	e1e4      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800705c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007060:	430b      	orrs	r3, r1
 8007062:	d12d      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007064:	4b63      	ldr	r3, [pc, #396]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800706a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800706e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007070:	4b60      	ldr	r3, [pc, #384]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800707c:	d105      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8007084:	4b5c      	ldr	r3, [pc, #368]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
 8007088:	e1cb      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007090:	d107      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fc74 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
 80070a0:	e1bf      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070a8:	d107      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070aa:	f107 0318 	add.w	r3, r7, #24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fdce 	bl	8005c50 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
 80070b8:	e1b3      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
 80070be:	e1b0      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80070c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80070c8:	430b      	orrs	r3, r1
 80070ca:	d14d      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80070cc:	4b49      	ldr	r3, [pc, #292]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80070ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80070d6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070de:	d028      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070e6:	d83c      	bhi.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ee:	d013      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070f6:	d834      	bhi.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007104:	d004      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007106:	e02c      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007108:	f7fd fdce 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
 800710c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800710e:	e188      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007110:	f7fd fc94 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8007114:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007116:	e184      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007118:	4b36      	ldr	r3, [pc, #216]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007124:	d102      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8007126:	4b34      	ldr	r3, [pc, #208]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800712a:	e17a      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007130:	e177      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007132:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800713e:	4b2d      	ldr	r3, [pc, #180]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	0e1b      	lsrs	r3, r3, #24
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	e006      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800714a:	4b2a      	ldr	r3, [pc, #168]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800714c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	0e1b      	lsrs	r3, r3, #24
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	4a28      	ldr	r2, [pc, #160]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800715a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007160:	e15f      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007166:	e15c      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007170:	430b      	orrs	r3, r1
 8007172:	d154      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007174:	4b1f      	ldr	r3, [pc, #124]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800717a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800717e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007186:	d028      	beq.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800718e:	d843      	bhi.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007196:	d013      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800719e:	d83b      	bhi.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ac:	d004      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80071ae:	e033      	b.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80071b0:	f7fd fd66 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 80071b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80071b6:	e134      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80071b8:	f7fd fc40 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80071bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80071be:	e130      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071cc:	d102      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80071ce:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071d2:	e126      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071d8:	e123      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071da:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00c      	beq.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	0e1b      	lsrs	r3, r3, #24
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	e00d      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80071f2:	bf00      	nop
 80071f4:	46020c00 	.word	0x46020c00
 80071f8:	00f42400 	.word	0x00f42400
 80071fc:	0800de54 	.word	0x0800de54
 8007200:	4b8a      	ldr	r3, [pc, #552]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	0e1b      	lsrs	r3, r3, #24
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	4a88      	ldr	r2, [pc, #544]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007216:	e104      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800721c:	e101      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800721e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007222:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007226:	430b      	orrs	r3, r1
 8007228:	d16e      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800722a:	4b80      	ldr	r3, [pc, #512]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800722c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007230:	f003 0318 	and.w	r3, r3, #24
 8007234:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b18      	cmp	r3, #24
 800723a:	d862      	bhi.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800723c:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	080072a9 	.word	0x080072a9
 8007248:	08007303 	.word	0x08007303
 800724c:	08007303 	.word	0x08007303
 8007250:	08007303 	.word	0x08007303
 8007254:	08007303 	.word	0x08007303
 8007258:	08007303 	.word	0x08007303
 800725c:	08007303 	.word	0x08007303
 8007260:	08007303 	.word	0x08007303
 8007264:	080072b1 	.word	0x080072b1
 8007268:	08007303 	.word	0x08007303
 800726c:	08007303 	.word	0x08007303
 8007270:	08007303 	.word	0x08007303
 8007274:	08007303 	.word	0x08007303
 8007278:	08007303 	.word	0x08007303
 800727c:	08007303 	.word	0x08007303
 8007280:	08007303 	.word	0x08007303
 8007284:	080072b9 	.word	0x080072b9
 8007288:	08007303 	.word	0x08007303
 800728c:	08007303 	.word	0x08007303
 8007290:	08007303 	.word	0x08007303
 8007294:	08007303 	.word	0x08007303
 8007298:	08007303 	.word	0x08007303
 800729c:	08007303 	.word	0x08007303
 80072a0:	08007303 	.word	0x08007303
 80072a4:	080072d3 	.word	0x080072d3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80072a8:	f7fd fd12 	bl	8004cd0 <HAL_RCC_GetPCLK3Freq>
 80072ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80072ae:	e0b8      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80072b0:	f7fd fbc4 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80072b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80072b6:	e0b4      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072b8:	4b5c      	ldr	r3, [pc, #368]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c4:	d102      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80072c6:	4b5b      	ldr	r3, [pc, #364]	; (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072ca:	e0aa      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072d0:	e0a7      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072d2:	4b56      	ldr	r3, [pc, #344]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80072de:	4b53      	ldr	r3, [pc, #332]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	0e1b      	lsrs	r3, r3, #24
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	e006      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80072ea:	4b50      	ldr	r3, [pc, #320]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80072ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	0e1b      	lsrs	r3, r3, #24
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	4a4d      	ldr	r2, [pc, #308]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80072fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007300:	e08f      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007306:	e08c      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007310:	430b      	orrs	r3, r1
 8007312:	d14c      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007314:	4b45      	ldr	r3, [pc, #276]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800731a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800731e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007326:	d013      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800732e:	d83b      	bhi.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007336:	d013      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800733e:	d833      	bhi.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	2b00      	cmp	r3, #0
 8007344:	d014      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800734c:	d014      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800734e:	e02b      	b.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007350:	f107 0318 	add.w	r3, r7, #24
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fc7b 	bl	8005c50 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800735e:	e060      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fb0d 	bl	8005984 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800736e:	e058      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007370:	f7fd fb64 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8007374:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007376:	e054      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007378:	4b2c      	ldr	r3, [pc, #176]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007384:	4b29      	ldr	r3, [pc, #164]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	0e1b      	lsrs	r3, r3, #24
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	e006      	b.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007390:	4b26      	ldr	r3, [pc, #152]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	0e1b      	lsrs	r3, r3, #24
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	4a24      	ldr	r2, [pc, #144]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80073a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a6:	e03c      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ac:	e039      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80073ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80073b6:	430b      	orrs	r3, r1
 80073b8:	d131      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80073ba:	4b1c      	ldr	r3, [pc, #112]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80073bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073c4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80073c6:	4b19      	ldr	r3, [pc, #100]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80073c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d106      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80073da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
 80073e0:	e01f      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80073e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f0:	d112      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f8:	d10e      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80073fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007408:	d102      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800740a:	23fa      	movs	r3, #250	; 0xfa
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800740e:	e008      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007410:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007416:	e004      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
 800741c:	e001      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007424:	4618      	mov	r0, r3
 8007426:	3738      	adds	r7, #56	; 0x38
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	46020c00 	.word	0x46020c00
 8007430:	0800de54 	.word	0x0800de54
 8007434:	00f42400 	.word	0x00f42400

08007438 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007440:	4b47      	ldr	r3, [pc, #284]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a46      	ldr	r2, [pc, #280]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800744a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800744c:	f7fb f840 	bl	80024d0 <HAL_GetTick>
 8007450:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007452:	e008      	b.n	8007466 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007454:	f7fb f83c 	bl	80024d0 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e077      	b.n	8007556 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007466:	4b3e      	ldr	r3, [pc, #248]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f0      	bne.n	8007454 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007472:	4b3b      	ldr	r3, [pc, #236]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800747a:	f023 0303 	bic.w	r3, r3, #3
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6811      	ldr	r1, [r2, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6852      	ldr	r2, [r2, #4]
 8007486:	3a01      	subs	r2, #1
 8007488:	0212      	lsls	r2, r2, #8
 800748a:	430a      	orrs	r2, r1
 800748c:	4934      	ldr	r1, [pc, #208]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 800748e:	4313      	orrs	r3, r2
 8007490:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007492:	4b33      	ldr	r3, [pc, #204]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007496:	4b33      	ldr	r3, [pc, #204]	; (8007564 <RCCEx_PLL2_Config+0x12c>)
 8007498:	4013      	ands	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6892      	ldr	r2, [r2, #8]
 800749e:	3a01      	subs	r2, #1
 80074a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	68d2      	ldr	r2, [r2, #12]
 80074a8:	3a01      	subs	r2, #1
 80074aa:	0252      	lsls	r2, r2, #9
 80074ac:	b292      	uxth	r2, r2
 80074ae:	4311      	orrs	r1, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6912      	ldr	r2, [r2, #16]
 80074b4:	3a01      	subs	r2, #1
 80074b6:	0412      	lsls	r2, r2, #16
 80074b8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80074bc:	4311      	orrs	r1, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6952      	ldr	r2, [r2, #20]
 80074c2:	3a01      	subs	r2, #1
 80074c4:	0612      	lsls	r2, r2, #24
 80074c6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80074ca:	430a      	orrs	r2, r1
 80074cc:	4924      	ldr	r1, [pc, #144]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80074d2:	4b23      	ldr	r3, [pc, #140]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	f023 020c 	bic.w	r2, r3, #12
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	4920      	ldr	r1, [pc, #128]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80074e4:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	491c      	ldr	r1, [pc, #112]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80074f2:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 80074f8:	f023 0310 	bic.w	r3, r3, #16
 80074fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074fe:	4b18      	ldr	r3, [pc, #96]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007506:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	69d2      	ldr	r2, [r2, #28]
 800750e:	00d2      	lsls	r2, r2, #3
 8007510:	4913      	ldr	r1, [pc, #76]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007512:	4313      	orrs	r3, r2
 8007514:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007516:	4b12      	ldr	r3, [pc, #72]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	4a11      	ldr	r2, [pc, #68]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 800751c:	f043 0310 	orr.w	r3, r3, #16
 8007520:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a0e      	ldr	r2, [pc, #56]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 8007528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800752c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800752e:	f7fa ffcf 	bl	80024d0 <HAL_GetTick>
 8007532:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007534:	e008      	b.n	8007548 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007536:	f7fa ffcb 	bl	80024d0 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e006      	b.n	8007556 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <RCCEx_PLL2_Config+0x128>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0f0      	beq.n	8007536 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0

}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	46020c00 	.word	0x46020c00
 8007564:	80800000 	.word	0x80800000

08007568 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007570:	4b47      	ldr	r3, [pc, #284]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a46      	ldr	r2, [pc, #280]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800757a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800757c:	f7fa ffa8 	bl	80024d0 <HAL_GetTick>
 8007580:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007582:	e008      	b.n	8007596 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007584:	f7fa ffa4 	bl	80024d0 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e077      	b.n	8007686 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007596:	4b3e      	ldr	r3, [pc, #248]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f0      	bne.n	8007584 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80075a2:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075aa:	f023 0303 	bic.w	r3, r3, #3
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6811      	ldr	r1, [r2, #0]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6852      	ldr	r2, [r2, #4]
 80075b6:	3a01      	subs	r2, #1
 80075b8:	0212      	lsls	r2, r2, #8
 80075ba:	430a      	orrs	r2, r1
 80075bc:	4934      	ldr	r1, [pc, #208]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	630b      	str	r3, [r1, #48]	; 0x30
 80075c2:	4b33      	ldr	r3, [pc, #204]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 80075c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c6:	4b33      	ldr	r3, [pc, #204]	; (8007694 <RCCEx_PLL3_Config+0x12c>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6892      	ldr	r2, [r2, #8]
 80075ce:	3a01      	subs	r2, #1
 80075d0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	68d2      	ldr	r2, [r2, #12]
 80075d8:	3a01      	subs	r2, #1
 80075da:	0252      	lsls	r2, r2, #9
 80075dc:	b292      	uxth	r2, r2
 80075de:	4311      	orrs	r1, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6912      	ldr	r2, [r2, #16]
 80075e4:	3a01      	subs	r2, #1
 80075e6:	0412      	lsls	r2, r2, #16
 80075e8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80075ec:	4311      	orrs	r1, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6952      	ldr	r2, [r2, #20]
 80075f2:	3a01      	subs	r2, #1
 80075f4:	0612      	lsls	r2, r2, #24
 80075f6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80075fa:	430a      	orrs	r2, r1
 80075fc:	4924      	ldr	r1, [pc, #144]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007602:	4b23      	ldr	r3, [pc, #140]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	f023 020c 	bic.w	r2, r3, #12
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	4920      	ldr	r1, [pc, #128]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007610:	4313      	orrs	r3, r2
 8007612:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007614:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	491c      	ldr	r1, [pc, #112]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 800761e:	4313      	orrs	r3, r2
 8007620:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007622:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	4a1a      	ldr	r2, [pc, #104]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007628:	f023 0310 	bic.w	r3, r3, #16
 800762c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800762e:	4b18      	ldr	r3, [pc, #96]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007636:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	69d2      	ldr	r2, [r2, #28]
 800763e:	00d2      	lsls	r2, r2, #3
 8007640:	4913      	ldr	r1, [pc, #76]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007642:	4313      	orrs	r3, r2
 8007644:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007646:	4b12      	ldr	r3, [pc, #72]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	4a11      	ldr	r2, [pc, #68]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 800764c:	f043 0310 	orr.w	r3, r3, #16
 8007650:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007652:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a0e      	ldr	r2, [pc, #56]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 8007658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800765e:	f7fa ff37 	bl	80024d0 <HAL_GetTick>
 8007662:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007664:	e008      	b.n	8007678 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007666:	f7fa ff33 	bl	80024d0 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e006      	b.n	8007686 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <RCCEx_PLL3_Config+0x128>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f0      	beq.n	8007666 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	46020c00 	.word	0x46020c00
 8007694:	80800000 	.word	0x80800000

08007698 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0dd      	b.n	8007866 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a70      	ldr	r2, [pc, #448]	; (8007870 <HAL_SPI_Init+0x1d8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_SPI_Init+0x26>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6e      	ldr	r2, [pc, #440]	; (8007874 <HAL_SPI_Init+0x1dc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	e000      	b.n	80076c0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80076be:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a69      	ldr	r2, [pc, #420]	; (8007870 <HAL_SPI_Init+0x1d8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_SPI_Init+0x42>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a67      	ldr	r2, [pc, #412]	; (8007874 <HAL_SPI_Init+0x1dc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d105      	bne.n	80076e6 <HAL_SPI_Init+0x4e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b0f      	cmp	r3, #15
 80076e0:	d901      	bls.n	80076e6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e0bf      	b.n	8007866 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8ce 	bl	8007888 <SPI_GetPacketSize>
 80076ec:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a5f      	ldr	r2, [pc, #380]	; (8007870 <HAL_SPI_Init+0x1d8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_SPI_Init+0x6a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a5d      	ldr	r2, [pc, #372]	; (8007874 <HAL_SPI_Init+0x1dc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d102      	bne.n	8007708 <HAL_SPI_Init+0x70>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b08      	cmp	r3, #8
 8007706:	d816      	bhi.n	8007736 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800770c:	4a5a      	ldr	r2, [pc, #360]	; (8007878 <HAL_SPI_Init+0x1e0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00e      	beq.n	8007730 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a59      	ldr	r2, [pc, #356]	; (800787c <HAL_SPI_Init+0x1e4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <HAL_SPI_Init+0x98>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a57      	ldr	r2, [pc, #348]	; (8007880 <HAL_SPI_Init+0x1e8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <HAL_SPI_Init+0x98>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a56      	ldr	r2, [pc, #344]	; (8007884 <HAL_SPI_Init+0x1ec>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d104      	bne.n	800773a <HAL_SPI_Init+0xa2>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b10      	cmp	r3, #16
 8007734:	d901      	bls.n	800773a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e095      	b.n	8007866 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7f9 f970 	bl	8000a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007776:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007780:	d119      	bne.n	80077b6 <HAL_SPI_Init+0x11e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800778a:	d103      	bne.n	8007794 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007790:	2b00      	cmp	r3, #0
 8007792:	d008      	beq.n	80077a6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10c      	bne.n	80077b6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077a4:	d107      	bne.n	80077b6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69da      	ldr	r2, [r3, #28]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	431a      	orrs	r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	ea42 0103 	orr.w	r1, r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007822:	ea42 0103 	orr.w	r1, r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	46002000 	.word	0x46002000
 8007874:	56002000 	.word	0x56002000
 8007878:	40013000 	.word	0x40013000
 800787c:	50013000 	.word	0x50013000
 8007880:	40003800 	.word	0x40003800
 8007884:	50003800 	.word	0x50003800

08007888 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	3301      	adds	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	3307      	adds	r3, #7
 80078a6:	08db      	lsrs	r3, r3, #3
 80078a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d12e      	bne.n	8007932 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80078de:	2302      	movs	r3, #2
 80078e0:	e028      	b.n	8007934 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800790e:	ea42 0103 	orr.w	r1, r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	e000      	b.n	8007934 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
  }
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e042      	b.n	80079d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7f9 fa49 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2224      	movs	r2, #36	; 0x24
 800796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8d2 	bl	8007b2c <UART_SetConfig>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e022      	b.n	80079d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa68 	bl	8007e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 faef 	bl	8007fb4 <UART_CheckIdleState>
 80079d6:	4603      	mov	r3, r0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	; 0x28
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	f040 8092 	bne.w	8007b20 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_UART_Transmit+0x28>
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e08a      	b.n	8007b22 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_UART_Transmit+0x3a>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e083      	b.n	8007b22 <HAL_UART_Transmit+0x142>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	2b80      	cmp	r3, #128	; 0x80
 8007a2e:	d107      	bne.n	8007a40 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a3e:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2221      	movs	r2, #33	; 0x21
 8007a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a50:	f7fa fd3e 	bl	80024d0 <HAL_GetTick>
 8007a54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	88fa      	ldrh	r2, [r7, #6]
 8007a62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6e:	d108      	bne.n	8007a82 <HAL_UART_Transmit+0xa2>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	61bb      	str	r3, [r7, #24]
 8007a80:	e003      	b.n	8007a8a <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007a92:	e02c      	b.n	8007aee <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2180      	movs	r1, #128	; 0x80
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fad3 	bl	800804a <UART_WaitOnFlagUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e039      	b.n	8007b22 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ac2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	61bb      	str	r3, [r7, #24]
 8007aca:	e007      	b.n	8007adc <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1cc      	bne.n	8007a94 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2140      	movs	r1, #64	; 0x40
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 faa0 	bl	800804a <UART_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e006      	b.n	8007b22 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e000      	b.n	8007b22 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007b20:	2302      	movs	r3, #2
  }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3720      	adds	r7, #32
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b30:	b094      	sub	sp, #80	; 0x50
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b7e      	ldr	r3, [pc, #504]	; (8007d3c <UART_SetConfig+0x210>)
 8007b42:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4977      	ldr	r1, [pc, #476]	; (8007d40 <UART_SetConfig+0x214>)
 8007b64:	4019      	ands	r1, r3
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	68d9      	ldr	r1, [r3, #12]
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	ea40 0301 	orr.w	r3, r0, r1
 8007b86:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b6a      	ldr	r3, [pc, #424]	; (8007d3c <UART_SetConfig+0x210>)
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d009      	beq.n	8007bac <UART_SetConfig+0x80>
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	4b69      	ldr	r3, [pc, #420]	; (8007d44 <UART_SetConfig+0x218>)
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d004      	beq.n	8007bac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	6a1a      	ldr	r2, [r3, #32]
 8007ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007bb6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	f023 000f 	bic.w	r0, r3, #15
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	ea40 0301 	orr.w	r3, r0, r1
 8007bda:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	4b59      	ldr	r3, [pc, #356]	; (8007d48 <UART_SetConfig+0x21c>)
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d102      	bne.n	8007bec <UART_SetConfig+0xc0>
 8007be6:	2301      	movs	r3, #1
 8007be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bea:	e029      	b.n	8007c40 <UART_SetConfig+0x114>
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4b56      	ldr	r3, [pc, #344]	; (8007d4c <UART_SetConfig+0x220>)
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d102      	bne.n	8007bfc <UART_SetConfig+0xd0>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfa:	e021      	b.n	8007c40 <UART_SetConfig+0x114>
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4b53      	ldr	r3, [pc, #332]	; (8007d50 <UART_SetConfig+0x224>)
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d102      	bne.n	8007c0c <UART_SetConfig+0xe0>
 8007c06:	2304      	movs	r3, #4
 8007c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c0a:	e019      	b.n	8007c40 <UART_SetConfig+0x114>
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	4b50      	ldr	r3, [pc, #320]	; (8007d54 <UART_SetConfig+0x228>)
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d102      	bne.n	8007c1c <UART_SetConfig+0xf0>
 8007c16:	2308      	movs	r3, #8
 8007c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c1a:	e011      	b.n	8007c40 <UART_SetConfig+0x114>
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b4d      	ldr	r3, [pc, #308]	; (8007d58 <UART_SetConfig+0x22c>)
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d102      	bne.n	8007c2c <UART_SetConfig+0x100>
 8007c26:	2310      	movs	r3, #16
 8007c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c2a:	e009      	b.n	8007c40 <UART_SetConfig+0x114>
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	4b42      	ldr	r3, [pc, #264]	; (8007d3c <UART_SetConfig+0x210>)
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d102      	bne.n	8007c3c <UART_SetConfig+0x110>
 8007c36:	2320      	movs	r3, #32
 8007c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c3a:	e001      	b.n	8007c40 <UART_SetConfig+0x114>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	4b3d      	ldr	r3, [pc, #244]	; (8007d3c <UART_SetConfig+0x210>)
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d005      	beq.n	8007c56 <UART_SetConfig+0x12a>
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b3d      	ldr	r3, [pc, #244]	; (8007d44 <UART_SetConfig+0x218>)
 8007c50:	429a      	cmp	r2, r3
 8007c52:	f040 8085 	bne.w	8007d60 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c58:	2200      	movs	r2, #0
 8007c5a:	623b      	str	r3, [r7, #32]
 8007c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8007c5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c62:	f7fe fac1 	bl	80061e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c66:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 80e8 	beq.w	8007e40 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	4a39      	ldr	r2, [pc, #228]	; (8007d5c <UART_SetConfig+0x230>)
 8007c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	4413      	add	r3, r2
 8007c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d305      	bcc.n	8007ca0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d903      	bls.n	8007ca8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ca6:	e048      	b.n	8007d3a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007caa:	2200      	movs	r2, #0
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	61fa      	str	r2, [r7, #28]
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	4a29      	ldr	r2, [pc, #164]	; (8007d5c <UART_SetConfig+0x230>)
 8007cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	617a      	str	r2, [r7, #20]
 8007cc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cca:	f7f8 fad3 	bl	8000274 <__aeabi_uldivmod>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f04f 0200 	mov.w	r2, #0
 8007cda:	f04f 0300 	mov.w	r3, #0
 8007cde:	020b      	lsls	r3, r1, #8
 8007ce0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ce4:	0202      	lsls	r2, r0, #8
 8007ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce8:	6849      	ldr	r1, [r1, #4]
 8007cea:	0849      	lsrs	r1, r1, #1
 8007cec:	2000      	movs	r0, #0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	eb12 0804 	adds.w	r8, r2, r4
 8007cf6:	eb43 0905 	adc.w	r9, r3, r5
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	60bb      	str	r3, [r7, #8]
 8007d02:	60fa      	str	r2, [r7, #12]
 8007d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d08:	4640      	mov	r0, r8
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	f7f8 fab2 	bl	8000274 <__aeabi_uldivmod>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4613      	mov	r3, r2
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d1e:	d308      	bcc.n	8007d32 <UART_SetConfig+0x206>
 8007d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d26:	d204      	bcs.n	8007d32 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d2e:	60da      	str	r2, [r3, #12]
 8007d30:	e003      	b.n	8007d3a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007d38:	e082      	b.n	8007e40 <UART_SetConfig+0x314>
 8007d3a:	e081      	b.n	8007e40 <UART_SetConfig+0x314>
 8007d3c:	46002400 	.word	0x46002400
 8007d40:	cfff69f3 	.word	0xcfff69f3
 8007d44:	56002400 	.word	0x56002400
 8007d48:	40013800 	.word	0x40013800
 8007d4c:	40004400 	.word	0x40004400
 8007d50:	40004800 	.word	0x40004800
 8007d54:	40004c00 	.word	0x40004c00
 8007d58:	40005000 	.word	0x40005000
 8007d5c:	0800df14 	.word	0x0800df14
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d68:	d13c      	bne.n	8007de4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d76:	f7fe fa37 	bl	80061e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d7a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d05e      	beq.n	8007e40 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	4a39      	ldr	r2, [pc, #228]	; (8007e6c <UART_SetConfig+0x340>)
 8007d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d94:	005a      	lsls	r2, r3, #1
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	441a      	add	r2, r3
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007daa:	2b0f      	cmp	r3, #15
 8007dac:	d916      	bls.n	8007ddc <UART_SetConfig+0x2b0>
 8007dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db4:	d212      	bcs.n	8007ddc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f023 030f 	bic.w	r3, r3, #15
 8007dbe:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	e031      	b.n	8007e40 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007de2:	e02d      	b.n	8007e40 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de6:	2200      	movs	r2, #0
 8007de8:	469a      	mov	sl, r3
 8007dea:	4693      	mov	fp, r2
 8007dec:	4650      	mov	r0, sl
 8007dee:	4659      	mov	r1, fp
 8007df0:	f7fe f9fa 	bl	80061e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007df4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d021      	beq.n	8007e40 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	4a1a      	ldr	r2, [pc, #104]	; (8007e6c <UART_SetConfig+0x340>)
 8007e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	441a      	add	r2, r3
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d909      	bls.n	8007e3a <UART_SetConfig+0x30e>
 8007e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d205      	bcs.n	8007e3a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60da      	str	r2, [r3, #12]
 8007e38:	e002      	b.n	8007e40 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	2201      	movs	r2, #1
 8007e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	2200      	movs	r2, #0
 8007e54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	2200      	movs	r2, #0
 8007e5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3750      	adds	r7, #80	; 0x50
 8007e64:	46bd      	mov	sp, r7
 8007e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e6a:	bf00      	nop
 8007e6c:	0800df14 	.word	0x0800df14

08007e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	f003 0308 	and.w	r3, r3, #8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01a      	beq.n	8007f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f6e:	d10a      	bne.n	8007f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	605a      	str	r2, [r3, #4]
  }
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fc4:	f7fa fa84 	bl	80024d0 <HAL_GetTick>
 8007fc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d10e      	bne.n	8007ff6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f82f 	bl	800804a <UART_WaitOnFlagUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e025      	b.n	8008042 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b04      	cmp	r3, #4
 8008002:	d10e      	bne.n	8008022 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f819 	bl	800804a <UART_WaitOnFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e00f      	b.n	8008042 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b09c      	sub	sp, #112	; 0x70
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	603b      	str	r3, [r7, #0]
 8008056:	4613      	mov	r3, r2
 8008058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805a:	e0a9      	b.n	80081b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800805c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	f000 80a5 	beq.w	80081b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008066:	f7fa fa33 	bl	80024d0 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008072:	429a      	cmp	r2, r3
 8008074:	d302      	bcc.n	800807c <UART_WaitOnFlagUntilTimeout+0x32>
 8008076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008078:	2b00      	cmp	r3, #0
 800807a:	d140      	bne.n	80080fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800808a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800808c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008090:	667b      	str	r3, [r7, #100]	; 0x64
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800809a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800809c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e6      	bne.n	800807c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	f023 0301 	bic.w	r3, r3, #1
 80080c4:	663b      	str	r3, [r7, #96]	; 0x60
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80080d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e5      	bne.n	80080ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e069      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d051      	beq.n	80081b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800811a:	d149      	bne.n	80081b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008124:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800813a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
 8008146:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800814a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e6      	bne.n	8008126 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f023 0301 	bic.w	r3, r3, #1
 800816e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008178:	623a      	str	r2, [r7, #32]
 800817a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	61bb      	str	r3, [r7, #24]
   return(result);
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2220      	movs	r2, #32
 8008190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2220      	movs	r2, #32
 8008198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2220      	movs	r2, #32
 80081a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e010      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69da      	ldr	r2, [r3, #28]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	4013      	ands	r3, r2
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	429a      	cmp	r2, r3
 80081be:	bf0c      	ite	eq
 80081c0:	2301      	moveq	r3, #1
 80081c2:	2300      	movne	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f43f af46 	beq.w	800805c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3770      	adds	r7, #112	; 0x70
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e027      	b.n	8008240 <HAL_UARTEx_DisableFifoMode+0x66>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2224      	movs	r2, #36	; 0x24
 80081fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800821e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008260:	2302      	movs	r3, #2
 8008262:	e02d      	b.n	80082c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2224      	movs	r2, #36	; 0x24
 8008270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f84f 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082dc:	2302      	movs	r3, #2
 80082de:	e02d      	b.n	800833c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2224      	movs	r2, #36	; 0x24
 80082ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0201 	bic.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f811 	bl	8008344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2220      	movs	r2, #32
 800832e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008364:	e031      	b.n	80083ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008366:	2308      	movs	r3, #8
 8008368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800836a:	2308      	movs	r3, #8
 800836c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	0e5b      	lsrs	r3, r3, #25
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	0f5b      	lsrs	r3, r3, #29
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	7b3a      	ldrb	r2, [r7, #12]
 8008392:	4911      	ldr	r1, [pc, #68]	; (80083d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008394:	5c8a      	ldrb	r2, [r1, r2]
 8008396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800839a:	7b3a      	ldrb	r2, [r7, #12]
 800839c:	490f      	ldr	r1, [pc, #60]	; (80083dc <UARTEx_SetNbDataToProcess+0x98>)
 800839e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	7b7a      	ldrb	r2, [r7, #13]
 80083b0:	4909      	ldr	r1, [pc, #36]	; (80083d8 <UARTEx_SetNbDataToProcess+0x94>)
 80083b2:	5c8a      	ldrb	r2, [r1, r2]
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083b8:	7b7a      	ldrb	r2, [r7, #13]
 80083ba:	4908      	ldr	r1, [pc, #32]	; (80083dc <UARTEx_SetNbDataToProcess+0x98>)
 80083bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083be:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	0800df2c 	.word	0x0800df2c
 80083dc:	0800df34 	.word	0x0800df34

080083e0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d144      	bne.n	800847a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80083f0:	f107 0208 	add.w	r2, r7, #8
 80083f4:	2301      	movs	r3, #1
 80083f6:	2162      	movs	r1, #98	; 0x62
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa11 	bl	8008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8008404:	f04f 33ff 	mov.w	r3, #4294967295
 8008408:	e06c      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800840a:	f107 020c 	add.w	r2, r7, #12
 800840e:	2301      	movs	r3, #1
 8008410:	2160      	movs	r1, #96	; 0x60
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa04 	bl	8008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	e05f      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8008424:	7a3b      	ldrb	r3, [r7, #8]
 8008426:	f043 0310 	orr.w	r3, r3, #16
 800842a:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 800842c:	7a3b      	ldrb	r3, [r7, #8]
 800842e:	f36f 0341 	bfc	r3, #1, #1
 8008432:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8008434:	7b3b      	ldrb	r3, [r7, #12]
 8008436:	2202      	movs	r2, #2
 8008438:	f362 0301 	bfi	r3, r2, #0, #2
 800843c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800843e:	7b3b      	ldrb	r3, [r7, #12]
 8008440:	f043 030c 	orr.w	r3, r3, #12
 8008444:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8008446:	f107 0208 	add.w	r2, r7, #8
 800844a:	2301      	movs	r3, #1
 800844c:	2162      	movs	r1, #98	; 0x62
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb25 	bl	8008a9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800845a:	f04f 33ff 	mov.w	r3, #4294967295
 800845e:	e041      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8008460:	f107 020c 	add.w	r2, r7, #12
 8008464:	2301      	movs	r3, #1
 8008466:	2160      	movs	r1, #96	; 0x60
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fb18 	bl	8008a9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d032      	beq.n	80084da <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8008474:	f04f 33ff 	mov.w	r3, #4294967295
 8008478:	e034      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	331c      	adds	r3, #28
 800847e:	2101      	movs	r1, #1
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fcab 	bl	8008ddc <lis2mdl_block_data_update_set>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	e028      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	331c      	adds	r3, #28
 8008496:	2102      	movs	r1, #2
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fc53 	bl	8008d44 <lis2mdl_operating_mode_set>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80084a4:	f04f 33ff 	mov.w	r3, #4294967295
 80084a8:	e01c      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	331c      	adds	r3, #28
 80084ae:	2103      	movs	r1, #3
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fc6d 	bl	8008d90 <lis2mdl_data_rate_set>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80084bc:	f04f 33ff 	mov.w	r3, #4294967295
 80084c0:	e010      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	331c      	adds	r3, #28
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fd09 	bl	8008ee0 <lis2mdl_self_test_set>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295
 80084d8:	e004      	b.n	80084e4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d10b      	bne.n	8008516 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80084fe:	2301      	movs	r3, #1
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	214f      	movs	r1, #79	; 0x4f
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f98b 	bl	8008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00e      	beq.n	800852e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	e00c      	b.n	8008530 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	331c      	adds	r3, #28
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fcce 	bl	8008ebe <lis2mdl_device_id_get>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8008528:	f04f 33ff 	mov.w	r3, #4294967295
 800852c:	e000      	b.n	8008530 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	e032      	b.n	80085b4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d11d      	bne.n	8008592 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8008556:	f107 020c 	add.w	r2, r7, #12
 800855a:	2301      	movs	r3, #1
 800855c:	2160      	movs	r1, #96	; 0x60
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f95e 	bl	8008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295
 800856e:	e021      	b.n	80085b4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8008570:	7b3b      	ldrb	r3, [r7, #12]
 8008572:	f36f 0301 	bfc	r3, #0, #2
 8008576:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8008578:	f107 020c 	add.w	r2, r7, #12
 800857c:	2301      	movs	r3, #1
 800857e:	2160      	movs	r1, #96	; 0x60
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fa8c 	bl	8008a9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800858c:	f04f 33ff 	mov.w	r3, #4294967295
 8008590:	e010      	b.n	80085b4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	331c      	adds	r3, #28
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f000 fbd3 	bl	8008d44 <lis2mdl_operating_mode_set>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80085a4:	f04f 33ff 	mov.w	r3, #4294967295
 80085a8:	e004      	b.n	80085b4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e033      	b.n	800863a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d11e      	bne.n	8008618 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80085da:	f107 020c 	add.w	r2, r7, #12
 80085de:	2301      	movs	r3, #1
 80085e0:	2160      	movs	r1, #96	; 0x60
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f91c 	bl	8008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	e022      	b.n	800863a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80085f4:	7b3b      	ldrb	r3, [r7, #12]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f362 0301 	bfi	r3, r2, #0, #2
 80085fc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80085fe:	f107 020c 	add.w	r2, r7, #12
 8008602:	2301      	movs	r3, #1
 8008604:	2160      	movs	r1, #96	; 0x60
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa49 	bl	8008a9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00e      	beq.n	8008630 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8008612:	f04f 33ff 	mov.w	r3, #4294967295
 8008616:	e010      	b.n	800863a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	331c      	adds	r3, #28
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fb90 	bl	8008d44 <lis2mdl_operating_mode_set>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800862a:	f04f 33ff 	mov.w	r3, #4294967295
 800862e:	e004      	b.n	800863a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008652:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b088      	sub	sp, #32
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d137      	bne.n	80086e4 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8008674:	f107 0218 	add.w	r2, r7, #24
 8008678:	2306      	movs	r3, #6
 800867a:	2168      	movs	r1, #104	; 0x68
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f8cf 	bl	8008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8008688:	f04f 33ff 	mov.w	r3, #4294967295
 800868c:	e06f      	b.n	800876e <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800868e:	7e7b      	ldrb	r3, [r7, #25]
 8008690:	b21b      	sxth	r3, r3
 8008692:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8008694:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008698:	b29b      	uxth	r3, r3
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	b29a      	uxth	r2, r3
 800869e:	7e3b      	ldrb	r3, [r7, #24]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	b21b      	sxth	r3, r3
 80086a8:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80086aa:	7efb      	ldrb	r3, [r7, #27]
 80086ac:	b21b      	sxth	r3, r3
 80086ae:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80086b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	7ebb      	ldrb	r3, [r7, #26]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	4413      	add	r3, r2
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	b21b      	sxth	r3, r3
 80086c4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80086c6:	7f7b      	ldrb	r3, [r7, #29]
 80086c8:	b21b      	sxth	r3, r3
 80086ca:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80086cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	7f3b      	ldrb	r3, [r7, #28]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4413      	add	r3, r2
 80086dc:	b29b      	uxth	r3, r3
 80086de:	b21b      	sxth	r3, r3
 80086e0:	82bb      	strh	r3, [r7, #20]
 80086e2:	e00d      	b.n	8008700 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	331c      	adds	r3, #28
 80086e8:	f107 0210 	add.w	r2, r7, #16
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fb9a 	bl	8008e28 <lis2mdl_magnetic_raw_get>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80086fa:	f04f 33ff 	mov.w	r3, #4294967295
 80086fe:	e036      	b.n	800876e <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff ff9b 	bl	8008642 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800870c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008718:	edd7 7a03 	vldr	s15, [r7, #12]
 800871c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008724:	ee17 2a90 	vmov	r2, s15
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800872c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008738:	edd7 7a03 	vldr	s15, [r7, #12]
 800873c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008744:	ee17 2a90 	vmov	r2, s15
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800874c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008750:	ee07 3a90 	vmov	s15, r3
 8008754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008758:	edd7 7a03 	vldr	s15, [r7, #12]
 800875c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008764:	ee17 2a90 	vmov	r2, s15
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3720      	adds	r7, #32
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <LIS2MDL_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Read_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	460b      	mov	r3, r1
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	72fb      	strb	r3, [r7, #11]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	2b03      	cmp	r3, #3
 800878a:	d10b      	bne.n	80087a4 <LIS2MDL_Read_Reg+0x2e>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, Reg, Data, 1) != LIS2MDL_OK)
 800878c:	7af9      	ldrb	r1, [r7, #11]
 800878e:	2301      	movs	r3, #1
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f844 	bl	8008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d010      	beq.n	80087c0 <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 800879e:	f04f 33ff 	mov.w	r3, #4294967295
 80087a2:	e00e      	b.n	80087c2 <LIS2MDL_Read_Reg+0x4c>
    }
  }
  else
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), Reg, Data, 1) != LIS2MDL_OK)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f103 001c 	add.w	r0, r3, #28
 80087aa:	7af9      	ldrb	r1, [r7, #11]
 80087ac:	2301      	movs	r3, #1
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	f000 fa98 	bl	8008ce4 <lis2mdl_read_reg>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 80087ba:	f04f 33ff 	mov.w	r3, #4294967295
 80087be:	e000      	b.n	80087c2 <LIS2MDL_Read_Reg+0x4c>
    }
  }

  return LIS2MDL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
 80087d6:	4613      	mov	r3, r2
 80087d8:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d10b      	bne.n	80087fa <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80087e2:	1cba      	adds	r2, r7, #2
 80087e4:	78f9      	ldrb	r1, [r7, #3]
 80087e6:	2301      	movs	r3, #1
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f958 	bl	8008a9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d010      	beq.n	8008816 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
 80087f8:	e00e      	b.n	8008818 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f103 001c 	add.w	r0, r3, #28
 8008800:	1cba      	adds	r2, r7, #2
 8008802:	78f9      	ldrb	r1, [r7, #3]
 8008804:	2301      	movs	r3, #1
 8008806:	f000 fa85 	bl	8008d14 <lis2mdl_write_reg>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8008810:	f04f 33ff 	mov.w	r3, #4294967295
 8008814:	e000      	b.n	8008818 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08c      	sub	sp, #48	; 0x30
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	461a      	mov	r2, r3
 800882c:	460b      	mov	r3, r1
 800882e:	72fb      	strb	r3, [r7, #11]
 8008830:	4613      	mov	r3, r2
 8008832:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800883a:	2340      	movs	r3, #64	; 0x40
 800883c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8008840:	2300      	movs	r3, #0
 8008842:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8008846:	233d      	movs	r3, #61	; 0x3d
 8008848:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800884a:	2315      	movs	r3, #21
 800884c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8008850:	2316      	movs	r3, #22
 8008852:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8008856:	2317      	movs	r3, #23
 8008858:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 800885c:	2314      	movs	r3, #20
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8008862:	2344      	movs	r3, #68	; 0x44
 8008864:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8008866:	2302      	movs	r3, #2
 8008868:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800886c:	2339      	movs	r3, #57	; 0x39
 800886e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8008878:	2329      	movs	r3, #41	; 0x29
 800887a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800887e:	231e      	movs	r3, #30
 8008880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 800888a:	893b      	ldrh	r3, [r7, #8]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8008890:	2310      	movs	r3, #16
 8008892:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8008896:	2300      	movs	r3, #0
 8008898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800889c:	2340      	movs	r3, #64	; 0x40
 800889e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f103 001c 	add.w	r0, r3, #28
 80088a8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80088ac:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80088b0:	2301      	movs	r3, #1
 80088b2:	f000 fa2f 	bl	8008d14 <lis2mdl_write_reg>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80088bc:	f04f 33ff 	mov.w	r3, #4294967295
 80088c0:	e0e9      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f103 001c 	add.w	r0, r3, #28
 80088c8:	f107 021f 	add.w	r2, r7, #31
 80088cc:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80088d0:	2301      	movs	r3, #1
 80088d2:	f000 fa1f 	bl	8008d14 <lis2mdl_write_reg>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80088dc:	f04f 33ff 	mov.w	r3, #4294967295
 80088e0:	e0d9      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f103 001c 	add.w	r0, r3, #28
 80088e8:	f107 020b 	add.w	r2, r7, #11
 80088ec:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80088f0:	2301      	movs	r3, #1
 80088f2:	f000 fa0f 	bl	8008d14 <lis2mdl_write_reg>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80088fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008900:	e0c9      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f103 001c 	add.w	r0, r3, #28
 8008908:	f107 021d 	add.w	r2, r7, #29
 800890c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8008910:	2301      	movs	r3, #1
 8008912:	f000 f9ff 	bl	8008d14 <lis2mdl_write_reg>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	e0b9      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f103 001c 	add.w	r0, r3, #28
 8008928:	f107 021e 	add.w	r2, r7, #30
 800892c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8008930:	2301      	movs	r3, #1
 8008932:	f000 f9ef 	bl	8008d14 <lis2mdl_write_reg>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800893c:	f04f 33ff 	mov.w	r3, #4294967295
 8008940:	e0a9      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f103 001c 	add.w	r0, r3, #28
 8008948:	f107 0220 	add.w	r2, r7, #32
 800894c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8008950:	2301      	movs	r3, #1
 8008952:	f000 f9df 	bl	8008d14 <lis2mdl_write_reg>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800895c:	f04f 33ff 	mov.w	r3, #4294967295
 8008960:	e099      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f103 001c 	add.w	r0, r3, #28
 8008968:	f107 021c 	add.w	r2, r7, #28
 800896c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8008970:	2301      	movs	r3, #1
 8008972:	f000 f9b7 	bl	8008ce4 <lis2mdl_read_reg>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800897c:	f04f 33ff 	mov.w	r3, #4294967295
 8008980:	e089      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8008982:	7f3b      	ldrb	r3, [r7, #28]
 8008984:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008988:	429a      	cmp	r2, r3
 800898a:	d102      	bne.n	8008992 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800898c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008990:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f103 001c 	add.w	r0, r3, #28
 8008998:	f107 021c 	add.w	r2, r7, #28
 800899c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80089a0:	2301      	movs	r3, #1
 80089a2:	f000 f9b7 	bl	8008d14 <lis2mdl_write_reg>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80089ac:	f04f 33ff 	mov.w	r3, #4294967295
 80089b0:	e071      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f103 001c 	add.w	r0, r3, #28
 80089b8:	f107 0214 	add.w	r2, r7, #20
 80089bc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80089c0:	2306      	movs	r3, #6
 80089c2:	f000 f98f 	bl	8008ce4 <lis2mdl_read_reg>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80089cc:	f04f 33ff 	mov.w	r3, #4294967295
 80089d0:	e061      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f103 001c 	add.w	r0, r3, #28
 80089d8:	f107 021b 	add.w	r2, r7, #27
 80089dc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80089e0:	2301      	movs	r3, #1
 80089e2:	f000 f97f 	bl	8008ce4 <lis2mdl_read_reg>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80089ec:	f04f 33ff 	mov.w	r3, #4294967295
 80089f0:	e051      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80089f2:	7efa      	ldrb	r2, [r7, #27]
 80089f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80089f8:	4013      	ands	r3, r2
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d1e6      	bne.n	80089d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f103 001c 	add.w	r0, r3, #28
 8008a0a:	f107 021b 	add.w	r2, r7, #27
 8008a0e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8008a12:	2301      	movs	r3, #1
 8008a14:	f000 f966 	bl	8008ce4 <lis2mdl_read_reg>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8008a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a22:	e038      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8008a24:	7efa      	ldrb	r2, [r7, #27]
 8008a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d1e6      	bne.n	8008a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f103 001c 	add.w	r0, r3, #28
 8008a3c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8008a40:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8008a44:	2301      	movs	r3, #1
 8008a46:	f000 f965 	bl	8008d14 <lis2mdl_write_reg>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8008a50:	f04f 33ff 	mov.w	r3, #4294967295
 8008a54:	e01f      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f103 001c 	add.w	r0, r3, #28
 8008a5c:	893b      	ldrh	r3, [r7, #8]
 8008a5e:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	f000 f93e 	bl	8008ce4 <lis2mdl_read_reg>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a72:	e010      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f103 001c 	add.w	r0, r3, #28
 8008a7a:	f107 0220 	add.w	r2, r7, #32
 8008a7e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8008a82:	2301      	movs	r3, #1
 8008a84:	f000 f946 	bl	8008d14 <lis2mdl_write_reg>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8008a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a92:	e000      	b.n	8008a96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3730      	adds	r7, #48	; 0x30
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b08c      	sub	sp, #48	; 0x30
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	460b      	mov	r3, r1
 8008aac:	72fb      	strb	r3, [r7, #11]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t shub_reg_access_en = 0x40U;
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	777b      	strb	r3, [r7, #29]
  uint8_t shub_reg_access_dis = 0x00U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	773b      	strb	r3, [r7, #28]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8008ac0:	233c      	movs	r3, #60	; 0x3c
 8008ac2:	76fb      	strb	r3, [r7, #27]
  uint8_t slv0_add = 0x15U;
 8008ac4:	2315      	movs	r3, #21
 8008ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t slv0_subadd = 0x16U;
 8008aca:	2316      	movs	r3, #22
 8008acc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t slave0_config = 0x17U;
 8008ad0:	2317      	movs	r3, #23
 8008ad2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t shub_odr_104 = 0x00U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	76bb      	strb	r3, [r7, #26]
  uint8_t master_config = 0x14U;
 8008ada:	2314      	movs	r3, #20
 8008adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t write_once_i2c_en = 0x44U;
 8008ae0:	2344      	movs	r3, #68	; 0x44
 8008ae2:	767b      	strb	r3, [r7, #25]
  uint8_t status_master_mainpage = 0x39U;
 8008ae4:	2339      	movs	r3, #57	; 0x39
 8008ae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t wr_once_done = 0x80U;
 8008aea:	2380      	movs	r3, #128	; 0x80
 8008aec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8008af0:	2329      	movs	r3, #41	; 0x29
 8008af2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8008af6:	231e      	movs	r3, #30
 8008af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t xlda = 0x01U;
 8008afc:	2301      	movs	r3, #1
 8008afe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8008b02:	2310      	movs	r3, #16
 8008b04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8008b0e:	2340      	movs	r3, #64	; 0x40
 8008b10:	77fb      	strb	r3, [r7, #31]
  //uint8_t datawrite_slv0 = 0x0EU;
  uint8_t datawrite_slv0 = 0x21;
 8008b12:	2321      	movs	r3, #33	; 0x21
 8008b14:	77bb      	strb	r3, [r7, #30]
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f103 001c 	add.w	r0, r3, #28
 8008b1c:	f107 021d 	add.w	r2, r7, #29
 8008b20:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8008b24:	2301      	movs	r3, #1
 8008b26:	f000 f8f5 	bl	8008d14 <lis2mdl_write_reg>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x98>
  {
    return LIS2MDL_ERROR;
 8008b30:	f04f 33ff 	mov.w	r3, #4294967295
 8008b34:	e0d2      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f103 001c 	add.w	r0, r3, #28
 8008b3c:	f107 021b 	add.w	r2, r7, #27
 8008b40:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8008b44:	2301      	movs	r3, #1
 8008b46:	f000 f8e5 	bl	8008d14 <lis2mdl_write_reg>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xb8>
  {
    return LIS2MDL_ERROR;
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	e0c2      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f103 001c 	add.w	r0, r3, #28
 8008b5c:	f107 020b 	add.w	r2, r7, #11
 8008b60:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8008b64:	2301      	movs	r3, #1
 8008b66:	f000 f8d5 	bl	8008d14 <lis2mdl_write_reg>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xd8>
  {
    return LIS2MDL_ERROR;
 8008b70:	f04f 33ff 	mov.w	r3, #4294967295
 8008b74:	e0b2      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f103 001c 	add.w	r0, r3, #28
 8008b7c:	f107 021a 	add.w	r2, r7, #26
 8008b80:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8008b84:	2301      	movs	r3, #1
 8008b86:	f000 f8c5 	bl	8008d14 <lis2mdl_write_reg>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xf8>
  {
    return LIS2MDL_ERROR;
 8008b90:	f04f 33ff 	mov.w	r3, #4294967295
 8008b94:	e0a2      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f103 001c 	add.w	r0, r3, #28
 8008b9c:	7fb9      	ldrb	r1, [r7, #30]
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	f000 f8b7 	bl	8008d14 <lis2mdl_write_reg>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x114>
  {
    return LIS2MDL_ERROR;
 8008bac:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb0:	e094      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f103 001c 	add.w	r0, r3, #28
 8008bb8:	f107 0219 	add.w	r2, r7, #25
 8008bbc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f000 f8a7 	bl	8008d14 <lis2mdl_write_reg>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x134>
  {
    return LIS2MDL_ERROR;
 8008bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd0:	e084      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f103 001c 	add.w	r0, r3, #28
 8008bd8:	f107 021c 	add.w	r2, r7, #28
 8008bdc:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8008be0:	2301      	movs	r3, #1
 8008be2:	f000 f897 	bl	8008d14 <lis2mdl_write_reg>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x154>
  {
    return LIS2MDL_ERROR;
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf0:	e074      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f103 001c 	add.w	r0, r3, #28
 8008bf8:	f107 0218 	add.w	r2, r7, #24
 8008bfc:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8008c00:	2301      	movs	r3, #1
 8008c02:	f000 f86f 	bl	8008ce4 <lis2mdl_read_reg>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x174>
  {
    return LIS2MDL_ERROR;
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c10:	e064      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8008c12:	7e3b      	ldrb	r3, [r7, #24]
 8008c14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d101      	bne.n	8008c20 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x182>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8008c1c:	7ffb      	ldrb	r3, [r7, #31]
 8008c1e:	763b      	strb	r3, [r7, #24]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f103 001c 	add.w	r0, r3, #28
 8008c26:	f107 0218 	add.w	r2, r7, #24
 8008c2a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f000 f870 	bl	8008d14 <lis2mdl_write_reg>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1a2>
  {
    return LIS2MDL_ERROR;
 8008c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3e:	e04d      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f103 001c 	add.w	r0, r3, #28
 8008c46:	f107 0210 	add.w	r2, r7, #16
 8008c4a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8008c4e:	2306      	movs	r3, #6
 8008c50:	f000 f848 	bl	8008ce4 <lis2mdl_read_reg>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1c2>
  {
    return LIS2MDL_ERROR;
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	e03d      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f103 001c 	add.w	r0, r3, #28
 8008c66:	f107 0217 	add.w	r2, r7, #23
 8008c6a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f000 f838 	bl	8008ce4 <lis2mdl_read_reg>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1e2>
    {
      return LIS2MDL_ERROR;
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7e:	e02d      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
    }
  } while ((data & xlda) != xlda);
 8008c80:	7dfa      	ldrb	r2, [r7, #23]
 8008c82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c86:	4013      	ands	r3, r2
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d1e6      	bne.n	8008c60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1c2>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  for(int i=0; i < 50000; i++);
 8008c92:	2300      	movs	r3, #0
 8008c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c96:	e002      	b.n	8008c9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	ddf7      	ble.n	8008c98 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1fa>
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f103 001c 	add.w	r0, r3, #28
 8008cae:	f107 0217 	add.w	r2, r7, #23
 8008cb2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f000 f814 	bl	8008ce4 <lis2mdl_read_reg>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x22a>
    {
      return LIS2MDL_ERROR;
 8008cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc6:	e009      	b.n	8008cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8008cc8:	7dfa      	ldrb	r2, [r7, #23]
 8008cca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008cce:	4013      	ands	r3, r2
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d1e6      	bne.n	8008ca8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x20a>

  return LIS2MDL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3730      	adds	r7, #48	; 0x30
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	607a      	str	r2, [r7, #4]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	72fb      	strb	r3, [r7, #11]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685c      	ldr	r4, [r3, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6898      	ldr	r0, [r3, #8]
 8008d00:	893b      	ldrh	r3, [r7, #8]
 8008d02:	7af9      	ldrb	r1, [r7, #11]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	47a0      	blx	r4
 8008d08:	6178      	str	r0, [r7, #20]

  return ret;
 8008d0a:	697b      	ldr	r3, [r7, #20]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	371c      	adds	r7, #28
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd90      	pop	{r4, r7, pc}

08008d14 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8008d14:	b590      	push	{r4, r7, lr}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	460b      	mov	r3, r1
 8008d22:	72fb      	strb	r3, [r7, #11]
 8008d24:	4613      	mov	r3, r2
 8008d26:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681c      	ldr	r4, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6898      	ldr	r0, [r3, #8]
 8008d30:	893b      	ldrh	r3, [r7, #8]
 8008d32:	7af9      	ldrb	r1, [r7, #11]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	47a0      	blx	r4
 8008d38:	6178      	str	r0, [r7, #20]

  return ret;
 8008d3a:	697b      	ldr	r3, [r7, #20]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd90      	pop	{r4, r7, pc}

08008d44 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8008d50:	f107 0208 	add.w	r2, r7, #8
 8008d54:	2301      	movs	r3, #1
 8008d56:	2160      	movs	r1, #96	; 0x60
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff ffc3 	bl	8008ce4 <lis2mdl_read_reg>
 8008d5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10f      	bne.n	8008d86 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	7a3b      	ldrb	r3, [r7, #8]
 8008d70:	f362 0301 	bfi	r3, r2, #0, #2
 8008d74:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8008d76:	f107 0208 	add.w	r2, r7, #8
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	2160      	movs	r1, #96	; 0x60
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff ffc8 	bl	8008d14 <lis2mdl_write_reg>
 8008d84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008d86:	68fb      	ldr	r3, [r7, #12]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8008d9c:	f107 0208 	add.w	r2, r7, #8
 8008da0:	2301      	movs	r3, #1
 8008da2:	2160      	movs	r1, #96	; 0x60
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff ff9d 	bl	8008ce4 <lis2mdl_read_reg>
 8008daa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10f      	bne.n	8008dd2 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	7a3b      	ldrb	r3, [r7, #8]
 8008dbc:	f362 0383 	bfi	r3, r2, #2, #2
 8008dc0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8008dc2:	f107 0208 	add.w	r2, r7, #8
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	2160      	movs	r1, #96	; 0x60
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff ffa2 	bl	8008d14 <lis2mdl_write_reg>
 8008dd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8008de8:	f107 0208 	add.w	r2, r7, #8
 8008dec:	2301      	movs	r3, #1
 8008dee:	2162      	movs	r1, #98	; 0x62
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff ff77 	bl	8008ce4 <lis2mdl_read_reg>
 8008df6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10f      	bne.n	8008e1e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	7a3b      	ldrb	r3, [r7, #8]
 8008e08:	f362 1304 	bfi	r3, r2, #4, #1
 8008e0c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8008e0e:	f107 0208 	add.w	r2, r7, #8
 8008e12:	2301      	movs	r3, #1
 8008e14:	2162      	movs	r1, #98	; 0x62
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff ff7c 	bl	8008d14 <lis2mdl_write_reg>
 8008e1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8008e32:	f107 020c 	add.w	r2, r7, #12
 8008e36:	2306      	movs	r3, #6
 8008e38:	2168      	movs	r1, #104	; 0x68
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff ff52 	bl	8008ce4 <lis2mdl_read_reg>
 8008e40:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008e42:	7b7b      	ldrb	r3, [r7, #13]
 8008e44:	b21a      	sxth	r2, r3
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	021b      	lsls	r3, r3, #8
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	7b3b      	ldrb	r3, [r7, #12]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	b21a      	sxth	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008e64:	7bfa      	ldrb	r2, [r7, #15]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3302      	adds	r3, #2
 8008e6a:	b212      	sxth	r2, r2
 8008e6c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	3302      	adds	r3, #2
 8008e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	021b      	lsls	r3, r3, #8
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	3302      	adds	r3, #2
 8008e88:	b212      	sxth	r2, r2
 8008e8a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008e8c:	7c7a      	ldrb	r2, [r7, #17]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	3304      	adds	r3, #4
 8008e92:	b212      	sxth	r2, r2
 8008e94:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	7c3b      	ldrb	r3, [r7, #16]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	b212      	sxth	r2, r2
 8008eb2:	801a      	strh	r2, [r3, #0]

  return ret;
 8008eb4:	697b      	ldr	r3, [r7, #20]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8008ec8:	2301      	movs	r3, #1
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	214f      	movs	r1, #79	; 0x4f
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff ff08 	bl	8008ce4 <lis2mdl_read_reg>
 8008ed4:	60f8      	str	r0, [r7, #12]

  return ret;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8008eec:	f107 0208 	add.w	r2, r7, #8
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	2162      	movs	r1, #98	; 0x62
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff fef5 	bl	8008ce4 <lis2mdl_read_reg>
 8008efa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10f      	bne.n	8008f22 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	7a3b      	ldrb	r3, [r7, #8]
 8008f0c:	f362 0341 	bfi	r3, r2, #1, #1
 8008f10:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8008f12:	f107 0208 	add.w	r2, r7, #8
 8008f16:	2301      	movs	r3, #1
 8008f18:	2162      	movs	r1, #98	; 0x62
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fefa 	bl	8008d14 <lis2mdl_write_reg>
 8008f20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008f22:	68fb      	ldr	r3, [r7, #12]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <LSM6DSOX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ReadID(LSM6DSOX_Object_t *pObj, uint8_t *Id)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  if (lsm6dsox_device_id_get(&(pObj->Ctx), Id) != LSM6DSOX_OK)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	331c      	adds	r3, #28
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fe15 	bl	800ab6c <lsm6dsox_device_id_get>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <LSM6DSOX_ReadID+0x22>
  {
    return LSM6DSOX_ERROR;
 8008f48:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4c:	e000      	b.n	8008f50 <LSM6DSOX_ReadID+0x24>
  }

  return LSM6DSOX_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <LSM6DSOX_ACC_Enable>:
  * @brief  Enable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Enable(LSM6DSOX_Object_t *pObj)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <LSM6DSOX_ACC_Enable+0x16>
  {
    return LSM6DSOX_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e014      	b.n	8008f98 <LSM6DSOX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSOX_OK)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f103 021c 	add.w	r2, r3, #28
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f000 ffb3 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <LSM6DSOX_ACC_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 8008f88:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8c:	e004      	b.n	8008f98 <LSM6DSOX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <LSM6DSOX_ACC_Disable>:
  * @brief  Disable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Disable(LSM6DSOX_Object_t *pObj)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <LSM6DSOX_ACC_Disable+0x16>
  {
    return LSM6DSOX_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e01f      	b.n	8008ff6 <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSOX_OK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f103 021c 	add.w	r2, r3, #28
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	332b      	adds	r3, #43	; 0x2b
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f001 f904 	bl	800a1d0 <lsm6dsox_xl_data_rate_get>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <LSM6DSOX_ACC_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	e010      	b.n	8008ff6 <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	331c      	adds	r3, #28
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 ff84 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <LSM6DSOX_ACC_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 8008fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fea:	e004      	b.n	8008ff6 <LSM6DSOX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <LSM6DSOX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	331c      	adds	r3, #28
 8009012:	f107 020b 	add.w	r2, r7, #11
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f000 ff2d 	bl	8009e78 <lsm6dsox_xl_full_scale_get>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <LSM6DSOX_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 8009024:	f04f 33ff 	mov.w	r3, #4294967295
 8009028:	e023      	b.n	8009072 <LSM6DSOX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	2b03      	cmp	r3, #3
 800902e:	d81b      	bhi.n	8009068 <LSM6DSOX_ACC_GetSensitivity+0x68>
 8009030:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <LSM6DSOX_ACC_GetSensitivity+0x38>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009049 	.word	0x08009049
 800903c:	08009061 	.word	0x08009061
 8009040:	08009051 	.word	0x08009051
 8009044:	08009059 	.word	0x08009059
  {
    case LSM6DSOX_2g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_2G;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	4a0c      	ldr	r2, [pc, #48]	; (800907c <LSM6DSOX_ACC_GetSensitivity+0x7c>)
 800904c:	601a      	str	r2, [r3, #0]
      break;
 800904e:	e00f      	b.n	8009070 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_4g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_4G;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	4a0b      	ldr	r2, [pc, #44]	; (8009080 <LSM6DSOX_ACC_GetSensitivity+0x80>)
 8009054:	601a      	str	r2, [r3, #0]
      break;
 8009056:	e00b      	b.n	8009070 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_8g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_8G;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <LSM6DSOX_ACC_GetSensitivity+0x84>)
 800905c:	601a      	str	r2, [r3, #0]
      break;
 800905e:	e007      	b.n	8009070 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_16g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_16G;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	4a09      	ldr	r2, [pc, #36]	; (8009088 <LSM6DSOX_ACC_GetSensitivity+0x88>)
 8009064:	601a      	str	r2, [r3, #0]
      break;
 8009066:	e003      	b.n	8009070 <LSM6DSOX_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8009068:	f04f 33ff 	mov.w	r3, #4294967295
 800906c:	60fb      	str	r3, [r7, #12]
      break;
 800906e:	bf00      	nop
  }

  return ret;
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	3d79db23 	.word	0x3d79db23
 8009080:	3df9db23 	.word	0x3df9db23
 8009084:	3e79db23 	.word	0x3e79db23
 8009088:	3ef9db23 	.word	0x3ef9db23

0800908c <LSM6DSOX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSOX_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_ACC_HIGH_PERFORMANCE_MODE);
 8009098:	2100      	movs	r1, #0
 800909a:	ed97 0a00 	vldr	s0, [r7]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f806 	bl	80090b0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>
 80090a4:	4603      	mov	r3, r0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr, LSM6DSOX_ACC_Operating_Mode_t Mode)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08c      	sub	sp, #48	; 0x30
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80090bc:	460b      	mov	r3, r1
 80090be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  switch (Mode)
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	f000 80ed 	beq.w	80092a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1f6>
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	f300 8166 	bgt.w	800939e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ee>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2c>
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d074      	beq.n	80091c4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x114>
 80090da:	e160      	b.n	800939e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ee>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f103 001c 	add.w	r0, r3, #28
 80090e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80090e6:	2301      	movs	r3, #1
 80090e8:	2114      	movs	r1, #20
 80090ea:	f000 fe6f 	bl	8009dcc <lsm6dsox_read_reg>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x4a>
      {
        return LSM6DSOX_ERROR;
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295
 80090f8:	e168      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val1.xl_ulp_en)
 80090fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	d025      	beq.n	8009154 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa4>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800910e:	2b01      	cmp	r3, #1
 8009110:	d10b      	bne.n	800912a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x7a>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	331c      	adds	r3, #28
 8009116:	2100      	movs	r1, #0
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fee5 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x7a>
          {
            return LSM6DSOX_ERROR;
 8009124:	f04f 33ff 	mov.w	r3, #4294967295
 8009128:	e150      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 0;
 800912a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800912e:	f36f 13c7 	bfc	r3, #7, #1
 8009132:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f103 001c 	add.w	r0, r3, #28
 800913c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009140:	2301      	movs	r3, #1
 8009142:	2114      	movs	r1, #20
 8009144:	f000 fe5a 	bl	8009dfc <lsm6dsox_write_reg>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa4>
        {
          return LSM6DSOX_ERROR;
 800914e:	f04f 33ff 	mov.w	r3, #4294967295
 8009152:	e13b      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f103 001c 	add.w	r0, r3, #28
 800915a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800915e:	2301      	movs	r3, #1
 8009160:	2115      	movs	r1, #21
 8009162:	f000 fe33 	bl	8009dcc <lsm6dsox_read_reg>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xc2>
      {
        return LSM6DSOX_ERROR;
 800916c:	f04f 33ff 	mov.w	r3, #4294967295
 8009170:	e12c      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val2.xl_hm_mode)
 8009172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d014      	beq.n	80091aa <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xfa>
      {
        val2.xl_hm_mode = 0;
 8009180:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009184:	f36f 1304 	bfc	r3, #4, #1
 8009188:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f103 001c 	add.w	r0, r3, #28
 8009192:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009196:	2301      	movs	r3, #1
 8009198:	2115      	movs	r1, #21
 800919a:	f000 fe2f 	bl	8009dfc <lsm6dsox_write_reg>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xfa>
        {
          return LSM6DSOX_ERROR;
 80091a4:	f04f 33ff 	mov.w	r3, #4294967295
 80091a8:	e110      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (Odr < 12.5f)
 80091aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80091ae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80091b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ba:	d400      	bmi.n	80091be <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x10e>
      {
        Odr = 12.5f;
      }
      break;
 80091bc:	e0f3      	b.n	80093a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 12.5f;
 80091be:	4b85      	ldr	r3, [pc, #532]	; (80093d4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x324>)
 80091c0:	60bb      	str	r3, [r7, #8]
 80091c2:	e0f0      	b.n	80093a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f103 001c 	add.w	r0, r3, #28
 80091ca:	f107 0220 	add.w	r2, r7, #32
 80091ce:	2301      	movs	r3, #1
 80091d0:	2114      	movs	r1, #20
 80091d2:	f000 fdfb 	bl	8009dcc <lsm6dsox_read_reg>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x132>
      {
        return LSM6DSOX_ERROR;
 80091dc:	f04f 33ff 	mov.w	r3, #4294967295
 80091e0:	e0f4      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val1.xl_ulp_en)
 80091e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d025      	beq.n	800923c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x18c>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d10b      	bne.n	8009212 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x162>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	331c      	adds	r3, #28
 80091fe:	2100      	movs	r1, #0
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fe71 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x162>
          {
            return LSM6DSOX_ERROR;
 800920c:	f04f 33ff 	mov.w	r3, #4294967295
 8009210:	e0dc      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 0;
 8009212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009216:	f36f 13c7 	bfc	r3, #7, #1
 800921a:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f103 001c 	add.w	r0, r3, #28
 8009224:	f107 0220 	add.w	r2, r7, #32
 8009228:	2301      	movs	r3, #1
 800922a:	2114      	movs	r1, #20
 800922c:	f000 fde6 	bl	8009dfc <lsm6dsox_write_reg>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x18c>
        {
          return LSM6DSOX_ERROR;
 8009236:	f04f 33ff 	mov.w	r3, #4294967295
 800923a:	e0c7      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f103 001c 	add.w	r0, r3, #28
 8009242:	f107 021c 	add.w	r2, r7, #28
 8009246:	2301      	movs	r3, #1
 8009248:	2115      	movs	r1, #21
 800924a:	f000 fdbf 	bl	8009dcc <lsm6dsox_read_reg>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1aa>
      {
        return LSM6DSOX_ERROR;
 8009254:	f04f 33ff 	mov.w	r3, #4294967295
 8009258:	e0b8      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (!val2.xl_hm_mode)
 800925a:	7f3b      	ldrb	r3, [r7, #28]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d112      	bne.n	800928c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1dc>
      {
        val2.xl_hm_mode = 1U;
 8009266:	7f3b      	ldrb	r3, [r7, #28]
 8009268:	f043 0310 	orr.w	r3, r3, #16
 800926c:	773b      	strb	r3, [r7, #28]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f103 001c 	add.w	r0, r3, #28
 8009274:	f107 021c 	add.w	r2, r7, #28
 8009278:	2301      	movs	r3, #1
 800927a:	2115      	movs	r1, #21
 800927c:	f000 fdbe 	bl	8009dfc <lsm6dsox_write_reg>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1dc>
        {
          return LSM6DSOX_ERROR;
 8009286:	f04f 33ff 	mov.w	r3, #4294967295
 800928a:	e09f      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 800928c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009290:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80093d8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x328>
 8009294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	dc00      	bgt.n	80092a0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1f0>
      {
        Odr = 208.0f;
      }
      break;
 800929e:	e082      	b.n	80093a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 208.0f;
 80092a0:	4b4e      	ldr	r3, [pc, #312]	; (80093dc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x32c>)
 80092a2:	60bb      	str	r3, [r7, #8]
 80092a4:	e07f      	b.n	80093a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f103 001c 	add.w	r0, r3, #28
 80092ac:	f107 0214 	add.w	r2, r7, #20
 80092b0:	2301      	movs	r3, #1
 80092b2:	2115      	movs	r1, #21
 80092b4:	f000 fd8a 	bl	8009dcc <lsm6dsox_read_reg>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x214>
      {
        return LSM6DSOX_ERROR;
 80092be:	f04f 33ff 	mov.w	r3, #4294967295
 80092c2:	e083      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val2.xl_hm_mode)
 80092c4:	7d3b      	ldrb	r3, [r7, #20]
 80092c6:	f003 0310 	and.w	r3, r3, #16
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d012      	beq.n	80092f6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x246>
      {
        val2.xl_hm_mode = 0;
 80092d0:	7d3b      	ldrb	r3, [r7, #20]
 80092d2:	f36f 1304 	bfc	r3, #4, #1
 80092d6:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f103 001c 	add.w	r0, r3, #28
 80092de:	f107 0214 	add.w	r2, r7, #20
 80092e2:	2301      	movs	r3, #1
 80092e4:	2115      	movs	r1, #21
 80092e6:	f000 fd89 	bl	8009dfc <lsm6dsox_write_reg>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x246>
        {
          return LSM6DSOX_ERROR;
 80092f0:	f04f 33ff 	mov.w	r3, #4294967295
 80092f4:	e06a      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d108      	bne.n	8009312 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x262>
      {
        if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f910 	bl	8009526 <LSM6DSOX_GYRO_Disable>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x262>
        {
          return LSM6DSOX_ERROR;
 800930c:	f04f 33ff 	mov.w	r3, #4294967295
 8009310:	e05c      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f103 001c 	add.w	r0, r3, #28
 8009318:	f107 0218 	add.w	r2, r7, #24
 800931c:	2301      	movs	r3, #1
 800931e:	2114      	movs	r1, #20
 8009320:	f000 fd54 	bl	8009dcc <lsm6dsox_read_reg>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x280>
      {
        return LSM6DSOX_ERROR;
 800932a:	f04f 33ff 	mov.w	r3, #4294967295
 800932e:	e04d      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (!val1.xl_ulp_en)
 8009330:	7e3b      	ldrb	r3, [r7, #24]
 8009332:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d123      	bne.n	8009384 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2d4>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009342:	2b01      	cmp	r3, #1
 8009344:	d10b      	bne.n	800935e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ae>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	331c      	adds	r3, #28
 800934a:	2100      	movs	r1, #0
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fdcb 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ae>
          {
            return LSM6DSOX_ERROR;
 8009358:	f04f 33ff 	mov.w	r3, #4294967295
 800935c:	e036      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 1U;
 800935e:	7e3b      	ldrb	r3, [r7, #24]
 8009360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009364:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f103 001c 	add.w	r0, r3, #28
 800936c:	f107 0218 	add.w	r2, r7, #24
 8009370:	2301      	movs	r3, #1
 8009372:	2114      	movs	r1, #20
 8009374:	f000 fd42 	bl	8009dfc <lsm6dsox_write_reg>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2d4>
        {
          return LSM6DSOX_ERROR;
 800937e:	f04f 33ff 	mov.w	r3, #4294967295
 8009382:	e023      	b.n	80093cc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8009384:	edd7 7a02 	vldr	s15, [r7, #8]
 8009388:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80093d8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x328>
 800938c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009394:	dc00      	bgt.n	8009398 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
      {
        Odr = 208.0f;
      }
      break;
 8009396:	e006      	b.n	80093a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 208.0f;
 8009398:	4b10      	ldr	r3, [pc, #64]	; (80093dc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x32c>)
 800939a:	60bb      	str	r3, [r7, #8]
 800939c:	e003      	b.n	80093a6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
    }
    default:
      ret = LSM6DSOX_ERROR;
 800939e:	f04f 33ff 	mov.w	r3, #4294967295
 80093a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80093a4:	bf00      	nop
  }

  if (pObj->acc_is_enabled == 1U)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d106      	bne.n	80093be <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30e>
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80093b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fb07 	bl	80099c8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>
 80093ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80093bc:	e005      	b.n	80093ca <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31a>
  }
  else
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80093be:	ed97 0a02 	vldr	s0, [r7, #8]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fb98 	bl	8009af8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>
 80093c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3730      	adds	r7, #48	; 0x30
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	41480000 	.word	0x41480000
 80093d8:	43500000 	.word	0x43500000
 80093dc:	43500000 	.word	0x43500000

080093e0 <LSM6DSOX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
           : (FullScale <= 4) ? LSM6DSOX_4g
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	dd0b      	ble.n	8009408 <LSM6DSOX_ACC_SetFullScale+0x28>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	dd06      	ble.n	8009404 <LSM6DSOX_ACC_SetFullScale+0x24>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	dc01      	bgt.n	8009400 <LSM6DSOX_ACC_SetFullScale+0x20>
 80093fc:	2303      	movs	r3, #3
 80093fe:	e004      	b.n	800940a <LSM6DSOX_ACC_SetFullScale+0x2a>
 8009400:	2301      	movs	r3, #1
 8009402:	e002      	b.n	800940a <LSM6DSOX_ACC_SetFullScale+0x2a>
 8009404:	2302      	movs	r3, #2
 8009406:	e000      	b.n	800940a <LSM6DSOX_ACC_SetFullScale+0x2a>
 8009408:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
 800940a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSOX_8g
           :                    LSM6DSOX_16g;

  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	331c      	adds	r3, #28
 8009410:	7bfa      	ldrb	r2, [r7, #15]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fd09 	bl	8009e2c <lsm6dsox_xl_full_scale_set>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <LSM6DSOX_ACC_SetFullScale+0x46>
  {
    return LSM6DSOX_ERROR;
 8009420:	f04f 33ff 	mov.w	r3, #4294967295
 8009424:	e000      	b.n	8009428 <LSM6DSOX_ACC_SetFullScale+0x48>
  }

  return LSM6DSOX_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <LSM6DSOX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *Acceleration)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	331c      	adds	r3, #28
 8009444:	f107 0210 	add.w	r2, r7, #16
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f001 f9d7 	bl	800a7fe <lsm6dsox_acceleration_raw_get>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <LSM6DSOX_ACC_GetAxes+0x2c>
  {
    return LSM6DSOX_ERROR;
 8009456:	f04f 33ff 	mov.w	r3, #4294967295
 800945a:	e03c      	b.n	80094d6 <LSM6DSOX_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 800945c:	f107 030c 	add.w	r3, r7, #12
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fdcc 	bl	8009000 <LSM6DSOX_ACC_GetSensitivity>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <LSM6DSOX_ACC_GetAxes+0x44>
  {
    return LSM6DSOX_ERROR;
 800946e:	f04f 33ff 	mov.w	r3, #4294967295
 8009472:	e030      	b.n	80094d6 <LSM6DSOX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009474:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009478:	ee07 3a90 	vmov	s15, r3
 800947c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009480:	edd7 7a03 	vldr	s15, [r7, #12]
 8009484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800948c:	ee17 2a90 	vmov	r2, s15
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009494:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009498:	ee07 3a90 	vmov	s15, r3
 800949c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80094a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094ac:	ee17 2a90 	vmov	r2, s15
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80094b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80094b8:	ee07 3a90 	vmov	s15, r3
 80094bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80094c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094cc:	ee17 2a90 	vmov	r2, s15
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <LSM6DSOX_GYRO_Enable>:
  * @brief  Enable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Enable(LSM6DSOX_Object_t *pObj)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d101      	bne.n	80094f4 <LSM6DSOX_GYRO_Enable+0x16>
  {
    return LSM6DSOX_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	e014      	b.n	800951e <LSM6DSOX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSOX_OK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f103 021c 	add.w	r2, r3, #28
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f000 ff34 	bl	800a370 <lsm6dsox_gy_data_rate_set>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <LSM6DSOX_GYRO_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 800950e:	f04f 33ff 	mov.w	r3, #4294967295
 8009512:	e004      	b.n	800951e <LSM6DSOX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <LSM6DSOX_GYRO_Disable>:
  * @brief  Disable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Disable(LSM6DSOX_Object_t *pObj)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <LSM6DSOX_GYRO_Disable+0x16>
  {
    return LSM6DSOX_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	e01f      	b.n	800957c <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f103 021c 	add.w	r2, r3, #28
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	332c      	adds	r3, #44	; 0x2c
 8009546:	4619      	mov	r1, r3
 8009548:	4610      	mov	r0, r2
 800954a:	f001 f885 	bl	800a658 <lsm6dsox_gy_data_rate_get>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <LSM6DSOX_GYRO_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 8009554:	f04f 33ff 	mov.w	r3, #4294967295
 8009558:	e010      	b.n	800957c <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	331c      	adds	r3, #28
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f000 ff05 	bl	800a370 <lsm6dsox_gy_data_rate_set>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <LSM6DSOX_GYRO_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 800956c:	f04f 33ff 	mov.w	r3, #4294967295
 8009570:	e004      	b.n	800957c <LSM6DSOX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <LSM6DSOX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	331c      	adds	r3, #28
 8009596:	f107 020b 	add.w	r2, r7, #11
 800959a:	4611      	mov	r1, r2
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fea5 	bl	800a2ec <lsm6dsox_gy_full_scale_get>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <LSM6DSOX_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ac:	e02d      	b.n	800960a <LSM6DSOX_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80095ae:	7afb      	ldrb	r3, [r7, #11]
 80095b0:	2b06      	cmp	r3, #6
 80095b2:	d825      	bhi.n	8009600 <LSM6DSOX_GYRO_GetSensitivity+0x7c>
 80095b4:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <LSM6DSOX_GYRO_GetSensitivity+0x38>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	080095e1 	.word	0x080095e1
 80095c0:	080095d9 	.word	0x080095d9
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	08009601 	.word	0x08009601
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	08009601 	.word	0x08009601
 80095d4:	080095f9 	.word	0x080095f9
  {
    case LSM6DSOX_125dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_125DPS;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	4a0e      	ldr	r2, [pc, #56]	; (8009614 <LSM6DSOX_GYRO_GetSensitivity+0x90>)
 80095dc:	601a      	str	r2, [r3, #0]
      break;
 80095de:	e013      	b.n	8009608 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_250dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_250DPS;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	4a0d      	ldr	r2, [pc, #52]	; (8009618 <LSM6DSOX_GYRO_GetSensitivity+0x94>)
 80095e4:	601a      	str	r2, [r3, #0]
      break;
 80095e6:	e00f      	b.n	8009608 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_500dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_500DPS;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	4a0c      	ldr	r2, [pc, #48]	; (800961c <LSM6DSOX_GYRO_GetSensitivity+0x98>)
 80095ec:	601a      	str	r2, [r3, #0]
      break;
 80095ee:	e00b      	b.n	8009608 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_1000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_1000DPS;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	4a0b      	ldr	r2, [pc, #44]	; (8009620 <LSM6DSOX_GYRO_GetSensitivity+0x9c>)
 80095f4:	601a      	str	r2, [r3, #0]
      break;
 80095f6:	e007      	b.n	8009608 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_2000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_2000DPS;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <LSM6DSOX_GYRO_GetSensitivity+0xa0>)
 80095fc:	601a      	str	r2, [r3, #0]
      break;
 80095fe:	e003      	b.n	8009608 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSOX_ERROR;
 8009600:	f04f 33ff 	mov.w	r3, #4294967295
 8009604:	60fb      	str	r3, [r7, #12]
      break;
 8009606:	bf00      	nop
  }

  return ret;
 8009608:	68fb      	ldr	r3, [r7, #12]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	408c0000 	.word	0x408c0000
 8009618:	410c0000 	.word	0x410c0000
 800961c:	418c0000 	.word	0x418c0000
 8009620:	420c0000 	.word	0x420c0000
 8009624:	428c0000 	.word	0x428c0000

08009628 <LSM6DSOX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b7d      	cmp	r3, #125	; 0x7d
 8009636:	dd12      	ble.n	800965e <LSM6DSOX_GYRO_SetFullScale+0x36>
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2bfa      	cmp	r3, #250	; 0xfa
 800963c:	dd0d      	ble.n	800965a <LSM6DSOX_GYRO_SetFullScale+0x32>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009644:	dd07      	ble.n	8009656 <LSM6DSOX_GYRO_SetFullScale+0x2e>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800964c:	dc01      	bgt.n	8009652 <LSM6DSOX_GYRO_SetFullScale+0x2a>
 800964e:	2304      	movs	r3, #4
 8009650:	e006      	b.n	8009660 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8009652:	2306      	movs	r3, #6
 8009654:	e004      	b.n	8009660 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8009656:	2302      	movs	r3, #2
 8009658:	e002      	b.n	8009660 <LSM6DSOX_GYRO_SetFullScale+0x38>
 800965a:	2300      	movs	r3, #0
 800965c:	e000      	b.n	8009660 <LSM6DSOX_GYRO_SetFullScale+0x38>
 800965e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
 8009660:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSOX_500dps
           : (FullScale <= 1000) ? LSM6DSOX_1000dps
           :                       LSM6DSOX_2000dps;

  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	331c      	adds	r3, #28
 8009666:	7bfa      	ldrb	r2, [r7, #15]
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fe18 	bl	800a2a0 <lsm6dsox_gy_full_scale_set>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <LSM6DSOX_GYRO_SetFullScale+0x54>
  {
    return LSM6DSOX_ERROR;
 8009676:	f04f 33ff 	mov.w	r3, #4294967295
 800967a:	e000      	b.n	800967e <LSM6DSOX_GYRO_SetFullScale+0x56>
  }

  return LSM6DSOX_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <LSM6DSOX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *AngularRate)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b086      	sub	sp, #24
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	331c      	adds	r3, #28
 8009694:	f107 0210 	add.w	r2, r7, #16
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f001 f864 	bl	800a768 <lsm6dsox_angular_rate_raw_get>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <LSM6DSOX_GYRO_GetAxes+0x26>
  {
    return LSM6DSOX_ERROR;
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295
 80096aa:	e03c      	b.n	8009726 <LSM6DSOX_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 80096ac:	f107 030c 	add.w	r3, r7, #12
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff ff66 	bl	8009584 <LSM6DSOX_GYRO_GetSensitivity>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <LSM6DSOX_GYRO_GetAxes+0x3e>
  {
    return LSM6DSOX_ERROR;
 80096be:	f04f 33ff 	mov.w	r3, #4294967295
 80096c2:	e030      	b.n	8009726 <LSM6DSOX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80096c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80096c8:	ee07 3a90 	vmov	s15, r3
 80096cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80096d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096dc:	ee17 2a90 	vmov	r2, s15
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80096e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80096f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096fc:	ee17 2a90 	vmov	r2, s15
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8009704:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009708:	ee07 3a90 	vmov	s15, r3
 800970c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009710:	edd7 7a03 	vldr	s15, [r7, #12]
 8009714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800971c:	ee17 2a90 	vmov	r2, s15
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <LSM6DSOX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Write_Reg(LSM6DSOX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
 800973a:	4613      	mov	r3, r2
 800973c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f103 001c 	add.w	r0, r3, #28
 8009744:	1cba      	adds	r2, r7, #2
 8009746:	78f9      	ldrb	r1, [r7, #3]
 8009748:	2301      	movs	r3, #1
 800974a:	f000 fb57 	bl	8009dfc <lsm6dsox_write_reg>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <LSM6DSOX_Write_Reg+0x2c>
  {
    return LSM6DSOX_ERROR;
 8009754:	f04f 33ff 	mov.w	r3, #4294967295
 8009758:	e000      	b.n	800975c <LSM6DSOX_Write_Reg+0x2e>
  }

  return LSM6DSOX_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <LSM6DSOX_ACC_Enable_Pedometer>:
  * @brief  Enable pedometer
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Enable_Pedometer(LSM6DSOX_Object_t *pObj)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  lsm6dsox_pin_int1_route_t val;
  lsm6dsox_emb_sens_t emb_sens;

  /* Output Data Rate selection */
  if (LSM6DSOX_ACC_SetOutputDataRate(pObj, 26.0f) != LSM6DSOX_OK)
 800976c:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff fc8b 	bl	800908c <LSM6DSOX_ACC_SetOutputDataRate>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <LSM6DSOX_ACC_Enable_Pedometer+0x1e>
  {
    return LSM6DSOX_ERROR;
 800977c:	f04f 33ff 	mov.w	r3, #4294967295
 8009780:	e066      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  /* Full scale selection */
  if (LSM6DSOX_ACC_SetFullScale(pObj, 2) != LSM6DSOX_OK)
 8009782:	2102      	movs	r1, #2
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fe2b 	bl	80093e0 <LSM6DSOX_ACC_SetFullScale>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <LSM6DSOX_ACC_Enable_Pedometer+0x32>
  {
    return LSM6DSOX_ERROR;
 8009790:	f04f 33ff 	mov.w	r3, #4294967295
 8009794:	e05c      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  /* Save current embedded features */
  if (lsm6dsox_embedded_sens_get(&(pObj->Ctx), &emb_sens) != LSM6DSOX_OK)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	331c      	adds	r3, #28
 800979a:	f107 020c 	add.w	r2, r7, #12
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f003 f915 	bl	800c9d0 <lsm6dsox_embedded_sens_get>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <LSM6DSOX_ACC_Enable_Pedometer+0x4e>
  {
    return LSM6DSOX_ERROR;
 80097ac:	f04f 33ff 	mov.w	r3, #4294967295
 80097b0:	e04e      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  /* Turn off embedded features */
  if (lsm6dsox_embedded_sens_off(&(pObj->Ctx)) != LSM6DSOX_OK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	331c      	adds	r3, #28
 80097b6:	4618      	mov	r0, r3
 80097b8:	f003 f96d 	bl	800ca96 <lsm6dsox_embedded_sens_off>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <LSM6DSOX_ACC_Enable_Pedometer+0x64>
  {
    return LSM6DSOX_ERROR;
 80097c2:	f04f 33ff 	mov.w	r3, #4294967295
 80097c6:	e043      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  /* Wait for 10 ms */
  LSM6DSOX_Delay(pObj, 10);
 80097c8:	210a      	movs	r1, #10
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa24 	bl	8009c18 <LSM6DSOX_Delay>

  /* Enable pedometer algorithm. */
  emb_sens.step = PROPERTY_ENABLE;
 80097d0:	7b3b      	ldrb	r3, [r7, #12]
 80097d2:	f043 0304 	orr.w	r3, r3, #4
 80097d6:	733b      	strb	r3, [r7, #12]

  if (lsm6dsox_pedo_sens_set(&(pObj->Ctx), LSM6DSOX_PEDO_BASE_MODE) != LSM6DSOX_OK)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	331c      	adds	r3, #28
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f001 faff 	bl	800ade2 <lsm6dsox_pedo_sens_set>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <LSM6DSOX_ACC_Enable_Pedometer+0x8c>
  {
    return LSM6DSOX_ERROR;
 80097ea:	f04f 33ff 	mov.w	r3, #4294967295
 80097ee:	e02f      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  /* Turn on embedded features */
  if (lsm6dsox_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSOX_OK)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	331c      	adds	r3, #28
 80097f4:	f107 020c 	add.w	r2, r7, #12
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f003 f86f 	bl	800c8de <lsm6dsox_embedded_sens_set>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <LSM6DSOX_ACC_Enable_Pedometer+0xa8>
  {
    return LSM6DSOX_ERROR;
 8009806:	f04f 33ff 	mov.w	r3, #4294967295
 800980a:	e021      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  /* Enable step detector on INT1 pin */
  if (lsm6dsox_pin_int1_route_get(&(pObj->Ctx), &val) != LSM6DSOX_OK)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	331c      	adds	r3, #28
 8009810:	f107 0210 	add.w	r2, r7, #16
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f002 f802 	bl	800b820 <lsm6dsox_pin_int1_route_get>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <LSM6DSOX_ACC_Enable_Pedometer+0xc4>
  {
    return LSM6DSOX_ERROR;
 8009822:	f04f 33ff 	mov.w	r3, #4294967295
 8009826:	e013      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  val.step_detector = PROPERTY_ENABLE;
 8009828:	7cbb      	ldrb	r3, [r7, #18]
 800982a:	f043 0302 	orr.w	r3, r3, #2
 800982e:	74bb      	strb	r3, [r7, #18]

  if (lsm6dsox_pin_int1_route_set(&(pObj->Ctx), val) != LSM6DSOX_OK)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f103 001c 	add.w	r0, r3, #28
 8009836:	f107 0310 	add.w	r3, r7, #16
 800983a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800983e:	f001 fbc5 	bl	800afcc <lsm6dsox_pin_int1_route_set>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <LSM6DSOX_ACC_Enable_Pedometer+0xea>
  {
    return LSM6DSOX_ERROR;
 8009848:	f04f 33ff 	mov.w	r3, #4294967295
 800984c:	e000      	b.n	8009850 <LSM6DSOX_ACC_Enable_Pedometer+0xec>
  }

  return LSM6DSOX_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <LSM6DSOX_ACC_Step_Counter_Reset>:
  * @brief  Enable step counter reset
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Step_Counter_Reset(LSM6DSOX_Object_t *pObj)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  if (lsm6dsox_steps_reset(&(pObj->Ctx)) != LSM6DSOX_OK)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	331c      	adds	r3, #28
 8009864:	4618      	mov	r0, r3
 8009866:	f001 f815 	bl	800a894 <lsm6dsox_steps_reset>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <LSM6DSOX_ACC_Step_Counter_Reset+0x1e>
  {
    return LSM6DSOX_ERROR;
 8009870:	f04f 33ff 	mov.w	r3, #4294967295
 8009874:	e000      	b.n	8009878 <LSM6DSOX_ACC_Step_Counter_Reset+0x20>
  }

  return LSM6DSOX_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <LSM6DSOX_ACC_Enable_Wake_Up_Detection>:
  * @param  pObj the device pObj
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Enable_Wake_Up_Detection(LSM6DSOX_Object_t *pObj, LSM6DSOX_SensorIntPin_t IntPin)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSOX_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	61fb      	str	r3, [r7, #28]
  lsm6dsox_pin_int1_route_t val1;
  lsm6dsox_pin_int2_route_t val2;

  /* Output Data Rate selection */
  if (LSM6DSOX_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSOX_OK)
 8009890:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8009994 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x114>
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff fbf9 	bl	800908c <LSM6DSOX_ACC_SetOutputDataRate>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x26>
  {
    return LSM6DSOX_ERROR;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	e071      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
  }

  /* Full scale selection */
  if (LSM6DSOX_ACC_SetFullScale(pObj, 2) != LSM6DSOX_OK)
 80098a6:	2102      	movs	r1, #2
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff fd99 	bl	80093e0 <LSM6DSOX_ACC_SetFullScale>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x3a>
  {
    return LSM6DSOX_ERROR;
 80098b4:	f04f 33ff 	mov.w	r3, #4294967295
 80098b8:	e067      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
  }

  /* WAKE_DUR setting */
  if (lsm6dsox_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSOX_OK)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	331c      	adds	r3, #28
 80098be:	2100      	movs	r1, #0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 f9f6 	bl	800acb2 <lsm6dsox_wkup_dur_set>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x52>
  {
    return LSM6DSOX_ERROR;
 80098cc:	f04f 33ff 	mov.w	r3, #4294967295
 80098d0:	e05b      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
  }

  /* Set wake up threshold. */
  if (lsm6dsox_wkup_threshold_set(&(pObj->Ctx), 0x02) != LSM6DSOX_OK)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	331c      	adds	r3, #28
 80098d6:	2102      	movs	r1, #2
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 f9c4 	bl	800ac66 <lsm6dsox_wkup_threshold_set>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x6a>
  {
    return LSM6DSOX_ERROR;
 80098e4:	f04f 33ff 	mov.w	r3, #4294967295
 80098e8:	e04f      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
  }

  /* Enable wake up event on either INT1 or INT2 pin */
  switch (IntPin)
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x76>
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d021      	beq.n	8009938 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0xb8>
 80098f4:	e041      	b.n	800997a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0xfa>
  {
    case LSM6DSOX_INT1_PIN:
      if (lsm6dsox_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSOX_OK)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	331c      	adds	r3, #28
 80098fa:	f107 0214 	add.w	r2, r7, #20
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f001 ff8d 	bl	800b820 <lsm6dsox_pin_int1_route_get>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x92>
      {
        return LSM6DSOX_ERROR;
 800990c:	f04f 33ff 	mov.w	r3, #4294967295
 8009910:	e03b      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
      }

      val1.wake_up = PROPERTY_ENABLE;
 8009912:	7d7b      	ldrb	r3, [r7, #21]
 8009914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009918:	757b      	strb	r3, [r7, #21]

      if (lsm6dsox_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSOX_OK)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f103 001c 	add.w	r0, r3, #28
 8009920:	f107 0314 	add.w	r3, r7, #20
 8009924:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009928:	f001 fb50 	bl	800afcc <lsm6dsox_pin_int1_route_set>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d027      	beq.n	8009982 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x102>
      {
        return LSM6DSOX_ERROR;
 8009932:	f04f 33ff 	mov.w	r3, #4294967295
 8009936:	e028      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
      }
      break;

    case LSM6DSOX_INT2_PIN:
      if (lsm6dsox_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSOX_OK)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	331c      	adds	r3, #28
 800993c:	f107 020c 	add.w	r2, r7, #12
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f002 fd83 	bl	800c44e <lsm6dsox_pin_int2_route_get>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0xd4>
      {
        return LSM6DSOX_ERROR;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	e01a      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
      }

      val2.wake_up = PROPERTY_ENABLE;
 8009954:	7b7b      	ldrb	r3, [r7, #13]
 8009956:	f043 0310 	orr.w	r3, r3, #16
 800995a:	737b      	strb	r3, [r7, #13]

      if (lsm6dsox_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSOX_OK)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f103 001c 	add.w	r0, r3, #28
 8009962:	f107 030c 	add.w	r3, r7, #12
 8009966:	cb0c      	ldmia	r3, {r2, r3}
 8009968:	2100      	movs	r1, #0
 800996a:	f002 f98d 	bl	800bc88 <lsm6dsox_pin_int2_route_set>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d008      	beq.n	8009986 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x106>
      {
        return LSM6DSOX_ERROR;
 8009974:	f04f 33ff 	mov.w	r3, #4294967295
 8009978:	e007      	b.n	800998a <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x10a>
      }
      break;

    default:
      ret = LSM6DSOX_ERROR;
 800997a:	f04f 33ff 	mov.w	r3, #4294967295
 800997e:	61fb      	str	r3, [r7, #28]
      break;
 8009980:	e002      	b.n	8009988 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x108>
      break;
 8009982:	bf00      	nop
 8009984:	e000      	b.n	8009988 <LSM6DSOX_ACC_Enable_Wake_Up_Detection+0x108>
      break;
 8009986:	bf00      	nop
  }

  return ret;
 8009988:	69fb      	ldr	r3, [r7, #28]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3720      	adds	r7, #32
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	43d08000 	.word	0x43d08000

08009998 <LSM6DSOX_ACC_Set_Wake_Up_Threshold>:
  * @param  pObj the device pObj
  * @param  Threshold wake up detection threshold
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Set_Wake_Up_Threshold(LSM6DSOX_Object_t *pObj, uint8_t Threshold)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  /* Set wake up threshold. */
  if (lsm6dsox_wkup_threshold_set(&(pObj->Ctx), Threshold) != LSM6DSOX_OK)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	331c      	adds	r3, #28
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 f95a 	bl	800ac66 <lsm6dsox_wkup_threshold_set>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <LSM6DSOX_ACC_Set_Wake_Up_Threshold+0x26>
  {
    return LSM6DSOX_ERROR;
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295
 80099bc:	e000      	b.n	80099c0 <LSM6DSOX_ACC_Set_Wake_Up_Threshold+0x28>
  }

  return LSM6DSOX_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsox_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80099d4:	edd7 7a00 	vldr	s15, [r7]
 80099d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009ad8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80099dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e4:	d801      	bhi.n	80099ea <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80099e6:	230b      	movs	r3, #11
 80099e8:	e063      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 80099ea:	edd7 7a00 	vldr	s15, [r7]
 80099ee:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80099f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fa:	d801      	bhi.n	8009a00 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80099fc:	2301      	movs	r3, #1
 80099fe:	e058      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a00:	edd7 7a00 	vldr	s15, [r7]
 8009a04:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a10:	d801      	bhi.n	8009a16 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009a12:	2302      	movs	r3, #2
 8009a14:	e04d      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a16:	edd7 7a00 	vldr	s15, [r7]
 8009a1a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009adc <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8009a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a26:	d801      	bhi.n	8009a2c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e042      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a2c:	edd7 7a00 	vldr	s15, [r7]
 8009a30:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009ae0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x118>
 8009a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3c:	d801      	bhi.n	8009a42 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8009a3e:	2304      	movs	r3, #4
 8009a40:	e037      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a42:	edd7 7a00 	vldr	s15, [r7]
 8009a46:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8009ae4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8009a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a52:	d801      	bhi.n	8009a58 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8009a54:	2305      	movs	r3, #5
 8009a56:	e02c      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a58:	edd7 7a00 	vldr	s15, [r7]
 8009a5c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009ae8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x120>
 8009a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a68:	d801      	bhi.n	8009a6e <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8009a6a:	2306      	movs	r3, #6
 8009a6c:	e021      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a6e:	edd7 7a00 	vldr	s15, [r7]
 8009a72:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009aec <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x124>
 8009a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7e:	d801      	bhi.n	8009a84 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8009a80:	2307      	movs	r3, #7
 8009a82:	e016      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a84:	edd7 7a00 	vldr	s15, [r7]
 8009a88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009af0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x128>
 8009a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a94:	d801      	bhi.n	8009a9a <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8009a96:	2308      	movs	r3, #8
 8009a98:	e00b      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009a9a:	edd7 7a00 	vldr	s15, [r7]
 8009a9e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8009af4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8009aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aaa:	d801      	bhi.n	8009ab0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8009aac:	2309      	movs	r3, #9
 8009aae:	e000      	b.n	8009ab2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8009ab0:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8009ab2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
            :                    LSM6DSOX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	331c      	adds	r3, #28
 8009ab8:	7bfa      	ldrb	r2, [r7, #15]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fa13 	bl	8009ee8 <lsm6dsox_xl_data_rate_set>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSOX_ERROR;
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8009acc:	e000      	b.n	8009ad0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSOX_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	3fcccccd 	.word	0x3fcccccd
 8009adc:	42500000 	.word	0x42500000
 8009ae0:	42d00000 	.word	0x42d00000
 8009ae4:	43500000 	.word	0x43500000
 8009ae8:	43d08000 	.word	0x43d08000
 8009aec:	44504000 	.word	0x44504000
 8009af0:	44d06000 	.word	0x44d06000
 8009af4:	45505000 	.word	0x45505000

08009af8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8009b04:	edd7 7a00 	vldr	s15, [r7]
 8009b08:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8009bf8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b14:	d801      	bhi.n	8009b1a <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8009b16:	230b      	movs	r3, #11
 8009b18:	e063      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009b1a:	edd7 7a00 	vldr	s15, [r7]
 8009b1e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2a:	d801      	bhi.n	8009b30 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e058      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009b30:	edd7 7a00 	vldr	s15, [r7]
 8009b34:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b40:	d801      	bhi.n	8009b46 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e04d      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009b46:	edd7 7a00 	vldr	s15, [r7]
 8009b4a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8009bfc <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x104>
 8009b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b56:	d801      	bhi.n	8009b5c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e042      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009b5c:	edd7 7a00 	vldr	s15, [r7]
 8009b60:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8009c00 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x108>
 8009b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6c:	d801      	bhi.n	8009b72 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8009b6e:	2304      	movs	r3, #4
 8009b70:	e037      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009b72:	edd7 7a00 	vldr	s15, [r7]
 8009b76:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8009c04 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8009b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b82:	d801      	bhi.n	8009b88 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8009b84:	2305      	movs	r3, #5
 8009b86:	e02c      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009b88:	edd7 7a00 	vldr	s15, [r7]
 8009b8c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009c08 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x110>
 8009b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b98:	d801      	bhi.n	8009b9e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8009b9a:	2306      	movs	r3, #6
 8009b9c:	e021      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009b9e:	edd7 7a00 	vldr	s15, [r7]
 8009ba2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009c0c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x114>
 8009ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bae:	d801      	bhi.n	8009bb4 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8009bb0:	2307      	movs	r3, #7
 8009bb2:	e016      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009bb4:	edd7 7a00 	vldr	s15, [r7]
 8009bb8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8009c10 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x118>
 8009bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc4:	d801      	bhi.n	8009bca <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	e00b      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009bca:	edd7 7a00 	vldr	s15, [r7]
 8009bce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009c14 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8009bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bda:	d801      	bhi.n	8009be0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009bdc:	2309      	movs	r3, #9
 8009bde:	e000      	b.n	8009be2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009be0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSOX_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
                  :                    LSM6DSOX_XL_ODR_6667Hz;

  return LSM6DSOX_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	3fcccccd 	.word	0x3fcccccd
 8009bfc:	42500000 	.word	0x42500000
 8009c00:	42d00000 	.word	0x42d00000
 8009c04:	43500000 	.word	0x43500000
 8009c08:	43d08000 	.word	0x43d08000
 8009c0c:	44504000 	.word	0x44504000
 8009c10:	44d06000 	.word	0x44d06000
 8009c14:	45505000 	.word	0x45505000

08009c18 <LSM6DSOX_Delay>:
  * @param  pObj the device pObj
  * @param  msDelay delay expressed in ms
  * @retval None
  */
static void LSM6DSOX_Delay(LSM6DSOX_Object_t *pObj, uint32_t msDelay)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = pObj->IO.GetTick();
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	4798      	blx	r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	60fb      	str	r3, [r7, #12]

  while ((pObj->IO.GetTick() - tickstart) < msDelay)
 8009c2c:	bf00      	nop
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	4798      	blx	r3
 8009c34:	4603      	mov	r3, r0
 8009c36:	461a      	mov	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d8f5      	bhi.n	8009c2e <LSM6DSOX_Delay+0x16>
  {
  }
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <LSM6DSOX_ACC_Enable_Inactivity_Detection>:
  * @param  IntPin interrupt pin line to be used
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Enable_Inactivity_Detection(LSM6DSOX_Object_t *pObj, lsm6dsox_inact_en_t InactMode,
                                                 LSM6DSOX_SensorIntPin_t IntPin)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	70bb      	strb	r3, [r7, #2]
  lsm6dsox_pin_int1_route_t val1;
  lsm6dsox_pin_int2_route_t val2;

  /* Full scale selection */
  if (LSM6DSOX_ACC_SetFullScale(pObj, 2) != LSM6DSOX_OK)
 8009c5c:	2102      	movs	r1, #2
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fbbe 	bl	80093e0 <LSM6DSOX_ACC_SetFullScale>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x24>
  {
    return LSM6DSOX_ERROR;
 8009c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6e:	e0a9      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
  }
  if (LSM6DSOX_GYRO_SetFullScale(pObj, 250) != LSM6DSOX_OK)
 8009c70:	21fa      	movs	r1, #250	; 0xfa
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fcd8 	bl	8009628 <LSM6DSOX_GYRO_SetFullScale>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x38>
  {
    return LSM6DSOX_ERROR;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	e09f      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
  }

  /* SLEEP_DUR setting */
  if (lsm6dsox_act_sleep_dur_set(&(pObj->Ctx), 0x01) != LSM6DSOX_OK)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	331c      	adds	r3, #28
 8009c88:	2101      	movs	r1, #1
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 f85d 	bl	800ad4a <lsm6dsox_act_sleep_dur_set>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x50>
  {
    return LSM6DSOX_ERROR;
 8009c96:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9a:	e093      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
  }

  /* Enable inactivity detection. */
  switch (InactMode)
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d841      	bhi.n	8009d26 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xda>
 8009ca2:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x5c>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009cb9 	.word	0x08009cb9
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009ce9 	.word	0x08009ce9
 8009cb4:	08009d01 	.word	0x08009d01
  {
    case LSM6DSOX_XL_AND_GY_NOT_AFFECTED:
      if (lsm6dsox_act_mode_set(&(pObj->Ctx), LSM6DSOX_XL_AND_GY_NOT_AFFECTED) != LSM6DSOX_OK)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	331c      	adds	r3, #28
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 f81d 	bl	800acfe <lsm6dsox_act_mode_set>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d026      	beq.n	8009d18 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xcc>
      {
        return LSM6DSOX_ERROR;
 8009cca:	f04f 33ff 	mov.w	r3, #4294967295
 8009cce:	e079      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      }
      break;
    case LSM6DSOX_XL_12Hz5_GY_NOT_AFFECTED:
      if (lsm6dsox_act_mode_set(&(pObj->Ctx), LSM6DSOX_XL_12Hz5_GY_NOT_AFFECTED) != LSM6DSOX_OK)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	331c      	adds	r3, #28
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 f811 	bl	800acfe <lsm6dsox_act_mode_set>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01c      	beq.n	8009d1c <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xd0>
      {
        return LSM6DSOX_ERROR;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	e06d      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      }
      break;
    case LSM6DSOX_XL_12Hz5_GY_SLEEP:
      if (lsm6dsox_act_mode_set(&(pObj->Ctx), LSM6DSOX_XL_12Hz5_GY_SLEEP) != LSM6DSOX_OK)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	331c      	adds	r3, #28
 8009cec:	2102      	movs	r1, #2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 f805 	bl	800acfe <lsm6dsox_act_mode_set>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d012      	beq.n	8009d20 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xd4>
      {
        return LSM6DSOX_ERROR;
 8009cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfe:	e061      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      }
      break;
    case LSM6DSOX_XL_12Hz5_GY_PD:
      if (lsm6dsox_act_mode_set(&(pObj->Ctx), LSM6DSOX_XL_12Hz5_GY_PD) != LSM6DSOX_OK)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	331c      	adds	r3, #28
 8009d04:	2103      	movs	r1, #3
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fff9 	bl	800acfe <lsm6dsox_act_mode_set>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xd8>
      {
        return LSM6DSOX_ERROR;
 8009d12:	f04f 33ff 	mov.w	r3, #4294967295
 8009d16:	e055      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      break;
 8009d18:	bf00      	nop
 8009d1a:	e004      	b.n	8009d26 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xda>
      break;
 8009d1c:	bf00      	nop
 8009d1e:	e002      	b.n	8009d26 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xda>
      break;
 8009d20:	bf00      	nop
 8009d22:	e000      	b.n	8009d26 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xda>
      }
      break;
 8009d24:	bf00      	nop
  }


  /* Enable Inactivity event on either INT1 or INT2 pin */
  switch (IntPin)
 8009d26:	78bb      	ldrb	r3, [r7, #2]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0xe6>
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d021      	beq.n	8009d74 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x128>
 8009d30:	e041      	b.n	8009db6 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x16a>
  {
    case LSM6DSOX_INT1_PIN:
      if (lsm6dsox_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSOX_OK)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	331c      	adds	r3, #28
 8009d36:	f107 0210 	add.w	r2, r7, #16
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 fd6f 	bl	800b820 <lsm6dsox_pin_int1_route_get>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x102>
      {
        return LSM6DSOX_ERROR;
 8009d48:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4c:	e03a      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      }

      val1.sleep_change = PROPERTY_ENABLE;
 8009d4e:	7cbb      	ldrb	r3, [r7, #18]
 8009d50:	f043 0301 	orr.w	r3, r3, #1
 8009d54:	74bb      	strb	r3, [r7, #18]
      if (lsm6dsox_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSOX_OK)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f103 001c 	add.w	r0, r3, #28
 8009d5c:	f107 0310 	add.w	r3, r7, #16
 8009d60:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009d64:	f001 f932 	bl	800afcc <lsm6dsox_pin_int1_route_set>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d026      	beq.n	8009dbc <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x170>
      {
        return LSM6DSOX_ERROR;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	e027      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      }
      break;

    case LSM6DSOX_INT2_PIN:
      if (lsm6dsox_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSOX_OK)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	331c      	adds	r3, #28
 8009d78:	f107 0208 	add.w	r2, r7, #8
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f002 fb65 	bl	800c44e <lsm6dsox_pin_int2_route_get>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x144>
      {
        return LSM6DSOX_ERROR;
 8009d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8e:	e019      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      }

      val2.sleep_change = PROPERTY_ENABLE;
 8009d90:	7a7b      	ldrb	r3, [r7, #9]
 8009d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d96:	727b      	strb	r3, [r7, #9]
      if (lsm6dsox_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSOX_OK)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f103 001c 	add.w	r0, r3, #28
 8009d9e:	f107 0308 	add.w	r3, r7, #8
 8009da2:	cb0c      	ldmia	r3, {r2, r3}
 8009da4:	2100      	movs	r1, #0
 8009da6:	f001 ff6f 	bl	800bc88 <lsm6dsox_pin_int2_route_set>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d007      	beq.n	8009dc0 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x174>
      {
        return LSM6DSOX_ERROR;
 8009db0:	f04f 33ff 	mov.w	r3, #4294967295
 8009db4:	e006      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      }
      break;

    default:
      return LSM6DSOX_ERROR;
 8009db6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dba:	e003      	b.n	8009dc4 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x178>
      break;
 8009dbc:	bf00      	nop
 8009dbe:	e000      	b.n	8009dc2 <LSM6DSOX_ACC_Enable_Inactivity_Detection+0x176>
      break;
 8009dc0:	bf00      	nop
  }
  return LSM6DSOX_OK;;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3718      	adds	r7, #24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <lsm6dsox_read_reg>:
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8009dcc:	b590      	push	{r4, r7, lr}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	460b      	mov	r3, r1
 8009dda:	72fb      	strb	r3, [r7, #11]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	685c      	ldr	r4, [r3, #4]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6898      	ldr	r0, [r3, #8]
 8009de8:	893b      	ldrh	r3, [r7, #8]
 8009dea:	7af9      	ldrb	r1, [r7, #11]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	47a0      	blx	r4
 8009df0:	6178      	str	r0, [r7, #20]

  return ret;
 8009df2:	697b      	ldr	r3, [r7, #20]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	371c      	adds	r7, #28
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd90      	pop	{r4, r7, pc}

08009dfc <lsm6dsox_write_reg>:
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8009dfc:	b590      	push	{r4, r7, lr}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	607a      	str	r2, [r7, #4]
 8009e06:	461a      	mov	r2, r3
 8009e08:	460b      	mov	r3, r1
 8009e0a:	72fb      	strb	r3, [r7, #11]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681c      	ldr	r4, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6898      	ldr	r0, [r3, #8]
 8009e18:	893b      	ldrh	r3, [r7, #8]
 8009e1a:	7af9      	ldrb	r1, [r7, #11]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	47a0      	blx	r4
 8009e20:	6178      	str	r0, [r7, #20]

  return ret;
 8009e22:	697b      	ldr	r3, [r7, #20]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd90      	pop	{r4, r7, pc}

08009e2c <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8009e38:	f107 0208 	add.w	r2, r7, #8
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	2110      	movs	r1, #16
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff ffc3 	bl	8009dcc <lsm6dsox_read_reg>
 8009e46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10f      	bne.n	8009e6e <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	7a3b      	ldrb	r3, [r7, #8]
 8009e58:	f362 0383 	bfi	r3, r2, #2, #2
 8009e5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8009e5e:	f107 0208 	add.w	r2, r7, #8
 8009e62:	2301      	movs	r3, #1
 8009e64:	2110      	movs	r1, #16
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff ffc8 	bl	8009dfc <lsm6dsox_write_reg>
 8009e6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <lsm6dsox_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t *val)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8009e82:	f107 0208 	add.w	r2, r7, #8
 8009e86:	2301      	movs	r3, #1
 8009e88:	2110      	movs	r1, #16
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff ff9e 	bl	8009dcc <lsm6dsox_read_reg>
 8009e90:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8009e92:	7a3b      	ldrb	r3, [r7, #8]
 8009e94:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d81a      	bhi.n	8009ed4 <lsm6dsox_xl_full_scale_get+0x5c>
 8009e9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <lsm6dsox_xl_full_scale_get+0x2c>)
 8009ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea4:	08009eb5 	.word	0x08009eb5
 8009ea8:	08009ebd 	.word	0x08009ebd
 8009eac:	08009ec5 	.word	0x08009ec5
 8009eb0:	08009ecd 	.word	0x08009ecd
  {
    case LSM6DSOX_2g:
      *val = LSM6DSOX_2g;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
      break;
 8009eba:	e00f      	b.n	8009edc <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_16g:
      *val = LSM6DSOX_16g;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	701a      	strb	r2, [r3, #0]
      break;
 8009ec2:	e00b      	b.n	8009edc <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_4g:
      *val = LSM6DSOX_4g;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	701a      	strb	r2, [r3, #0]
      break;
 8009eca:	e007      	b.n	8009edc <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_8g:
      *val = LSM6DSOX_8g;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2203      	movs	r2, #3
 8009ed0:	701a      	strb	r2, [r3, #0]
      break;
 8009ed2:	e003      	b.n	8009edc <lsm6dsox_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSOX_2g;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
      break;
 8009eda:	bf00      	nop
  }

  return ret;
 8009edc:	68fb      	ldr	r3, [r7, #12]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop

08009ee8 <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 8009ef4:	78fb      	ldrb	r3, [r7, #3]
 8009ef6:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8009ef8:	f107 0314 	add.w	r3, r7, #20
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 ffb2 	bl	800ae68 <lsm6dsox_fsm_enable_get>
 8009f04:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 80c4 	bne.w	800a096 <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8009f0e:	7d3b      	ldrb	r3, [r7, #20]
 8009f10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009f14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8009f16:	7d3b      	ldrb	r3, [r7, #20]
 8009f18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009f1c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8009f22:	7d3b      	ldrb	r3, [r7, #20]
 8009f24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8009f2e:	7d3b      	ldrb	r3, [r7, #20]
 8009f30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009f34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8009f36:	4313      	orrs	r3, r2
 8009f38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8009f3a:	7d3b      	ldrb	r3, [r7, #20]
 8009f3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009f40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8009f42:	4313      	orrs	r3, r2
 8009f44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8009f46:	7d3b      	ldrb	r3, [r7, #20]
 8009f48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009f4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8009f52:	7d3b      	ldrb	r3, [r7, #20]
 8009f54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009f58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8009f5e:	7d3b      	ldrb	r3, [r7, #20]
 8009f60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009f64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8009f66:	4313      	orrs	r3, r2
 8009f68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8009f6a:	7d7b      	ldrb	r3, [r7, #21]
 8009f6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009f70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8009f72:	4313      	orrs	r3, r2
 8009f74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8009f76:	7d7b      	ldrb	r3, [r7, #21]
 8009f78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009f7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8009f82:	7d7b      	ldrb	r3, [r7, #21]
 8009f84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8009f8e:	7d7b      	ldrb	r3, [r7, #21]
 8009f90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009f94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8009f96:	4313      	orrs	r3, r2
 8009f98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8009f9a:	7d7b      	ldrb	r3, [r7, #21]
 8009f9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009fa0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8009fa6:	7d7b      	ldrb	r3, [r7, #21]
 8009fa8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009fac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8009fb2:	7d7b      	ldrb	r3, [r7, #21]
 8009fb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009fb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8009fbe:	7d7b      	ldrb	r3, [r7, #21]
 8009fc0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009fc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d163      	bne.n	800a096 <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8009fce:	f107 0313 	add.w	r3, r7, #19
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 ff69 	bl	800aeac <lsm6dsox_fsm_data_rate_get>
 8009fda:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d159      	bne.n	800a096 <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8009fe2:	7cfb      	ldrb	r3, [r7, #19]
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d853      	bhi.n	800a090 <lsm6dsox_xl_data_rate_set+0x1a8>
 8009fe8:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <lsm6dsox_xl_data_rate_set+0x108>)
 8009fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fee:	bf00      	nop
 8009ff0:	0800a001 	.word	0x0800a001
 8009ff4:	0800a013 	.word	0x0800a013
 8009ff8:	0800a031 	.word	0x0800a031
 8009ffc:	0800a05b 	.word	0x0800a05b
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 800a006:	2301      	movs	r3, #1
 800a008:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a00a:	e045      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	77fb      	strb	r3, [r7, #31]
            break;
 800a010:	e042      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800a018:	2302      	movs	r3, #2
 800a01a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a01c:	e03c      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d102      	bne.n	800a02a <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800a024:	2302      	movs	r3, #2
 800a026:	77fb      	strb	r3, [r7, #31]
            break;
 800a028:	e036      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	77fb      	strb	r3, [r7, #31]
            break;
 800a02e:	e033      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d102      	bne.n	800a03c <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800a036:	2303      	movs	r3, #3
 800a038:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a03a:	e02d      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d102      	bne.n	800a048 <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800a042:	2303      	movs	r3, #3
 800a044:	77fb      	strb	r3, [r7, #31]
            break;
 800a046:	e027      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d102      	bne.n	800a054 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800a04e:	2303      	movs	r3, #3
 800a050:	77fb      	strb	r3, [r7, #31]
            break;
 800a052:	e021      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	77fb      	strb	r3, [r7, #31]
            break;
 800a058:	e01e      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a060:	2304      	movs	r3, #4
 800a062:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a064:	e018      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d102      	bne.n	800a072 <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a06c:	2304      	movs	r3, #4
 800a06e:	77fb      	strb	r3, [r7, #31]
            break;
 800a070:	e012      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800a072:	78fb      	ldrb	r3, [r7, #3]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d102      	bne.n	800a07e <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a078:	2304      	movs	r3, #4
 800a07a:	77fb      	strb	r3, [r7, #31]
            break;
 800a07c:	e00c      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	2b03      	cmp	r3, #3
 800a082:	d102      	bne.n	800a08a <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a084:	2304      	movs	r3, #4
 800a086:	77fb      	strb	r3, [r7, #31]
            break;
 800a088:	e006      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	77fb      	strb	r3, [r7, #31]
            break;
 800a08e:	e003      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	77fb      	strb	r3, [r7, #31]
            break;
 800a094:	e000      	b.n	800a098 <lsm6dsox_xl_data_rate_set+0x1b0>
        }
      }
 800a096:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 800a098:	7c3b      	ldrb	r3, [r7, #16]
 800a09a:	f36f 03c3 	bfc	r3, #3, #1
 800a09e:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d16f      	bne.n	800a186 <lsm6dsox_xl_data_rate_set+0x29e>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 800a0a6:	f107 0310 	add.w	r3, r7, #16
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f002 fc8f 	bl	800c9d0 <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 800a0b2:	7c3b      	ldrb	r3, [r7, #16]
 800a0b4:	f003 0308 	and.w	r3, r3, #8
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d063      	beq.n	800a186 <lsm6dsox_xl_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 800a0be:	f107 030f 	add.w	r3, r7, #15
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 ff39 	bl	800af3c <lsm6dsox_mlc_data_rate_get>
 800a0ca:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d159      	bne.n	800a186 <lsm6dsox_xl_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d853      	bhi.n	800a180 <lsm6dsox_xl_data_rate_set+0x298>
 800a0d8:	a201      	add	r2, pc, #4	; (adr r2, 800a0e0 <lsm6dsox_xl_data_rate_set+0x1f8>)
 800a0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0de:	bf00      	nop
 800a0e0:	0800a0f1 	.word	0x0800a0f1
 800a0e4:	0800a103 	.word	0x0800a103
 800a0e8:	0800a121 	.word	0x0800a121
 800a0ec:	0800a14b 	.word	0x0800a14b
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d102      	bne.n	800a0fc <lsm6dsox_xl_data_rate_set+0x214>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a0fa:	e045      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	77fb      	strb	r3, [r7, #31]
            break;
 800a100:	e042      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a102:	78fb      	ldrb	r3, [r7, #3]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <lsm6dsox_xl_data_rate_set+0x226>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800a108:	2302      	movs	r3, #2
 800a10a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a10c:	e03c      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d102      	bne.n	800a11a <lsm6dsox_xl_data_rate_set+0x232>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800a114:	2302      	movs	r3, #2
 800a116:	77fb      	strb	r3, [r7, #31]
            break;
 800a118:	e036      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	77fb      	strb	r3, [r7, #31]
            break;
 800a11e:	e033      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d102      	bne.n	800a12c <lsm6dsox_xl_data_rate_set+0x244>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800a126:	2303      	movs	r3, #3
 800a128:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a12a:	e02d      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d102      	bne.n	800a138 <lsm6dsox_xl_data_rate_set+0x250>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800a132:	2303      	movs	r3, #3
 800a134:	77fb      	strb	r3, [r7, #31]
            break;
 800a136:	e027      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800a138:	78fb      	ldrb	r3, [r7, #3]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d102      	bne.n	800a144 <lsm6dsox_xl_data_rate_set+0x25c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800a13e:	2303      	movs	r3, #3
 800a140:	77fb      	strb	r3, [r7, #31]
            break;
 800a142:	e021      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	77fb      	strb	r3, [r7, #31]
            break;
 800a148:	e01e      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <lsm6dsox_xl_data_rate_set+0x26e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a150:	2304      	movs	r3, #4
 800a152:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800a154:	e018      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800a156:	78fb      	ldrb	r3, [r7, #3]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d102      	bne.n	800a162 <lsm6dsox_xl_data_rate_set+0x27a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a15c:	2304      	movs	r3, #4
 800a15e:	77fb      	strb	r3, [r7, #31]
            break;
 800a160:	e012      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	2b02      	cmp	r3, #2
 800a166:	d102      	bne.n	800a16e <lsm6dsox_xl_data_rate_set+0x286>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a168:	2304      	movs	r3, #4
 800a16a:	77fb      	strb	r3, [r7, #31]
            break;
 800a16c:	e00c      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	2b03      	cmp	r3, #3
 800a172:	d102      	bne.n	800a17a <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800a174:	2304      	movs	r3, #4
 800a176:	77fb      	strb	r3, [r7, #31]
            break;
 800a178:	e006      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 800a17a:	78fb      	ldrb	r3, [r7, #3]
 800a17c:	77fb      	strb	r3, [r7, #31]
            break;
 800a17e:	e003      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>

          default:
            odr_xl = val;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	77fb      	strb	r3, [r7, #31]
            break;
 800a184:	e000      	b.n	800a188 <lsm6dsox_xl_data_rate_set+0x2a0>
        }
      }
 800a186:	bf00      	nop
    }
  }

  if (ret == 0)
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d107      	bne.n	800a19e <lsm6dsox_xl_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800a18e:	f107 020c 	add.w	r2, r7, #12
 800a192:	2301      	movs	r3, #1
 800a194:	2110      	movs	r1, #16
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff fe18 	bl	8009dcc <lsm6dsox_read_reg>
 800a19c:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10f      	bne.n	800a1c4 <lsm6dsox_xl_data_rate_set+0x2dc>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 800a1a4:	7ffb      	ldrb	r3, [r7, #31]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	7b3b      	ldrb	r3, [r7, #12]
 800a1ae:	f362 1307 	bfi	r3, r2, #4, #4
 800a1b2:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800a1b4:	f107 020c 	add.w	r2, r7, #12
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	2110      	movs	r1, #16
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff fe1d 	bl	8009dfc <lsm6dsox_write_reg>
 800a1c2:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop

0800a1d0 <lsm6dsox_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t *val)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800a1da:	f107 0208 	add.w	r2, r7, #8
 800a1de:	2301      	movs	r3, #1
 800a1e0:	2110      	movs	r1, #16
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff fdf2 	bl	8009dcc <lsm6dsox_read_reg>
 800a1e8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800a1ea:	7a3b      	ldrb	r3, [r7, #8]
 800a1ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b0b      	cmp	r3, #11
 800a1f4:	d84a      	bhi.n	800a28c <lsm6dsox_xl_data_rate_get+0xbc>
 800a1f6:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <lsm6dsox_xl_data_rate_get+0x2c>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a22d 	.word	0x0800a22d
 800a200:	0800a235 	.word	0x0800a235
 800a204:	0800a23d 	.word	0x0800a23d
 800a208:	0800a245 	.word	0x0800a245
 800a20c:	0800a24d 	.word	0x0800a24d
 800a210:	0800a255 	.word	0x0800a255
 800a214:	0800a25d 	.word	0x0800a25d
 800a218:	0800a265 	.word	0x0800a265
 800a21c:	0800a26d 	.word	0x0800a26d
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a27d 	.word	0x0800a27d
 800a228:	0800a285 	.word	0x0800a285
  {
    case LSM6DSOX_XL_ODR_OFF:
      *val = LSM6DSOX_XL_ODR_OFF;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2200      	movs	r2, #0
 800a230:	701a      	strb	r2, [r3, #0]
      break;
 800a232:	e02f      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_12Hz5:
      *val = LSM6DSOX_XL_ODR_12Hz5;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2201      	movs	r2, #1
 800a238:	701a      	strb	r2, [r3, #0]
      break;
 800a23a:	e02b      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_26Hz:
      *val = LSM6DSOX_XL_ODR_26Hz;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2202      	movs	r2, #2
 800a240:	701a      	strb	r2, [r3, #0]
      break;
 800a242:	e027      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_52Hz:
      *val = LSM6DSOX_XL_ODR_52Hz;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2203      	movs	r2, #3
 800a248:	701a      	strb	r2, [r3, #0]
      break;
 800a24a:	e023      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_104Hz:
      *val = LSM6DSOX_XL_ODR_104Hz;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2204      	movs	r2, #4
 800a250:	701a      	strb	r2, [r3, #0]
      break;
 800a252:	e01f      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_208Hz:
      *val = LSM6DSOX_XL_ODR_208Hz;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2205      	movs	r2, #5
 800a258:	701a      	strb	r2, [r3, #0]
      break;
 800a25a:	e01b      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_417Hz:
      *val = LSM6DSOX_XL_ODR_417Hz;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2206      	movs	r2, #6
 800a260:	701a      	strb	r2, [r3, #0]
      break;
 800a262:	e017      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_833Hz:
      *val = LSM6DSOX_XL_ODR_833Hz;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2207      	movs	r2, #7
 800a268:	701a      	strb	r2, [r3, #0]
      break;
 800a26a:	e013      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1667Hz:
      *val = LSM6DSOX_XL_ODR_1667Hz;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2208      	movs	r2, #8
 800a270:	701a      	strb	r2, [r3, #0]
      break;
 800a272:	e00f      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_3333Hz:
      *val = LSM6DSOX_XL_ODR_3333Hz;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2209      	movs	r2, #9
 800a278:	701a      	strb	r2, [r3, #0]
      break;
 800a27a:	e00b      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_6667Hz:
      *val = LSM6DSOX_XL_ODR_6667Hz;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	220a      	movs	r2, #10
 800a280:	701a      	strb	r2, [r3, #0]
      break;
 800a282:	e007      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1Hz6:
      *val = LSM6DSOX_XL_ODR_1Hz6;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	220b      	movs	r2, #11
 800a288:	701a      	strb	r2, [r3, #0]
      break;
 800a28a:	e003      	b.n	800a294 <lsm6dsox_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSOX_XL_ODR_OFF;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2200      	movs	r2, #0
 800a290:	701a      	strb	r2, [r3, #0]
      break;
 800a292:	bf00      	nop
  }

  return ret;
 800a294:	68fb      	ldr	r3, [r7, #12]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop

0800a2a0 <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800a2ac:	f107 0208 	add.w	r2, r7, #8
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	2111      	movs	r1, #17
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff fd89 	bl	8009dcc <lsm6dsox_read_reg>
 800a2ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10f      	bne.n	800a2e2 <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	7a3b      	ldrb	r3, [r7, #8]
 800a2cc:	f362 0343 	bfi	r3, r2, #1, #3
 800a2d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800a2d2:	f107 0208 	add.w	r2, r7, #8
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	2111      	movs	r1, #17
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fd8e 	bl	8009dfc <lsm6dsox_write_reg>
 800a2e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <lsm6dsox_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t *val)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800a2f6:	f107 0208 	add.w	r2, r7, #8
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	2111      	movs	r1, #17
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7ff fd64 	bl	8009dcc <lsm6dsox_read_reg>
 800a304:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800a306:	7a3b      	ldrb	r3, [r7, #8]
 800a308:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b06      	cmp	r3, #6
 800a310:	d824      	bhi.n	800a35c <lsm6dsox_gy_full_scale_get+0x70>
 800a312:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <lsm6dsox_gy_full_scale_get+0x2c>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a335 	.word	0x0800a335
 800a31c:	0800a33d 	.word	0x0800a33d
 800a320:	0800a345 	.word	0x0800a345
 800a324:	0800a35d 	.word	0x0800a35d
 800a328:	0800a34d 	.word	0x0800a34d
 800a32c:	0800a35d 	.word	0x0800a35d
 800a330:	0800a355 	.word	0x0800a355
  {
    case LSM6DSOX_250dps:
      *val = LSM6DSOX_250dps;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	701a      	strb	r2, [r3, #0]
      break;
 800a33a:	e013      	b.n	800a364 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_125dps:
      *val = LSM6DSOX_125dps;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2201      	movs	r2, #1
 800a340:	701a      	strb	r2, [r3, #0]
      break;
 800a342:	e00f      	b.n	800a364 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_500dps:
      *val = LSM6DSOX_500dps;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2202      	movs	r2, #2
 800a348:	701a      	strb	r2, [r3, #0]
      break;
 800a34a:	e00b      	b.n	800a364 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_1000dps:
      *val = LSM6DSOX_1000dps;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2204      	movs	r2, #4
 800a350:	701a      	strb	r2, [r3, #0]
      break;
 800a352:	e007      	b.n	800a364 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_2000dps:
      *val = LSM6DSOX_2000dps;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2206      	movs	r2, #6
 800a358:	701a      	strb	r2, [r3, #0]
      break;
 800a35a:	e003      	b.n	800a364 <lsm6dsox_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSOX_250dps;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]
      break;
 800a362:	bf00      	nop
  }

  return ret;
 800a364:	68fb      	ldr	r3, [r7, #12]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop

0800a370 <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 800a380:	f107 0314 	add.w	r3, r7, #20
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fd6e 	bl	800ae68 <lsm6dsox_fsm_enable_get>
 800a38c:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 80c4 	bne.w	800a51e <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800a396:	7d3b      	ldrb	r3, [r7, #20]
 800a398:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a39c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800a39e:	7d3b      	ldrb	r3, [r7, #20]
 800a3a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a3a4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800a3aa:	7d3b      	ldrb	r3, [r7, #20]
 800a3ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a3b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800a3b6:	7d3b      	ldrb	r3, [r7, #20]
 800a3b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a3bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800a3c2:	7d3b      	ldrb	r3, [r7, #20]
 800a3c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a3c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800a3ce:	7d3b      	ldrb	r3, [r7, #20]
 800a3d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a3d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800a3da:	7d3b      	ldrb	r3, [r7, #20]
 800a3dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a3e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800a3e6:	7d3b      	ldrb	r3, [r7, #20]
 800a3e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a3ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800a3f2:	7d7b      	ldrb	r3, [r7, #21]
 800a3f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a3f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800a3fe:	7d7b      	ldrb	r3, [r7, #21]
 800a400:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800a406:	4313      	orrs	r3, r2
 800a408:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800a40a:	7d7b      	ldrb	r3, [r7, #21]
 800a40c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a410:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800a412:	4313      	orrs	r3, r2
 800a414:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800a416:	7d7b      	ldrb	r3, [r7, #21]
 800a418:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a41c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800a41e:	4313      	orrs	r3, r2
 800a420:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800a422:	7d7b      	ldrb	r3, [r7, #21]
 800a424:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a428:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800a42a:	4313      	orrs	r3, r2
 800a42c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800a42e:	7d7b      	ldrb	r3, [r7, #21]
 800a430:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a434:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800a436:	4313      	orrs	r3, r2
 800a438:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800a43a:	7d7b      	ldrb	r3, [r7, #21]
 800a43c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a440:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800a442:	4313      	orrs	r3, r2
 800a444:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800a446:	7d7b      	ldrb	r3, [r7, #21]
 800a448:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a44c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800a44e:	4313      	orrs	r3, r2
 800a450:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800a452:	2b01      	cmp	r3, #1
 800a454:	d163      	bne.n	800a51e <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 800a456:	f107 0313 	add.w	r3, r7, #19
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fd25 	bl	800aeac <lsm6dsox_fsm_data_rate_get>
 800a462:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d159      	bne.n	800a51e <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800a46a:	7cfb      	ldrb	r3, [r7, #19]
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d853      	bhi.n	800a518 <lsm6dsox_gy_data_rate_set+0x1a8>
 800a470:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <lsm6dsox_gy_data_rate_set+0x108>)
 800a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a476:	bf00      	nop
 800a478:	0800a489 	.word	0x0800a489
 800a47c:	0800a49b 	.word	0x0800a49b
 800a480:	0800a4b9 	.word	0x0800a4b9
 800a484:	0800a4e3 	.word	0x0800a4e3
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800a48e:	2301      	movs	r3, #1
 800a490:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a492:	e045      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	77fb      	strb	r3, [r7, #31]
            break;
 800a498:	e042      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a4a4:	e03c      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d102      	bne.n	800a4b2 <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	77fb      	strb	r3, [r7, #31]
            break;
 800a4b0:	e036      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	77fb      	strb	r3, [r7, #31]
            break;
 800a4b6:	e033      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d102      	bne.n	800a4c4 <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a4c2:	e02d      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d102      	bne.n	800a4d0 <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	77fb      	strb	r3, [r7, #31]
            break;
 800a4ce:	e027      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d102      	bne.n	800a4dc <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	77fb      	strb	r3, [r7, #31]
            break;
 800a4da:	e021      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800a4dc:	78fb      	ldrb	r3, [r7, #3]
 800a4de:	77fb      	strb	r3, [r7, #31]
            break;
 800a4e0:	e01e      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a4ec:	e018      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d102      	bne.n	800a4fa <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	77fb      	strb	r3, [r7, #31]
            break;
 800a4f8:	e012      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d102      	bne.n	800a506 <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a500:	2304      	movs	r3, #4
 800a502:	77fb      	strb	r3, [r7, #31]
            break;
 800a504:	e00c      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d102      	bne.n	800a512 <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a50c:	2304      	movs	r3, #4
 800a50e:	77fb      	strb	r3, [r7, #31]
            break;
 800a510:	e006      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	77fb      	strb	r3, [r7, #31]
            break;
 800a516:	e003      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	77fb      	strb	r3, [r7, #31]
            break;
 800a51c:	e000      	b.n	800a520 <lsm6dsox_gy_data_rate_set+0x1b0>
        }
      }
 800a51e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 800a520:	7c3b      	ldrb	r3, [r7, #16]
 800a522:	f36f 03c3 	bfc	r3, #3, #1
 800a526:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d16f      	bne.n	800a60e <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f002 fa4b 	bl	800c9d0 <lsm6dsox_embedded_sens_get>
 800a53a:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 800a53c:	7c3b      	ldrb	r3, [r7, #16]
 800a53e:	f003 0308 	and.w	r3, r3, #8
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d062      	beq.n	800a60e <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 800a548:	f107 030f 	add.w	r3, r7, #15
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fcf4 	bl	800af3c <lsm6dsox_mlc_data_rate_get>
 800a554:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d158      	bne.n	800a60e <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d852      	bhi.n	800a608 <lsm6dsox_gy_data_rate_set+0x298>
 800a562:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <lsm6dsox_gy_data_rate_set+0x1f8>)
 800a564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a568:	0800a579 	.word	0x0800a579
 800a56c:	0800a58b 	.word	0x0800a58b
 800a570:	0800a5a9 	.word	0x0800a5a9
 800a574:	0800a5d3 	.word	0x0800a5d3
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d102      	bne.n	800a584 <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800a57e:	2301      	movs	r3, #1
 800a580:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a582:	e045      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	77fb      	strb	r3, [r7, #31]
            break;
 800a588:	e042      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800a590:	2302      	movs	r3, #2
 800a592:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a594:	e03c      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d102      	bne.n	800a5a2 <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800a59c:	2302      	movs	r3, #2
 800a59e:	77fb      	strb	r3, [r7, #31]
            break;
 800a5a0:	e036      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	77fb      	strb	r3, [r7, #31]
            break;
 800a5a6:	e033      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a5a8:	78fb      	ldrb	r3, [r7, #3]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a5b2:	e02d      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d102      	bne.n	800a5c0 <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	77fb      	strb	r3, [r7, #31]
            break;
 800a5be:	e027      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d102      	bne.n	800a5cc <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	77fb      	strb	r3, [r7, #31]
            break;
 800a5ca:	e021      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	77fb      	strb	r3, [r7, #31]
            break;
 800a5d0:	e01e      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a5d8:	2304      	movs	r3, #4
 800a5da:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800a5dc:	e018      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d102      	bne.n	800a5ea <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	77fb      	strb	r3, [r7, #31]
            break;
 800a5e8:	e012      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d102      	bne.n	800a5f6 <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a5f0:	2304      	movs	r3, #4
 800a5f2:	77fb      	strb	r3, [r7, #31]
            break;
 800a5f4:	e00c      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	2b03      	cmp	r3, #3
 800a5fa:	d102      	bne.n	800a602 <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	77fb      	strb	r3, [r7, #31]
            break;
 800a600:	e006      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	77fb      	strb	r3, [r7, #31]
            break;
 800a606:	e003      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>

          default:
            odr_gy = val;
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	77fb      	strb	r3, [r7, #31]
            break;
 800a60c:	e000      	b.n	800a610 <lsm6dsox_gy_data_rate_set+0x2a0>
        }
      }
 800a60e:	bf00      	nop
    }
  }

  if (ret == 0)
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d107      	bne.n	800a626 <lsm6dsox_gy_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800a616:	f107 020c 	add.w	r2, r7, #12
 800a61a:	2301      	movs	r3, #1
 800a61c:	2111      	movs	r1, #17
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fbd4 	bl	8009dcc <lsm6dsox_read_reg>
 800a624:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10f      	bne.n	800a64c <lsm6dsox_gy_data_rate_set+0x2dc>
  {
    reg.odr_g = (uint8_t) odr_gy;
 800a62c:	7ffb      	ldrb	r3, [r7, #31]
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	b2da      	uxtb	r2, r3
 800a634:	7b3b      	ldrb	r3, [r7, #12]
 800a636:	f362 1307 	bfi	r3, r2, #4, #4
 800a63a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800a63c:	f107 020c 	add.w	r2, r7, #12
 800a640:	2301      	movs	r3, #1
 800a642:	2111      	movs	r1, #17
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff fbd9 	bl	8009dfc <lsm6dsox_write_reg>
 800a64a:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 800a64c:	69bb      	ldr	r3, [r7, #24]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3720      	adds	r7, #32
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop

0800a658 <lsm6dsox_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t *val)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800a662:	f107 0208 	add.w	r2, r7, #8
 800a666:	2301      	movs	r3, #1
 800a668:	2111      	movs	r1, #17
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff fbae 	bl	8009dcc <lsm6dsox_read_reg>
 800a670:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800a672:	7a3b      	ldrb	r3, [r7, #8]
 800a674:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b0a      	cmp	r3, #10
 800a67c:	d844      	bhi.n	800a708 <lsm6dsox_gy_data_rate_get+0xb0>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <lsm6dsox_gy_data_rate_get+0x2c>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a6b1 	.word	0x0800a6b1
 800a688:	0800a6b9 	.word	0x0800a6b9
 800a68c:	0800a6c1 	.word	0x0800a6c1
 800a690:	0800a6c9 	.word	0x0800a6c9
 800a694:	0800a6d1 	.word	0x0800a6d1
 800a698:	0800a6d9 	.word	0x0800a6d9
 800a69c:	0800a6e1 	.word	0x0800a6e1
 800a6a0:	0800a6e9 	.word	0x0800a6e9
 800a6a4:	0800a6f1 	.word	0x0800a6f1
 800a6a8:	0800a6f9 	.word	0x0800a6f9
 800a6ac:	0800a701 	.word	0x0800a701
  {
    case LSM6DSOX_GY_ODR_OFF:
      *val = LSM6DSOX_GY_ODR_OFF;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
      break;
 800a6b6:	e02b      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_12Hz5:
      *val = LSM6DSOX_GY_ODR_12Hz5;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	701a      	strb	r2, [r3, #0]
      break;
 800a6be:	e027      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_26Hz:
      *val = LSM6DSOX_GY_ODR_26Hz;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	701a      	strb	r2, [r3, #0]
      break;
 800a6c6:	e023      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_52Hz:
      *val = LSM6DSOX_GY_ODR_52Hz;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	701a      	strb	r2, [r3, #0]
      break;
 800a6ce:	e01f      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_104Hz:
      *val = LSM6DSOX_GY_ODR_104Hz;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2204      	movs	r2, #4
 800a6d4:	701a      	strb	r2, [r3, #0]
      break;
 800a6d6:	e01b      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_208Hz:
      *val = LSM6DSOX_GY_ODR_208Hz;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2205      	movs	r2, #5
 800a6dc:	701a      	strb	r2, [r3, #0]
      break;
 800a6de:	e017      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_417Hz:
      *val = LSM6DSOX_GY_ODR_417Hz;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2206      	movs	r2, #6
 800a6e4:	701a      	strb	r2, [r3, #0]
      break;
 800a6e6:	e013      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_833Hz:
      *val = LSM6DSOX_GY_ODR_833Hz;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2207      	movs	r2, #7
 800a6ec:	701a      	strb	r2, [r3, #0]
      break;
 800a6ee:	e00f      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_1667Hz:
      *val = LSM6DSOX_GY_ODR_1667Hz;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	701a      	strb	r2, [r3, #0]
      break;
 800a6f6:	e00b      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_3333Hz:
      *val = LSM6DSOX_GY_ODR_3333Hz;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2209      	movs	r2, #9
 800a6fc:	701a      	strb	r2, [r3, #0]
      break;
 800a6fe:	e007      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_6667Hz:
      *val = LSM6DSOX_GY_ODR_6667Hz;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	220a      	movs	r2, #10
 800a704:	701a      	strb	r2, [r3, #0]
      break;
 800a706:	e003      	b.n	800a710 <lsm6dsox_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSOX_GY_ODR_OFF;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	701a      	strb	r2, [r3, #0]
      break;
 800a70e:	bf00      	nop
  }

  return ret;
 800a710:	68fb      	ldr	r3, [r7, #12]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop

0800a71c <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800a728:	f107 0208 	add.w	r2, r7, #8
 800a72c:	2301      	movs	r3, #1
 800a72e:	2112      	movs	r1, #18
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff fb4b 	bl	8009dcc <lsm6dsox_read_reg>
 800a736:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10f      	bne.n	800a75e <lsm6dsox_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	b2da      	uxtb	r2, r3
 800a746:	7a3b      	ldrb	r3, [r7, #8]
 800a748:	f362 1386 	bfi	r3, r2, #6, #1
 800a74c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800a74e:	f107 0208 	add.w	r2, r7, #8
 800a752:	2301      	movs	r3, #1
 800a754:	2112      	movs	r1, #18
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7ff fb50 	bl	8009dfc <lsm6dsox_write_reg>
 800a75c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a75e:	68fb      	ldr	r3, [r7, #12]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 800a772:	f107 020c 	add.w	r2, r7, #12
 800a776:	2306      	movs	r3, #6
 800a778:	2122      	movs	r1, #34	; 0x22
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff fb26 	bl	8009dcc <lsm6dsox_read_reg>
 800a780:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a782:	7b7b      	ldrb	r3, [r7, #13]
 800a784:	b21a      	sxth	r2, r3
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a790:	b29b      	uxth	r3, r3
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	b29a      	uxth	r2, r3
 800a796:	7b3b      	ldrb	r3, [r7, #12]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	b21a      	sxth	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a7a4:	7bfa      	ldrb	r2, [r7, #15]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	b212      	sxth	r2, r2
 800a7ac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	3302      	adds	r3, #2
 800a7b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	4413      	add	r3, r2
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	b212      	sxth	r2, r2
 800a7ca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a7cc:	7c7a      	ldrb	r2, [r7, #17]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	b212      	sxth	r2, r2
 800a7d4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	021b      	lsls	r3, r3, #8
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	7c3b      	ldrb	r3, [r7, #16]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	b212      	sxth	r2, r2
 800a7f2:	801a      	strh	r2, [r3, #0]

  return ret;
 800a7f4:	697b      	ldr	r3, [r7, #20]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 800a808:	f107 020c 	add.w	r2, r7, #12
 800a80c:	2306      	movs	r3, #6
 800a80e:	2128      	movs	r1, #40	; 0x28
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fadb 	bl	8009dcc <lsm6dsox_read_reg>
 800a816:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a818:	7b7b      	ldrb	r3, [r7, #13]
 800a81a:	b21a      	sxth	r2, r3
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a826:	b29b      	uxth	r3, r3
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	7b3b      	ldrb	r3, [r7, #12]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	4413      	add	r3, r2
 800a832:	b29b      	uxth	r3, r3
 800a834:	b21a      	sxth	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a83a:	7bfa      	ldrb	r2, [r7, #15]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	3302      	adds	r3, #2
 800a840:	b212      	sxth	r2, r2
 800a842:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	3302      	adds	r3, #2
 800a848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	021b      	lsls	r3, r3, #8
 800a850:	b29a      	uxth	r2, r3
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	b29b      	uxth	r3, r3
 800a856:	4413      	add	r3, r2
 800a858:	b29a      	uxth	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	3302      	adds	r3, #2
 800a85e:	b212      	sxth	r2, r2
 800a860:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a862:	7c7a      	ldrb	r2, [r7, #17]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	3304      	adds	r3, #4
 800a868:	b212      	sxth	r2, r2
 800a86a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	3304      	adds	r3, #4
 800a870:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a874:	b29b      	uxth	r3, r3
 800a876:	021b      	lsls	r3, r3, #8
 800a878:	b29a      	uxth	r2, r3
 800a87a:	7c3b      	ldrb	r3, [r7, #16]
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	4413      	add	r3, r2
 800a880:	b29a      	uxth	r2, r3
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	3304      	adds	r3, #4
 800a886:	b212      	sxth	r2, r2
 800a888:	801a      	strh	r2, [r3, #0]

  return ret;
 800a88a:	697b      	ldr	r3, [r7, #20]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <lsm6dsox_steps_reset>:
  * @param  ctx      read / write interface definitions
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_steps_reset(stmdev_ctx_t *ctx)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  lsm6dsox_emb_func_src_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800a89c:	2102      	movs	r1, #2
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f828 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800a8a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d107      	bne.n	800a8bc <lsm6dsox_steps_reset+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_SRC, (uint8_t *)&reg, 1);
 800a8ac:	f107 0208 	add.w	r2, r7, #8
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	2164      	movs	r1, #100	; 0x64
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff fa89 	bl	8009dcc <lsm6dsox_read_reg>
 800a8ba:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10b      	bne.n	800a8da <lsm6dsox_steps_reset+0x46>
  {
    reg.pedo_rst_step = PROPERTY_ENABLE;
 800a8c2:	7a3b      	ldrb	r3, [r7, #8]
 800a8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_SRC, (uint8_t *)&reg, 1);
 800a8ca:	f107 0208 	add.w	r2, r7, #8
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	2164      	movs	r1, #100	; 0x64
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff fa92 	bl	8009dfc <lsm6dsox_write_reg>
 800a8d8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <lsm6dsox_steps_reset+0x56>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f806 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800a8e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 800a900:	f107 0208 	add.w	r2, r7, #8
 800a904:	2301      	movs	r3, #1
 800a906:	2101      	movs	r1, #1
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff fa5f 	bl	8009dcc <lsm6dsox_read_reg>
 800a90e:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10f      	bne.n	800a936 <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	f003 0303 	and.w	r3, r3, #3
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	7a3b      	ldrb	r3, [r7, #8]
 800a920:	f362 1387 	bfi	r3, r2, #6, #2
 800a924:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 800a926:	f107 0208 	add.w	r2, r7, #8
 800a92a:	2301      	movs	r3, #1
 800a92c:	2101      	movs	r1, #1
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff fa64 	bl	8009dfc <lsm6dsox_write_reg>
 800a934:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 800a936:	68fb      	ldr	r3, [r7, #12]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <lsm6dsox_ln_pg_write_byte>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_ln_pg_write_byte(stmdev_ctx_t *ctx, uint16_t address,
                                  uint8_t *val)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b088      	sub	sp, #32
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	460b      	mov	r3, r1
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	817b      	strh	r3, [r7, #10]
  lsm6dsox_page_rw_t page_rw;
  lsm6dsox_page_sel_t page_sel;
  lsm6dsox_page_address_t page_address;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800a94e:	2102      	movs	r1, #2
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7ff ffcf 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800a956:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d107      	bne.n	800a96e <lsm6dsox_ln_pg_write_byte+0x2e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800a95e:	f107 0218 	add.w	r2, r7, #24
 800a962:	2301      	movs	r3, #1
 800a964:	2117      	movs	r1, #23
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff fa30 	bl	8009dcc <lsm6dsox_read_reg>
 800a96c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10c      	bne.n	800a98e <lsm6dsox_ln_pg_write_byte+0x4e>
  {
    page_rw.page_rw = 0x02; /* page_write enable */
 800a974:	7e3b      	ldrb	r3, [r7, #24]
 800a976:	2202      	movs	r2, #2
 800a978:	f362 1346 	bfi	r3, r2, #5, #2
 800a97c:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800a97e:	f107 0218 	add.w	r2, r7, #24
 800a982:	2301      	movs	r3, #1
 800a984:	2117      	movs	r1, #23
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fa38 	bl	8009dfc <lsm6dsox_write_reg>
 800a98c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d107      	bne.n	800a9a4 <lsm6dsox_ln_pg_write_byte+0x64>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_SEL, (uint8_t *) &page_sel, 1);
 800a994:	f107 0214 	add.w	r2, r7, #20
 800a998:	2301      	movs	r3, #1
 800a99a:	2102      	movs	r1, #2
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fa15 	bl	8009dcc <lsm6dsox_read_reg>
 800a9a2:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d116      	bne.n	800a9d8 <lsm6dsox_ln_pg_write_byte+0x98>
  {
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 800a9aa:	897b      	ldrh	r3, [r7, #10]
 800a9ac:	0a1b      	lsrs	r3, r3, #8
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	f003 030f 	and.w	r3, r3, #15
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	7d3b      	ldrb	r3, [r7, #20]
 800a9b8:	f362 1307 	bfi	r3, r2, #4, #4
 800a9bc:	753b      	strb	r3, [r7, #20]
    page_sel.not_used_01 = 1;
 800a9be:	7d3b      	ldrb	r3, [r7, #20]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f362 0303 	bfi	r3, r2, #0, #4
 800a9c6:	753b      	strb	r3, [r7, #20]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_SEL,
 800a9c8:	f107 0214 	add.w	r2, r7, #20
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f7ff fa13 	bl	8009dfc <lsm6dsox_write_reg>
 800a9d6:	61f8      	str	r0, [r7, #28]
                             (uint8_t *) &page_sel, 1);
  }

  if (ret == 0)
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10a      	bne.n	800a9f4 <lsm6dsox_ln_pg_write_byte+0xb4>
  {
    page_address.page_addr = (uint8_t)address & 0xFFU;
 800a9de:	897b      	ldrh	r3, [r7, #10]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_ADDRESS,
 800a9e4:	f107 0210 	add.w	r2, r7, #16
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	2108      	movs	r1, #8
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f7ff fa05 	bl	8009dfc <lsm6dsox_write_reg>
 800a9f2:	61f8      	str	r0, [r7, #28]
                             (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d106      	bne.n	800aa08 <lsm6dsox_ln_pg_write_byte+0xc8>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_VALUE, val, 1);
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	2109      	movs	r1, #9
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f7ff f9fb 	bl	8009dfc <lsm6dsox_write_reg>
 800aa06:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d107      	bne.n	800aa1e <lsm6dsox_ln_pg_write_byte+0xde>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800aa0e:	f107 0218 	add.w	r2, r7, #24
 800aa12:	2301      	movs	r3, #1
 800aa14:	2117      	movs	r1, #23
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7ff f9d8 	bl	8009dcc <lsm6dsox_read_reg>
 800aa1c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10b      	bne.n	800aa3c <lsm6dsox_ln_pg_write_byte+0xfc>
  {
    page_rw.page_rw = 0x00; /* page_write disable */
 800aa24:	7e3b      	ldrb	r3, [r7, #24]
 800aa26:	f36f 1346 	bfc	r3, #5, #2
 800aa2a:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800aa2c:	f107 0218 	add.w	r2, r7, #24
 800aa30:	2301      	movs	r3, #1
 800aa32:	2117      	movs	r1, #23
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f7ff f9e1 	bl	8009dfc <lsm6dsox_write_reg>
 800aa3a:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <lsm6dsox_ln_pg_write_byte+0x10c>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800aa42:	2100      	movs	r1, #0
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f7ff ff55 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800aa4a:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3720      	adds	r7, #32
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <lsm6dsox_ln_pg_read_byte>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_ln_pg_read_byte(stmdev_ctx_t *ctx, uint16_t address,
                                 uint8_t *val)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b088      	sub	sp, #32
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	817b      	strh	r3, [r7, #10]
  lsm6dsox_page_rw_t page_rw;
  lsm6dsox_page_sel_t page_sel;
  lsm6dsox_page_address_t  page_address;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800aa64:	2102      	movs	r1, #2
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7ff ff44 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800aa6c:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d107      	bne.n	800aa84 <lsm6dsox_ln_pg_read_byte+0x2e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800aa74:	f107 0218 	add.w	r2, r7, #24
 800aa78:	2301      	movs	r3, #1
 800aa7a:	2117      	movs	r1, #23
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff f9a5 	bl	8009dcc <lsm6dsox_read_reg>
 800aa82:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10c      	bne.n	800aaa4 <lsm6dsox_ln_pg_read_byte+0x4e>
  {
    page_rw.page_rw = 0x01; /* page_read enable*/
 800aa8a:	7e3b      	ldrb	r3, [r7, #24]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f362 1346 	bfi	r3, r2, #5, #2
 800aa92:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800aa94:	f107 0218 	add.w	r2, r7, #24
 800aa98:	2301      	movs	r3, #1
 800aa9a:	2117      	movs	r1, #23
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff f9ad 	bl	8009dfc <lsm6dsox_write_reg>
 800aaa2:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d107      	bne.n	800aaba <lsm6dsox_ln_pg_read_byte+0x64>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_SEL, (uint8_t *) &page_sel, 1);
 800aaaa:	f107 0214 	add.w	r2, r7, #20
 800aaae:	2301      	movs	r3, #1
 800aab0:	2102      	movs	r1, #2
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7ff f98a 	bl	8009dcc <lsm6dsox_read_reg>
 800aab8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d116      	bne.n	800aaee <lsm6dsox_ln_pg_read_byte+0x98>
  {
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 800aac0:	897b      	ldrh	r3, [r7, #10]
 800aac2:	0a1b      	lsrs	r3, r3, #8
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	f003 030f 	and.w	r3, r3, #15
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	7d3b      	ldrb	r3, [r7, #20]
 800aace:	f362 1307 	bfi	r3, r2, #4, #4
 800aad2:	753b      	strb	r3, [r7, #20]
    page_sel.not_used_01 = 1;
 800aad4:	7d3b      	ldrb	r3, [r7, #20]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f362 0303 	bfi	r3, r2, #0, #4
 800aadc:	753b      	strb	r3, [r7, #20]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_SEL,
 800aade:	f107 0214 	add.w	r2, r7, #20
 800aae2:	2301      	movs	r3, #1
 800aae4:	2102      	movs	r1, #2
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff f988 	bl	8009dfc <lsm6dsox_write_reg>
 800aaec:	61f8      	str	r0, [r7, #28]
                             (uint8_t *) &page_sel, 1);
  }

  if (ret == 0)
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <lsm6dsox_ln_pg_read_byte+0xb4>
  {
    page_address.page_addr = (uint8_t)address & 0x00FFU;
 800aaf4:	897b      	ldrh	r3, [r7, #10]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_ADDRESS,
 800aafa:	f107 0210 	add.w	r2, r7, #16
 800aafe:	2301      	movs	r3, #1
 800ab00:	2108      	movs	r1, #8
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff f97a 	bl	8009dfc <lsm6dsox_write_reg>
 800ab08:	61f8      	str	r0, [r7, #28]
                             (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <lsm6dsox_ln_pg_read_byte+0xc8>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_VALUE, val, 1);
 800ab10:	2301      	movs	r3, #1
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	2109      	movs	r1, #9
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f7ff f958 	bl	8009dcc <lsm6dsox_read_reg>
 800ab1c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d107      	bne.n	800ab34 <lsm6dsox_ln_pg_read_byte+0xde>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800ab24:	f107 0218 	add.w	r2, r7, #24
 800ab28:	2301      	movs	r3, #1
 800ab2a:	2117      	movs	r1, #23
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f7ff f94d 	bl	8009dcc <lsm6dsox_read_reg>
 800ab32:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10b      	bne.n	800ab52 <lsm6dsox_ln_pg_read_byte+0xfc>
  {
    page_rw.page_rw = 0x00; /* page_read disable */
 800ab3a:	7e3b      	ldrb	r3, [r7, #24]
 800ab3c:	f36f 1346 	bfc	r3, #5, #2
 800ab40:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800ab42:	f107 0218 	add.w	r2, r7, #24
 800ab46:	2301      	movs	r3, #1
 800ab48:	2117      	movs	r1, #23
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f7ff f956 	bl	8009dfc <lsm6dsox_write_reg>
 800ab50:	61f8      	str	r0, [r7, #28]
  }

  if (ret == 0)
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d104      	bne.n	800ab62 <lsm6dsox_ln_pg_read_byte+0x10c>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800ab58:	2100      	movs	r1, #0
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7ff feca 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800ab60:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800ab62:	69fb      	ldr	r3, [r7, #28]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3720      	adds	r7, #32
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 800ab76:	2301      	movs	r3, #1
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	210f      	movs	r1, #15
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7ff f925 	bl	8009dcc <lsm6dsox_read_reg>
 800ab82:	60f8      	str	r0, [r7, #12]

  return ret;
 800ab84:	68fb      	ldr	r3, [r7, #12]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <lsm6dsox_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	460b      	mov	r3, r1
 800ab98:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800ab9a:	f107 0208 	add.w	r2, r7, #8
 800ab9e:	2301      	movs	r3, #1
 800aba0:	2112      	movs	r1, #18
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff f912 	bl	8009dcc <lsm6dsox_read_reg>
 800aba8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10f      	bne.n	800abd0 <lsm6dsox_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	7a3b      	ldrb	r3, [r7, #8]
 800abba:	f362 0382 	bfi	r3, r2, #2, #1
 800abbe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800abc0:	f107 0208 	add.w	r2, r7, #8
 800abc4:	2301      	movs	r3, #1
 800abc6:	2112      	movs	r1, #18
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7ff f917 	bl	8009dfc <lsm6dsox_write_reg>
 800abce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800abd0:	68fb      	ldr	r3, [r7, #12]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b086      	sub	sp, #24
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800abe6:	f107 020c 	add.w	r2, r7, #12
 800abea:	2301      	movs	r3, #1
 800abec:	2118      	movs	r1, #24
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff f8ec 	bl	8009dcc <lsm6dsox_read_reg>
 800abf4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d111      	bne.n	800ac20 <lsm6dsox_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	09db      	lsrs	r3, r3, #7
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	7b3b      	ldrb	r3, [r7, #12]
 800ac0a:	f362 0341 	bfi	r3, r2, #1, #1
 800ac0e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800ac10:	f107 020c 	add.w	r2, r7, #12
 800ac14:	2301      	movs	r3, #1
 800ac16:	2118      	movs	r1, #24
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7ff f8ef 	bl	8009dfc <lsm6dsox_write_reg>
 800ac1e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d107      	bne.n	800ac36 <lsm6dsox_i3c_disable_set+0x5c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 800ac26:	f107 0210 	add.w	r2, r7, #16
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	2162      	movs	r1, #98	; 0x62
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff f8cc 	bl	8009dcc <lsm6dsox_read_reg>
 800ac34:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10f      	bne.n	800ac5c <lsm6dsox_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	7c3b      	ldrb	r3, [r7, #16]
 800ac46:	f362 03c4 	bfi	r3, r2, #3, #2
 800ac4a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 800ac4c:	f107 0210 	add.w	r2, r7, #16
 800ac50:	2301      	movs	r3, #1
 800ac52:	2162      	movs	r1, #98	; 0x62
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7ff f8d1 	bl	8009dfc <lsm6dsox_write_reg>
 800ac5a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800ac5c:	697b      	ldr	r3, [r7, #20]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <lsm6dsox_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_wake_up_ths_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WAKE_UP_THS, (uint8_t *)&reg, 1);
 800ac72:	f107 0208 	add.w	r2, r7, #8
 800ac76:	2301      	movs	r3, #1
 800ac78:	215b      	movs	r1, #91	; 0x5b
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff f8a6 	bl	8009dcc <lsm6dsox_read_reg>
 800ac80:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10f      	bne.n	800aca8 <lsm6dsox_wkup_threshold_set+0x42>
  {
    reg.wk_ths = val;
 800ac88:	78fb      	ldrb	r3, [r7, #3]
 800ac8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	7a3b      	ldrb	r3, [r7, #8]
 800ac92:	f362 0305 	bfi	r3, r2, #0, #6
 800ac96:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_WAKE_UP_THS, (uint8_t *)&reg, 1);
 800ac98:	f107 0208 	add.w	r2, r7, #8
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	215b      	movs	r1, #91	; 0x5b
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7ff f8ab 	bl	8009dfc <lsm6dsox_write_reg>
 800aca6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aca8:	68fb      	ldr	r3, [r7, #12]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <lsm6dsox_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_wake_up_dur_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 800acbe:	f107 0208 	add.w	r2, r7, #8
 800acc2:	2301      	movs	r3, #1
 800acc4:	215c      	movs	r1, #92	; 0x5c
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff f880 	bl	8009dcc <lsm6dsox_read_reg>
 800accc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10f      	bne.n	800acf4 <lsm6dsox_wkup_dur_set+0x42>
  {
    reg.wake_dur = val;
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	7a3b      	ldrb	r3, [r7, #8]
 800acde:	f362 1346 	bfi	r3, r2, #5, #2
 800ace2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 800ace4:	f107 0208 	add.w	r2, r7, #8
 800ace8:	2301      	movs	r3, #1
 800acea:	215c      	movs	r1, #92	; 0x5c
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff f885 	bl	8009dfc <lsm6dsox_write_reg>
 800acf2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800acf4:	68fb      	ldr	r3, [r7, #12]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <lsm6dsox_act_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_act_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsox_inact_en_t val)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_tap_cfg2_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *)&reg, 1);
 800ad0a:	f107 0208 	add.w	r2, r7, #8
 800ad0e:	2301      	movs	r3, #1
 800ad10:	2158      	movs	r1, #88	; 0x58
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff f85a 	bl	8009dcc <lsm6dsox_read_reg>
 800ad18:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10f      	bne.n	800ad40 <lsm6dsox_act_mode_set+0x42>
  {
    reg.inact_en = (uint8_t)val;
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	7a3b      	ldrb	r3, [r7, #8]
 800ad2a:	f362 1346 	bfi	r3, r2, #5, #2
 800ad2e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *)&reg, 1);
 800ad30:	f107 0208 	add.w	r2, r7, #8
 800ad34:	2301      	movs	r3, #1
 800ad36:	2158      	movs	r1, #88	; 0x58
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff f85f 	bl	8009dfc <lsm6dsox_write_reg>
 800ad3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ad40:	68fb      	ldr	r3, [r7, #12]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <lsm6dsox_act_sleep_dur_set>:
  * @param  val      change the values of sleep_dur in reg WAKE_UP_DUR
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_act_sleep_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_wake_up_dur_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 800ad56:	f107 0208 	add.w	r2, r7, #8
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	215c      	movs	r1, #92	; 0x5c
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff f834 	bl	8009dcc <lsm6dsox_read_reg>
 800ad64:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10f      	bne.n	800ad8c <lsm6dsox_act_sleep_dur_set+0x42>
  {
    reg.sleep_dur = val;
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	f003 030f 	and.w	r3, r3, #15
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	7a3b      	ldrb	r3, [r7, #8]
 800ad76:	f362 0303 	bfi	r3, r2, #0, #4
 800ad7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 800ad7c:	f107 0208 	add.w	r2, r7, #8
 800ad80:	2301      	movs	r3, #1
 800ad82:	215c      	movs	r1, #92	; 0x5c
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff f839 	bl	8009dfc <lsm6dsox_write_reg>
 800ad8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <lsm6dsox_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fifo_mode_set(stmdev_ctx_t *ctx,
                               lsm6dsox_fifo_mode_t val)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800ada2:	f107 0208 	add.w	r2, r7, #8
 800ada6:	2301      	movs	r3, #1
 800ada8:	210a      	movs	r1, #10
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff f80e 	bl	8009dcc <lsm6dsox_read_reg>
 800adb0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10f      	bne.n	800add8 <lsm6dsox_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	f003 0307 	and.w	r3, r3, #7
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	7a3b      	ldrb	r3, [r7, #8]
 800adc2:	f362 0302 	bfi	r3, r2, #0, #3
 800adc6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800adc8:	f107 0208 	add.w	r2, r7, #8
 800adcc:	2301      	movs	r3, #1
 800adce:	210a      	movs	r1, #10
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff f813 	bl	8009dfc <lsm6dsox_write_reg>
 800add6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800add8:	68fb      	ldr	r3, [r7, #12]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <lsm6dsox_pedo_sens_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pedo_sens_set(stmdev_ctx_t *ctx,
                               lsm6dsox_pedo_md_t val)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dsox_ln_pg_read_byte(ctx, LSM6DSOX_PEDO_CMD_REG,
 800adee:	f107 0308 	add.w	r3, r7, #8
 800adf2:	461a      	mov	r2, r3
 800adf4:	f240 1183 	movw	r1, #387	; 0x183
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fe2c 	bl	800aa56 <lsm6dsox_ln_pg_read_byte>
 800adfe:	60f8      	str	r0, [r7, #12]
                                 (uint8_t *)&pedo_cmd_reg);

  if (ret == 0)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d11a      	bne.n	800ae3c <lsm6dsox_pedo_sens_set+0x5a>
  {
    pedo_cmd_reg.fp_rejection_en = ((uint8_t)val & 0x10U) >> 4;
 800ae06:	78fb      	ldrb	r3, [r7, #3]
 800ae08:	091b      	lsrs	r3, r3, #4
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	7a3b      	ldrb	r3, [r7, #8]
 800ae12:	f362 0382 	bfi	r3, r2, #2, #1
 800ae16:	723b      	strb	r3, [r7, #8]
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x20U) >> 5;
 800ae18:	78fb      	ldrb	r3, [r7, #3]
 800ae1a:	095b      	lsrs	r3, r3, #5
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	7a3b      	ldrb	r3, [r7, #8]
 800ae24:	f362 0300 	bfi	r3, r2, #0, #1
 800ae28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_ln_pg_write_byte(ctx, LSM6DSOX_PEDO_CMD_REG,
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f240 1183 	movw	r1, #387	; 0x183
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff fd83 	bl	800a940 <lsm6dsox_ln_pg_write_byte>
 800ae3a:	60f8      	str	r0, [r7, #12]
                                    (uint8_t *)&pedo_cmd_reg);
  }

  return ret;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <lsm6dsox_pedo_debounce_steps_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pedo_debounce_steps_set(stmdev_ctx_t *ctx,
                                         uint8_t *buff)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_ln_pg_write_byte(ctx, LSM6DSOX_PEDO_DEB_STEPS_CONF,
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff fd72 	bl	800a940 <lsm6dsox_ln_pg_write_byte>
 800ae5c:	60f8      	str	r0, [r7, #12]
                                  buff);

  return ret;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800ae72:	2102      	movs	r1, #2
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff fd3d 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800ae7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 800ae82:	2302      	movs	r3, #2
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	2146      	movs	r1, #70	; 0x46
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7fe ff9f 	bl	8009dcc <lsm6dsox_read_reg>
 800ae8e:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d104      	bne.n	800aea0 <lsm6dsox_fsm_enable_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800ae96:	2100      	movs	r1, #0
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff fd2b 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800ae9e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aea0:	68fb      	ldr	r3, [r7, #12]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800aeb6:	2102      	movs	r1, #2
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff fd1b 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800aebe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d107      	bne.n	800aed6 <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 800aec6:	f107 0208 	add.w	r2, r7, #8
 800aeca:	2301      	movs	r3, #1
 800aecc:	215f      	movs	r1, #95	; 0x5f
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7fe ff7c 	bl	8009dcc <lsm6dsox_read_reg>
 800aed4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d12a      	bne.n	800af32 <lsm6dsox_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800aedc:	7a3b      	ldrb	r3, [r7, #8]
 800aede:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d81b      	bhi.n	800af20 <lsm6dsox_fsm_data_rate_get+0x74>
 800aee8:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <lsm6dsox_fsm_data_rate_get+0x44>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af01 	.word	0x0800af01
 800aef4:	0800af09 	.word	0x0800af09
 800aef8:	0800af11 	.word	0x0800af11
 800aefc:	0800af19 	.word	0x0800af19
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2200      	movs	r2, #0
 800af04:	701a      	strb	r2, [r3, #0]
        break;
 800af06:	e00f      	b.n	800af28 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2201      	movs	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
        break;
 800af0e:	e00b      	b.n	800af28 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2202      	movs	r2, #2
 800af14:	701a      	strb	r2, [r3, #0]
        break;
 800af16:	e007      	b.n	800af28 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2203      	movs	r2, #3
 800af1c:	701a      	strb	r2, [r3, #0]
        break;
 800af1e:	e003      	b.n	800af28 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]
        break;
 800af26:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800af28:	2100      	movs	r1, #0
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff fce2 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800af30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800af32:	68fb      	ldr	r3, [r7, #12]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800af46:	2102      	movs	r1, #2
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff fcd3 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800af4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d107      	bne.n	800af66 <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 800af56:	f107 0208 	add.w	r2, r7, #8
 800af5a:	2301      	movs	r3, #1
 800af5c:	2160      	movs	r1, #96	; 0x60
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7fe ff34 	bl	8009dcc <lsm6dsox_read_reg>
 800af64:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d12a      	bne.n	800afc2 <lsm6dsox_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 800af6c:	7a3b      	ldrb	r3, [r7, #8]
 800af6e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b03      	cmp	r3, #3
 800af76:	d81b      	bhi.n	800afb0 <lsm6dsox_mlc_data_rate_get+0x74>
 800af78:	a201      	add	r2, pc, #4	; (adr r2, 800af80 <lsm6dsox_mlc_data_rate_get+0x44>)
 800af7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7e:	bf00      	nop
 800af80:	0800af91 	.word	0x0800af91
 800af84:	0800af99 	.word	0x0800af99
 800af88:	0800afa1 	.word	0x0800afa1
 800af8c:	0800afa9 	.word	0x0800afa9
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2200      	movs	r2, #0
 800af94:	701a      	strb	r2, [r3, #0]
        break;
 800af96:	e00f      	b.n	800afb8 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2201      	movs	r2, #1
 800af9c:	701a      	strb	r2, [r3, #0]
        break;
 800af9e:	e00b      	b.n	800afb8 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2202      	movs	r2, #2
 800afa4:	701a      	strb	r2, [r3, #0]
        break;
 800afa6:	e007      	b.n	800afb8 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2203      	movs	r2, #3
 800afac:	701a      	strb	r2, [r3, #0]
        break;
 800afae:	e003      	b.n	800afb8 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]
        break;
 800afb6:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800afb8:	2100      	movs	r1, #0
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff fc9a 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800afc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800afc2:	68fb      	ldr	r3, [r7, #12]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <lsm6dsox_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lsm6dsox_pin_int1_route_t val)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b092      	sub	sp, #72	; 0x48
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	1d3b      	adds	r3, r7, #4
 800afd6:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dsox_tap_cfg2_t        tap_cfg2;
  lsm6dsox_md2_cfg_t         md2_cfg;
  lsm6dsox_md1_cfg_t         md1_cfg;
  lsm6dsox_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 800afda:	793b      	ldrb	r3, [r7, #4]
 800afdc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afe6:	f362 0300 	bfi	r3, r2, #0, #1
 800afea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 800afee:	793b      	ldrb	r3, [r7, #4]
 800aff0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800affa:	f362 0341 	bfi	r3, r2, #1, #1
 800affe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_boot      = val.boot;
 800b002:	793b      	ldrb	r3, [r7, #4]
 800b004:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b00e:	f362 0382 	bfi	r3, r2, #2, #1
 800b012:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 800b016:	793b      	ldrb	r3, [r7, #4]
 800b018:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b022:	f362 03c3 	bfi	r3, r2, #3, #1
 800b026:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 800b02a:	793b      	ldrb	r3, [r7, #4]
 800b02c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b030:	b2da      	uxtb	r2, r3
 800b032:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b036:	f362 1304 	bfi	r3, r2, #4, #1
 800b03a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_fifo_full = val.fifo_full;
 800b03e:	793b      	ldrb	r3, [r7, #4]
 800b040:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b044:	b2da      	uxtb	r2, r3
 800b046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b04a:	f362 1345 	bfi	r3, r2, #5, #1
 800b04e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 800b052:	793b      	ldrb	r3, [r7, #4]
 800b054:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b05e:	f362 1386 	bfi	r3, r2, #6, #1
 800b062:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.den_drdy_flag  = val.den_flag;
 800b066:	797b      	ldrb	r3, [r7, #5]
 800b068:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b072:	f362 13c7 	bfi	r3, r2, #7, #1
 800b076:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  md1_cfg.int1_shub         = val.sh_endop;
 800b07a:	797b      	ldrb	r3, [r7, #5]
 800b07c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b080:	b2da      	uxtb	r2, r3
 800b082:	7e3b      	ldrb	r3, [r7, #24]
 800b084:	f362 0300 	bfi	r3, r2, #0, #1
 800b088:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_6d           = val.six_d;
 800b08a:	797b      	ldrb	r3, [r7, #5]
 800b08c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b090:	b2da      	uxtb	r2, r3
 800b092:	7e3b      	ldrb	r3, [r7, #24]
 800b094:	f362 0382 	bfi	r3, r2, #2, #1
 800b098:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_double_tap   = val.double_tap;
 800b09a:	797b      	ldrb	r3, [r7, #5]
 800b09c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	7e3b      	ldrb	r3, [r7, #24]
 800b0a4:	f362 03c3 	bfi	r3, r2, #3, #1
 800b0a8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_ff           = val.free_fall;
 800b0aa:	797b      	ldrb	r3, [r7, #5]
 800b0ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	7e3b      	ldrb	r3, [r7, #24]
 800b0b4:	f362 1304 	bfi	r3, r2, #4, #1
 800b0b8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_wu           = val.wake_up;
 800b0ba:	797b      	ldrb	r3, [r7, #5]
 800b0bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	7e3b      	ldrb	r3, [r7, #24]
 800b0c4:	f362 1345 	bfi	r3, r2, #5, #1
 800b0c8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_single_tap   = val.single_tap;
 800b0ca:	797b      	ldrb	r3, [r7, #5]
 800b0cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	7e3b      	ldrb	r3, [r7, #24]
 800b0d4:	f362 1386 	bfi	r3, r2, #6, #1
 800b0d8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_sleep_change = val.sleep_change;
 800b0da:	79bb      	ldrb	r3, [r7, #6]
 800b0dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	7e3b      	ldrb	r3, [r7, #24]
 800b0e4:	f362 13c7 	bfi	r3, r2, #7, #1
 800b0e8:	763b      	strb	r3, [r7, #24]
  emb_func_int1.not_used_01 = 0;
 800b0ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b0ee:	f36f 0302 	bfc	r3, #0, #3
 800b0f2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_step_detector = val.step_detector;
 800b0f6:	79bb      	ldrb	r3, [r7, #6]
 800b0f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b102:	f362 03c3 	bfi	r3, r2, #3, #1
 800b106:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_tilt          = val.tilt;
 800b10a:	79bb      	ldrb	r3, [r7, #6]
 800b10c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b110:	b2da      	uxtb	r2, r3
 800b112:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b116:	f362 1304 	bfi	r3, r2, #4, #1
 800b11a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 800b11e:	79bb      	ldrb	r3, [r7, #6]
 800b120:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b124:	b2da      	uxtb	r2, r3
 800b126:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b12a:	f362 1345 	bfi	r3, r2, #5, #1
 800b12e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.not_used_02 = 0;
 800b132:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b136:	f36f 1386 	bfc	r3, #6, #1
 800b13a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 800b13e:	79bb      	ldrb	r3, [r7, #6]
 800b140:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b144:	b2da      	uxtb	r2, r3
 800b146:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b14a:	f362 13c7 	bfi	r3, r2, #7, #1
 800b14e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  fsm_int1_a.int1_fsm1 = val.fsm1;
 800b152:	79bb      	ldrb	r3, [r7, #6]
 800b154:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b15e:	f362 0300 	bfi	r3, r2, #0, #1
 800b162:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm2 = val.fsm2;
 800b166:	79bb      	ldrb	r3, [r7, #6]
 800b168:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b172:	f362 0341 	bfi	r3, r2, #1, #1
 800b176:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm3 = val.fsm3;
 800b17a:	79bb      	ldrb	r3, [r7, #6]
 800b17c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b180:	b2da      	uxtb	r2, r3
 800b182:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b186:	f362 0382 	bfi	r3, r2, #2, #1
 800b18a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm4 = val.fsm4;
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b194:	b2da      	uxtb	r2, r3
 800b196:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b19a:	f362 03c3 	bfi	r3, r2, #3, #1
 800b19e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm5 = val.fsm5;
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b1ae:	f362 1304 	bfi	r3, r2, #4, #1
 800b1b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm6 = val.fsm6;
 800b1b6:	79fb      	ldrb	r3, [r7, #7]
 800b1b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b1c2:	f362 1345 	bfi	r3, r2, #5, #1
 800b1c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm7 = val.fsm7;
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b1d6:	f362 1386 	bfi	r3, r2, #6, #1
 800b1da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm8 = val.fsm8;
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b1ea:	f362 13c7 	bfi	r3, r2, #7, #1
 800b1ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b1fe:	f362 13c7 	bfi	r3, r2, #7, #1
 800b202:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm10 = val.fsm10;
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b212:	f362 1386 	bfi	r3, r2, #6, #1
 800b216:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm11 = val.fsm11;
 800b21a:	79fb      	ldrb	r3, [r7, #7]
 800b21c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b220:	b2da      	uxtb	r2, r3
 800b222:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b226:	f362 1345 	bfi	r3, r2, #5, #1
 800b22a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm12 = val.fsm12;
 800b22e:	7a3b      	ldrb	r3, [r7, #8]
 800b230:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b234:	b2da      	uxtb	r2, r3
 800b236:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b23a:	f362 1304 	bfi	r3, r2, #4, #1
 800b23e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm13 = val.fsm13;
 800b242:	7a3b      	ldrb	r3, [r7, #8]
 800b244:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b24e:	f362 03c3 	bfi	r3, r2, #3, #1
 800b252:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm14 = val.fsm14;
 800b256:	7a3b      	ldrb	r3, [r7, #8]
 800b258:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b262:	f362 0382 	bfi	r3, r2, #2, #1
 800b266:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm15 = val.fsm15;
 800b26a:	7a3b      	ldrb	r3, [r7, #8]
 800b26c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b276:	f362 0341 	bfi	r3, r2, #1, #1
 800b27a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm16 = val.fsm16;
 800b27e:	7a3b      	ldrb	r3, [r7, #8]
 800b280:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b284:	b2da      	uxtb	r2, r3
 800b286:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b28a:	f362 0300 	bfi	r3, r2, #0, #1
 800b28e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  mlc_int1.int1_mlc1 = val.mlc1;
 800b292:	7a3b      	ldrb	r3, [r7, #8]
 800b294:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b29e:	f362 0300 	bfi	r3, r2, #0, #1
 800b2a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc2 = val.mlc2;
 800b2a6:	7a3b      	ldrb	r3, [r7, #8]
 800b2a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2b2:	f362 0341 	bfi	r3, r2, #1, #1
 800b2b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc3 = val.mlc3;
 800b2ba:	7a3b      	ldrb	r3, [r7, #8]
 800b2bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2c6:	f362 0382 	bfi	r3, r2, #2, #1
 800b2ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc4 = val.mlc4;
 800b2ce:	7a7b      	ldrb	r3, [r7, #9]
 800b2d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2da:	f362 03c3 	bfi	r3, r2, #3, #1
 800b2de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc5 = val.mlc5;
 800b2e2:	7a7b      	ldrb	r3, [r7, #9]
 800b2e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2ee:	f362 1304 	bfi	r3, r2, #4, #1
 800b2f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc6 = val.mlc6;
 800b2f6:	7a7b      	ldrb	r3, [r7, #9]
 800b2f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b302:	f362 1345 	bfi	r3, r2, #5, #1
 800b306:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc7 = val.mlc7;
 800b30a:	7a7b      	ldrb	r3, [r7, #9]
 800b30c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b310:	b2da      	uxtb	r2, r3
 800b312:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b316:	f362 1386 	bfi	r3, r2, #6, #1
 800b31a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc8 = val.mlc8;
 800b31e:	7a7b      	ldrb	r3, [r7, #9]
 800b320:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b324:	b2da      	uxtb	r2, r3
 800b326:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b32a:	f362 13c7 	bfi	r3, r2, #7, #1
 800b32e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800b332:	f107 0214 	add.w	r2, r7, #20
 800b336:	2301      	movs	r3, #1
 800b338:	2113      	movs	r1, #19
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7fe fd46 	bl	8009dcc <lsm6dsox_read_reg>
 800b340:	6478      	str	r0, [r7, #68]	; 0x44

  if (ret == 0)
 800b342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11c      	bne.n	800b382 <lsm6dsox_pin_int1_route_set+0x3b6>
  {
    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 800b348:	793b      	ldrb	r3, [r7, #4]
 800b34a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	797b      	ldrb	r3, [r7, #5]
 800b352:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	4313      	orrs	r3, r2
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d004      	beq.n	800b36a <lsm6dsox_pin_int1_route_set+0x39e>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 800b360:	7d3b      	ldrb	r3, [r7, #20]
 800b362:	f043 0320 	orr.w	r3, r3, #32
 800b366:	753b      	strb	r3, [r7, #20]
 800b368:	e003      	b.n	800b372 <lsm6dsox_pin_int1_route_set+0x3a6>
    }

    else
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 800b36a:	7d3b      	ldrb	r3, [r7, #20]
 800b36c:	f36f 1345 	bfc	r3, #5, #1
 800b370:	753b      	strb	r3, [r7, #20]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800b372:	f107 0214 	add.w	r2, r7, #20
 800b376:	2301      	movs	r3, #1
 800b378:	2113      	movs	r1, #19
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f7fe fd3e 	bl	8009dfc <lsm6dsox_write_reg>
 800b380:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <lsm6dsox_pin_int1_route_set+0x3c6>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800b388:	2102      	movs	r1, #2
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7ff fab2 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800b390:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b394:	2b00      	cmp	r3, #0
 800b396:	d107      	bne.n	800b3a8 <lsm6dsox_pin_int1_route_set+0x3dc>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MLC_INT1,
 800b398:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b39c:	2301      	movs	r3, #1
 800b39e:	210d      	movs	r1, #13
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7fe fd2b 	bl	8009dfc <lsm6dsox_write_reg>
 800b3a6:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 800b3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d107      	bne.n	800b3be <lsm6dsox_pin_int1_route_set+0x3f2>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_INT1,
 800b3ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	210a      	movs	r1, #10
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7fe fd20 	bl	8009dfc <lsm6dsox_write_reg>
 800b3bc:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 800b3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d107      	bne.n	800b3d4 <lsm6dsox_pin_int1_route_set+0x408>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT1_A,
 800b3c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	210b      	movs	r1, #11
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7fe fd15 	bl	8009dfc <lsm6dsox_write_reg>
 800b3d2:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 800b3d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d107      	bne.n	800b3ea <lsm6dsox_pin_int1_route_set+0x41e>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT1_B,
 800b3da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b3de:	2301      	movs	r3, #1
 800b3e0:	210c      	movs	r1, #12
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7fe fd0a 	bl	8009dfc <lsm6dsox_write_reg>
 800b3e8:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 800b3ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d104      	bne.n	800b3fa <lsm6dsox_pin_int1_route_set+0x42e>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7ff fa7e 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800b3f8:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b3fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f040 80d5 	bne.w	800b5ac <lsm6dsox_pin_int1_route_set+0x5e0>
  {
    if ((emb_func_int1.int1_fsm_lc
 800b402:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b406:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b40a:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_sig_mot
 800b40c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b410:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b414:	b2db      	uxtb	r3, r3
 800b416:	4313      	orrs	r3, r2
 800b418:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_step_detector
 800b41a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b41e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b422:	b2db      	uxtb	r3, r3
 800b424:	4313      	orrs	r3, r2
 800b426:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_tilt
 800b428:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b42c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b430:	b2db      	uxtb	r3, r3
 800b432:	4313      	orrs	r3, r2
 800b434:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm1
 800b436:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b43a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	4313      	orrs	r3, r2
 800b442:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm2
 800b444:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b448:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	4313      	orrs	r3, r2
 800b450:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm3
 800b452:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b456:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	4313      	orrs	r3, r2
 800b45e:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm4
 800b460:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b464:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	4313      	orrs	r3, r2
 800b46c:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm5
 800b46e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b472:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b476:	b2db      	uxtb	r3, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm6
 800b47c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b480:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b484:	b2db      	uxtb	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm7
 800b48a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b48e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	4313      	orrs	r3, r2
 800b496:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm8
 800b498:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b49c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm9
 800b4a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm10
 800b4b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm11
 800b4c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm12
 800b4d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm13
 800b4de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm14
 800b4ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm15
 800b4fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b502:	b2db      	uxtb	r3, r3
 800b504:	4313      	orrs	r3, r2
 800b506:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm16
 800b508:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b50c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b510:	b2db      	uxtb	r3, r3
 800b512:	4313      	orrs	r3, r2
 800b514:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc1
 800b516:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b51a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	4313      	orrs	r3, r2
 800b522:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc2
 800b524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b528:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	4313      	orrs	r3, r2
 800b530:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc3
 800b532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b536:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	4313      	orrs	r3, r2
 800b53e:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc4
 800b540:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b544:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc5
 800b54e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b552:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b556:	b2db      	uxtb	r3, r3
 800b558:	4313      	orrs	r3, r2
 800b55a:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc6
 800b55c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b560:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b564:	b2db      	uxtb	r3, r3
 800b566:	4313      	orrs	r3, r2
 800b568:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc7
 800b56a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b56e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b572:	b2db      	uxtb	r3, r3
 800b574:	4313      	orrs	r3, r2
 800b576:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc8) != PROPERTY_DISABLE)
 800b578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b57c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b580:	b2db      	uxtb	r3, r3
 800b582:	4313      	orrs	r3, r2
 800b584:	b2db      	uxtb	r3, r3
    if ((emb_func_int1.int1_fsm_lc
 800b586:	2b00      	cmp	r3, #0
 800b588:	d004      	beq.n	800b594 <lsm6dsox_pin_int1_route_set+0x5c8>
    {
      md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 800b58a:	7e3b      	ldrb	r3, [r7, #24]
 800b58c:	f043 0302 	orr.w	r3, r3, #2
 800b590:	763b      	strb	r3, [r7, #24]
 800b592:	e003      	b.n	800b59c <lsm6dsox_pin_int1_route_set+0x5d0>
    }

    else
    {
      md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 800b594:	7e3b      	ldrb	r3, [r7, #24]
 800b596:	f36f 0341 	bfc	r3, #1, #1
 800b59a:	763b      	strb	r3, [r7, #24]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT1_CTRL,
 800b59c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	210d      	movs	r1, #13
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7fe fc29 	bl	8009dfc <lsm6dsox_write_reg>
 800b5aa:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 800b5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d107      	bne.n	800b5c2 <lsm6dsox_pin_int1_route_set+0x5f6>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800b5b2:	f107 0218 	add.w	r2, r7, #24
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	215e      	movs	r1, #94	; 0x5e
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7fe fc1e 	bl	8009dfc <lsm6dsox_write_reg>
 800b5c0:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d107      	bne.n	800b5d8 <lsm6dsox_pin_int1_route_set+0x60c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 800b5c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	210e      	movs	r1, #14
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f7fe fbfb 	bl	8009dcc <lsm6dsox_read_reg>
 800b5d6:	6478      	str	r0, [r7, #68]	; 0x44
                            (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 800b5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d111      	bne.n	800b602 <lsm6dsox_pin_int1_route_set+0x636>
  {
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 800b5de:	793b      	ldrb	r3, [r7, #4]
 800b5e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5ea:	f362 0382 	bfi	r3, r2, #2, #1
 800b5ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT2_CTRL,
 800b5f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	210e      	movs	r1, #14
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7fe fbfe 	bl	8009dfc <lsm6dsox_write_reg>
 800b600:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 800b602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b604:	2b00      	cmp	r3, #0
 800b606:	d107      	bne.n	800b618 <lsm6dsox_pin_int1_route_set+0x64c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800b608:	f107 021c 	add.w	r2, r7, #28
 800b60c:	2301      	movs	r3, #1
 800b60e:	215f      	movs	r1, #95	; 0x5f
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7fe fbdb 	bl	8009dcc <lsm6dsox_read_reg>
 800b616:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10f      	bne.n	800b63e <lsm6dsox_pin_int1_route_set+0x672>
  {
    md2_cfg.int2_timestamp = val.timestamp;
 800b61e:	797b      	ldrb	r3, [r7, #5]
 800b620:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b624:	b2da      	uxtb	r2, r3
 800b626:	7f3b      	ldrb	r3, [r7, #28]
 800b628:	f362 0300 	bfi	r3, r2, #0, #1
 800b62c:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800b62e:	f107 021c 	add.w	r2, r7, #28
 800b632:	2301      	movs	r3, #1
 800b634:	215f      	movs	r1, #95	; 0x5f
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f7fe fbe0 	bl	8009dfc <lsm6dsox_write_reg>
 800b63c:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b640:	2b00      	cmp	r3, #0
 800b642:	d107      	bne.n	800b654 <lsm6dsox_pin_int1_route_set+0x688>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 800b644:	f107 0220 	add.w	r2, r7, #32
 800b648:	2301      	movs	r3, #1
 800b64a:	2158      	movs	r1, #88	; 0x58
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f7fe fbbd 	bl	8009dcc <lsm6dsox_read_reg>
 800b652:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b656:	2b00      	cmp	r3, #0
 800b658:	d107      	bne.n	800b66a <lsm6dsox_pin_int1_route_set+0x69e>
  {
    ret = lsm6dsox_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 800b65a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b65e:	461a      	mov	r2, r3
 800b660:	2100      	movs	r1, #0
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 fef3 	bl	800c44e <lsm6dsox_pin_int2_route_get>
 800b668:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800b66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f040 80d2 	bne.w	800b816 <lsm6dsox_pin_int1_route_set+0x84a>
  {
    if ((pin_int2_route.fifo_bdr
 800b672:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b676:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b67a:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_g
 800b67c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b680:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b684:	b2db      	uxtb	r3, r3
 800b686:	4313      	orrs	r3, r2
 800b688:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_temp
 800b68a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b68e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b692:	b2db      	uxtb	r3, r3
 800b694:	4313      	orrs	r3, r2
 800b696:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_xl
 800b698:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b69c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_full
 800b6a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_ovr
 800b6b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_th
 800b6c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	b2da      	uxtb	r2, r3
         | pin_int2_route.six_d
 800b6d0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b6d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	b2da      	uxtb	r2, r3
         | pin_int2_route.double_tap
 800b6de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b6e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	b2da      	uxtb	r2, r3
         | pin_int2_route.free_fall
 800b6ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b6f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	b2da      	uxtb	r2, r3
         | pin_int2_route.wake_up
 800b6fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b6fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b702:	b2db      	uxtb	r3, r3
 800b704:	4313      	orrs	r3, r2
 800b706:	b2da      	uxtb	r2, r3
         | pin_int2_route.single_tap
 800b708:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b70c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b710:	b2db      	uxtb	r3, r3
 800b712:	4313      	orrs	r3, r2
 800b714:	b2da      	uxtb	r2, r3
         | pin_int2_route.sleep_change
 800b716:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b71a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	4313      	orrs	r3, r2
 800b722:	b2da      	uxtb	r2, r3
         | int1_ctrl.den_drdy_flag
 800b724:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b728:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	4313      	orrs	r3, r2
 800b730:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_boot
 800b732:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b736:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	4313      	orrs	r3, r2
 800b73e:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_cnt_bdr
 800b740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b744:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_g
 800b74e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b752:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	4313      	orrs	r3, r2
 800b75a:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_xl
 800b75c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b760:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	4313      	orrs	r3, r2
 800b768:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_full
 800b76a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b76e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b772:	b2db      	uxtb	r3, r3
 800b774:	4313      	orrs	r3, r2
 800b776:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_ovr
 800b778:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b77c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4313      	orrs	r3, r2
 800b784:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_th
 800b786:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b78a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	4313      	orrs	r3, r2
 800b792:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_shub
 800b794:	7e3b      	ldrb	r3, [r7, #24]
 800b796:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	4313      	orrs	r3, r2
 800b79e:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_6d
 800b7a0:	7e3b      	ldrb	r3, [r7, #24]
 800b7a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_double_tap
 800b7ac:	7e3b      	ldrb	r3, [r7, #24]
 800b7ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_ff
 800b7b8:	7e3b      	ldrb	r3, [r7, #24]
 800b7ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_wu
 800b7c4:	7e3b      	ldrb	r3, [r7, #24]
 800b7c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_single_tap
 800b7d0:	7e3b      	ldrb	r3, [r7, #24]
 800b7d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 800b7dc:	7e3b      	ldrb	r3, [r7, #24]
 800b7de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	b2db      	uxtb	r3, r3
    if ((pin_int2_route.fifo_bdr
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d006      	beq.n	800b7fa <lsm6dsox_pin_int1_route_set+0x82e>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800b7ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7f4:	f887 3020 	strb.w	r3, [r7, #32]
 800b7f8:	e005      	b.n	800b806 <lsm6dsox_pin_int1_route_set+0x83a>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800b7fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7fe:	f36f 13c7 	bfc	r3, #7, #1
 800b802:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG2,
 800b806:	f107 0220 	add.w	r2, r7, #32
 800b80a:	2301      	movs	r3, #1
 800b80c:	2158      	movs	r1, #88	; 0x58
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7fe faf4 	bl	8009dfc <lsm6dsox_write_reg>
 800b814:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *) &tap_cfg2, 1);
  }

  return ret;
 800b816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3748      	adds	r7, #72	; 0x48
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <lsm6dsox_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lsm6dsox_pin_int1_route_t *val)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08c      	sub	sp, #48	; 0x30
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  lsm6dsox_mlc_int1_t        mlc_int1;
  lsm6dsox_md2_cfg_t         md2_cfg;
  lsm6dsox_md1_cfg_t         md1_cfg;
  lsm6dsox_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800b82a:	2102      	movs	r1, #2
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff f861 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800b832:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (ret == 0)
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d107      	bne.n	800b84a <lsm6dsox_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT1,
 800b83a:	f107 0214 	add.w	r2, r7, #20
 800b83e:	2301      	movs	r3, #1
 800b840:	210d      	movs	r1, #13
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7fe fac2 	bl	8009dcc <lsm6dsox_read_reg>
 800b848:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d107      	bne.n	800b860 <lsm6dsox_pin_int1_route_get+0x40>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT1,
 800b850:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b854:	2301      	movs	r3, #1
 800b856:	210a      	movs	r1, #10
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7fe fab7 	bl	8009dcc <lsm6dsox_read_reg>
 800b85e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 800b860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b862:	2b00      	cmp	r3, #0
 800b864:	d107      	bne.n	800b876 <lsm6dsox_pin_int1_route_get+0x56>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_A,
 800b866:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b86a:	2301      	movs	r3, #1
 800b86c:	210b      	movs	r1, #11
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7fe faac 	bl	8009dcc <lsm6dsox_read_reg>
 800b874:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d107      	bne.n	800b88c <lsm6dsox_pin_int1_route_get+0x6c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_B,
 800b87c:	f107 0220 	add.w	r2, r7, #32
 800b880:	2301      	movs	r3, #1
 800b882:	210c      	movs	r1, #12
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7fe faa1 	bl	8009dcc <lsm6dsox_read_reg>
 800b88a:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d104      	bne.n	800b89c <lsm6dsox_pin_int1_route_get+0x7c>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800b892:	2100      	movs	r1, #0
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7ff f82d 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800b89a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ret == 0)
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d107      	bne.n	800b8b2 <lsm6dsox_pin_int1_route_get+0x92>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT1_CTRL,
 800b8a2:	f107 021c 	add.w	r2, r7, #28
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	210d      	movs	r1, #13
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fe fa8e 	bl	8009dcc <lsm6dsox_read_reg>
 800b8b0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d107      	bne.n	800b8c8 <lsm6dsox_pin_int1_route_get+0xa8>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800b8b8:	f107 020c 	add.w	r2, r7, #12
 800b8bc:	2301      	movs	r3, #1
 800b8be:	215e      	movs	r1, #94	; 0x5e
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7fe fa83 	bl	8009dcc <lsm6dsox_read_reg>
 800b8c6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ret == 0)
 800b8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d107      	bne.n	800b8de <lsm6dsox_pin_int1_route_get+0xbe>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800b8ce:	f107 0208 	add.w	r2, r7, #8
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	2113      	movs	r1, #19
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7fe fa78 	bl	8009dcc <lsm6dsox_read_reg>
 800b8dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 800b8de:	7a3b      	ldrb	r3, [r7, #8]
 800b8e0:	f003 0320 	and.w	r3, r3, #32
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d028      	beq.n	800b93c <lsm6dsox_pin_int1_route_get+0x11c>
  {
    if (ret == 0)
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d110      	bne.n	800b912 <lsm6dsox_pin_int1_route_get+0xf2>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 800b8f0:	f107 0218 	add.w	r2, r7, #24
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	210e      	movs	r1, #14
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7fe fa67 	bl	8009dcc <lsm6dsox_read_reg>
 800b8fe:	62f8      	str	r0, [r7, #44]	; 0x2c
                              (uint8_t *)&int2_ctrl, 1);
      val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800b900:	7e3b      	ldrb	r3, [r7, #24]
 800b902:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b906:	b2d9      	uxtb	r1, r3
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	7813      	ldrb	r3, [r2, #0]
 800b90c:	f361 0382 	bfi	r3, r1, #2, #1
 800b910:	7013      	strb	r3, [r2, #0]
    }

    if (ret == 0)
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d11b      	bne.n	800b950 <lsm6dsox_pin_int1_route_get+0x130>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800b918:	f107 0210 	add.w	r2, r7, #16
 800b91c:	2301      	movs	r3, #1
 800b91e:	215f      	movs	r1, #95	; 0x5f
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7fe fa53 	bl	8009dcc <lsm6dsox_read_reg>
 800b926:	62f8      	str	r0, [r7, #44]	; 0x2c
      val->timestamp = md2_cfg.int2_timestamp;
 800b928:	7c3b      	ldrb	r3, [r7, #16]
 800b92a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b92e:	b2d9      	uxtb	r1, r3
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	7853      	ldrb	r3, [r2, #1]
 800b934:	f361 0382 	bfi	r3, r1, #2, #1
 800b938:	7053      	strb	r3, [r2, #1]
 800b93a:	e009      	b.n	800b950 <lsm6dsox_pin_int1_route_get+0x130>
    }
  }

  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	7813      	ldrb	r3, [r2, #0]
 800b940:	f36f 0382 	bfc	r3, #2, #1
 800b944:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	7853      	ldrb	r3, [r2, #1]
 800b94a:	f36f 0382 	bfc	r3, #2, #1
 800b94e:	7053      	strb	r3, [r2, #1]
  }

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 800b950:	7f3b      	ldrb	r3, [r7, #28]
 800b952:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b956:	b2d9      	uxtb	r1, r3
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	7813      	ldrb	r3, [r2, #0]
 800b95c:	f361 0300 	bfi	r3, r1, #0, #1
 800b960:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 800b962:	7f3b      	ldrb	r3, [r7, #28]
 800b964:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b968:	b2d9      	uxtb	r1, r3
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	7813      	ldrb	r3, [r2, #0]
 800b96e:	f361 0341 	bfi	r3, r1, #1, #1
 800b972:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 800b974:	7f3b      	ldrb	r3, [r7, #28]
 800b976:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b97a:	b2d9      	uxtb	r1, r3
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	7813      	ldrb	r3, [r2, #0]
 800b980:	f361 03c3 	bfi	r3, r1, #3, #1
 800b984:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 800b986:	7f3b      	ldrb	r3, [r7, #28]
 800b988:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b98c:	b2d9      	uxtb	r1, r3
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	7813      	ldrb	r3, [r2, #0]
 800b992:	f361 1304 	bfi	r3, r1, #4, #1
 800b996:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 800b998:	7f3b      	ldrb	r3, [r7, #28]
 800b99a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b99e:	b2d9      	uxtb	r1, r3
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	7813      	ldrb	r3, [r2, #0]
 800b9a4:	f361 1345 	bfi	r3, r1, #5, #1
 800b9a8:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 800b9aa:	7f3b      	ldrb	r3, [r7, #28]
 800b9ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b9b0:	b2d9      	uxtb	r1, r3
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	7813      	ldrb	r3, [r2, #0]
 800b9b6:	f361 1386 	bfi	r3, r1, #6, #1
 800b9ba:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 800b9bc:	7f3b      	ldrb	r3, [r7, #28]
 800b9be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b9c2:	b2d9      	uxtb	r1, r3
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	7813      	ldrb	r3, [r2, #0]
 800b9c8:	f361 13c7 	bfi	r3, r1, #7, #1
 800b9cc:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 800b9ce:	7f3b      	ldrb	r3, [r7, #28]
 800b9d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b9d4:	b2d9      	uxtb	r1, r3
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	7853      	ldrb	r3, [r2, #1]
 800b9da:	f361 0300 	bfi	r3, r1, #0, #1
 800b9de:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 800b9e0:	7b3b      	ldrb	r3, [r7, #12]
 800b9e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b9e6:	b2d9      	uxtb	r1, r3
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	7853      	ldrb	r3, [r2, #1]
 800b9ec:	f361 0341 	bfi	r3, r1, #1, #1
 800b9f0:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 800b9f2:	7b3b      	ldrb	r3, [r7, #12]
 800b9f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b9f8:	b2d9      	uxtb	r1, r3
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	7853      	ldrb	r3, [r2, #1]
 800b9fe:	f361 03c3 	bfi	r3, r1, #3, #1
 800ba02:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 800ba04:	7b3b      	ldrb	r3, [r7, #12]
 800ba06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba0a:	b2d9      	uxtb	r1, r3
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	7853      	ldrb	r3, [r2, #1]
 800ba10:	f361 1304 	bfi	r3, r1, #4, #1
 800ba14:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 800ba16:	7b3b      	ldrb	r3, [r7, #12]
 800ba18:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ba1c:	b2d9      	uxtb	r1, r3
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	7853      	ldrb	r3, [r2, #1]
 800ba22:	f361 1345 	bfi	r3, r1, #5, #1
 800ba26:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 800ba28:	7b3b      	ldrb	r3, [r7, #12]
 800ba2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ba2e:	b2d9      	uxtb	r1, r3
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	7853      	ldrb	r3, [r2, #1]
 800ba34:	f361 1386 	bfi	r3, r1, #6, #1
 800ba38:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 800ba3a:	7b3b      	ldrb	r3, [r7, #12]
 800ba3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ba40:	b2d9      	uxtb	r1, r3
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	7853      	ldrb	r3, [r2, #1]
 800ba46:	f361 13c7 	bfi	r3, r1, #7, #1
 800ba4a:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 800ba4c:	7b3b      	ldrb	r3, [r7, #12]
 800ba4e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ba52:	b2d9      	uxtb	r1, r3
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	7893      	ldrb	r3, [r2, #2]
 800ba58:	f361 0300 	bfi	r3, r1, #0, #1
 800ba5c:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 800ba5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ba66:	b2d9      	uxtb	r1, r3
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	7893      	ldrb	r3, [r2, #2]
 800ba6c:	f361 0341 	bfi	r3, r1, #1, #1
 800ba70:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 800ba72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ba7a:	b2d9      	uxtb	r1, r3
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	7893      	ldrb	r3, [r2, #2]
 800ba80:	f361 0382 	bfi	r3, r1, #2, #1
 800ba84:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 800ba86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ba8e:	b2d9      	uxtb	r1, r3
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	7893      	ldrb	r3, [r2, #2]
 800ba94:	f361 03c3 	bfi	r3, r1, #3, #1
 800ba98:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 800ba9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800baa2:	b2d9      	uxtb	r1, r3
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	7893      	ldrb	r3, [r2, #2]
 800baa8:	f361 1304 	bfi	r3, r1, #4, #1
 800baac:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 800baae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bab2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bab6:	b2d9      	uxtb	r1, r3
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	7893      	ldrb	r3, [r2, #2]
 800babc:	f361 1345 	bfi	r3, r1, #5, #1
 800bac0:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 800bac2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bac6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800baca:	b2d9      	uxtb	r1, r3
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	7893      	ldrb	r3, [r2, #2]
 800bad0:	f361 1386 	bfi	r3, r1, #6, #1
 800bad4:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 800bad6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bada:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bade:	b2d9      	uxtb	r1, r3
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	7893      	ldrb	r3, [r2, #2]
 800bae4:	f361 13c7 	bfi	r3, r1, #7, #1
 800bae8:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 800baea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800baee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800baf2:	b2d9      	uxtb	r1, r3
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	78d3      	ldrb	r3, [r2, #3]
 800baf8:	f361 0300 	bfi	r3, r1, #0, #1
 800bafc:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 800bafe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb02:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bb06:	b2d9      	uxtb	r1, r3
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	78d3      	ldrb	r3, [r2, #3]
 800bb0c:	f361 0341 	bfi	r3, r1, #1, #1
 800bb10:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 800bb12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bb1a:	b2d9      	uxtb	r1, r3
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	78d3      	ldrb	r3, [r2, #3]
 800bb20:	f361 0382 	bfi	r3, r1, #2, #1
 800bb24:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 800bb26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bb2e:	b2d9      	uxtb	r1, r3
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	78d3      	ldrb	r3, [r2, #3]
 800bb34:	f361 03c3 	bfi	r3, r1, #3, #1
 800bb38:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 800bb3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bb42:	b2d9      	uxtb	r1, r3
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	78d3      	ldrb	r3, [r2, #3]
 800bb48:	f361 1304 	bfi	r3, r1, #4, #1
 800bb4c:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 800bb4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bb56:	b2d9      	uxtb	r1, r3
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	78d3      	ldrb	r3, [r2, #3]
 800bb5c:	f361 1345 	bfi	r3, r1, #5, #1
 800bb60:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 800bb62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb66:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bb6a:	b2d9      	uxtb	r1, r3
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	78d3      	ldrb	r3, [r2, #3]
 800bb70:	f361 1386 	bfi	r3, r1, #6, #1
 800bb74:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 800bb76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb7a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bb7e:	b2d9      	uxtb	r1, r3
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	78d3      	ldrb	r3, [r2, #3]
 800bb84:	f361 13c7 	bfi	r3, r1, #7, #1
 800bb88:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 800bb8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bb92:	b2d9      	uxtb	r1, r3
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	7913      	ldrb	r3, [r2, #4]
 800bb98:	f361 0300 	bfi	r3, r1, #0, #1
 800bb9c:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 800bb9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bba2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bba6:	b2d9      	uxtb	r1, r3
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	7913      	ldrb	r3, [r2, #4]
 800bbac:	f361 0341 	bfi	r3, r1, #1, #1
 800bbb0:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 800bbb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bbba:	b2d9      	uxtb	r1, r3
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	7913      	ldrb	r3, [r2, #4]
 800bbc0:	f361 0382 	bfi	r3, r1, #2, #1
 800bbc4:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 800bbc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bbce:	b2d9      	uxtb	r1, r3
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	7913      	ldrb	r3, [r2, #4]
 800bbd4:	f361 03c3 	bfi	r3, r1, #3, #1
 800bbd8:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 800bbda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bbe2:	b2d9      	uxtb	r1, r3
 800bbe4:	683a      	ldr	r2, [r7, #0]
 800bbe6:	7913      	ldrb	r3, [r2, #4]
 800bbe8:	f361 1304 	bfi	r3, r1, #4, #1
 800bbec:	7113      	strb	r3, [r2, #4]
  val->mlc1 = mlc_int1.int1_mlc1;
 800bbee:	7d3b      	ldrb	r3, [r7, #20]
 800bbf0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bbf4:	b2d9      	uxtb	r1, r3
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	7913      	ldrb	r3, [r2, #4]
 800bbfa:	f361 1345 	bfi	r3, r1, #5, #1
 800bbfe:	7113      	strb	r3, [r2, #4]
  val->mlc2 = mlc_int1.int1_mlc2;
 800bc00:	7d3b      	ldrb	r3, [r7, #20]
 800bc02:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bc06:	b2d9      	uxtb	r1, r3
 800bc08:	683a      	ldr	r2, [r7, #0]
 800bc0a:	7913      	ldrb	r3, [r2, #4]
 800bc0c:	f361 1386 	bfi	r3, r1, #6, #1
 800bc10:	7113      	strb	r3, [r2, #4]
  val->mlc3 = mlc_int1.int1_mlc3;
 800bc12:	7d3b      	ldrb	r3, [r7, #20]
 800bc14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bc18:	b2d9      	uxtb	r1, r3
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	7913      	ldrb	r3, [r2, #4]
 800bc1e:	f361 13c7 	bfi	r3, r1, #7, #1
 800bc22:	7113      	strb	r3, [r2, #4]
  val->mlc4 = mlc_int1.int1_mlc4;
 800bc24:	7d3b      	ldrb	r3, [r7, #20]
 800bc26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bc2a:	b2d9      	uxtb	r1, r3
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	7953      	ldrb	r3, [r2, #5]
 800bc30:	f361 0300 	bfi	r3, r1, #0, #1
 800bc34:	7153      	strb	r3, [r2, #5]
  val->mlc5 = mlc_int1.int1_mlc5;
 800bc36:	7d3b      	ldrb	r3, [r7, #20]
 800bc38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc3c:	b2d9      	uxtb	r1, r3
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	7953      	ldrb	r3, [r2, #5]
 800bc42:	f361 0341 	bfi	r3, r1, #1, #1
 800bc46:	7153      	strb	r3, [r2, #5]
  val->mlc6 = mlc_int1.int1_mlc6;
 800bc48:	7d3b      	ldrb	r3, [r7, #20]
 800bc4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bc4e:	b2d9      	uxtb	r1, r3
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	7953      	ldrb	r3, [r2, #5]
 800bc54:	f361 0382 	bfi	r3, r1, #2, #1
 800bc58:	7153      	strb	r3, [r2, #5]
  val->mlc7 = mlc_int1.int1_mlc7;
 800bc5a:	7d3b      	ldrb	r3, [r7, #20]
 800bc5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bc60:	b2d9      	uxtb	r1, r3
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	7953      	ldrb	r3, [r2, #5]
 800bc66:	f361 03c3 	bfi	r3, r1, #3, #1
 800bc6a:	7153      	strb	r3, [r2, #5]
  val->mlc8 = mlc_int1.int1_mlc8;
 800bc6c:	7d3b      	ldrb	r3, [r7, #20]
 800bc6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bc72:	b2d9      	uxtb	r1, r3
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	7953      	ldrb	r3, [r2, #5]
 800bc78:	f361 1304 	bfi	r3, r1, #4, #1
 800bc7c:	7153      	strb	r3, [r2, #5]

  return ret;
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3730      	adds	r7, #48	; 0x30
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <lsm6dsox_pin_int2_route_set>:
  *
  */
int32_t lsm6dsox_pin_int2_route_set(stmdev_ctx_t *ctx,
                                    stmdev_ctx_t *aux_ctx,
                                    lsm6dsox_pin_int2_route_t val)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b090      	sub	sp, #64	; 0x40
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	4639      	mov	r1, r7
 800bc94:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dsox_mlc_int2_t       mlc_int2;
  lsm6dsox_tap_cfg2_t       tap_cfg2;
  lsm6dsox_md2_cfg_t        md2_cfg;
  lsm6dsox_ctrl4_c_t        ctrl4_c;
  int32_t                   ret;
  ret = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (aux_ctx != NULL)
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d01c      	beq.n	800bcdc <lsm6dsox_pin_int2_route_set+0x54>
  {
    ret = lsm6dsox_read_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 800bca2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bca6:	2301      	movs	r3, #1
 800bca8:	216f      	movs	r1, #111	; 0x6f
 800bcaa:	68b8      	ldr	r0, [r7, #8]
 800bcac:	f7fe f88e 	bl	8009dcc <lsm6dsox_read_reg>
 800bcb0:	63f8      	str	r0, [r7, #60]	; 0x3c
                            (uint8_t *)&spi2_int_ois, 1);

    if (ret == 0)
 800bcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d111      	bne.n	800bcdc <lsm6dsox_pin_int2_route_set+0x54>
    {
      spi2_int_ois.int2_drdy_ois = val.drdy_ois;
 800bcb8:	783b      	ldrb	r3, [r7, #0]
 800bcba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bcc4:	f362 13c7 	bfi	r3, r2, #7, #1
 800bcc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      ret = lsm6dsox_write_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 800bccc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	216f      	movs	r1, #111	; 0x6f
 800bcd4:	68b8      	ldr	r0, [r7, #8]
 800bcd6:	f7fe f891 	bl	8009dfc <lsm6dsox_write_reg>
 800bcda:	63f8      	str	r0, [r7, #60]	; 0x3c
                               (uint8_t *)&spi2_int_ois, 1);
    }
  }

  if (ctx != NULL)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 83b0 	beq.w	800c444 <lsm6dsox_pin_int2_route_set+0x7bc>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 800bce4:	783b      	ldrb	r3, [r7, #0]
 800bce6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcf0:	f362 0300 	bfi	r3, r2, #0, #1
 800bcf4:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 800bcf8:	783b      	ldrb	r3, [r7, #0]
 800bcfa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd04:	f362 0341 	bfi	r3, r2, #1, #1
 800bd08:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 800bd0c:	783b      	ldrb	r3, [r7, #0]
 800bd0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd18:	f362 0382 	bfi	r3, r2, #2, #1
 800bd1c:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 800bd20:	783b      	ldrb	r3, [r7, #0]
 800bd22:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd2c:	f362 03c3 	bfi	r3, r2, #3, #1
 800bd30:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 800bd34:	783b      	ldrb	r3, [r7, #0]
 800bd36:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd40:	f362 1304 	bfi	r3, r2, #4, #1
 800bd44:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_fifo_full = val.fifo_full;
 800bd48:	783b      	ldrb	r3, [r7, #0]
 800bd4a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd54:	f362 1345 	bfi	r3, r2, #5, #1
 800bd58:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 800bd5c:	783b      	ldrb	r3, [r7, #0]
 800bd5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd68:	f362 1386 	bfi	r3, r2, #6, #1
 800bd6c:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.not_used_01    = 0;
 800bd70:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd74:	f36f 13c7 	bfc	r3, #7, #1
 800bd78:	f887 3020 	strb.w	r3, [r7, #32]
    md2_cfg.int2_timestamp    = val.timestamp;
 800bd7c:	787b      	ldrb	r3, [r7, #1]
 800bd7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	7d3b      	ldrb	r3, [r7, #20]
 800bd86:	f362 0300 	bfi	r3, r2, #0, #1
 800bd8a:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_6d           = val.six_d;
 800bd8c:	787b      	ldrb	r3, [r7, #1]
 800bd8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	7d3b      	ldrb	r3, [r7, #20]
 800bd96:	f362 0382 	bfi	r3, r2, #2, #1
 800bd9a:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_double_tap   = val.double_tap;
 800bd9c:	787b      	ldrb	r3, [r7, #1]
 800bd9e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	7d3b      	ldrb	r3, [r7, #20]
 800bda6:	f362 03c3 	bfi	r3, r2, #3, #1
 800bdaa:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_ff           = val.free_fall;
 800bdac:	787b      	ldrb	r3, [r7, #1]
 800bdae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	7d3b      	ldrb	r3, [r7, #20]
 800bdb6:	f362 1304 	bfi	r3, r2, #4, #1
 800bdba:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_wu           = val.wake_up;
 800bdbc:	787b      	ldrb	r3, [r7, #1]
 800bdbe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	7d3b      	ldrb	r3, [r7, #20]
 800bdc6:	f362 1345 	bfi	r3, r2, #5, #1
 800bdca:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_single_tap   = val.single_tap;
 800bdcc:	787b      	ldrb	r3, [r7, #1]
 800bdce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	7d3b      	ldrb	r3, [r7, #20]
 800bdd6:	f362 1386 	bfi	r3, r2, #6, #1
 800bdda:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_sleep_change = val.sleep_change;
 800bddc:	787b      	ldrb	r3, [r7, #1]
 800bdde:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	7d3b      	ldrb	r3, [r7, #20]
 800bde6:	f362 13c7 	bfi	r3, r2, #7, #1
 800bdea:	753b      	strb	r3, [r7, #20]
    emb_func_int2.not_used_01 = 0;
 800bdec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bdf0:	f36f 0302 	bfc	r3, #0, #3
 800bdf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 800bdf8:	787b      	ldrb	r3, [r7, #1]
 800bdfa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800be04:	f362 03c3 	bfi	r3, r2, #3, #1
 800be08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 800be0c:	78bb      	ldrb	r3, [r7, #2]
 800be0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800be12:	b2da      	uxtb	r2, r3
 800be14:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800be18:	f362 1304 	bfi	r3, r2, #4, #1
 800be1c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 800be20:	78bb      	ldrb	r3, [r7, #2]
 800be22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800be26:	b2da      	uxtb	r2, r3
 800be28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800be2c:	f362 1345 	bfi	r3, r2, #5, #1
 800be30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    emb_func_int2.not_used_02 = 0;
 800be34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800be38:	f36f 1386 	bfc	r3, #6, #1
 800be3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 800be40:	78bb      	ldrb	r3, [r7, #2]
 800be42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800be46:	b2da      	uxtb	r2, r3
 800be48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800be4c:	f362 13c7 	bfi	r3, r2, #7, #1
 800be50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 800be54:	78bb      	ldrb	r3, [r7, #2]
 800be56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be60:	f362 0300 	bfi	r3, r2, #0, #1
 800be64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_a.int2_fsm2 = val.fsm2;
 800be68:	78bb      	ldrb	r3, [r7, #2]
 800be6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be74:	f362 0341 	bfi	r3, r2, #1, #1
 800be78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_a.int2_fsm3 = val.fsm3;
 800be7c:	78bb      	ldrb	r3, [r7, #2]
 800be7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be88:	f362 0382 	bfi	r3, r2, #2, #1
 800be8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_a.int2_fsm4 = val.fsm4;
 800be90:	78bb      	ldrb	r3, [r7, #2]
 800be92:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800be96:	b2da      	uxtb	r2, r3
 800be98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be9c:	f362 03c3 	bfi	r3, r2, #3, #1
 800bea0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_a.int2_fsm5 = val.fsm5;
 800bea4:	78bb      	ldrb	r3, [r7, #2]
 800bea6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800beb0:	f362 1304 	bfi	r3, r2, #4, #1
 800beb4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_a.int2_fsm6 = val.fsm6;
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bec4:	f362 1345 	bfi	r3, r2, #5, #1
 800bec8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_a.int2_fsm7 = val.fsm7;
 800becc:	78fb      	ldrb	r3, [r7, #3]
 800bece:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bed8:	f362 1386 	bfi	r3, r2, #6, #1
 800bedc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_a.int2_fsm8 = val.fsm8;
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800beec:	f362 13c7 	bfi	r3, r2, #7, #1
 800bef0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 800bef4:	78fb      	ldrb	r3, [r7, #3]
 800bef6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800befa:	b2da      	uxtb	r2, r3
 800befc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf00:	f362 0300 	bfi	r3, r2, #0, #1
 800bf04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    fsm_int2_b.int2_fsm10 = val.fsm10;
 800bf08:	78fb      	ldrb	r3, [r7, #3]
 800bf0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf14:	f362 0341 	bfi	r3, r2, #1, #1
 800bf18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    fsm_int2_b.int2_fsm11 = val.fsm11;
 800bf1c:	78fb      	ldrb	r3, [r7, #3]
 800bf1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf28:	f362 0382 	bfi	r3, r2, #2, #1
 800bf2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    fsm_int2_b.int2_fsm12 = val.fsm12;
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf3c:	f362 03c3 	bfi	r3, r2, #3, #1
 800bf40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    fsm_int2_b.int2_fsm13 = val.fsm13;
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf50:	f362 1304 	bfi	r3, r2, #4, #1
 800bf54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    fsm_int2_b.int2_fsm14 = val.fsm14;
 800bf58:	793b      	ldrb	r3, [r7, #4]
 800bf5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf64:	f362 1345 	bfi	r3, r2, #5, #1
 800bf68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    fsm_int2_b.int2_fsm15 = val.fsm15;
 800bf6c:	793b      	ldrb	r3, [r7, #4]
 800bf6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf78:	f362 1386 	bfi	r3, r2, #6, #1
 800bf7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    fsm_int2_b.int2_fsm16 = val.fsm16;
 800bf80:	793b      	ldrb	r3, [r7, #4]
 800bf82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf8c:	f362 13c7 	bfi	r3, r2, #7, #1
 800bf90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    mlc_int2.int2_mlc1 = val.mlc1;
 800bf94:	793b      	ldrb	r3, [r7, #4]
 800bf96:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	7f3b      	ldrb	r3, [r7, #28]
 800bf9e:	f362 0300 	bfi	r3, r2, #0, #1
 800bfa2:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc2 = val.mlc2;
 800bfa4:	793b      	ldrb	r3, [r7, #4]
 800bfa6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	7f3b      	ldrb	r3, [r7, #28]
 800bfae:	f362 0341 	bfi	r3, r2, #1, #1
 800bfb2:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc3 = val.mlc3;
 800bfb4:	793b      	ldrb	r3, [r7, #4]
 800bfb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	7f3b      	ldrb	r3, [r7, #28]
 800bfbe:	f362 0382 	bfi	r3, r2, #2, #1
 800bfc2:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc4 = val.mlc4;
 800bfc4:	793b      	ldrb	r3, [r7, #4]
 800bfc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	7f3b      	ldrb	r3, [r7, #28]
 800bfce:	f362 03c3 	bfi	r3, r2, #3, #1
 800bfd2:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc5 = val.mlc5;
 800bfd4:	793b      	ldrb	r3, [r7, #4]
 800bfd6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	7f3b      	ldrb	r3, [r7, #28]
 800bfde:	f362 1304 	bfi	r3, r2, #4, #1
 800bfe2:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc6 = val.mlc6;
 800bfe4:	797b      	ldrb	r3, [r7, #5]
 800bfe6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	7f3b      	ldrb	r3, [r7, #28]
 800bfee:	f362 1345 	bfi	r3, r2, #5, #1
 800bff2:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc7 = val.mlc7;
 800bff4:	797b      	ldrb	r3, [r7, #5]
 800bff6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	7f3b      	ldrb	r3, [r7, #28]
 800bffe:	f362 1386 	bfi	r3, r2, #6, #1
 800c002:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc8 = val.mlc8;
 800c004:	797b      	ldrb	r3, [r7, #5]
 800c006:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	7f3b      	ldrb	r3, [r7, #28]
 800c00e:	f362 13c7 	bfi	r3, r2, #7, #1
 800c012:	773b      	strb	r3, [r7, #28]

    if (ret == 0)
 800c014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c016:	2b00      	cmp	r3, #0
 800c018:	d122      	bne.n	800c060 <lsm6dsox_pin_int2_route_set+0x3d8>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800c01a:	f107 0210 	add.w	r2, r7, #16
 800c01e:	2301      	movs	r3, #1
 800c020:	2113      	movs	r1, #19
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7fd fed2 	bl	8009dcc <lsm6dsox_read_reg>
 800c028:	63f8      	str	r0, [r7, #60]	; 0x3c

      if (ret == 0)
 800c02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d117      	bne.n	800c060 <lsm6dsox_pin_int2_route_set+0x3d8>
      {
        if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 800c030:	783b      	ldrb	r3, [r7, #0]
 800c032:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c036:	b2da      	uxtb	r2, r3
 800c038:	787b      	ldrb	r3, [r7, #1]
 800c03a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	4313      	orrs	r3, r2
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <lsm6dsox_pin_int2_route_set+0x3c8>
        {
          ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 800c048:	7c3b      	ldrb	r3, [r7, #16]
 800c04a:	f36f 1345 	bfc	r3, #5, #1
 800c04e:	743b      	strb	r3, [r7, #16]
        }

        ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800c050:	f107 0210 	add.w	r2, r7, #16
 800c054:	2301      	movs	r3, #1
 800c056:	2113      	movs	r1, #19
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f7fd fecf 	bl	8009dfc <lsm6dsox_write_reg>
 800c05e:	63f8      	str	r0, [r7, #60]	; 0x3c
      }
    }

    if (ret == 0)
 800c060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c062:	2b00      	cmp	r3, #0
 800c064:	d104      	bne.n	800c070 <lsm6dsox_pin_int2_route_set+0x3e8>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800c066:	2102      	movs	r1, #2
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f7fe fc43 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800c06e:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    if (ret == 0)
 800c070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c072:	2b00      	cmp	r3, #0
 800c074:	d107      	bne.n	800c086 <lsm6dsox_pin_int2_route_set+0x3fe>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MLC_INT2,
 800c076:	f107 021c 	add.w	r2, r7, #28
 800c07a:	2301      	movs	r3, #1
 800c07c:	2111      	movs	r1, #17
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f7fd febc 	bl	8009dfc <lsm6dsox_write_reg>
 800c084:	63f8      	str	r0, [r7, #60]	; 0x3c
                               (uint8_t *)&mlc_int2, 1);
    }

    if (ret == 0)
 800c086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d107      	bne.n	800c09c <lsm6dsox_pin_int2_route_set+0x414>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_INT2,
 800c08c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c090:	2301      	movs	r3, #1
 800c092:	210e      	movs	r1, #14
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7fd feb1 	bl	8009dfc <lsm6dsox_write_reg>
 800c09a:	63f8      	str	r0, [r7, #60]	; 0x3c
                               (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 800c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d107      	bne.n	800c0b2 <lsm6dsox_pin_int2_route_set+0x42a>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT2_A,
 800c0a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	210f      	movs	r1, #15
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7fd fea6 	bl	8009dfc <lsm6dsox_write_reg>
 800c0b0:	63f8      	str	r0, [r7, #60]	; 0x3c
                               (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 800c0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d107      	bne.n	800c0c8 <lsm6dsox_pin_int2_route_set+0x440>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT2_B,
 800c0b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c0bc:	2301      	movs	r3, #1
 800c0be:	2110      	movs	r1, #16
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f7fd fe9b 	bl	8009dfc <lsm6dsox_write_reg>
 800c0c6:	63f8      	str	r0, [r7, #60]	; 0x3c
                               (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 800c0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d104      	bne.n	800c0d8 <lsm6dsox_pin_int2_route_set+0x450>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f7fe fc0f 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800c0d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    if (ret == 0)
 800c0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f040 80cd 	bne.w	800c27a <lsm6dsox_pin_int2_route_set+0x5f2>
    {
      if ((emb_func_int2.int2_fsm_lc
 800c0e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c0e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c0e8:	b2da      	uxtb	r2, r3
           | emb_func_int2.int2_sig_mot
 800c0ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c0ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	b2da      	uxtb	r2, r3
           | emb_func_int2.int2_step_detector
 800c0f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c0fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c100:	b2db      	uxtb	r3, r3
 800c102:	4313      	orrs	r3, r2
 800c104:	b2da      	uxtb	r2, r3
           | emb_func_int2.int2_tilt
 800c106:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c10a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	4313      	orrs	r3, r2
 800c112:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm1
 800c114:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c118:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	4313      	orrs	r3, r2
 800c120:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm2
 800c122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c126:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	4313      	orrs	r3, r2
 800c12e:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm3
 800c130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c134:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	4313      	orrs	r3, r2
 800c13c:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm4
 800c13e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c142:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c146:	b2db      	uxtb	r3, r3
 800c148:	4313      	orrs	r3, r2
 800c14a:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm5
 800c14c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c150:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	4313      	orrs	r3, r2
 800c158:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm6
 800c15a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c15e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	4313      	orrs	r3, r2
 800c166:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm7
 800c168:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c16c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c170:	b2db      	uxtb	r3, r3
 800c172:	4313      	orrs	r3, r2
 800c174:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm8
 800c176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c17a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	4313      	orrs	r3, r2
 800c182:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm9
 800c184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c188:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	4313      	orrs	r3, r2
 800c190:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm10
 800c192:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c196:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	4313      	orrs	r3, r2
 800c19e:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm11
 800c1a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm12
 800c1ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm13
 800c1bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm14
 800c1ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm15
 800c1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm16
 800c1e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc1
 800c1f4:	7f3b      	ldrb	r3, [r7, #28]
 800c1f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc2
 800c200:	7f3b      	ldrb	r3, [r7, #28]
 800c202:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c206:	b2db      	uxtb	r3, r3
 800c208:	4313      	orrs	r3, r2
 800c20a:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc3
 800c20c:	7f3b      	ldrb	r3, [r7, #28]
 800c20e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c212:	b2db      	uxtb	r3, r3
 800c214:	4313      	orrs	r3, r2
 800c216:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc4
 800c218:	7f3b      	ldrb	r3, [r7, #28]
 800c21a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	4313      	orrs	r3, r2
 800c222:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc5
 800c224:	7f3b      	ldrb	r3, [r7, #28]
 800c226:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	4313      	orrs	r3, r2
 800c22e:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc6
 800c230:	7f3b      	ldrb	r3, [r7, #28]
 800c232:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c236:	b2db      	uxtb	r3, r3
 800c238:	4313      	orrs	r3, r2
 800c23a:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc7
 800c23c:	7f3b      	ldrb	r3, [r7, #28]
 800c23e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c242:	b2db      	uxtb	r3, r3
 800c244:	4313      	orrs	r3, r2
 800c246:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc8) != PROPERTY_DISABLE)
 800c248:	7f3b      	ldrb	r3, [r7, #28]
 800c24a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	4313      	orrs	r3, r2
 800c252:	b2db      	uxtb	r3, r3
      if ((emb_func_int2.int2_fsm_lc
 800c254:	2b00      	cmp	r3, #0
 800c256:	d004      	beq.n	800c262 <lsm6dsox_pin_int2_route_set+0x5da>
      {
        md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 800c258:	7d3b      	ldrb	r3, [r7, #20]
 800c25a:	f043 0302 	orr.w	r3, r3, #2
 800c25e:	753b      	strb	r3, [r7, #20]
 800c260:	e003      	b.n	800c26a <lsm6dsox_pin_int2_route_set+0x5e2>
      }

      else
      {
        md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 800c262:	7d3b      	ldrb	r3, [r7, #20]
 800c264:	f36f 0341 	bfc	r3, #1, #1
 800c268:	753b      	strb	r3, [r7, #20]
      }

      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT2_CTRL,
 800c26a:	f107 0220 	add.w	r2, r7, #32
 800c26e:	2301      	movs	r3, #1
 800c270:	210e      	movs	r1, #14
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f7fd fdc2 	bl	8009dfc <lsm6dsox_write_reg>
 800c278:	63f8      	str	r0, [r7, #60]	; 0x3c
                               (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 800c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d107      	bne.n	800c290 <lsm6dsox_pin_int2_route_set+0x608>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800c280:	f107 0214 	add.w	r2, r7, #20
 800c284:	2301      	movs	r3, #1
 800c286:	215f      	movs	r1, #95	; 0x5f
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7fd fdb7 	bl	8009dfc <lsm6dsox_write_reg>
 800c28e:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    if (ret == 0)
 800c290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c292:	2b00      	cmp	r3, #0
 800c294:	d107      	bne.n	800c2a6 <lsm6dsox_pin_int2_route_set+0x61e>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 800c296:	f107 0218 	add.w	r2, r7, #24
 800c29a:	2301      	movs	r3, #1
 800c29c:	2158      	movs	r1, #88	; 0x58
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f7fd fd94 	bl	8009dcc <lsm6dsox_read_reg>
 800c2a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    if (ret == 0)
 800c2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d106      	bne.n	800c2ba <lsm6dsox_pin_int2_route_set+0x632>
    {
      ret = lsm6dsox_pin_int1_route_get(ctx, &pin_int1_route);
 800c2ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7ff fab4 	bl	800b820 <lsm6dsox_pin_int1_route_get>
 800c2b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    if (ret == 0)
 800c2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f040 80c1 	bne.w	800c444 <lsm6dsox_pin_int2_route_set+0x7bc>
    {
      if ((val.fifo_bdr
 800c2c2:	783b      	ldrb	r3, [r7, #0]
 800c2c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c2c8:	b2da      	uxtb	r2, r3
           | val.drdy_g
 800c2ca:	783b      	ldrb	r3, [r7, #0]
 800c2cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	b2da      	uxtb	r2, r3
           | val.drdy_temp
 800c2d6:	783b      	ldrb	r3, [r7, #0]
 800c2d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	b2da      	uxtb	r2, r3
           | val.drdy_xl
 800c2e2:	783b      	ldrb	r3, [r7, #0]
 800c2e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	b2da      	uxtb	r2, r3
           | val.fifo_full
 800c2ee:	783b      	ldrb	r3, [r7, #0]
 800c2f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	b2da      	uxtb	r2, r3
           | val.fifo_ovr
 800c2fa:	783b      	ldrb	r3, [r7, #0]
 800c2fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c300:	b2db      	uxtb	r3, r3
 800c302:	4313      	orrs	r3, r2
 800c304:	b2da      	uxtb	r2, r3
           | val.fifo_th
 800c306:	783b      	ldrb	r3, [r7, #0]
 800c308:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	4313      	orrs	r3, r2
 800c310:	b2da      	uxtb	r2, r3
           | val.six_d
 800c312:	787b      	ldrb	r3, [r7, #1]
 800c314:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	4313      	orrs	r3, r2
 800c31c:	b2da      	uxtb	r2, r3
           | val.double_tap
 800c31e:	787b      	ldrb	r3, [r7, #1]
 800c320:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c324:	b2db      	uxtb	r3, r3
 800c326:	4313      	orrs	r3, r2
 800c328:	b2da      	uxtb	r2, r3
           | val.free_fall
 800c32a:	787b      	ldrb	r3, [r7, #1]
 800c32c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c330:	b2db      	uxtb	r3, r3
 800c332:	4313      	orrs	r3, r2
 800c334:	b2da      	uxtb	r2, r3
           | val.wake_up
 800c336:	787b      	ldrb	r3, [r7, #1]
 800c338:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	4313      	orrs	r3, r2
 800c340:	b2da      	uxtb	r2, r3
           | val.single_tap
 800c342:	787b      	ldrb	r3, [r7, #1]
 800c344:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	4313      	orrs	r3, r2
 800c34c:	b2da      	uxtb	r2, r3
           | val.sleep_change
 800c34e:	787b      	ldrb	r3, [r7, #1]
 800c350:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c354:	b2db      	uxtb	r3, r3
 800c356:	4313      	orrs	r3, r2
 800c358:	b2da      	uxtb	r2, r3
           | pin_int1_route.den_flag
 800c35a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c35e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c362:	b2db      	uxtb	r3, r3
 800c364:	4313      	orrs	r3, r2
 800c366:	b2da      	uxtb	r2, r3
           | pin_int1_route.boot
 800c368:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c36c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c370:	b2db      	uxtb	r3, r3
 800c372:	4313      	orrs	r3, r2
 800c374:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_bdr
 800c376:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c37a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	4313      	orrs	r3, r2
 800c382:	b2da      	uxtb	r2, r3
           | pin_int1_route.drdy_g
 800c384:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c388:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	4313      	orrs	r3, r2
 800c390:	b2da      	uxtb	r2, r3
           | pin_int1_route.drdy_xl
 800c392:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c396:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_full
 800c3a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c3a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_ovr
 800c3ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c3b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_th
 800c3bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c3c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	b2da      	uxtb	r2, r3
           | pin_int1_route.six_d
 800c3ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c3ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	b2da      	uxtb	r2, r3
           | pin_int1_route.double_tap
 800c3d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c3dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	b2da      	uxtb	r2, r3
           | pin_int1_route.free_fall
 800c3e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c3ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	b2da      	uxtb	r2, r3
           | pin_int1_route.wake_up
 800c3f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c3f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	4313      	orrs	r3, r2
 800c400:	b2da      	uxtb	r2, r3
           | pin_int1_route.single_tap
 800c402:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c406:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	4313      	orrs	r3, r2
 800c40e:	b2da      	uxtb	r2, r3
           | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 800c410:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c414:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	4313      	orrs	r3, r2
 800c41c:	b2db      	uxtb	r3, r3
      if ((val.fifo_bdr
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d004      	beq.n	800c42c <lsm6dsox_pin_int2_route_set+0x7a4>
      {
        tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800c422:	7e3b      	ldrb	r3, [r7, #24]
 800c424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c428:	763b      	strb	r3, [r7, #24]
 800c42a:	e003      	b.n	800c434 <lsm6dsox_pin_int2_route_set+0x7ac>
      }

      else
      {
        tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800c42c:	7e3b      	ldrb	r3, [r7, #24]
 800c42e:	f36f 13c7 	bfc	r3, #7, #1
 800c432:	763b      	strb	r3, [r7, #24]
      }

      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG2,
 800c434:	f107 0218 	add.w	r2, r7, #24
 800c438:	2301      	movs	r3, #1
 800c43a:	2158      	movs	r1, #88	; 0x58
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f7fd fcdd 	bl	8009dfc <lsm6dsox_write_reg>
 800c442:	63f8      	str	r0, [r7, #60]	; 0x3c
                               (uint8_t *) &tap_cfg2, 1);
    }
  }

  return ret;
 800c444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c446:	4618      	mov	r0, r3
 800c448:	3740      	adds	r7, #64	; 0x40
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <lsm6dsox_pin_int2_route_get>:
  *
  */
int32_t lsm6dsox_pin_int2_route_get(stmdev_ctx_t *ctx,
                                    stmdev_ctx_t *aux_ctx,
                                    lsm6dsox_pin_int2_route_t *val)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b08e      	sub	sp, #56	; 0x38
 800c452:	af00      	add	r7, sp, #0
 800c454:	60f8      	str	r0, [r7, #12]
 800c456:	60b9      	str	r1, [r7, #8]
 800c458:	607a      	str	r2, [r7, #4]
  lsm6dsox_int2_ctrl_t      int2_ctrl;
  lsm6dsox_mlc_int2_t       mlc_int2;
  lsm6dsox_md2_cfg_t        md2_cfg;
  lsm6dsox_ctrl4_c_t        ctrl4_c;
  int32_t                   ret;
  ret = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	637b      	str	r3, [r7, #52]	; 0x34

  if (aux_ctx != NULL)
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d011      	beq.n	800c488 <lsm6dsox_pin_int2_route_get+0x3a>
  {
    ret = lsm6dsox_read_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 800c464:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c468:	2301      	movs	r3, #1
 800c46a:	216f      	movs	r1, #111	; 0x6f
 800c46c:	68b8      	ldr	r0, [r7, #8]
 800c46e:	f7fd fcad 	bl	8009dcc <lsm6dsox_read_reg>
 800c472:	6378      	str	r0, [r7, #52]	; 0x34
                            (uint8_t *)&spi2_int_ois, 1);
    val->drdy_ois = spi2_int_ois.int2_drdy_ois;
 800c474:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c478:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c47c:	b2d9      	uxtb	r1, r3
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	7813      	ldrb	r3, [r2, #0]
 800c482:	f361 0300 	bfi	r3, r1, #0, #1
 800c486:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 8222 	beq.w	800c8d4 <lsm6dsox_pin_int2_route_get+0x486>
  {
    if (ret == 0)
 800c490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c492:	2b00      	cmp	r3, #0
 800c494:	d104      	bne.n	800c4a0 <lsm6dsox_pin_int2_route_get+0x52>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800c496:	2102      	movs	r1, #2
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f7fe fa2b 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800c49e:	6378      	str	r0, [r7, #52]	; 0x34
    }

    if (ret == 0)
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d107      	bne.n	800c4b6 <lsm6dsox_pin_int2_route_get+0x68>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT2,
 800c4a6:	f107 021c 	add.w	r2, r7, #28
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	2111      	movs	r1, #17
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f7fd fc8c 	bl	8009dcc <lsm6dsox_read_reg>
 800c4b4:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&mlc_int2, 1);
    }

    if (ret == 0)
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d107      	bne.n	800c4cc <lsm6dsox_pin_int2_route_get+0x7e>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT2,
 800c4bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	210e      	movs	r1, #14
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f7fd fc81 	bl	8009dcc <lsm6dsox_read_reg>
 800c4ca:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d107      	bne.n	800c4e2 <lsm6dsox_pin_int2_route_get+0x94>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_A,
 800c4d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	210f      	movs	r1, #15
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7fd fc76 	bl	8009dcc <lsm6dsox_read_reg>
 800c4e0:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d107      	bne.n	800c4f8 <lsm6dsox_pin_int2_route_get+0xaa>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_B,
 800c4e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	2110      	movs	r1, #16
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7fd fc6b 	bl	8009dcc <lsm6dsox_read_reg>
 800c4f6:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 800c4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d104      	bne.n	800c508 <lsm6dsox_pin_int2_route_get+0xba>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800c4fe:	2100      	movs	r1, #0
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7fe f9f7 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800c506:	6378      	str	r0, [r7, #52]	; 0x34
    }

    if (ret == 0)
 800c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d107      	bne.n	800c51e <lsm6dsox_pin_int2_route_get+0xd0>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 800c50e:	f107 0220 	add.w	r2, r7, #32
 800c512:	2301      	movs	r3, #1
 800c514:	210e      	movs	r1, #14
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7fd fc58 	bl	8009dcc <lsm6dsox_read_reg>
 800c51c:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 800c51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c520:	2b00      	cmp	r3, #0
 800c522:	d107      	bne.n	800c534 <lsm6dsox_pin_int2_route_get+0xe6>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG,
 800c524:	f107 0218 	add.w	r2, r7, #24
 800c528:	2301      	movs	r3, #1
 800c52a:	215f      	movs	r1, #95	; 0x5f
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f7fd fc4d 	bl	8009dcc <lsm6dsox_read_reg>
 800c532:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 800c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c536:	2b00      	cmp	r3, #0
 800c538:	d107      	bne.n	800c54a <lsm6dsox_pin_int2_route_get+0xfc>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800c53a:	f107 0214 	add.w	r2, r7, #20
 800c53e:	2301      	movs	r3, #1
 800c540:	2113      	movs	r1, #19
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7fd fc42 	bl	8009dcc <lsm6dsox_read_reg>
 800c548:	6378      	str	r0, [r7, #52]	; 0x34
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 800c54a:	7d3b      	ldrb	r3, [r7, #20]
 800c54c:	f003 0320 	and.w	r3, r3, #32
 800c550:	b2db      	uxtb	r3, r3
 800c552:	2b00      	cmp	r3, #0
 800c554:	d129      	bne.n	800c5aa <lsm6dsox_pin_int2_route_get+0x15c>
    {
      if (ret == 0)
 800c556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d111      	bne.n	800c580 <lsm6dsox_pin_int2_route_get+0x132>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 800c55c:	f107 0220 	add.w	r2, r7, #32
 800c560:	2301      	movs	r3, #1
 800c562:	210e      	movs	r1, #14
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f7fd fc31 	bl	8009dcc <lsm6dsox_read_reg>
 800c56a:	6378      	str	r0, [r7, #52]	; 0x34
                                (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800c56c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c570:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c574:	b2d9      	uxtb	r1, r3
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	7813      	ldrb	r3, [r2, #0]
 800c57a:	f361 03c3 	bfi	r3, r1, #3, #1
 800c57e:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 800c580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c582:	2b00      	cmp	r3, #0
 800c584:	d11b      	bne.n	800c5be <lsm6dsox_pin_int2_route_get+0x170>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800c586:	f107 0218 	add.w	r2, r7, #24
 800c58a:	2301      	movs	r3, #1
 800c58c:	215f      	movs	r1, #95	; 0x5f
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7fd fc1c 	bl	8009dcc <lsm6dsox_read_reg>
 800c594:	6378      	str	r0, [r7, #52]	; 0x34
        val->timestamp = md2_cfg.int2_timestamp;
 800c596:	7e3b      	ldrb	r3, [r7, #24]
 800c598:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c59c:	b2d9      	uxtb	r1, r3
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	7853      	ldrb	r3, [r2, #1]
 800c5a2:	f361 0300 	bfi	r3, r1, #0, #1
 800c5a6:	7053      	strb	r3, [r2, #1]
 800c5a8:	e009      	b.n	800c5be <lsm6dsox_pin_int2_route_get+0x170>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	7813      	ldrb	r3, [r2, #0]
 800c5ae:	f36f 03c3 	bfc	r3, #3, #1
 800c5b2:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	7853      	ldrb	r3, [r2, #1]
 800c5b8:	f36f 0300 	bfc	r3, #0, #1
 800c5bc:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 800c5be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c5c6:	b2d9      	uxtb	r1, r3
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	7813      	ldrb	r3, [r2, #0]
 800c5cc:	f361 0341 	bfi	r3, r1, #1, #1
 800c5d0:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 800c5d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c5da:	b2d9      	uxtb	r1, r3
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	7813      	ldrb	r3, [r2, #0]
 800c5e0:	f361 0382 	bfi	r3, r1, #2, #1
 800c5e4:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800c5e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c5ee:	b2d9      	uxtb	r1, r3
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	7813      	ldrb	r3, [r2, #0]
 800c5f4:	f361 03c3 	bfi	r3, r1, #3, #1
 800c5f8:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 800c5fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c602:	b2d9      	uxtb	r1, r3
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7813      	ldrb	r3, [r2, #0]
 800c608:	f361 1304 	bfi	r3, r1, #4, #1
 800c60c:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 800c60e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c612:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c616:	b2d9      	uxtb	r1, r3
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	7813      	ldrb	r3, [r2, #0]
 800c61c:	f361 1345 	bfi	r3, r1, #5, #1
 800c620:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 800c622:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c626:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c62a:	b2d9      	uxtb	r1, r3
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	7813      	ldrb	r3, [r2, #0]
 800c630:	f361 1386 	bfi	r3, r1, #6, #1
 800c634:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 800c636:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c63a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c63e:	b2d9      	uxtb	r1, r3
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	7813      	ldrb	r3, [r2, #0]
 800c644:	f361 13c7 	bfi	r3, r1, #7, #1
 800c648:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 800c64a:	7e3b      	ldrb	r3, [r7, #24]
 800c64c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c650:	b2d9      	uxtb	r1, r3
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	7853      	ldrb	r3, [r2, #1]
 800c656:	f361 0300 	bfi	r3, r1, #0, #1
 800c65a:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 800c65c:	7e3b      	ldrb	r3, [r7, #24]
 800c65e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c662:	b2d9      	uxtb	r1, r3
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	7853      	ldrb	r3, [r2, #1]
 800c668:	f361 0341 	bfi	r3, r1, #1, #1
 800c66c:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 800c66e:	7e3b      	ldrb	r3, [r7, #24]
 800c670:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c674:	b2d9      	uxtb	r1, r3
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	7853      	ldrb	r3, [r2, #1]
 800c67a:	f361 0382 	bfi	r3, r1, #2, #1
 800c67e:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 800c680:	7e3b      	ldrb	r3, [r7, #24]
 800c682:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c686:	b2d9      	uxtb	r1, r3
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	7853      	ldrb	r3, [r2, #1]
 800c68c:	f361 03c3 	bfi	r3, r1, #3, #1
 800c690:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 800c692:	7e3b      	ldrb	r3, [r7, #24]
 800c694:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c698:	b2d9      	uxtb	r1, r3
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	7853      	ldrb	r3, [r2, #1]
 800c69e:	f361 1304 	bfi	r3, r1, #4, #1
 800c6a2:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 800c6a4:	7e3b      	ldrb	r3, [r7, #24]
 800c6a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c6aa:	b2d9      	uxtb	r1, r3
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	7853      	ldrb	r3, [r2, #1]
 800c6b0:	f361 1345 	bfi	r3, r1, #5, #1
 800c6b4:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 800c6b6:	7e3b      	ldrb	r3, [r7, #24]
 800c6b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c6bc:	b2d9      	uxtb	r1, r3
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	7853      	ldrb	r3, [r2, #1]
 800c6c2:	f361 1386 	bfi	r3, r1, #6, #1
 800c6c6:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 800c6c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c6cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c6d0:	b2d9      	uxtb	r1, r3
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	7853      	ldrb	r3, [r2, #1]
 800c6d6:	f361 13c7 	bfi	r3, r1, #7, #1
 800c6da:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 800c6dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c6e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c6e4:	b2d9      	uxtb	r1, r3
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	7893      	ldrb	r3, [r2, #2]
 800c6ea:	f361 0300 	bfi	r3, r1, #0, #1
 800c6ee:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 800c6f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c6f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c6f8:	b2d9      	uxtb	r1, r3
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	7893      	ldrb	r3, [r2, #2]
 800c6fe:	f361 0382 	bfi	r3, r1, #2, #1
 800c702:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800c704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c708:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c70c:	b2d9      	uxtb	r1, r3
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	7893      	ldrb	r3, [r2, #2]
 800c712:	f361 03c3 	bfi	r3, r1, #3, #1
 800c716:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 800c718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c71c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c720:	b2d9      	uxtb	r1, r3
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	7893      	ldrb	r3, [r2, #2]
 800c726:	f361 1304 	bfi	r3, r1, #4, #1
 800c72a:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 800c72c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c730:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c734:	b2d9      	uxtb	r1, r3
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	7893      	ldrb	r3, [r2, #2]
 800c73a:	f361 1345 	bfi	r3, r1, #5, #1
 800c73e:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 800c740:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c744:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c748:	b2d9      	uxtb	r1, r3
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	7893      	ldrb	r3, [r2, #2]
 800c74e:	f361 1386 	bfi	r3, r1, #6, #1
 800c752:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 800c754:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c758:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c75c:	b2d9      	uxtb	r1, r3
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	7893      	ldrb	r3, [r2, #2]
 800c762:	f361 13c7 	bfi	r3, r1, #7, #1
 800c766:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800c768:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c76c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c770:	b2d9      	uxtb	r1, r3
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	78d3      	ldrb	r3, [r2, #3]
 800c776:	f361 0300 	bfi	r3, r1, #0, #1
 800c77a:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 800c77c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c780:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c784:	b2d9      	uxtb	r1, r3
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	78d3      	ldrb	r3, [r2, #3]
 800c78a:	f361 0341 	bfi	r3, r1, #1, #1
 800c78e:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 800c790:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c794:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c798:	b2d9      	uxtb	r1, r3
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	78d3      	ldrb	r3, [r2, #3]
 800c79e:	f361 0382 	bfi	r3, r1, #2, #1
 800c7a2:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800c7a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c7ac:	b2d9      	uxtb	r1, r3
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	78d3      	ldrb	r3, [r2, #3]
 800c7b2:	f361 03c3 	bfi	r3, r1, #3, #1
 800c7b6:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800c7b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c7c0:	b2d9      	uxtb	r1, r3
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	78d3      	ldrb	r3, [r2, #3]
 800c7c6:	f361 1304 	bfi	r3, r1, #4, #1
 800c7ca:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 800c7cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c7d4:	b2d9      	uxtb	r1, r3
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	78d3      	ldrb	r3, [r2, #3]
 800c7da:	f361 1345 	bfi	r3, r1, #5, #1
 800c7de:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 800c7e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c7e8:	b2d9      	uxtb	r1, r3
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	78d3      	ldrb	r3, [r2, #3]
 800c7ee:	f361 1386 	bfi	r3, r1, #6, #1
 800c7f2:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800c7f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c7fc:	b2d9      	uxtb	r1, r3
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	78d3      	ldrb	r3, [r2, #3]
 800c802:	f361 13c7 	bfi	r3, r1, #7, #1
 800c806:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 800c808:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c80c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c810:	b2d9      	uxtb	r1, r3
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	7913      	ldrb	r3, [r2, #4]
 800c816:	f361 0300 	bfi	r3, r1, #0, #1
 800c81a:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 800c81c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c820:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c824:	b2d9      	uxtb	r1, r3
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	7913      	ldrb	r3, [r2, #4]
 800c82a:	f361 0341 	bfi	r3, r1, #1, #1
 800c82e:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 800c830:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c834:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c838:	b2d9      	uxtb	r1, r3
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	7913      	ldrb	r3, [r2, #4]
 800c83e:	f361 0382 	bfi	r3, r1, #2, #1
 800c842:	7113      	strb	r3, [r2, #4]
    val->mlc1 = mlc_int2.int2_mlc1;
 800c844:	7f3b      	ldrb	r3, [r7, #28]
 800c846:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c84a:	b2d9      	uxtb	r1, r3
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	7913      	ldrb	r3, [r2, #4]
 800c850:	f361 03c3 	bfi	r3, r1, #3, #1
 800c854:	7113      	strb	r3, [r2, #4]
    val->mlc2 = mlc_int2.int2_mlc2;
 800c856:	7f3b      	ldrb	r3, [r7, #28]
 800c858:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c85c:	b2d9      	uxtb	r1, r3
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	7913      	ldrb	r3, [r2, #4]
 800c862:	f361 1304 	bfi	r3, r1, #4, #1
 800c866:	7113      	strb	r3, [r2, #4]
    val->mlc3 = mlc_int2.int2_mlc3;
 800c868:	7f3b      	ldrb	r3, [r7, #28]
 800c86a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c86e:	b2d9      	uxtb	r1, r3
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	7913      	ldrb	r3, [r2, #4]
 800c874:	f361 1345 	bfi	r3, r1, #5, #1
 800c878:	7113      	strb	r3, [r2, #4]
    val->mlc4 = mlc_int2.int2_mlc4;
 800c87a:	7f3b      	ldrb	r3, [r7, #28]
 800c87c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c880:	b2d9      	uxtb	r1, r3
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	7913      	ldrb	r3, [r2, #4]
 800c886:	f361 1386 	bfi	r3, r1, #6, #1
 800c88a:	7113      	strb	r3, [r2, #4]
    val->mlc5 = mlc_int2.int2_mlc5;
 800c88c:	7f3b      	ldrb	r3, [r7, #28]
 800c88e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c892:	b2d9      	uxtb	r1, r3
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	7913      	ldrb	r3, [r2, #4]
 800c898:	f361 13c7 	bfi	r3, r1, #7, #1
 800c89c:	7113      	strb	r3, [r2, #4]
    val->mlc6 = mlc_int2.int2_mlc6;
 800c89e:	7f3b      	ldrb	r3, [r7, #28]
 800c8a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c8a4:	b2d9      	uxtb	r1, r3
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	7953      	ldrb	r3, [r2, #5]
 800c8aa:	f361 0300 	bfi	r3, r1, #0, #1
 800c8ae:	7153      	strb	r3, [r2, #5]
    val->mlc7 = mlc_int2.int2_mlc7;
 800c8b0:	7f3b      	ldrb	r3, [r7, #28]
 800c8b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c8b6:	b2d9      	uxtb	r1, r3
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	7953      	ldrb	r3, [r2, #5]
 800c8bc:	f361 0341 	bfi	r3, r1, #1, #1
 800c8c0:	7153      	strb	r3, [r2, #5]
    val->mlc8 = mlc_int2.int2_mlc8;
 800c8c2:	7f3b      	ldrb	r3, [r7, #28]
 800c8c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c8c8:	b2d9      	uxtb	r1, r3
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	7953      	ldrb	r3, [r2, #5]
 800c8ce:	f361 0382 	bfi	r3, r1, #2, #1
 800c8d2:	7153      	strb	r3, [r2, #5]
  }

  return ret;
 800c8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3738      	adds	r7, #56	; 0x38
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <lsm6dsox_embedded_sens_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *val)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b086      	sub	sp, #24
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7fe f802 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800c8f0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d107      	bne.n	800c908 <lsm6dsox_embedded_sens_set+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 800c8f8:	f107 0210 	add.w	r2, r7, #16
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	2104      	movs	r1, #4
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7fd fa63 	bl	8009dcc <lsm6dsox_read_reg>
 800c906:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d13d      	bne.n	800c98a <lsm6dsox_embedded_sens_set+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 800c90e:	f107 020c 	add.w	r2, r7, #12
 800c912:	2301      	movs	r3, #1
 800c914:	2105      	movs	r1, #5
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7fd fa58 	bl	8009dcc <lsm6dsox_read_reg>
 800c91c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.mlc_en = val->mlc;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c926:	b2da      	uxtb	r2, r3
 800c928:	7b3b      	ldrb	r3, [r7, #12]
 800c92a:	f362 1304 	bfi	r3, r2, #4, #1
 800c92e:	733b      	strb	r3, [r7, #12]
    emb_func_en_b.fsm_en = val->fsm;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	7b3b      	ldrb	r3, [r7, #12]
 800c93c:	f362 0300 	bfi	r3, r2, #0, #1
 800c940:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.tilt_en = val->tilt;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	7c3b      	ldrb	r3, [r7, #16]
 800c94e:	f362 1304 	bfi	r3, r2, #4, #1
 800c952:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.pedo_en = val->step;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	7c3b      	ldrb	r3, [r7, #16]
 800c960:	f362 03c3 	bfi	r3, r2, #3, #1
 800c964:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.sign_motion_en = val->sig_mot;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	7c3b      	ldrb	r3, [r7, #16]
 800c972:	f362 1345 	bfi	r3, r2, #5, #1
 800c976:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.fifo_compr_en = val->fifo_compr;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c980:	b2da      	uxtb	r2, r3
 800c982:	7b3b      	ldrb	r3, [r7, #12]
 800c984:	f362 03c3 	bfi	r3, r2, #3, #1
 800c988:	733b      	strb	r3, [r7, #12]
  }

  if (ret == 0)
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d107      	bne.n	800c9a0 <lsm6dsox_embedded_sens_set+0xc2>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 800c990:	f107 0210 	add.w	r2, r7, #16
 800c994:	2301      	movs	r3, #1
 800c996:	2104      	movs	r1, #4
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7fd fa2f 	bl	8009dfc <lsm6dsox_write_reg>
 800c99e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d107      	bne.n	800c9b6 <lsm6dsox_embedded_sens_set+0xd8>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 800c9a6:	f107 020c 	add.w	r2, r7, #12
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	2105      	movs	r1, #5
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7fd fa24 	bl	8009dfc <lsm6dsox_write_reg>
 800c9b4:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d104      	bne.n	800c9c6 <lsm6dsox_embedded_sens_set+0xe8>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800c9bc:	2100      	movs	r1, #0
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7fd ff98 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800c9c4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800c9c6:	697b      	ldr	r3, [r7, #20]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800c9da:	2102      	movs	r1, #2
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7fd ff89 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800c9e2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d107      	bne.n	800c9fa <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 800c9ea:	f107 0210 	add.w	r2, r7, #16
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	2104      	movs	r1, #4
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7fd f9ea 	bl	8009dcc <lsm6dsox_read_reg>
 800c9f8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d13d      	bne.n	800ca7c <lsm6dsox_embedded_sens_get+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 800ca00:	f107 020c 	add.w	r2, r7, #12
 800ca04:	2301      	movs	r3, #1
 800ca06:	2105      	movs	r1, #5
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7fd f9df 	bl	8009dcc <lsm6dsox_read_reg>
 800ca0e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 800ca10:	7b3b      	ldrb	r3, [r7, #12]
 800ca12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ca16:	b2d9      	uxtb	r1, r3
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	7813      	ldrb	r3, [r2, #0]
 800ca1c:	f361 03c3 	bfi	r3, r1, #3, #1
 800ca20:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 800ca22:	7b3b      	ldrb	r3, [r7, #12]
 800ca24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ca28:	b2d9      	uxtb	r1, r3
 800ca2a:	683a      	ldr	r2, [r7, #0]
 800ca2c:	7813      	ldrb	r3, [r2, #0]
 800ca2e:	f361 1304 	bfi	r3, r1, #4, #1
 800ca32:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 800ca34:	7c3b      	ldrb	r3, [r7, #16]
 800ca36:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ca3a:	b2d9      	uxtb	r1, r3
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	7813      	ldrb	r3, [r2, #0]
 800ca40:	f361 0341 	bfi	r3, r1, #1, #1
 800ca44:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 800ca46:	7c3b      	ldrb	r3, [r7, #16]
 800ca48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ca4c:	b2d9      	uxtb	r1, r3
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	7813      	ldrb	r3, [r2, #0]
 800ca52:	f361 0382 	bfi	r3, r1, #2, #1
 800ca56:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 800ca58:	7c3b      	ldrb	r3, [r7, #16]
 800ca5a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ca5e:	b2d9      	uxtb	r1, r3
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	7813      	ldrb	r3, [r2, #0]
 800ca64:	f361 0300 	bfi	r3, r1, #0, #1
 800ca68:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 800ca6a:	7b3b      	ldrb	r3, [r7, #12]
 800ca6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ca70:	b2d9      	uxtb	r1, r3
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	7813      	ldrb	r3, [r2, #0]
 800ca76:	f361 1345 	bfi	r3, r1, #5, #1
 800ca7a:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d104      	bne.n	800ca8c <lsm6dsox_embedded_sens_get+0xbc>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800ca82:	2100      	movs	r1, #0
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7fd ff35 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800ca8a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800ca8c:	697b      	ldr	r3, [r7, #20]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <lsm6dsox_embedded_sens_off>:
  *                  EMB_FUNC_EN_A e EMB_FUNC_EN_B.
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_off(stmdev_ctx_t *ctx)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b086      	sub	sp, #24
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800ca9e:	2102      	movs	r1, #2
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7fd ff27 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800caa6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d107      	bne.n	800cabe <lsm6dsox_embedded_sens_off+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 800caae:	f107 0210 	add.w	r2, r7, #16
 800cab2:	2301      	movs	r3, #1
 800cab4:	2104      	movs	r1, #4
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7fd f988 	bl	8009dcc <lsm6dsox_read_reg>
 800cabc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d11f      	bne.n	800cb04 <lsm6dsox_embedded_sens_off+0x6e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 800cac4:	f107 020c 	add.w	r2, r7, #12
 800cac8:	2301      	movs	r3, #1
 800caca:	2105      	movs	r1, #5
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7fd f97d 	bl	8009dcc <lsm6dsox_read_reg>
 800cad2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.mlc_en = PROPERTY_DISABLE;
 800cad4:	7b3b      	ldrb	r3, [r7, #12]
 800cad6:	f36f 1304 	bfc	r3, #4, #1
 800cada:	733b      	strb	r3, [r7, #12]
    emb_func_en_b.fsm_en = PROPERTY_DISABLE;
 800cadc:	7b3b      	ldrb	r3, [r7, #12]
 800cade:	f36f 0300 	bfc	r3, #0, #1
 800cae2:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.tilt_en = PROPERTY_DISABLE;
 800cae4:	7c3b      	ldrb	r3, [r7, #16]
 800cae6:	f36f 1304 	bfc	r3, #4, #1
 800caea:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.pedo_en = PROPERTY_DISABLE;
 800caec:	7c3b      	ldrb	r3, [r7, #16]
 800caee:	f36f 03c3 	bfc	r3, #3, #1
 800caf2:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.sign_motion_en = PROPERTY_DISABLE;
 800caf4:	7c3b      	ldrb	r3, [r7, #16]
 800caf6:	f36f 1345 	bfc	r3, #5, #1
 800cafa:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.fifo_compr_en = PROPERTY_DISABLE;
 800cafc:	7b3b      	ldrb	r3, [r7, #12]
 800cafe:	f36f 03c3 	bfc	r3, #3, #1
 800cb02:	733b      	strb	r3, [r7, #12]
  }

  if (ret == 0)
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d107      	bne.n	800cb1a <lsm6dsox_embedded_sens_off+0x84>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 800cb0a:	f107 0210 	add.w	r2, r7, #16
 800cb0e:	2301      	movs	r3, #1
 800cb10:	2104      	movs	r1, #4
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7fd f972 	bl	8009dfc <lsm6dsox_write_reg>
 800cb18:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d107      	bne.n	800cb30 <lsm6dsox_embedded_sens_off+0x9a>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 800cb20:	f107 020c 	add.w	r2, r7, #12
 800cb24:	2301      	movs	r3, #1
 800cb26:	2105      	movs	r1, #5
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7fd f967 	bl	8009dfc <lsm6dsox_write_reg>
 800cb2e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d104      	bne.n	800cb40 <lsm6dsox_embedded_sens_off+0xaa>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800cb36:	2100      	movs	r1, #0
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7fd fedb 	bl	800a8f4 <lsm6dsox_mem_bank_set>
 800cb3e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800cb40:	697b      	ldr	r3, [r7, #20]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <__errno>:
 800cb4c:	4b01      	ldr	r3, [pc, #4]	; (800cb54 <__errno+0x8>)
 800cb4e:	6818      	ldr	r0, [r3, #0]
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	20000010 	.word	0x20000010

0800cb58 <__libc_init_array>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	4d0d      	ldr	r5, [pc, #52]	; (800cb90 <__libc_init_array+0x38>)
 800cb5c:	2600      	movs	r6, #0
 800cb5e:	4c0d      	ldr	r4, [pc, #52]	; (800cb94 <__libc_init_array+0x3c>)
 800cb60:	1b64      	subs	r4, r4, r5
 800cb62:	10a4      	asrs	r4, r4, #2
 800cb64:	42a6      	cmp	r6, r4
 800cb66:	d109      	bne.n	800cb7c <__libc_init_array+0x24>
 800cb68:	4d0b      	ldr	r5, [pc, #44]	; (800cb98 <__libc_init_array+0x40>)
 800cb6a:	2600      	movs	r6, #0
 800cb6c:	4c0b      	ldr	r4, [pc, #44]	; (800cb9c <__libc_init_array+0x44>)
 800cb6e:	f001 f831 	bl	800dbd4 <_init>
 800cb72:	1b64      	subs	r4, r4, r5
 800cb74:	10a4      	asrs	r4, r4, #2
 800cb76:	42a6      	cmp	r6, r4
 800cb78:	d105      	bne.n	800cb86 <__libc_init_array+0x2e>
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb80:	3601      	adds	r6, #1
 800cb82:	4798      	blx	r3
 800cb84:	e7ee      	b.n	800cb64 <__libc_init_array+0xc>
 800cb86:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb8a:	3601      	adds	r6, #1
 800cb8c:	4798      	blx	r3
 800cb8e:	e7f2      	b.n	800cb76 <__libc_init_array+0x1e>
 800cb90:	0800dfdc 	.word	0x0800dfdc
 800cb94:	0800dfdc 	.word	0x0800dfdc
 800cb98:	0800dfdc 	.word	0x0800dfdc
 800cb9c:	0800dfe0 	.word	0x0800dfe0

0800cba0 <memset>:
 800cba0:	4402      	add	r2, r0
 800cba2:	4603      	mov	r3, r0
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d100      	bne.n	800cbaa <memset+0xa>
 800cba8:	4770      	bx	lr
 800cbaa:	f803 1b01 	strb.w	r1, [r3], #1
 800cbae:	e7f9      	b.n	800cba4 <memset+0x4>

0800cbb0 <iprintf>:
 800cbb0:	b40f      	push	{r0, r1, r2, r3}
 800cbb2:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <iprintf+0x2c>)
 800cbb4:	b513      	push	{r0, r1, r4, lr}
 800cbb6:	681c      	ldr	r4, [r3, #0]
 800cbb8:	b124      	cbz	r4, 800cbc4 <iprintf+0x14>
 800cbba:	69a3      	ldr	r3, [r4, #24]
 800cbbc:	b913      	cbnz	r3, 800cbc4 <iprintf+0x14>
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 fa5c 	bl	800d07c <__sinit>
 800cbc4:	ab05      	add	r3, sp, #20
 800cbc6:	9a04      	ldr	r2, [sp, #16]
 800cbc8:	68a1      	ldr	r1, [r4, #8]
 800cbca:	4620      	mov	r0, r4
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	f000 fc65 	bl	800d49c <_vfiprintf_r>
 800cbd2:	b002      	add	sp, #8
 800cbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbd8:	b004      	add	sp, #16
 800cbda:	4770      	bx	lr
 800cbdc:	20000010 	.word	0x20000010

0800cbe0 <_puts_r>:
 800cbe0:	b570      	push	{r4, r5, r6, lr}
 800cbe2:	460e      	mov	r6, r1
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	b118      	cbz	r0, 800cbf0 <_puts_r+0x10>
 800cbe8:	6983      	ldr	r3, [r0, #24]
 800cbea:	b90b      	cbnz	r3, 800cbf0 <_puts_r+0x10>
 800cbec:	f000 fa46 	bl	800d07c <__sinit>
 800cbf0:	69ab      	ldr	r3, [r5, #24]
 800cbf2:	68ac      	ldr	r4, [r5, #8]
 800cbf4:	b913      	cbnz	r3, 800cbfc <_puts_r+0x1c>
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f000 fa40 	bl	800d07c <__sinit>
 800cbfc:	4b2c      	ldr	r3, [pc, #176]	; (800ccb0 <_puts_r+0xd0>)
 800cbfe:	429c      	cmp	r4, r3
 800cc00:	d120      	bne.n	800cc44 <_puts_r+0x64>
 800cc02:	686c      	ldr	r4, [r5, #4]
 800cc04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc06:	07db      	lsls	r3, r3, #31
 800cc08:	d405      	bmi.n	800cc16 <_puts_r+0x36>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	0598      	lsls	r0, r3, #22
 800cc0e:	d402      	bmi.n	800cc16 <_puts_r+0x36>
 800cc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc12:	f000 fad1 	bl	800d1b8 <__retarget_lock_acquire_recursive>
 800cc16:	89a3      	ldrh	r3, [r4, #12]
 800cc18:	0719      	lsls	r1, r3, #28
 800cc1a:	d51d      	bpl.n	800cc58 <_puts_r+0x78>
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	b1db      	cbz	r3, 800cc58 <_puts_r+0x78>
 800cc20:	3e01      	subs	r6, #1
 800cc22:	68a3      	ldr	r3, [r4, #8]
 800cc24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	bb39      	cbnz	r1, 800cc7e <_puts_r+0x9e>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da38      	bge.n	800cca4 <_puts_r+0xc4>
 800cc32:	4622      	mov	r2, r4
 800cc34:	210a      	movs	r1, #10
 800cc36:	4628      	mov	r0, r5
 800cc38:	f000 f848 	bl	800cccc <__swbuf_r>
 800cc3c:	3001      	adds	r0, #1
 800cc3e:	d011      	beq.n	800cc64 <_puts_r+0x84>
 800cc40:	250a      	movs	r5, #10
 800cc42:	e011      	b.n	800cc68 <_puts_r+0x88>
 800cc44:	4b1b      	ldr	r3, [pc, #108]	; (800ccb4 <_puts_r+0xd4>)
 800cc46:	429c      	cmp	r4, r3
 800cc48:	d101      	bne.n	800cc4e <_puts_r+0x6e>
 800cc4a:	68ac      	ldr	r4, [r5, #8]
 800cc4c:	e7da      	b.n	800cc04 <_puts_r+0x24>
 800cc4e:	4b1a      	ldr	r3, [pc, #104]	; (800ccb8 <_puts_r+0xd8>)
 800cc50:	429c      	cmp	r4, r3
 800cc52:	bf08      	it	eq
 800cc54:	68ec      	ldreq	r4, [r5, #12]
 800cc56:	e7d5      	b.n	800cc04 <_puts_r+0x24>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f000 f888 	bl	800cd70 <__swsetup_r>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d0dd      	beq.n	800cc20 <_puts_r+0x40>
 800cc64:	f04f 35ff 	mov.w	r5, #4294967295
 800cc68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc6a:	07da      	lsls	r2, r3, #31
 800cc6c:	d405      	bmi.n	800cc7a <_puts_r+0x9a>
 800cc6e:	89a3      	ldrh	r3, [r4, #12]
 800cc70:	059b      	lsls	r3, r3, #22
 800cc72:	d402      	bmi.n	800cc7a <_puts_r+0x9a>
 800cc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc76:	f000 faa0 	bl	800d1ba <__retarget_lock_release_recursive>
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	da04      	bge.n	800cc8c <_puts_r+0xac>
 800cc82:	69a2      	ldr	r2, [r4, #24]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	dc06      	bgt.n	800cc96 <_puts_r+0xb6>
 800cc88:	290a      	cmp	r1, #10
 800cc8a:	d004      	beq.n	800cc96 <_puts_r+0xb6>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	6022      	str	r2, [r4, #0]
 800cc92:	7019      	strb	r1, [r3, #0]
 800cc94:	e7c5      	b.n	800cc22 <_puts_r+0x42>
 800cc96:	4622      	mov	r2, r4
 800cc98:	4628      	mov	r0, r5
 800cc9a:	f000 f817 	bl	800cccc <__swbuf_r>
 800cc9e:	3001      	adds	r0, #1
 800cca0:	d1bf      	bne.n	800cc22 <_puts_r+0x42>
 800cca2:	e7df      	b.n	800cc64 <_puts_r+0x84>
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	250a      	movs	r5, #10
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	6022      	str	r2, [r4, #0]
 800ccac:	701d      	strb	r5, [r3, #0]
 800ccae:	e7db      	b.n	800cc68 <_puts_r+0x88>
 800ccb0:	0800df60 	.word	0x0800df60
 800ccb4:	0800df80 	.word	0x0800df80
 800ccb8:	0800df40 	.word	0x0800df40

0800ccbc <puts>:
 800ccbc:	4b02      	ldr	r3, [pc, #8]	; (800ccc8 <puts+0xc>)
 800ccbe:	4601      	mov	r1, r0
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	f7ff bf8d 	b.w	800cbe0 <_puts_r>
 800ccc6:	bf00      	nop
 800ccc8:	20000010 	.word	0x20000010

0800cccc <__swbuf_r>:
 800cccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccce:	460e      	mov	r6, r1
 800ccd0:	4614      	mov	r4, r2
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	b118      	cbz	r0, 800ccde <__swbuf_r+0x12>
 800ccd6:	6983      	ldr	r3, [r0, #24]
 800ccd8:	b90b      	cbnz	r3, 800ccde <__swbuf_r+0x12>
 800ccda:	f000 f9cf 	bl	800d07c <__sinit>
 800ccde:	4b21      	ldr	r3, [pc, #132]	; (800cd64 <__swbuf_r+0x98>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	d12b      	bne.n	800cd3c <__swbuf_r+0x70>
 800cce4:	686c      	ldr	r4, [r5, #4]
 800cce6:	69a3      	ldr	r3, [r4, #24]
 800cce8:	60a3      	str	r3, [r4, #8]
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	071a      	lsls	r2, r3, #28
 800ccee:	d52f      	bpl.n	800cd50 <__swbuf_r+0x84>
 800ccf0:	6923      	ldr	r3, [r4, #16]
 800ccf2:	b36b      	cbz	r3, 800cd50 <__swbuf_r+0x84>
 800ccf4:	6923      	ldr	r3, [r4, #16]
 800ccf6:	b2f6      	uxtb	r6, r6
 800ccf8:	6820      	ldr	r0, [r4, #0]
 800ccfa:	4637      	mov	r7, r6
 800ccfc:	1ac0      	subs	r0, r0, r3
 800ccfe:	6963      	ldr	r3, [r4, #20]
 800cd00:	4283      	cmp	r3, r0
 800cd02:	dc04      	bgt.n	800cd0e <__swbuf_r+0x42>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4628      	mov	r0, r5
 800cd08:	f000 f924 	bl	800cf54 <_fflush_r>
 800cd0c:	bb30      	cbnz	r0, 800cd5c <__swbuf_r+0x90>
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	3001      	adds	r0, #1
 800cd12:	3b01      	subs	r3, #1
 800cd14:	60a3      	str	r3, [r4, #8]
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	6022      	str	r2, [r4, #0]
 800cd1c:	701e      	strb	r6, [r3, #0]
 800cd1e:	6963      	ldr	r3, [r4, #20]
 800cd20:	4283      	cmp	r3, r0
 800cd22:	d004      	beq.n	800cd2e <__swbuf_r+0x62>
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	07db      	lsls	r3, r3, #31
 800cd28:	d506      	bpl.n	800cd38 <__swbuf_r+0x6c>
 800cd2a:	2e0a      	cmp	r6, #10
 800cd2c:	d104      	bne.n	800cd38 <__swbuf_r+0x6c>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 f90f 	bl	800cf54 <_fflush_r>
 800cd36:	b988      	cbnz	r0, 800cd5c <__swbuf_r+0x90>
 800cd38:	4638      	mov	r0, r7
 800cd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd3c:	4b0a      	ldr	r3, [pc, #40]	; (800cd68 <__swbuf_r+0x9c>)
 800cd3e:	429c      	cmp	r4, r3
 800cd40:	d101      	bne.n	800cd46 <__swbuf_r+0x7a>
 800cd42:	68ac      	ldr	r4, [r5, #8]
 800cd44:	e7cf      	b.n	800cce6 <__swbuf_r+0x1a>
 800cd46:	4b09      	ldr	r3, [pc, #36]	; (800cd6c <__swbuf_r+0xa0>)
 800cd48:	429c      	cmp	r4, r3
 800cd4a:	bf08      	it	eq
 800cd4c:	68ec      	ldreq	r4, [r5, #12]
 800cd4e:	e7ca      	b.n	800cce6 <__swbuf_r+0x1a>
 800cd50:	4621      	mov	r1, r4
 800cd52:	4628      	mov	r0, r5
 800cd54:	f000 f80c 	bl	800cd70 <__swsetup_r>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d0cb      	beq.n	800ccf4 <__swbuf_r+0x28>
 800cd5c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd60:	e7ea      	b.n	800cd38 <__swbuf_r+0x6c>
 800cd62:	bf00      	nop
 800cd64:	0800df60 	.word	0x0800df60
 800cd68:	0800df80 	.word	0x0800df80
 800cd6c:	0800df40 	.word	0x0800df40

0800cd70 <__swsetup_r>:
 800cd70:	4b32      	ldr	r3, [pc, #200]	; (800ce3c <__swsetup_r+0xcc>)
 800cd72:	b570      	push	{r4, r5, r6, lr}
 800cd74:	681d      	ldr	r5, [r3, #0]
 800cd76:	4606      	mov	r6, r0
 800cd78:	460c      	mov	r4, r1
 800cd7a:	b125      	cbz	r5, 800cd86 <__swsetup_r+0x16>
 800cd7c:	69ab      	ldr	r3, [r5, #24]
 800cd7e:	b913      	cbnz	r3, 800cd86 <__swsetup_r+0x16>
 800cd80:	4628      	mov	r0, r5
 800cd82:	f000 f97b 	bl	800d07c <__sinit>
 800cd86:	4b2e      	ldr	r3, [pc, #184]	; (800ce40 <__swsetup_r+0xd0>)
 800cd88:	429c      	cmp	r4, r3
 800cd8a:	d10f      	bne.n	800cdac <__swsetup_r+0x3c>
 800cd8c:	686c      	ldr	r4, [r5, #4]
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd94:	0719      	lsls	r1, r3, #28
 800cd96:	d42c      	bmi.n	800cdf2 <__swsetup_r+0x82>
 800cd98:	06dd      	lsls	r5, r3, #27
 800cd9a:	d411      	bmi.n	800cdc0 <__swsetup_r+0x50>
 800cd9c:	2309      	movs	r3, #9
 800cd9e:	6033      	str	r3, [r6, #0]
 800cda0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cda4:	f04f 30ff 	mov.w	r0, #4294967295
 800cda8:	81a3      	strh	r3, [r4, #12]
 800cdaa:	e03e      	b.n	800ce2a <__swsetup_r+0xba>
 800cdac:	4b25      	ldr	r3, [pc, #148]	; (800ce44 <__swsetup_r+0xd4>)
 800cdae:	429c      	cmp	r4, r3
 800cdb0:	d101      	bne.n	800cdb6 <__swsetup_r+0x46>
 800cdb2:	68ac      	ldr	r4, [r5, #8]
 800cdb4:	e7eb      	b.n	800cd8e <__swsetup_r+0x1e>
 800cdb6:	4b24      	ldr	r3, [pc, #144]	; (800ce48 <__swsetup_r+0xd8>)
 800cdb8:	429c      	cmp	r4, r3
 800cdba:	bf08      	it	eq
 800cdbc:	68ec      	ldreq	r4, [r5, #12]
 800cdbe:	e7e6      	b.n	800cd8e <__swsetup_r+0x1e>
 800cdc0:	0758      	lsls	r0, r3, #29
 800cdc2:	d512      	bpl.n	800cdea <__swsetup_r+0x7a>
 800cdc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdc6:	b141      	cbz	r1, 800cdda <__swsetup_r+0x6a>
 800cdc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdcc:	4299      	cmp	r1, r3
 800cdce:	d002      	beq.n	800cdd6 <__swsetup_r+0x66>
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f000 fa59 	bl	800d288 <_free_r>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	6363      	str	r3, [r4, #52]	; 0x34
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cde0:	81a3      	strh	r3, [r4, #12]
 800cde2:	2300      	movs	r3, #0
 800cde4:	6063      	str	r3, [r4, #4]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f043 0308 	orr.w	r3, r3, #8
 800cdf0:	81a3      	strh	r3, [r4, #12]
 800cdf2:	6923      	ldr	r3, [r4, #16]
 800cdf4:	b94b      	cbnz	r3, 800ce0a <__swsetup_r+0x9a>
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce00:	d003      	beq.n	800ce0a <__swsetup_r+0x9a>
 800ce02:	4621      	mov	r1, r4
 800ce04:	4630      	mov	r0, r6
 800ce06:	f000 f9ff 	bl	800d208 <__smakebuf_r>
 800ce0a:	89a0      	ldrh	r0, [r4, #12]
 800ce0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce10:	f010 0301 	ands.w	r3, r0, #1
 800ce14:	d00a      	beq.n	800ce2c <__swsetup_r+0xbc>
 800ce16:	2300      	movs	r3, #0
 800ce18:	60a3      	str	r3, [r4, #8]
 800ce1a:	6963      	ldr	r3, [r4, #20]
 800ce1c:	425b      	negs	r3, r3
 800ce1e:	61a3      	str	r3, [r4, #24]
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	b943      	cbnz	r3, 800ce36 <__swsetup_r+0xc6>
 800ce24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce28:	d1ba      	bne.n	800cda0 <__swsetup_r+0x30>
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
 800ce2c:	0781      	lsls	r1, r0, #30
 800ce2e:	bf58      	it	pl
 800ce30:	6963      	ldrpl	r3, [r4, #20]
 800ce32:	60a3      	str	r3, [r4, #8]
 800ce34:	e7f4      	b.n	800ce20 <__swsetup_r+0xb0>
 800ce36:	2000      	movs	r0, #0
 800ce38:	e7f7      	b.n	800ce2a <__swsetup_r+0xba>
 800ce3a:	bf00      	nop
 800ce3c:	20000010 	.word	0x20000010
 800ce40:	0800df60 	.word	0x0800df60
 800ce44:	0800df80 	.word	0x0800df80
 800ce48:	0800df40 	.word	0x0800df40

0800ce4c <__sflush_r>:
 800ce4c:	898a      	ldrh	r2, [r1, #12]
 800ce4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce52:	4605      	mov	r5, r0
 800ce54:	0710      	lsls	r0, r2, #28
 800ce56:	460c      	mov	r4, r1
 800ce58:	d458      	bmi.n	800cf0c <__sflush_r+0xc0>
 800ce5a:	684b      	ldr	r3, [r1, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dc05      	bgt.n	800ce6c <__sflush_r+0x20>
 800ce60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dc02      	bgt.n	800ce6c <__sflush_r+0x20>
 800ce66:	2000      	movs	r0, #0
 800ce68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce6e:	2e00      	cmp	r6, #0
 800ce70:	d0f9      	beq.n	800ce66 <__sflush_r+0x1a>
 800ce72:	2300      	movs	r3, #0
 800ce74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce78:	682f      	ldr	r7, [r5, #0]
 800ce7a:	602b      	str	r3, [r5, #0]
 800ce7c:	d032      	beq.n	800cee4 <__sflush_r+0x98>
 800ce7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	075a      	lsls	r2, r3, #29
 800ce84:	d505      	bpl.n	800ce92 <__sflush_r+0x46>
 800ce86:	6863      	ldr	r3, [r4, #4]
 800ce88:	1ac0      	subs	r0, r0, r3
 800ce8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce8c:	b10b      	cbz	r3, 800ce92 <__sflush_r+0x46>
 800ce8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce90:	1ac0      	subs	r0, r0, r3
 800ce92:	2300      	movs	r3, #0
 800ce94:	4602      	mov	r2, r0
 800ce96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce98:	4628      	mov	r0, r5
 800ce9a:	6a21      	ldr	r1, [r4, #32]
 800ce9c:	47b0      	blx	r6
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	d106      	bne.n	800ceb2 <__sflush_r+0x66>
 800cea4:	6829      	ldr	r1, [r5, #0]
 800cea6:	291d      	cmp	r1, #29
 800cea8:	d82c      	bhi.n	800cf04 <__sflush_r+0xb8>
 800ceaa:	4a29      	ldr	r2, [pc, #164]	; (800cf50 <__sflush_r+0x104>)
 800ceac:	40ca      	lsrs	r2, r1
 800ceae:	07d6      	lsls	r6, r2, #31
 800ceb0:	d528      	bpl.n	800cf04 <__sflush_r+0xb8>
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	04d9      	lsls	r1, r3, #19
 800ceb6:	6062      	str	r2, [r4, #4]
 800ceb8:	6922      	ldr	r2, [r4, #16]
 800ceba:	6022      	str	r2, [r4, #0]
 800cebc:	d504      	bpl.n	800cec8 <__sflush_r+0x7c>
 800cebe:	1c42      	adds	r2, r0, #1
 800cec0:	d101      	bne.n	800cec6 <__sflush_r+0x7a>
 800cec2:	682b      	ldr	r3, [r5, #0]
 800cec4:	b903      	cbnz	r3, 800cec8 <__sflush_r+0x7c>
 800cec6:	6560      	str	r0, [r4, #84]	; 0x54
 800cec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceca:	602f      	str	r7, [r5, #0]
 800cecc:	2900      	cmp	r1, #0
 800cece:	d0ca      	beq.n	800ce66 <__sflush_r+0x1a>
 800ced0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ced4:	4299      	cmp	r1, r3
 800ced6:	d002      	beq.n	800cede <__sflush_r+0x92>
 800ced8:	4628      	mov	r0, r5
 800ceda:	f000 f9d5 	bl	800d288 <_free_r>
 800cede:	2000      	movs	r0, #0
 800cee0:	6360      	str	r0, [r4, #52]	; 0x34
 800cee2:	e7c1      	b.n	800ce68 <__sflush_r+0x1c>
 800cee4:	6a21      	ldr	r1, [r4, #32]
 800cee6:	2301      	movs	r3, #1
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b0      	blx	r6
 800ceec:	1c41      	adds	r1, r0, #1
 800ceee:	d1c7      	bne.n	800ce80 <__sflush_r+0x34>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d0c4      	beq.n	800ce80 <__sflush_r+0x34>
 800cef6:	2b1d      	cmp	r3, #29
 800cef8:	d001      	beq.n	800cefe <__sflush_r+0xb2>
 800cefa:	2b16      	cmp	r3, #22
 800cefc:	d101      	bne.n	800cf02 <__sflush_r+0xb6>
 800cefe:	602f      	str	r7, [r5, #0]
 800cf00:	e7b1      	b.n	800ce66 <__sflush_r+0x1a>
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	e7ad      	b.n	800ce68 <__sflush_r+0x1c>
 800cf0c:	690f      	ldr	r7, [r1, #16]
 800cf0e:	2f00      	cmp	r7, #0
 800cf10:	d0a9      	beq.n	800ce66 <__sflush_r+0x1a>
 800cf12:	0793      	lsls	r3, r2, #30
 800cf14:	680e      	ldr	r6, [r1, #0]
 800cf16:	600f      	str	r7, [r1, #0]
 800cf18:	bf0c      	ite	eq
 800cf1a:	694b      	ldreq	r3, [r1, #20]
 800cf1c:	2300      	movne	r3, #0
 800cf1e:	eba6 0807 	sub.w	r8, r6, r7
 800cf22:	608b      	str	r3, [r1, #8]
 800cf24:	f1b8 0f00 	cmp.w	r8, #0
 800cf28:	dd9d      	ble.n	800ce66 <__sflush_r+0x1a>
 800cf2a:	4643      	mov	r3, r8
 800cf2c:	463a      	mov	r2, r7
 800cf2e:	6a21      	ldr	r1, [r4, #32]
 800cf30:	4628      	mov	r0, r5
 800cf32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf34:	47b0      	blx	r6
 800cf36:	2800      	cmp	r0, #0
 800cf38:	dc06      	bgt.n	800cf48 <__sflush_r+0xfc>
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf44:	81a3      	strh	r3, [r4, #12]
 800cf46:	e78f      	b.n	800ce68 <__sflush_r+0x1c>
 800cf48:	4407      	add	r7, r0
 800cf4a:	eba8 0800 	sub.w	r8, r8, r0
 800cf4e:	e7e9      	b.n	800cf24 <__sflush_r+0xd8>
 800cf50:	20400001 	.word	0x20400001

0800cf54 <_fflush_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	690b      	ldr	r3, [r1, #16]
 800cf58:	4605      	mov	r5, r0
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	b913      	cbnz	r3, 800cf64 <_fflush_r+0x10>
 800cf5e:	2500      	movs	r5, #0
 800cf60:	4628      	mov	r0, r5
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	b118      	cbz	r0, 800cf6e <_fflush_r+0x1a>
 800cf66:	6983      	ldr	r3, [r0, #24]
 800cf68:	b90b      	cbnz	r3, 800cf6e <_fflush_r+0x1a>
 800cf6a:	f000 f887 	bl	800d07c <__sinit>
 800cf6e:	4b14      	ldr	r3, [pc, #80]	; (800cfc0 <_fflush_r+0x6c>)
 800cf70:	429c      	cmp	r4, r3
 800cf72:	d11b      	bne.n	800cfac <_fflush_r+0x58>
 800cf74:	686c      	ldr	r4, [r5, #4]
 800cf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0ef      	beq.n	800cf5e <_fflush_r+0xa>
 800cf7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf80:	07d0      	lsls	r0, r2, #31
 800cf82:	d404      	bmi.n	800cf8e <_fflush_r+0x3a>
 800cf84:	0599      	lsls	r1, r3, #22
 800cf86:	d402      	bmi.n	800cf8e <_fflush_r+0x3a>
 800cf88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8a:	f000 f915 	bl	800d1b8 <__retarget_lock_acquire_recursive>
 800cf8e:	4628      	mov	r0, r5
 800cf90:	4621      	mov	r1, r4
 800cf92:	f7ff ff5b 	bl	800ce4c <__sflush_r>
 800cf96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf98:	4605      	mov	r5, r0
 800cf9a:	07da      	lsls	r2, r3, #31
 800cf9c:	d4e0      	bmi.n	800cf60 <_fflush_r+0xc>
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	059b      	lsls	r3, r3, #22
 800cfa2:	d4dd      	bmi.n	800cf60 <_fflush_r+0xc>
 800cfa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfa6:	f000 f908 	bl	800d1ba <__retarget_lock_release_recursive>
 800cfaa:	e7d9      	b.n	800cf60 <_fflush_r+0xc>
 800cfac:	4b05      	ldr	r3, [pc, #20]	; (800cfc4 <_fflush_r+0x70>)
 800cfae:	429c      	cmp	r4, r3
 800cfb0:	d101      	bne.n	800cfb6 <_fflush_r+0x62>
 800cfb2:	68ac      	ldr	r4, [r5, #8]
 800cfb4:	e7df      	b.n	800cf76 <_fflush_r+0x22>
 800cfb6:	4b04      	ldr	r3, [pc, #16]	; (800cfc8 <_fflush_r+0x74>)
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	bf08      	it	eq
 800cfbc:	68ec      	ldreq	r4, [r5, #12]
 800cfbe:	e7da      	b.n	800cf76 <_fflush_r+0x22>
 800cfc0:	0800df60 	.word	0x0800df60
 800cfc4:	0800df80 	.word	0x0800df80
 800cfc8:	0800df40 	.word	0x0800df40

0800cfcc <std>:
 800cfcc:	2300      	movs	r3, #0
 800cfce:	b510      	push	{r4, lr}
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	6083      	str	r3, [r0, #8]
 800cfd4:	8181      	strh	r1, [r0, #12]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6643      	str	r3, [r0, #100]	; 0x64
 800cfda:	81c2      	strh	r2, [r0, #14]
 800cfdc:	2208      	movs	r2, #8
 800cfde:	6183      	str	r3, [r0, #24]
 800cfe0:	e9c0 3300 	strd	r3, r3, [r0]
 800cfe4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfe8:	305c      	adds	r0, #92	; 0x5c
 800cfea:	f7ff fdd9 	bl	800cba0 <memset>
 800cfee:	4b05      	ldr	r3, [pc, #20]	; (800d004 <std+0x38>)
 800cff0:	6224      	str	r4, [r4, #32]
 800cff2:	6263      	str	r3, [r4, #36]	; 0x24
 800cff4:	4b04      	ldr	r3, [pc, #16]	; (800d008 <std+0x3c>)
 800cff6:	62a3      	str	r3, [r4, #40]	; 0x28
 800cff8:	4b04      	ldr	r3, [pc, #16]	; (800d00c <std+0x40>)
 800cffa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cffc:	4b04      	ldr	r3, [pc, #16]	; (800d010 <std+0x44>)
 800cffe:	6323      	str	r3, [r4, #48]	; 0x30
 800d000:	bd10      	pop	{r4, pc}
 800d002:	bf00      	nop
 800d004:	0800da49 	.word	0x0800da49
 800d008:	0800da6b 	.word	0x0800da6b
 800d00c:	0800daa3 	.word	0x0800daa3
 800d010:	0800dac7 	.word	0x0800dac7

0800d014 <_cleanup_r>:
 800d014:	4901      	ldr	r1, [pc, #4]	; (800d01c <_cleanup_r+0x8>)
 800d016:	f000 b8af 	b.w	800d178 <_fwalk_reent>
 800d01a:	bf00      	nop
 800d01c:	0800cf55 	.word	0x0800cf55

0800d020 <__sfmoreglue>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	2268      	movs	r2, #104	; 0x68
 800d024:	1e4d      	subs	r5, r1, #1
 800d026:	460e      	mov	r6, r1
 800d028:	4355      	muls	r5, r2
 800d02a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d02e:	f000 f997 	bl	800d360 <_malloc_r>
 800d032:	4604      	mov	r4, r0
 800d034:	b140      	cbz	r0, 800d048 <__sfmoreglue+0x28>
 800d036:	2100      	movs	r1, #0
 800d038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d03c:	e9c0 1600 	strd	r1, r6, [r0]
 800d040:	300c      	adds	r0, #12
 800d042:	60a0      	str	r0, [r4, #8]
 800d044:	f7ff fdac 	bl	800cba0 <memset>
 800d048:	4620      	mov	r0, r4
 800d04a:	bd70      	pop	{r4, r5, r6, pc}

0800d04c <__sfp_lock_acquire>:
 800d04c:	4801      	ldr	r0, [pc, #4]	; (800d054 <__sfp_lock_acquire+0x8>)
 800d04e:	f000 b8b3 	b.w	800d1b8 <__retarget_lock_acquire_recursive>
 800d052:	bf00      	nop
 800d054:	20000299 	.word	0x20000299

0800d058 <__sfp_lock_release>:
 800d058:	4801      	ldr	r0, [pc, #4]	; (800d060 <__sfp_lock_release+0x8>)
 800d05a:	f000 b8ae 	b.w	800d1ba <__retarget_lock_release_recursive>
 800d05e:	bf00      	nop
 800d060:	20000299 	.word	0x20000299

0800d064 <__sinit_lock_acquire>:
 800d064:	4801      	ldr	r0, [pc, #4]	; (800d06c <__sinit_lock_acquire+0x8>)
 800d066:	f000 b8a7 	b.w	800d1b8 <__retarget_lock_acquire_recursive>
 800d06a:	bf00      	nop
 800d06c:	2000029a 	.word	0x2000029a

0800d070 <__sinit_lock_release>:
 800d070:	4801      	ldr	r0, [pc, #4]	; (800d078 <__sinit_lock_release+0x8>)
 800d072:	f000 b8a2 	b.w	800d1ba <__retarget_lock_release_recursive>
 800d076:	bf00      	nop
 800d078:	2000029a 	.word	0x2000029a

0800d07c <__sinit>:
 800d07c:	b510      	push	{r4, lr}
 800d07e:	4604      	mov	r4, r0
 800d080:	f7ff fff0 	bl	800d064 <__sinit_lock_acquire>
 800d084:	69a3      	ldr	r3, [r4, #24]
 800d086:	b11b      	cbz	r3, 800d090 <__sinit+0x14>
 800d088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d08c:	f7ff bff0 	b.w	800d070 <__sinit_lock_release>
 800d090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d094:	6523      	str	r3, [r4, #80]	; 0x50
 800d096:	4620      	mov	r0, r4
 800d098:	4b12      	ldr	r3, [pc, #72]	; (800d0e4 <__sinit+0x68>)
 800d09a:	4a13      	ldr	r2, [pc, #76]	; (800d0e8 <__sinit+0x6c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0a0:	42a3      	cmp	r3, r4
 800d0a2:	bf04      	itt	eq
 800d0a4:	2301      	moveq	r3, #1
 800d0a6:	61a3      	streq	r3, [r4, #24]
 800d0a8:	f000 f820 	bl	800d0ec <__sfp>
 800d0ac:	6060      	str	r0, [r4, #4]
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f000 f81c 	bl	800d0ec <__sfp>
 800d0b4:	60a0      	str	r0, [r4, #8]
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f000 f818 	bl	800d0ec <__sfp>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2104      	movs	r1, #4
 800d0c0:	60e0      	str	r0, [r4, #12]
 800d0c2:	6860      	ldr	r0, [r4, #4]
 800d0c4:	f7ff ff82 	bl	800cfcc <std>
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	2109      	movs	r1, #9
 800d0cc:	68a0      	ldr	r0, [r4, #8]
 800d0ce:	f7ff ff7d 	bl	800cfcc <std>
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	2112      	movs	r1, #18
 800d0d6:	68e0      	ldr	r0, [r4, #12]
 800d0d8:	f7ff ff78 	bl	800cfcc <std>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	61a3      	str	r3, [r4, #24]
 800d0e0:	e7d2      	b.n	800d088 <__sinit+0xc>
 800d0e2:	bf00      	nop
 800d0e4:	0800df3c 	.word	0x0800df3c
 800d0e8:	0800d015 	.word	0x0800d015

0800d0ec <__sfp>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	f7ff ffac 	bl	800d04c <__sfp_lock_acquire>
 800d0f4:	4b1e      	ldr	r3, [pc, #120]	; (800d170 <__sfp+0x84>)
 800d0f6:	681e      	ldr	r6, [r3, #0]
 800d0f8:	69b3      	ldr	r3, [r6, #24]
 800d0fa:	b913      	cbnz	r3, 800d102 <__sfp+0x16>
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f7ff ffbd 	bl	800d07c <__sinit>
 800d102:	3648      	adds	r6, #72	; 0x48
 800d104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d108:	3b01      	subs	r3, #1
 800d10a:	d503      	bpl.n	800d114 <__sfp+0x28>
 800d10c:	6833      	ldr	r3, [r6, #0]
 800d10e:	b30b      	cbz	r3, 800d154 <__sfp+0x68>
 800d110:	6836      	ldr	r6, [r6, #0]
 800d112:	e7f7      	b.n	800d104 <__sfp+0x18>
 800d114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d118:	b9d5      	cbnz	r5, 800d150 <__sfp+0x64>
 800d11a:	4b16      	ldr	r3, [pc, #88]	; (800d174 <__sfp+0x88>)
 800d11c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d120:	6665      	str	r5, [r4, #100]	; 0x64
 800d122:	60e3      	str	r3, [r4, #12]
 800d124:	f000 f847 	bl	800d1b6 <__retarget_lock_init_recursive>
 800d128:	f7ff ff96 	bl	800d058 <__sfp_lock_release>
 800d12c:	2208      	movs	r2, #8
 800d12e:	4629      	mov	r1, r5
 800d130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d134:	6025      	str	r5, [r4, #0]
 800d136:	61a5      	str	r5, [r4, #24]
 800d138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d13c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d140:	f7ff fd2e 	bl	800cba0 <memset>
 800d144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d14c:	4620      	mov	r0, r4
 800d14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d150:	3468      	adds	r4, #104	; 0x68
 800d152:	e7d9      	b.n	800d108 <__sfp+0x1c>
 800d154:	2104      	movs	r1, #4
 800d156:	4638      	mov	r0, r7
 800d158:	f7ff ff62 	bl	800d020 <__sfmoreglue>
 800d15c:	4604      	mov	r4, r0
 800d15e:	6030      	str	r0, [r6, #0]
 800d160:	2800      	cmp	r0, #0
 800d162:	d1d5      	bne.n	800d110 <__sfp+0x24>
 800d164:	f7ff ff78 	bl	800d058 <__sfp_lock_release>
 800d168:	230c      	movs	r3, #12
 800d16a:	603b      	str	r3, [r7, #0]
 800d16c:	e7ee      	b.n	800d14c <__sfp+0x60>
 800d16e:	bf00      	nop
 800d170:	0800df3c 	.word	0x0800df3c
 800d174:	ffff0001 	.word	0xffff0001

0800d178 <_fwalk_reent>:
 800d178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d17c:	4606      	mov	r6, r0
 800d17e:	4688      	mov	r8, r1
 800d180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d184:	2700      	movs	r7, #0
 800d186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d18a:	f1b9 0901 	subs.w	r9, r9, #1
 800d18e:	d505      	bpl.n	800d19c <_fwalk_reent+0x24>
 800d190:	6824      	ldr	r4, [r4, #0]
 800d192:	2c00      	cmp	r4, #0
 800d194:	d1f7      	bne.n	800d186 <_fwalk_reent+0xe>
 800d196:	4638      	mov	r0, r7
 800d198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d19c:	89ab      	ldrh	r3, [r5, #12]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d907      	bls.n	800d1b2 <_fwalk_reent+0x3a>
 800d1a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	d003      	beq.n	800d1b2 <_fwalk_reent+0x3a>
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	47c0      	blx	r8
 800d1b0:	4307      	orrs	r7, r0
 800d1b2:	3568      	adds	r5, #104	; 0x68
 800d1b4:	e7e9      	b.n	800d18a <_fwalk_reent+0x12>

0800d1b6 <__retarget_lock_init_recursive>:
 800d1b6:	4770      	bx	lr

0800d1b8 <__retarget_lock_acquire_recursive>:
 800d1b8:	4770      	bx	lr

0800d1ba <__retarget_lock_release_recursive>:
 800d1ba:	4770      	bx	lr

0800d1bc <__swhatbuf_r>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	460e      	mov	r6, r1
 800d1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c4:	b096      	sub	sp, #88	; 0x58
 800d1c6:	4614      	mov	r4, r2
 800d1c8:	2900      	cmp	r1, #0
 800d1ca:	461d      	mov	r5, r3
 800d1cc:	da08      	bge.n	800d1e0 <__swhatbuf_r+0x24>
 800d1ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	602a      	str	r2, [r5, #0]
 800d1d6:	061a      	lsls	r2, r3, #24
 800d1d8:	d410      	bmi.n	800d1fc <__swhatbuf_r+0x40>
 800d1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1de:	e00e      	b.n	800d1fe <__swhatbuf_r+0x42>
 800d1e0:	466a      	mov	r2, sp
 800d1e2:	f000 fc97 	bl	800db14 <_fstat_r>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	dbf1      	blt.n	800d1ce <__swhatbuf_r+0x12>
 800d1ea:	9a01      	ldr	r2, [sp, #4]
 800d1ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1f4:	425a      	negs	r2, r3
 800d1f6:	415a      	adcs	r2, r3
 800d1f8:	602a      	str	r2, [r5, #0]
 800d1fa:	e7ee      	b.n	800d1da <__swhatbuf_r+0x1e>
 800d1fc:	2340      	movs	r3, #64	; 0x40
 800d1fe:	2000      	movs	r0, #0
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	b016      	add	sp, #88	; 0x58
 800d204:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d208 <__smakebuf_r>:
 800d208:	898b      	ldrh	r3, [r1, #12]
 800d20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d20c:	079d      	lsls	r5, r3, #30
 800d20e:	4606      	mov	r6, r0
 800d210:	460c      	mov	r4, r1
 800d212:	d507      	bpl.n	800d224 <__smakebuf_r+0x1c>
 800d214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	6123      	str	r3, [r4, #16]
 800d21c:	2301      	movs	r3, #1
 800d21e:	6163      	str	r3, [r4, #20]
 800d220:	b002      	add	sp, #8
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	ab01      	add	r3, sp, #4
 800d226:	466a      	mov	r2, sp
 800d228:	f7ff ffc8 	bl	800d1bc <__swhatbuf_r>
 800d22c:	9900      	ldr	r1, [sp, #0]
 800d22e:	4605      	mov	r5, r0
 800d230:	4630      	mov	r0, r6
 800d232:	f000 f895 	bl	800d360 <_malloc_r>
 800d236:	b948      	cbnz	r0, 800d24c <__smakebuf_r+0x44>
 800d238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d23c:	059a      	lsls	r2, r3, #22
 800d23e:	d4ef      	bmi.n	800d220 <__smakebuf_r+0x18>
 800d240:	f023 0303 	bic.w	r3, r3, #3
 800d244:	f043 0302 	orr.w	r3, r3, #2
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	e7e3      	b.n	800d214 <__smakebuf_r+0xc>
 800d24c:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <__smakebuf_r+0x7c>)
 800d24e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	6020      	str	r0, [r4, #0]
 800d254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d258:	6120      	str	r0, [r4, #16]
 800d25a:	81a3      	strh	r3, [r4, #12]
 800d25c:	9b00      	ldr	r3, [sp, #0]
 800d25e:	6163      	str	r3, [r4, #20]
 800d260:	9b01      	ldr	r3, [sp, #4]
 800d262:	b15b      	cbz	r3, 800d27c <__smakebuf_r+0x74>
 800d264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d268:	4630      	mov	r0, r6
 800d26a:	f000 fc65 	bl	800db38 <_isatty_r>
 800d26e:	b128      	cbz	r0, 800d27c <__smakebuf_r+0x74>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	f023 0303 	bic.w	r3, r3, #3
 800d276:	f043 0301 	orr.w	r3, r3, #1
 800d27a:	81a3      	strh	r3, [r4, #12]
 800d27c:	89a0      	ldrh	r0, [r4, #12]
 800d27e:	4305      	orrs	r5, r0
 800d280:	81a5      	strh	r5, [r4, #12]
 800d282:	e7cd      	b.n	800d220 <__smakebuf_r+0x18>
 800d284:	0800d015 	.word	0x0800d015

0800d288 <_free_r>:
 800d288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d28a:	2900      	cmp	r1, #0
 800d28c:	d043      	beq.n	800d316 <_free_r+0x8e>
 800d28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d292:	1f0c      	subs	r4, r1, #4
 800d294:	9001      	str	r0, [sp, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	bfb8      	it	lt
 800d29a:	18e4      	addlt	r4, r4, r3
 800d29c:	f000 fc7c 	bl	800db98 <__malloc_lock>
 800d2a0:	4a1e      	ldr	r2, [pc, #120]	; (800d31c <_free_r+0x94>)
 800d2a2:	9801      	ldr	r0, [sp, #4]
 800d2a4:	6813      	ldr	r3, [r2, #0]
 800d2a6:	b933      	cbnz	r3, 800d2b6 <_free_r+0x2e>
 800d2a8:	6063      	str	r3, [r4, #4]
 800d2aa:	6014      	str	r4, [r2, #0]
 800d2ac:	b003      	add	sp, #12
 800d2ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2b2:	f000 bc77 	b.w	800dba4 <__malloc_unlock>
 800d2b6:	42a3      	cmp	r3, r4
 800d2b8:	d908      	bls.n	800d2cc <_free_r+0x44>
 800d2ba:	6825      	ldr	r5, [r4, #0]
 800d2bc:	1961      	adds	r1, r4, r5
 800d2be:	428b      	cmp	r3, r1
 800d2c0:	bf01      	itttt	eq
 800d2c2:	6819      	ldreq	r1, [r3, #0]
 800d2c4:	685b      	ldreq	r3, [r3, #4]
 800d2c6:	1949      	addeq	r1, r1, r5
 800d2c8:	6021      	streq	r1, [r4, #0]
 800d2ca:	e7ed      	b.n	800d2a8 <_free_r+0x20>
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	b10b      	cbz	r3, 800d2d6 <_free_r+0x4e>
 800d2d2:	42a3      	cmp	r3, r4
 800d2d4:	d9fa      	bls.n	800d2cc <_free_r+0x44>
 800d2d6:	6811      	ldr	r1, [r2, #0]
 800d2d8:	1855      	adds	r5, r2, r1
 800d2da:	42a5      	cmp	r5, r4
 800d2dc:	d10b      	bne.n	800d2f6 <_free_r+0x6e>
 800d2de:	6824      	ldr	r4, [r4, #0]
 800d2e0:	4421      	add	r1, r4
 800d2e2:	1854      	adds	r4, r2, r1
 800d2e4:	6011      	str	r1, [r2, #0]
 800d2e6:	42a3      	cmp	r3, r4
 800d2e8:	d1e0      	bne.n	800d2ac <_free_r+0x24>
 800d2ea:	681c      	ldr	r4, [r3, #0]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	4421      	add	r1, r4
 800d2f0:	6053      	str	r3, [r2, #4]
 800d2f2:	6011      	str	r1, [r2, #0]
 800d2f4:	e7da      	b.n	800d2ac <_free_r+0x24>
 800d2f6:	d902      	bls.n	800d2fe <_free_r+0x76>
 800d2f8:	230c      	movs	r3, #12
 800d2fa:	6003      	str	r3, [r0, #0]
 800d2fc:	e7d6      	b.n	800d2ac <_free_r+0x24>
 800d2fe:	6825      	ldr	r5, [r4, #0]
 800d300:	1961      	adds	r1, r4, r5
 800d302:	428b      	cmp	r3, r1
 800d304:	bf02      	ittt	eq
 800d306:	6819      	ldreq	r1, [r3, #0]
 800d308:	685b      	ldreq	r3, [r3, #4]
 800d30a:	1949      	addeq	r1, r1, r5
 800d30c:	6063      	str	r3, [r4, #4]
 800d30e:	bf08      	it	eq
 800d310:	6021      	streq	r1, [r4, #0]
 800d312:	6054      	str	r4, [r2, #4]
 800d314:	e7ca      	b.n	800d2ac <_free_r+0x24>
 800d316:	b003      	add	sp, #12
 800d318:	bd30      	pop	{r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	2000029c 	.word	0x2000029c

0800d320 <sbrk_aligned>:
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	4e0e      	ldr	r6, [pc, #56]	; (800d35c <sbrk_aligned+0x3c>)
 800d324:	460c      	mov	r4, r1
 800d326:	4605      	mov	r5, r0
 800d328:	6831      	ldr	r1, [r6, #0]
 800d32a:	b911      	cbnz	r1, 800d332 <sbrk_aligned+0x12>
 800d32c:	f000 fb7c 	bl	800da28 <_sbrk_r>
 800d330:	6030      	str	r0, [r6, #0]
 800d332:	4621      	mov	r1, r4
 800d334:	4628      	mov	r0, r5
 800d336:	f000 fb77 	bl	800da28 <_sbrk_r>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	d00a      	beq.n	800d354 <sbrk_aligned+0x34>
 800d33e:	1cc4      	adds	r4, r0, #3
 800d340:	f024 0403 	bic.w	r4, r4, #3
 800d344:	42a0      	cmp	r0, r4
 800d346:	d007      	beq.n	800d358 <sbrk_aligned+0x38>
 800d348:	1a21      	subs	r1, r4, r0
 800d34a:	4628      	mov	r0, r5
 800d34c:	f000 fb6c 	bl	800da28 <_sbrk_r>
 800d350:	3001      	adds	r0, #1
 800d352:	d101      	bne.n	800d358 <sbrk_aligned+0x38>
 800d354:	f04f 34ff 	mov.w	r4, #4294967295
 800d358:	4620      	mov	r0, r4
 800d35a:	bd70      	pop	{r4, r5, r6, pc}
 800d35c:	200002a0 	.word	0x200002a0

0800d360 <_malloc_r>:
 800d360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d364:	1ccd      	adds	r5, r1, #3
 800d366:	4607      	mov	r7, r0
 800d368:	f025 0503 	bic.w	r5, r5, #3
 800d36c:	3508      	adds	r5, #8
 800d36e:	2d0c      	cmp	r5, #12
 800d370:	bf38      	it	cc
 800d372:	250c      	movcc	r5, #12
 800d374:	2d00      	cmp	r5, #0
 800d376:	db01      	blt.n	800d37c <_malloc_r+0x1c>
 800d378:	42a9      	cmp	r1, r5
 800d37a:	d905      	bls.n	800d388 <_malloc_r+0x28>
 800d37c:	230c      	movs	r3, #12
 800d37e:	2600      	movs	r6, #0
 800d380:	603b      	str	r3, [r7, #0]
 800d382:	4630      	mov	r0, r6
 800d384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d388:	4e2e      	ldr	r6, [pc, #184]	; (800d444 <_malloc_r+0xe4>)
 800d38a:	f000 fc05 	bl	800db98 <__malloc_lock>
 800d38e:	6833      	ldr	r3, [r6, #0]
 800d390:	461c      	mov	r4, r3
 800d392:	bb34      	cbnz	r4, 800d3e2 <_malloc_r+0x82>
 800d394:	4629      	mov	r1, r5
 800d396:	4638      	mov	r0, r7
 800d398:	f7ff ffc2 	bl	800d320 <sbrk_aligned>
 800d39c:	1c43      	adds	r3, r0, #1
 800d39e:	4604      	mov	r4, r0
 800d3a0:	d14d      	bne.n	800d43e <_malloc_r+0xde>
 800d3a2:	6834      	ldr	r4, [r6, #0]
 800d3a4:	4626      	mov	r6, r4
 800d3a6:	2e00      	cmp	r6, #0
 800d3a8:	d140      	bne.n	800d42c <_malloc_r+0xcc>
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	eb04 0803 	add.w	r8, r4, r3
 800d3b4:	f000 fb38 	bl	800da28 <_sbrk_r>
 800d3b8:	4580      	cmp	r8, r0
 800d3ba:	d13a      	bne.n	800d432 <_malloc_r+0xd2>
 800d3bc:	6821      	ldr	r1, [r4, #0]
 800d3be:	3503      	adds	r5, #3
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	1a6d      	subs	r5, r5, r1
 800d3c4:	f025 0503 	bic.w	r5, r5, #3
 800d3c8:	3508      	adds	r5, #8
 800d3ca:	2d0c      	cmp	r5, #12
 800d3cc:	bf38      	it	cc
 800d3ce:	250c      	movcc	r5, #12
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	f7ff ffa5 	bl	800d320 <sbrk_aligned>
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	d02b      	beq.n	800d432 <_malloc_r+0xd2>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	442b      	add	r3, r5
 800d3de:	6023      	str	r3, [r4, #0]
 800d3e0:	e00e      	b.n	800d400 <_malloc_r+0xa0>
 800d3e2:	6822      	ldr	r2, [r4, #0]
 800d3e4:	1b52      	subs	r2, r2, r5
 800d3e6:	d41e      	bmi.n	800d426 <_malloc_r+0xc6>
 800d3e8:	2a0b      	cmp	r2, #11
 800d3ea:	d916      	bls.n	800d41a <_malloc_r+0xba>
 800d3ec:	1961      	adds	r1, r4, r5
 800d3ee:	42a3      	cmp	r3, r4
 800d3f0:	6025      	str	r5, [r4, #0]
 800d3f2:	bf18      	it	ne
 800d3f4:	6059      	strne	r1, [r3, #4]
 800d3f6:	6863      	ldr	r3, [r4, #4]
 800d3f8:	bf08      	it	eq
 800d3fa:	6031      	streq	r1, [r6, #0]
 800d3fc:	5162      	str	r2, [r4, r5]
 800d3fe:	604b      	str	r3, [r1, #4]
 800d400:	f104 060b 	add.w	r6, r4, #11
 800d404:	4638      	mov	r0, r7
 800d406:	f000 fbcd 	bl	800dba4 <__malloc_unlock>
 800d40a:	1d23      	adds	r3, r4, #4
 800d40c:	f026 0607 	bic.w	r6, r6, #7
 800d410:	1af2      	subs	r2, r6, r3
 800d412:	d0b6      	beq.n	800d382 <_malloc_r+0x22>
 800d414:	1b9b      	subs	r3, r3, r6
 800d416:	50a3      	str	r3, [r4, r2]
 800d418:	e7b3      	b.n	800d382 <_malloc_r+0x22>
 800d41a:	6862      	ldr	r2, [r4, #4]
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	bf0c      	ite	eq
 800d420:	6032      	streq	r2, [r6, #0]
 800d422:	605a      	strne	r2, [r3, #4]
 800d424:	e7ec      	b.n	800d400 <_malloc_r+0xa0>
 800d426:	4623      	mov	r3, r4
 800d428:	6864      	ldr	r4, [r4, #4]
 800d42a:	e7b2      	b.n	800d392 <_malloc_r+0x32>
 800d42c:	4634      	mov	r4, r6
 800d42e:	6876      	ldr	r6, [r6, #4]
 800d430:	e7b9      	b.n	800d3a6 <_malloc_r+0x46>
 800d432:	230c      	movs	r3, #12
 800d434:	4638      	mov	r0, r7
 800d436:	603b      	str	r3, [r7, #0]
 800d438:	f000 fbb4 	bl	800dba4 <__malloc_unlock>
 800d43c:	e7a1      	b.n	800d382 <_malloc_r+0x22>
 800d43e:	6025      	str	r5, [r4, #0]
 800d440:	e7de      	b.n	800d400 <_malloc_r+0xa0>
 800d442:	bf00      	nop
 800d444:	2000029c 	.word	0x2000029c

0800d448 <__sfputc_r>:
 800d448:	6893      	ldr	r3, [r2, #8]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	6093      	str	r3, [r2, #8]
 800d450:	b410      	push	{r4}
 800d452:	da08      	bge.n	800d466 <__sfputc_r+0x1e>
 800d454:	6994      	ldr	r4, [r2, #24]
 800d456:	42a3      	cmp	r3, r4
 800d458:	db01      	blt.n	800d45e <__sfputc_r+0x16>
 800d45a:	290a      	cmp	r1, #10
 800d45c:	d103      	bne.n	800d466 <__sfputc_r+0x1e>
 800d45e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d462:	f7ff bc33 	b.w	800cccc <__swbuf_r>
 800d466:	6813      	ldr	r3, [r2, #0]
 800d468:	1c58      	adds	r0, r3, #1
 800d46a:	6010      	str	r0, [r2, #0]
 800d46c:	4608      	mov	r0, r1
 800d46e:	7019      	strb	r1, [r3, #0]
 800d470:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d474:	4770      	bx	lr

0800d476 <__sfputs_r>:
 800d476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d478:	4606      	mov	r6, r0
 800d47a:	460f      	mov	r7, r1
 800d47c:	4614      	mov	r4, r2
 800d47e:	18d5      	adds	r5, r2, r3
 800d480:	42ac      	cmp	r4, r5
 800d482:	d101      	bne.n	800d488 <__sfputs_r+0x12>
 800d484:	2000      	movs	r0, #0
 800d486:	e007      	b.n	800d498 <__sfputs_r+0x22>
 800d488:	463a      	mov	r2, r7
 800d48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d48e:	4630      	mov	r0, r6
 800d490:	f7ff ffda 	bl	800d448 <__sfputc_r>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d1f3      	bne.n	800d480 <__sfputs_r+0xa>
 800d498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d49c <_vfiprintf_r>:
 800d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a0:	460d      	mov	r5, r1
 800d4a2:	b09d      	sub	sp, #116	; 0x74
 800d4a4:	4614      	mov	r4, r2
 800d4a6:	4698      	mov	r8, r3
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	b118      	cbz	r0, 800d4b4 <_vfiprintf_r+0x18>
 800d4ac:	6983      	ldr	r3, [r0, #24]
 800d4ae:	b90b      	cbnz	r3, 800d4b4 <_vfiprintf_r+0x18>
 800d4b0:	f7ff fde4 	bl	800d07c <__sinit>
 800d4b4:	4b89      	ldr	r3, [pc, #548]	; (800d6dc <_vfiprintf_r+0x240>)
 800d4b6:	429d      	cmp	r5, r3
 800d4b8:	d11b      	bne.n	800d4f2 <_vfiprintf_r+0x56>
 800d4ba:	6875      	ldr	r5, [r6, #4]
 800d4bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4be:	07d9      	lsls	r1, r3, #31
 800d4c0:	d405      	bmi.n	800d4ce <_vfiprintf_r+0x32>
 800d4c2:	89ab      	ldrh	r3, [r5, #12]
 800d4c4:	059a      	lsls	r2, r3, #22
 800d4c6:	d402      	bmi.n	800d4ce <_vfiprintf_r+0x32>
 800d4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4ca:	f7ff fe75 	bl	800d1b8 <__retarget_lock_acquire_recursive>
 800d4ce:	89ab      	ldrh	r3, [r5, #12]
 800d4d0:	071b      	lsls	r3, r3, #28
 800d4d2:	d501      	bpl.n	800d4d8 <_vfiprintf_r+0x3c>
 800d4d4:	692b      	ldr	r3, [r5, #16]
 800d4d6:	b9eb      	cbnz	r3, 800d514 <_vfiprintf_r+0x78>
 800d4d8:	4629      	mov	r1, r5
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f7ff fc48 	bl	800cd70 <__swsetup_r>
 800d4e0:	b1c0      	cbz	r0, 800d514 <_vfiprintf_r+0x78>
 800d4e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4e4:	07dc      	lsls	r4, r3, #31
 800d4e6:	d50e      	bpl.n	800d506 <_vfiprintf_r+0x6a>
 800d4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ec:	b01d      	add	sp, #116	; 0x74
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f2:	4b7b      	ldr	r3, [pc, #492]	; (800d6e0 <_vfiprintf_r+0x244>)
 800d4f4:	429d      	cmp	r5, r3
 800d4f6:	d101      	bne.n	800d4fc <_vfiprintf_r+0x60>
 800d4f8:	68b5      	ldr	r5, [r6, #8]
 800d4fa:	e7df      	b.n	800d4bc <_vfiprintf_r+0x20>
 800d4fc:	4b79      	ldr	r3, [pc, #484]	; (800d6e4 <_vfiprintf_r+0x248>)
 800d4fe:	429d      	cmp	r5, r3
 800d500:	bf08      	it	eq
 800d502:	68f5      	ldreq	r5, [r6, #12]
 800d504:	e7da      	b.n	800d4bc <_vfiprintf_r+0x20>
 800d506:	89ab      	ldrh	r3, [r5, #12]
 800d508:	0598      	lsls	r0, r3, #22
 800d50a:	d4ed      	bmi.n	800d4e8 <_vfiprintf_r+0x4c>
 800d50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d50e:	f7ff fe54 	bl	800d1ba <__retarget_lock_release_recursive>
 800d512:	e7e9      	b.n	800d4e8 <_vfiprintf_r+0x4c>
 800d514:	2300      	movs	r3, #0
 800d516:	f8cd 800c 	str.w	r8, [sp, #12]
 800d51a:	f04f 0901 	mov.w	r9, #1
 800d51e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800d6e8 <_vfiprintf_r+0x24c>
 800d522:	9309      	str	r3, [sp, #36]	; 0x24
 800d524:	2320      	movs	r3, #32
 800d526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d52a:	2330      	movs	r3, #48	; 0x30
 800d52c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d530:	4623      	mov	r3, r4
 800d532:	469a      	mov	sl, r3
 800d534:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d538:	b10a      	cbz	r2, 800d53e <_vfiprintf_r+0xa2>
 800d53a:	2a25      	cmp	r2, #37	; 0x25
 800d53c:	d1f9      	bne.n	800d532 <_vfiprintf_r+0x96>
 800d53e:	ebba 0b04 	subs.w	fp, sl, r4
 800d542:	d00b      	beq.n	800d55c <_vfiprintf_r+0xc0>
 800d544:	465b      	mov	r3, fp
 800d546:	4622      	mov	r2, r4
 800d548:	4629      	mov	r1, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff ff93 	bl	800d476 <__sfputs_r>
 800d550:	3001      	adds	r0, #1
 800d552:	f000 80aa 	beq.w	800d6aa <_vfiprintf_r+0x20e>
 800d556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d558:	445a      	add	r2, fp
 800d55a:	9209      	str	r2, [sp, #36]	; 0x24
 800d55c:	f89a 3000 	ldrb.w	r3, [sl]
 800d560:	2b00      	cmp	r3, #0
 800d562:	f000 80a2 	beq.w	800d6aa <_vfiprintf_r+0x20e>
 800d566:	2300      	movs	r3, #0
 800d568:	f04f 32ff 	mov.w	r2, #4294967295
 800d56c:	f10a 0a01 	add.w	sl, sl, #1
 800d570:	9304      	str	r3, [sp, #16]
 800d572:	9307      	str	r3, [sp, #28]
 800d574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d578:	931a      	str	r3, [sp, #104]	; 0x68
 800d57a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d57e:	4654      	mov	r4, sl
 800d580:	2205      	movs	r2, #5
 800d582:	4859      	ldr	r0, [pc, #356]	; (800d6e8 <_vfiprintf_r+0x24c>)
 800d584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d588:	f000 faf8 	bl	800db7c <memchr>
 800d58c:	9a04      	ldr	r2, [sp, #16]
 800d58e:	b9d8      	cbnz	r0, 800d5c8 <_vfiprintf_r+0x12c>
 800d590:	06d1      	lsls	r1, r2, #27
 800d592:	bf44      	itt	mi
 800d594:	2320      	movmi	r3, #32
 800d596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d59a:	0713      	lsls	r3, r2, #28
 800d59c:	bf44      	itt	mi
 800d59e:	232b      	movmi	r3, #43	; 0x2b
 800d5a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d5aa:	d015      	beq.n	800d5d8 <_vfiprintf_r+0x13c>
 800d5ac:	9a07      	ldr	r2, [sp, #28]
 800d5ae:	4654      	mov	r4, sl
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	f04f 0c0a 	mov.w	ip, #10
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5bc:	3b30      	subs	r3, #48	; 0x30
 800d5be:	2b09      	cmp	r3, #9
 800d5c0:	d94e      	bls.n	800d660 <_vfiprintf_r+0x1c4>
 800d5c2:	b1b0      	cbz	r0, 800d5f2 <_vfiprintf_r+0x156>
 800d5c4:	9207      	str	r2, [sp, #28]
 800d5c6:	e014      	b.n	800d5f2 <_vfiprintf_r+0x156>
 800d5c8:	eba0 0308 	sub.w	r3, r0, r8
 800d5cc:	46a2      	mov	sl, r4
 800d5ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	e7d2      	b.n	800d57e <_vfiprintf_r+0xe2>
 800d5d8:	9b03      	ldr	r3, [sp, #12]
 800d5da:	1d19      	adds	r1, r3, #4
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	9103      	str	r1, [sp, #12]
 800d5e2:	bfbb      	ittet	lt
 800d5e4:	425b      	neglt	r3, r3
 800d5e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d5ea:	9307      	strge	r3, [sp, #28]
 800d5ec:	9307      	strlt	r3, [sp, #28]
 800d5ee:	bfb8      	it	lt
 800d5f0:	9204      	strlt	r2, [sp, #16]
 800d5f2:	7823      	ldrb	r3, [r4, #0]
 800d5f4:	2b2e      	cmp	r3, #46	; 0x2e
 800d5f6:	d10c      	bne.n	800d612 <_vfiprintf_r+0x176>
 800d5f8:	7863      	ldrb	r3, [r4, #1]
 800d5fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d5fc:	d135      	bne.n	800d66a <_vfiprintf_r+0x1ce>
 800d5fe:	9b03      	ldr	r3, [sp, #12]
 800d600:	3402      	adds	r4, #2
 800d602:	1d1a      	adds	r2, r3, #4
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	9203      	str	r2, [sp, #12]
 800d60a:	bfb8      	it	lt
 800d60c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d610:	9305      	str	r3, [sp, #20]
 800d612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d6f8 <_vfiprintf_r+0x25c>
 800d616:	2203      	movs	r2, #3
 800d618:	7821      	ldrb	r1, [r4, #0]
 800d61a:	4650      	mov	r0, sl
 800d61c:	f000 faae 	bl	800db7c <memchr>
 800d620:	b140      	cbz	r0, 800d634 <_vfiprintf_r+0x198>
 800d622:	2340      	movs	r3, #64	; 0x40
 800d624:	eba0 000a 	sub.w	r0, r0, sl
 800d628:	3401      	adds	r4, #1
 800d62a:	fa03 f000 	lsl.w	r0, r3, r0
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	4303      	orrs	r3, r0
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d638:	2206      	movs	r2, #6
 800d63a:	482c      	ldr	r0, [pc, #176]	; (800d6ec <_vfiprintf_r+0x250>)
 800d63c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d640:	f000 fa9c 	bl	800db7c <memchr>
 800d644:	2800      	cmp	r0, #0
 800d646:	d03f      	beq.n	800d6c8 <_vfiprintf_r+0x22c>
 800d648:	4b29      	ldr	r3, [pc, #164]	; (800d6f0 <_vfiprintf_r+0x254>)
 800d64a:	bb1b      	cbnz	r3, 800d694 <_vfiprintf_r+0x1f8>
 800d64c:	9b03      	ldr	r3, [sp, #12]
 800d64e:	3307      	adds	r3, #7
 800d650:	f023 0307 	bic.w	r3, r3, #7
 800d654:	3308      	adds	r3, #8
 800d656:	9303      	str	r3, [sp, #12]
 800d658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65a:	443b      	add	r3, r7
 800d65c:	9309      	str	r3, [sp, #36]	; 0x24
 800d65e:	e767      	b.n	800d530 <_vfiprintf_r+0x94>
 800d660:	fb0c 3202 	mla	r2, ip, r2, r3
 800d664:	460c      	mov	r4, r1
 800d666:	2001      	movs	r0, #1
 800d668:	e7a5      	b.n	800d5b6 <_vfiprintf_r+0x11a>
 800d66a:	2300      	movs	r3, #0
 800d66c:	3401      	adds	r4, #1
 800d66e:	f04f 0c0a 	mov.w	ip, #10
 800d672:	4619      	mov	r1, r3
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	4620      	mov	r0, r4
 800d678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d67c:	3a30      	subs	r2, #48	; 0x30
 800d67e:	2a09      	cmp	r2, #9
 800d680:	d903      	bls.n	800d68a <_vfiprintf_r+0x1ee>
 800d682:	2b00      	cmp	r3, #0
 800d684:	d0c5      	beq.n	800d612 <_vfiprintf_r+0x176>
 800d686:	9105      	str	r1, [sp, #20]
 800d688:	e7c3      	b.n	800d612 <_vfiprintf_r+0x176>
 800d68a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d68e:	4604      	mov	r4, r0
 800d690:	2301      	movs	r3, #1
 800d692:	e7f0      	b.n	800d676 <_vfiprintf_r+0x1da>
 800d694:	ab03      	add	r3, sp, #12
 800d696:	462a      	mov	r2, r5
 800d698:	a904      	add	r1, sp, #16
 800d69a:	4630      	mov	r0, r6
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	4b15      	ldr	r3, [pc, #84]	; (800d6f4 <_vfiprintf_r+0x258>)
 800d6a0:	e000      	b.n	800d6a4 <_vfiprintf_r+0x208>
 800d6a2:	bf00      	nop
 800d6a4:	4607      	mov	r7, r0
 800d6a6:	1c78      	adds	r0, r7, #1
 800d6a8:	d1d6      	bne.n	800d658 <_vfiprintf_r+0x1bc>
 800d6aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ac:	07d9      	lsls	r1, r3, #31
 800d6ae:	d405      	bmi.n	800d6bc <_vfiprintf_r+0x220>
 800d6b0:	89ab      	ldrh	r3, [r5, #12]
 800d6b2:	059a      	lsls	r2, r3, #22
 800d6b4:	d402      	bmi.n	800d6bc <_vfiprintf_r+0x220>
 800d6b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6b8:	f7ff fd7f 	bl	800d1ba <__retarget_lock_release_recursive>
 800d6bc:	89ab      	ldrh	r3, [r5, #12]
 800d6be:	065b      	lsls	r3, r3, #25
 800d6c0:	f53f af12 	bmi.w	800d4e8 <_vfiprintf_r+0x4c>
 800d6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6c6:	e711      	b.n	800d4ec <_vfiprintf_r+0x50>
 800d6c8:	ab03      	add	r3, sp, #12
 800d6ca:	462a      	mov	r2, r5
 800d6cc:	a904      	add	r1, sp, #16
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	4b08      	ldr	r3, [pc, #32]	; (800d6f4 <_vfiprintf_r+0x258>)
 800d6d4:	f000 f882 	bl	800d7dc <_printf_i>
 800d6d8:	e7e4      	b.n	800d6a4 <_vfiprintf_r+0x208>
 800d6da:	bf00      	nop
 800d6dc:	0800df60 	.word	0x0800df60
 800d6e0:	0800df80 	.word	0x0800df80
 800d6e4:	0800df40 	.word	0x0800df40
 800d6e8:	0800dfa0 	.word	0x0800dfa0
 800d6ec:	0800dfaa 	.word	0x0800dfaa
 800d6f0:	00000000 	.word	0x00000000
 800d6f4:	0800d477 	.word	0x0800d477
 800d6f8:	0800dfa6 	.word	0x0800dfa6

0800d6fc <_printf_common>:
 800d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d700:	4616      	mov	r6, r2
 800d702:	4699      	mov	r9, r3
 800d704:	688a      	ldr	r2, [r1, #8]
 800d706:	4607      	mov	r7, r0
 800d708:	690b      	ldr	r3, [r1, #16]
 800d70a:	460c      	mov	r4, r1
 800d70c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d710:	4293      	cmp	r3, r2
 800d712:	bfb8      	it	lt
 800d714:	4613      	movlt	r3, r2
 800d716:	6033      	str	r3, [r6, #0]
 800d718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d71c:	b10a      	cbz	r2, 800d722 <_printf_common+0x26>
 800d71e:	3301      	adds	r3, #1
 800d720:	6033      	str	r3, [r6, #0]
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	0699      	lsls	r1, r3, #26
 800d726:	bf42      	ittt	mi
 800d728:	6833      	ldrmi	r3, [r6, #0]
 800d72a:	3302      	addmi	r3, #2
 800d72c:	6033      	strmi	r3, [r6, #0]
 800d72e:	6825      	ldr	r5, [r4, #0]
 800d730:	f015 0506 	ands.w	r5, r5, #6
 800d734:	d106      	bne.n	800d744 <_printf_common+0x48>
 800d736:	f104 0a19 	add.w	sl, r4, #25
 800d73a:	68e3      	ldr	r3, [r4, #12]
 800d73c:	6832      	ldr	r2, [r6, #0]
 800d73e:	1a9b      	subs	r3, r3, r2
 800d740:	42ab      	cmp	r3, r5
 800d742:	dc29      	bgt.n	800d798 <_printf_common+0x9c>
 800d744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d748:	1e13      	subs	r3, r2, #0
 800d74a:	6822      	ldr	r2, [r4, #0]
 800d74c:	bf18      	it	ne
 800d74e:	2301      	movne	r3, #1
 800d750:	0692      	lsls	r2, r2, #26
 800d752:	d42e      	bmi.n	800d7b2 <_printf_common+0xb6>
 800d754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d758:	4649      	mov	r1, r9
 800d75a:	4638      	mov	r0, r7
 800d75c:	47c0      	blx	r8
 800d75e:	3001      	adds	r0, #1
 800d760:	d021      	beq.n	800d7a6 <_printf_common+0xaa>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	341a      	adds	r4, #26
 800d766:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800d76a:	f003 0306 	and.w	r3, r3, #6
 800d76e:	6832      	ldr	r2, [r6, #0]
 800d770:	2600      	movs	r6, #0
 800d772:	2b04      	cmp	r3, #4
 800d774:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d778:	bf08      	it	eq
 800d77a:	1aad      	subeq	r5, r5, r2
 800d77c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d780:	bf14      	ite	ne
 800d782:	2500      	movne	r5, #0
 800d784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d788:	4293      	cmp	r3, r2
 800d78a:	bfc4      	itt	gt
 800d78c:	1a9b      	subgt	r3, r3, r2
 800d78e:	18ed      	addgt	r5, r5, r3
 800d790:	42b5      	cmp	r5, r6
 800d792:	d11a      	bne.n	800d7ca <_printf_common+0xce>
 800d794:	2000      	movs	r0, #0
 800d796:	e008      	b.n	800d7aa <_printf_common+0xae>
 800d798:	2301      	movs	r3, #1
 800d79a:	4652      	mov	r2, sl
 800d79c:	4649      	mov	r1, r9
 800d79e:	4638      	mov	r0, r7
 800d7a0:	47c0      	blx	r8
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d103      	bne.n	800d7ae <_printf_common+0xb2>
 800d7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ae:	3501      	adds	r5, #1
 800d7b0:	e7c3      	b.n	800d73a <_printf_common+0x3e>
 800d7b2:	18e1      	adds	r1, r4, r3
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	2030      	movs	r0, #48	; 0x30
 800d7b8:	3302      	adds	r3, #2
 800d7ba:	4422      	add	r2, r4
 800d7bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7c8:	e7c4      	b.n	800d754 <_printf_common+0x58>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	4649      	mov	r1, r9
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	47c0      	blx	r8
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d0e6      	beq.n	800d7a6 <_printf_common+0xaa>
 800d7d8:	3601      	adds	r6, #1
 800d7da:	e7d9      	b.n	800d790 <_printf_common+0x94>

0800d7dc <_printf_i>:
 800d7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e0:	7e0f      	ldrb	r7, [r1, #24]
 800d7e2:	4691      	mov	r9, r2
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	2f78      	cmp	r7, #120	; 0x78
 800d7ea:	469a      	mov	sl, r3
 800d7ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d7f2:	d807      	bhi.n	800d804 <_printf_i+0x28>
 800d7f4:	2f62      	cmp	r7, #98	; 0x62
 800d7f6:	d80a      	bhi.n	800d80e <_printf_i+0x32>
 800d7f8:	2f00      	cmp	r7, #0
 800d7fa:	f000 80d8 	beq.w	800d9ae <_printf_i+0x1d2>
 800d7fe:	2f58      	cmp	r7, #88	; 0x58
 800d800:	f000 80a3 	beq.w	800d94a <_printf_i+0x16e>
 800d804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d80c:	e03a      	b.n	800d884 <_printf_i+0xa8>
 800d80e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d812:	2b15      	cmp	r3, #21
 800d814:	d8f6      	bhi.n	800d804 <_printf_i+0x28>
 800d816:	a101      	add	r1, pc, #4	; (adr r1, 800d81c <_printf_i+0x40>)
 800d818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d81c:	0800d875 	.word	0x0800d875
 800d820:	0800d889 	.word	0x0800d889
 800d824:	0800d805 	.word	0x0800d805
 800d828:	0800d805 	.word	0x0800d805
 800d82c:	0800d805 	.word	0x0800d805
 800d830:	0800d805 	.word	0x0800d805
 800d834:	0800d889 	.word	0x0800d889
 800d838:	0800d805 	.word	0x0800d805
 800d83c:	0800d805 	.word	0x0800d805
 800d840:	0800d805 	.word	0x0800d805
 800d844:	0800d805 	.word	0x0800d805
 800d848:	0800d995 	.word	0x0800d995
 800d84c:	0800d8b9 	.word	0x0800d8b9
 800d850:	0800d977 	.word	0x0800d977
 800d854:	0800d805 	.word	0x0800d805
 800d858:	0800d805 	.word	0x0800d805
 800d85c:	0800d9b7 	.word	0x0800d9b7
 800d860:	0800d805 	.word	0x0800d805
 800d864:	0800d8b9 	.word	0x0800d8b9
 800d868:	0800d805 	.word	0x0800d805
 800d86c:	0800d805 	.word	0x0800d805
 800d870:	0800d97f 	.word	0x0800d97f
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	1d1a      	adds	r2, r3, #4
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	602a      	str	r2, [r5, #0]
 800d87c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d884:	2301      	movs	r3, #1
 800d886:	e0a3      	b.n	800d9d0 <_printf_i+0x1f4>
 800d888:	6820      	ldr	r0, [r4, #0]
 800d88a:	6829      	ldr	r1, [r5, #0]
 800d88c:	0606      	lsls	r6, r0, #24
 800d88e:	f101 0304 	add.w	r3, r1, #4
 800d892:	d50a      	bpl.n	800d8aa <_printf_i+0xce>
 800d894:	680e      	ldr	r6, [r1, #0]
 800d896:	602b      	str	r3, [r5, #0]
 800d898:	2e00      	cmp	r6, #0
 800d89a:	da03      	bge.n	800d8a4 <_printf_i+0xc8>
 800d89c:	232d      	movs	r3, #45	; 0x2d
 800d89e:	4276      	negs	r6, r6
 800d8a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8a4:	485e      	ldr	r0, [pc, #376]	; (800da20 <_printf_i+0x244>)
 800d8a6:	230a      	movs	r3, #10
 800d8a8:	e019      	b.n	800d8de <_printf_i+0x102>
 800d8aa:	680e      	ldr	r6, [r1, #0]
 800d8ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8b0:	602b      	str	r3, [r5, #0]
 800d8b2:	bf18      	it	ne
 800d8b4:	b236      	sxthne	r6, r6
 800d8b6:	e7ef      	b.n	800d898 <_printf_i+0xbc>
 800d8b8:	682b      	ldr	r3, [r5, #0]
 800d8ba:	6820      	ldr	r0, [r4, #0]
 800d8bc:	1d19      	adds	r1, r3, #4
 800d8be:	6029      	str	r1, [r5, #0]
 800d8c0:	0601      	lsls	r1, r0, #24
 800d8c2:	d501      	bpl.n	800d8c8 <_printf_i+0xec>
 800d8c4:	681e      	ldr	r6, [r3, #0]
 800d8c6:	e002      	b.n	800d8ce <_printf_i+0xf2>
 800d8c8:	0646      	lsls	r6, r0, #25
 800d8ca:	d5fb      	bpl.n	800d8c4 <_printf_i+0xe8>
 800d8cc:	881e      	ldrh	r6, [r3, #0]
 800d8ce:	2f6f      	cmp	r7, #111	; 0x6f
 800d8d0:	4853      	ldr	r0, [pc, #332]	; (800da20 <_printf_i+0x244>)
 800d8d2:	bf0c      	ite	eq
 800d8d4:	2308      	moveq	r3, #8
 800d8d6:	230a      	movne	r3, #10
 800d8d8:	2100      	movs	r1, #0
 800d8da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8de:	6865      	ldr	r5, [r4, #4]
 800d8e0:	2d00      	cmp	r5, #0
 800d8e2:	60a5      	str	r5, [r4, #8]
 800d8e4:	bfa2      	ittt	ge
 800d8e6:	6821      	ldrge	r1, [r4, #0]
 800d8e8:	f021 0104 	bicge.w	r1, r1, #4
 800d8ec:	6021      	strge	r1, [r4, #0]
 800d8ee:	b90e      	cbnz	r6, 800d8f4 <_printf_i+0x118>
 800d8f0:	2d00      	cmp	r5, #0
 800d8f2:	d04d      	beq.n	800d990 <_printf_i+0x1b4>
 800d8f4:	4615      	mov	r5, r2
 800d8f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8fa:	fb03 6711 	mls	r7, r3, r1, r6
 800d8fe:	5dc7      	ldrb	r7, [r0, r7]
 800d900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d904:	4637      	mov	r7, r6
 800d906:	460e      	mov	r6, r1
 800d908:	42bb      	cmp	r3, r7
 800d90a:	d9f4      	bls.n	800d8f6 <_printf_i+0x11a>
 800d90c:	2b08      	cmp	r3, #8
 800d90e:	d10b      	bne.n	800d928 <_printf_i+0x14c>
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	07de      	lsls	r6, r3, #31
 800d914:	d508      	bpl.n	800d928 <_printf_i+0x14c>
 800d916:	6923      	ldr	r3, [r4, #16]
 800d918:	6861      	ldr	r1, [r4, #4]
 800d91a:	4299      	cmp	r1, r3
 800d91c:	bfde      	ittt	le
 800d91e:	2330      	movle	r3, #48	; 0x30
 800d920:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d924:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d928:	1b52      	subs	r2, r2, r5
 800d92a:	6122      	str	r2, [r4, #16]
 800d92c:	464b      	mov	r3, r9
 800d92e:	aa03      	add	r2, sp, #12
 800d930:	4621      	mov	r1, r4
 800d932:	4640      	mov	r0, r8
 800d934:	f8cd a000 	str.w	sl, [sp]
 800d938:	f7ff fee0 	bl	800d6fc <_printf_common>
 800d93c:	3001      	adds	r0, #1
 800d93e:	d14c      	bne.n	800d9da <_printf_i+0x1fe>
 800d940:	f04f 30ff 	mov.w	r0, #4294967295
 800d944:	b004      	add	sp, #16
 800d946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94a:	4835      	ldr	r0, [pc, #212]	; (800da20 <_printf_i+0x244>)
 800d94c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d950:	6829      	ldr	r1, [r5, #0]
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	f851 6b04 	ldr.w	r6, [r1], #4
 800d958:	6029      	str	r1, [r5, #0]
 800d95a:	061d      	lsls	r5, r3, #24
 800d95c:	d514      	bpl.n	800d988 <_printf_i+0x1ac>
 800d95e:	07df      	lsls	r7, r3, #31
 800d960:	bf44      	itt	mi
 800d962:	f043 0320 	orrmi.w	r3, r3, #32
 800d966:	6023      	strmi	r3, [r4, #0]
 800d968:	b91e      	cbnz	r6, 800d972 <_printf_i+0x196>
 800d96a:	6823      	ldr	r3, [r4, #0]
 800d96c:	f023 0320 	bic.w	r3, r3, #32
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	2310      	movs	r3, #16
 800d974:	e7b0      	b.n	800d8d8 <_printf_i+0xfc>
 800d976:	6823      	ldr	r3, [r4, #0]
 800d978:	f043 0320 	orr.w	r3, r3, #32
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	2378      	movs	r3, #120	; 0x78
 800d980:	4828      	ldr	r0, [pc, #160]	; (800da24 <_printf_i+0x248>)
 800d982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d986:	e7e3      	b.n	800d950 <_printf_i+0x174>
 800d988:	0659      	lsls	r1, r3, #25
 800d98a:	bf48      	it	mi
 800d98c:	b2b6      	uxthmi	r6, r6
 800d98e:	e7e6      	b.n	800d95e <_printf_i+0x182>
 800d990:	4615      	mov	r5, r2
 800d992:	e7bb      	b.n	800d90c <_printf_i+0x130>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	6826      	ldr	r6, [r4, #0]
 800d998:	1d18      	adds	r0, r3, #4
 800d99a:	6961      	ldr	r1, [r4, #20]
 800d99c:	6028      	str	r0, [r5, #0]
 800d99e:	0635      	lsls	r5, r6, #24
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	d501      	bpl.n	800d9a8 <_printf_i+0x1cc>
 800d9a4:	6019      	str	r1, [r3, #0]
 800d9a6:	e002      	b.n	800d9ae <_printf_i+0x1d2>
 800d9a8:	0670      	lsls	r0, r6, #25
 800d9aa:	d5fb      	bpl.n	800d9a4 <_printf_i+0x1c8>
 800d9ac:	8019      	strh	r1, [r3, #0]
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	4615      	mov	r5, r2
 800d9b2:	6123      	str	r3, [r4, #16]
 800d9b4:	e7ba      	b.n	800d92c <_printf_i+0x150>
 800d9b6:	682b      	ldr	r3, [r5, #0]
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	1d1a      	adds	r2, r3, #4
 800d9bc:	602a      	str	r2, [r5, #0]
 800d9be:	681d      	ldr	r5, [r3, #0]
 800d9c0:	6862      	ldr	r2, [r4, #4]
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	f000 f8da 	bl	800db7c <memchr>
 800d9c8:	b108      	cbz	r0, 800d9ce <_printf_i+0x1f2>
 800d9ca:	1b40      	subs	r0, r0, r5
 800d9cc:	6060      	str	r0, [r4, #4]
 800d9ce:	6863      	ldr	r3, [r4, #4]
 800d9d0:	6123      	str	r3, [r4, #16]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9d8:	e7a8      	b.n	800d92c <_printf_i+0x150>
 800d9da:	6923      	ldr	r3, [r4, #16]
 800d9dc:	462a      	mov	r2, r5
 800d9de:	4649      	mov	r1, r9
 800d9e0:	4640      	mov	r0, r8
 800d9e2:	47d0      	blx	sl
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	d0ab      	beq.n	800d940 <_printf_i+0x164>
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	079b      	lsls	r3, r3, #30
 800d9ec:	d413      	bmi.n	800da16 <_printf_i+0x23a>
 800d9ee:	68e0      	ldr	r0, [r4, #12]
 800d9f0:	9b03      	ldr	r3, [sp, #12]
 800d9f2:	4298      	cmp	r0, r3
 800d9f4:	bfb8      	it	lt
 800d9f6:	4618      	movlt	r0, r3
 800d9f8:	e7a4      	b.n	800d944 <_printf_i+0x168>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	4649      	mov	r1, r9
 800da00:	4640      	mov	r0, r8
 800da02:	47d0      	blx	sl
 800da04:	3001      	adds	r0, #1
 800da06:	d09b      	beq.n	800d940 <_printf_i+0x164>
 800da08:	3501      	adds	r5, #1
 800da0a:	68e3      	ldr	r3, [r4, #12]
 800da0c:	9903      	ldr	r1, [sp, #12]
 800da0e:	1a5b      	subs	r3, r3, r1
 800da10:	42ab      	cmp	r3, r5
 800da12:	dcf2      	bgt.n	800d9fa <_printf_i+0x21e>
 800da14:	e7eb      	b.n	800d9ee <_printf_i+0x212>
 800da16:	2500      	movs	r5, #0
 800da18:	f104 0619 	add.w	r6, r4, #25
 800da1c:	e7f5      	b.n	800da0a <_printf_i+0x22e>
 800da1e:	bf00      	nop
 800da20:	0800dfb1 	.word	0x0800dfb1
 800da24:	0800dfc2 	.word	0x0800dfc2

0800da28 <_sbrk_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	2300      	movs	r3, #0
 800da2c:	4d05      	ldr	r5, [pc, #20]	; (800da44 <_sbrk_r+0x1c>)
 800da2e:	4604      	mov	r4, r0
 800da30:	4608      	mov	r0, r1
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	f7f3 f928 	bl	8000c88 <_sbrk>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_sbrk_r+0x1a>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_sbrk_r+0x1a>
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	200002a4 	.word	0x200002a4

0800da48 <__sread>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	460c      	mov	r4, r1
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	f000 f8ae 	bl	800dbb0 <_read_r>
 800da54:	2800      	cmp	r0, #0
 800da56:	bfab      	itete	ge
 800da58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da5a:	89a3      	ldrhlt	r3, [r4, #12]
 800da5c:	181b      	addge	r3, r3, r0
 800da5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da62:	bfac      	ite	ge
 800da64:	6563      	strge	r3, [r4, #84]	; 0x54
 800da66:	81a3      	strhlt	r3, [r4, #12]
 800da68:	bd10      	pop	{r4, pc}

0800da6a <__swrite>:
 800da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	461f      	mov	r7, r3
 800da70:	898b      	ldrh	r3, [r1, #12]
 800da72:	4605      	mov	r5, r0
 800da74:	460c      	mov	r4, r1
 800da76:	05db      	lsls	r3, r3, #23
 800da78:	4616      	mov	r6, r2
 800da7a:	d505      	bpl.n	800da88 <__swrite+0x1e>
 800da7c:	2302      	movs	r3, #2
 800da7e:	2200      	movs	r2, #0
 800da80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da84:	f000 f868 	bl	800db58 <_lseek_r>
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	4632      	mov	r2, r6
 800da8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da90:	4628      	mov	r0, r5
 800da92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da96:	81a3      	strh	r3, [r4, #12]
 800da98:	463b      	mov	r3, r7
 800da9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9e:	f000 b817 	b.w	800dad0 <_write_r>

0800daa2 <__sseek>:
 800daa2:	b510      	push	{r4, lr}
 800daa4:	460c      	mov	r4, r1
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 f855 	bl	800db58 <_lseek_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	bf15      	itete	ne
 800dab4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dabe:	81a3      	strheq	r3, [r4, #12]
 800dac0:	bf18      	it	ne
 800dac2:	81a3      	strhne	r3, [r4, #12]
 800dac4:	bd10      	pop	{r4, pc}

0800dac6 <__sclose>:
 800dac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daca:	f000 b813 	b.w	800daf4 <_close_r>
	...

0800dad0 <_write_r>:
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4604      	mov	r4, r0
 800dad4:	4d06      	ldr	r5, [pc, #24]	; (800daf0 <_write_r+0x20>)
 800dad6:	4608      	mov	r0, r1
 800dad8:	4611      	mov	r1, r2
 800dada:	2200      	movs	r2, #0
 800dadc:	602a      	str	r2, [r5, #0]
 800dade:	461a      	mov	r2, r3
 800dae0:	f7f3 f882 	bl	8000be8 <_write>
 800dae4:	1c43      	adds	r3, r0, #1
 800dae6:	d102      	bne.n	800daee <_write_r+0x1e>
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	b103      	cbz	r3, 800daee <_write_r+0x1e>
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	bd38      	pop	{r3, r4, r5, pc}
 800daf0:	200002a4 	.word	0x200002a4

0800daf4 <_close_r>:
 800daf4:	b538      	push	{r3, r4, r5, lr}
 800daf6:	2300      	movs	r3, #0
 800daf8:	4d05      	ldr	r5, [pc, #20]	; (800db10 <_close_r+0x1c>)
 800dafa:	4604      	mov	r4, r0
 800dafc:	4608      	mov	r0, r1
 800dafe:	602b      	str	r3, [r5, #0]
 800db00:	f7f3 f88e 	bl	8000c20 <_close>
 800db04:	1c43      	adds	r3, r0, #1
 800db06:	d102      	bne.n	800db0e <_close_r+0x1a>
 800db08:	682b      	ldr	r3, [r5, #0]
 800db0a:	b103      	cbz	r3, 800db0e <_close_r+0x1a>
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	bd38      	pop	{r3, r4, r5, pc}
 800db10:	200002a4 	.word	0x200002a4

0800db14 <_fstat_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	2300      	movs	r3, #0
 800db18:	4d06      	ldr	r5, [pc, #24]	; (800db34 <_fstat_r+0x20>)
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	4611      	mov	r1, r2
 800db20:	602b      	str	r3, [r5, #0]
 800db22:	f7f3 f889 	bl	8000c38 <_fstat>
 800db26:	1c43      	adds	r3, r0, #1
 800db28:	d102      	bne.n	800db30 <_fstat_r+0x1c>
 800db2a:	682b      	ldr	r3, [r5, #0]
 800db2c:	b103      	cbz	r3, 800db30 <_fstat_r+0x1c>
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	bd38      	pop	{r3, r4, r5, pc}
 800db32:	bf00      	nop
 800db34:	200002a4 	.word	0x200002a4

0800db38 <_isatty_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	2300      	movs	r3, #0
 800db3c:	4d05      	ldr	r5, [pc, #20]	; (800db54 <_isatty_r+0x1c>)
 800db3e:	4604      	mov	r4, r0
 800db40:	4608      	mov	r0, r1
 800db42:	602b      	str	r3, [r5, #0]
 800db44:	f7f3 f888 	bl	8000c58 <_isatty>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_isatty_r+0x1a>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_isatty_r+0x1a>
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	200002a4 	.word	0x200002a4

0800db58 <_lseek_r>:
 800db58:	b538      	push	{r3, r4, r5, lr}
 800db5a:	4604      	mov	r4, r0
 800db5c:	4d06      	ldr	r5, [pc, #24]	; (800db78 <_lseek_r+0x20>)
 800db5e:	4608      	mov	r0, r1
 800db60:	4611      	mov	r1, r2
 800db62:	2200      	movs	r2, #0
 800db64:	602a      	str	r2, [r5, #0]
 800db66:	461a      	mov	r2, r3
 800db68:	f7f3 f881 	bl	8000c6e <_lseek>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	d102      	bne.n	800db76 <_lseek_r+0x1e>
 800db70:	682b      	ldr	r3, [r5, #0]
 800db72:	b103      	cbz	r3, 800db76 <_lseek_r+0x1e>
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	bd38      	pop	{r3, r4, r5, pc}
 800db78:	200002a4 	.word	0x200002a4

0800db7c <memchr>:
 800db7c:	b2c9      	uxtb	r1, r1
 800db7e:	4402      	add	r2, r0
 800db80:	b510      	push	{r4, lr}
 800db82:	4290      	cmp	r0, r2
 800db84:	4603      	mov	r3, r0
 800db86:	d101      	bne.n	800db8c <memchr+0x10>
 800db88:	2300      	movs	r3, #0
 800db8a:	e003      	b.n	800db94 <memchr+0x18>
 800db8c:	781c      	ldrb	r4, [r3, #0]
 800db8e:	3001      	adds	r0, #1
 800db90:	428c      	cmp	r4, r1
 800db92:	d1f6      	bne.n	800db82 <memchr+0x6>
 800db94:	4618      	mov	r0, r3
 800db96:	bd10      	pop	{r4, pc}

0800db98 <__malloc_lock>:
 800db98:	4801      	ldr	r0, [pc, #4]	; (800dba0 <__malloc_lock+0x8>)
 800db9a:	f7ff bb0d 	b.w	800d1b8 <__retarget_lock_acquire_recursive>
 800db9e:	bf00      	nop
 800dba0:	20000298 	.word	0x20000298

0800dba4 <__malloc_unlock>:
 800dba4:	4801      	ldr	r0, [pc, #4]	; (800dbac <__malloc_unlock+0x8>)
 800dba6:	f7ff bb08 	b.w	800d1ba <__retarget_lock_release_recursive>
 800dbaa:	bf00      	nop
 800dbac:	20000298 	.word	0x20000298

0800dbb0 <_read_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	4d06      	ldr	r5, [pc, #24]	; (800dbd0 <_read_r+0x20>)
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	4611      	mov	r1, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	602a      	str	r2, [r5, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f7f2 fff5 	bl	8000bae <_read>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_read_r+0x1e>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_read_r+0x1e>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	200002a4 	.word	0x200002a4

0800dbd4 <_init>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	bf00      	nop
 800dbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbda:	bc08      	pop	{r3}
 800dbdc:	469e      	mov	lr, r3
 800dbde:	4770      	bx	lr

0800dbe0 <_fini>:
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	bf00      	nop
 800dbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbe6:	bc08      	pop	{r3}
 800dbe8:	469e      	mov	lr, r3
 800dbea:	4770      	bx	lr
