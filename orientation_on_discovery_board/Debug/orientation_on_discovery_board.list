
orientation_on_discovery_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007838  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08007a38  08007a38  00017a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f58  08007f58  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f60  08007f60  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e0  08008148  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08008148  00020358  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e326  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c9  00000000  00000000  0002e534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00030800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00031388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ea7a  00000000  00000000  00031e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f16e  00000000  00000000  00060892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113281  00000000  00000000  0006fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182c81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e48  00000000  00000000  00182cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08007a20 	.word	0x08007a20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08007a20 	.word	0x08007a20

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
/** Configure pins
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0xe0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_GPIO_Init+0xe0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a25      	ldr	r2, [pc, #148]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_GPIO_Init+0xe0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000670:	f001 fb98 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000674:	2310      	movs	r3, #16
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800068c:	f001 f9c6 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <MX_GPIO_Init+0xe8>)
 80006a4:	f001 f9ba 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80006a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ba:	2305      	movs	r3, #5
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_GPIO_Init+0xec>)
 80006c6:	f001 f9a9 	bl	8001a1c <HAL_GPIO_Init>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40022400 	.word	0x40022400
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f001 f82f 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f819 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f7ff ff7f 	bl	80005f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f6:	f000 fa3f 	bl	8000b78 <MX_USART1_UART_Init>
  MX_SPI5_Init();
 80006fa:	f000 f895 	bl	8000828 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  	  icm_hd_mvmt_init();
 80006fe:	f004 f873 	bl	80047e8 <icm_hd_mvmt_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  test = icm_hd_mvmt_process();
 8000702:	f004 f8c9 	bl	8004898 <icm_hd_mvmt_process>
 8000706:	6078      	str	r0, [r7, #4]
	  if(test != 404)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800070e:	d003      	beq.n	8000718 <main+0x34>
	  {
	  printf("\r\ndegree -> %d", test);
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <main+0x3c>)
 8000714:	f004 fda6 	bl	8005264 <iprintf>
	  }
	  HAL_Delay(100);
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	f001 f875 	bl	8001808 <HAL_Delay>
	  test = icm_hd_mvmt_process();
 800071e:	e7f0      	b.n	8000702 <main+0x1e>
 8000720:	08007a38 	.word	0x08007a38

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2234      	movs	r2, #52	; 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f94c 	bl	80049d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <SystemClock_Config+0xd0>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000794:	2360      	movs	r3, #96	; 0x60
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000798:	2306      	movs	r3, #6
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fb15 	bl	8001dd8 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b4:	f000 f832 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fdac 	bl	8002334 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007e2:	f000 f81b 	bl	800081c <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000800:	1d39      	adds	r1, r7, #4
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2201      	movs	r2, #1
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <__io_putchar+0x20>)
 800080a:	f003 fb4f 	bl	8003eac <HAL_UART_Transmit>

  return ch;
 800080e:	687b      	ldr	r3, [r7, #4]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000264 	.word	0x20000264

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_SPI5_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_SPI5_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_SPI5_Init+0x74>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_SPI5_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI5_Init+0x74>)
 8000842:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000846:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_SPI5_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI5_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI5_Init+0x74>)
 8000856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_SPI5_Init+0x74>)
 800085e:	2208      	movs	r2, #8
 8000860:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_SPI5_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_SPI5_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_SPI5_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_SPI5_Init+0x74>)
 8000876:	2207      	movs	r2, #7
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_SPI5_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_SPI5_Init+0x74>)
 8000882:	2208      	movs	r2, #8
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_SPI5_Init+0x74>)
 8000888:	f002 fb62 	bl	8002f50 <HAL_SPI_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000892:	f7ff ffc3 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001fc 	.word	0x200001fc
 80008a0:	40015000 	.word	0x40015000

080008a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_SPI_MspInit+0x7c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d128      	bne.n	8000918 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_SPI_MspInit+0x80>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MOSI_Pin|SPI5_MISO_Pin;
 80008f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000908:	2305      	movs	r3, #5
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_SPI_MspInit+0x84>)
 8000914:	f001 f882 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40015000 	.word	0x40015000
 8000924:	40023800 	.word	0x40023800
 8000928:	40021400 	.word	0x40021400

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x44>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_MspInit+0x44>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x44>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x44>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x44>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 ff02 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_kill>:

int _kill(int pid, int sig)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009e2:	f003 ffcb 	bl	800497c <__errno>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2216      	movs	r2, #22
 80009ea:	601a      	str	r2, [r3, #0]
	return -1;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_exit>:

void _exit (int status)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffe7 	bl	80009d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a0a:	e7fe      	b.n	8000a0a <_exit+0x12>

08000a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
	}

return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fec9 	bl	80007f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf1      	blt.n	8000a58 <_write+0x12>
	}
	return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_close>:

int _close(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f003 ff30 	bl	800497c <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20080000 	.word	0x20080000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	20000260 	.word	0x20000260
 8000b50:	20000358 	.word	0x20000358

08000b54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b7e:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <MX_USART1_UART_Init+0x5c>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART1_UART_Init+0x58>)
 8000bbc:	f003 f928 	bl	8003e10 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f7ff fe29 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000264 	.word	0x20000264
 8000bd4:	40011000 	.word	0x40011000

08000bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0ae      	sub	sp, #184	; 0xb8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2290      	movs	r2, #144	; 0x90
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fee9 	bl	80049d0 <memset>
  if(uartHandle->Instance==USART1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_UART_MspInit+0xb0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d13b      	bne.n	8000c80 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c08:	2340      	movs	r3, #64	; 0x40
 8000c0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fd73 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c20:	f7ff fdfc 	bl	800081c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c7c:	f000 fece 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c80:	bf00      	nop
 8000c82:	37b8      	adds	r7, #184	; 0xb8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40011000 	.word	0x40011000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cbe:	f7ff ff49 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f003 fe61 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fd0d 	bl	80006e4 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ccc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000cd8:	08007f68 	.word	0x08007f68
  ldr r2, =_sbss
 8000cdc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000ce0:	20000358 	.word	0x20000358

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>

08000ce6 <arg_mvp1_snsr_mtn_icm20948_init>:
}


/* Main Functions */
MTN_StatusTypeDef arg_mvp1_snsr_mtn_icm20948_init()
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
	icm20948_device_reset();
 8000cea:	f000 f926 	bl	8000f3a <icm20948_device_reset>

	while(!icm20948_who_am_i());
 8000cee:	bf00      	nop
 8000cf0:	f000 f910 	bl	8000f14 <icm20948_who_am_i>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f083 0301 	eor.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f7      	bne.n	8000cf0 <arg_mvp1_snsr_mtn_icm20948_init+0xa>

	icm20948_device_reset();
 8000d00:	f000 f91b 	bl	8000f3a <icm20948_device_reset>
	icm20948_wakeup();
 8000d04:	f000 f925 	bl	8000f52 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 f953 	bl	8000fb4 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000d0e:	f000 f96a 	bl	8000fe6 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8000d12:	f000 f938 	bl	8000f86 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f96e 	bl	8000ff8 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f988 	bl	8001032 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f9a2 	bl	800106c <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f000 f9ae 	bl	800108a <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000d2e:	f000 f9cb 	bl	80010c8 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000d32:	f000 fa65 	bl	8001200 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_250dps);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 fb70 	bl	800141c <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 fbb7 	bl	80014b0 <icm20948_accel_full_scale_select>

	return MTN_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <icm20948_gyro_read>:
	ak09916_operation_mode_setting(power_down_mode);//continuous_measurement_100hz
	return MTN_OK;
}

void icm20948_gyro_read(axises* data)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000d50:	2206      	movs	r2, #6
 8000d52:	2133      	movs	r1, #51	; 0x33
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 fc89 	bl	800166c <read_multiple_icm20948_reg>
 8000d5a:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3301      	adds	r3, #1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3302      	adds	r3, #2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3303      	adds	r3, #3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3304      	adds	r3, #4
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3305      	adds	r3, #5
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <icm20948_accel_read>:

void icm20948_accel_read(axises* data){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000dd8:	2206      	movs	r2, #6
 8000dda:	212d      	movs	r1, #45	; 0x2d
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 fc45 	bl	800166c <read_multiple_icm20948_reg>
 8000de2:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3301      	adds	r3, #1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3303      	adds	r3, #3
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3305      	adds	r3, #5
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <icm20948_accel_read+0x90>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200002f0 	.word	0x200002f0

08000e64 <icm20948_accel_read_g>:
	data->y /= gyro_scale_factor;
	data->z /= gyro_scale_factor;
}

void icm20948_accel_read_g(axises* data)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	6078      	str	r0, [r7, #4]


	icm20948_accel_read(data);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ffaf 	bl	8000dd0 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edd3 6a00 	vldr	s13, [r3]
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <icm20948_accel_read_g+0xa0>)
 8000e7a:	ed93 7a00 	vldr	s14, [r3]
 8000e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	edc3 7a00 	vstr	s15, [r3]
	data->y /= accel_scale_factor;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <icm20948_accel_read_g+0xa0>)
 8000e90:	ed93 7a00 	vldr	s14, [r3]
 8000e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= accel_scale_factor;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <icm20948_accel_read_g+0xa0>)
 8000ea6:	ed93 7a00 	vldr	s14, [r3]
 8000eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	edc3 7a02 	vstr	s15, [r3, #8]
	 sprintf(Sendout,"Accele:  x->%.4f\t y->%.4f\t z->%.4f \r\n",data->x ,data->y ,data->z);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ece:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ed2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ed6:	ed8d 7b00 	vstr	d7, [sp]
 8000eda:	ec53 2b15 	vmov	r2, r3, d5
 8000ede:	490a      	ldr	r1, [pc, #40]	; (8000f08 <icm20948_accel_read_g+0xa4>)
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <icm20948_accel_read_g+0xa8>)
 8000ee2:	f004 f9d7 	bl	8005294 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t *)Sendout, strlen(Sendout),HAL_MAX_DELAY);
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <icm20948_accel_read_g+0xa8>)
 8000ee8:	f7ff f9aa 	bl	8000240 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	4905      	ldr	r1, [pc, #20]	; (8000f0c <icm20948_accel_read_g+0xa8>)
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <icm20948_accel_read_g+0xac>)
 8000ef8:	f002 ffd8 	bl	8003eac <HAL_UART_Transmit>
//	 else if(data->y <= -0.2773){
//		 m++;
//		 printmsg("Left STEP COUNT - %d\r\n",m);
//	 }

}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200002f0 	.word	0x200002f0
 8000f08:	08007a54 	.word	0x08007a54
 8000f0c:	200002f8 	.word	0x200002f8
 8000f10:	20000264 	.word	0x20000264

08000f14 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fb45 	bl	80015ac <read_single_icm20948_reg>
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2bea      	cmp	r3, #234	; 0xea
 8000f2a:	d101      	bne.n	8000f30 <icm20948_who_am_i+0x1c>
		return true;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <icm20948_who_am_i+0x1e>
	else
		return false;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000f3e:	22c1      	movs	r2, #193	; 0xc1
 8000f40:	2106      	movs	r1, #6
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 fb68 	bl	8001618 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f000 fc5d 	bl	8001808 <HAL_Delay>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <icm20948_wakeup>:
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
	HAL_Delay(100);
}

void icm20948_wakeup()
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000f58:	2106      	movs	r1, #6
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 fb26 	bl	80015ac <read_single_icm20948_reg>
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f6a:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2106      	movs	r1, #6
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 fb50 	bl	8001618 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	f000 fc45 	bl	8001808 <HAL_Delay>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 fb0c 	bl	80015ac <read_single_icm20948_reg>
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2103      	movs	r1, #3
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 fb36 	bl	8001618 <write_single_icm20948_reg>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
}

void icm20948_clock_source(uint8_t source)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000fbe:	2106      	movs	r1, #6
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 faf3 	bl	80015ac <read_single_icm20948_reg>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2106      	movs	r1, #6
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fb1d 	bl	8001618 <write_single_icm20948_reg>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <icm20948_odr_align_enable>:

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
}

void icm20948_odr_align_enable()
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2109      	movs	r1, #9
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f000 fb12 	bl	8001618 <write_single_icm20948_reg>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001002:	2101      	movs	r1, #1
 8001004:	2020      	movs	r0, #32
 8001006:	f000 fad1 	bl	80015ac <read_single_icm20948_reg>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	b25a      	sxtb	r2, r3
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	4313      	orrs	r3, r2
 800101a:	b25b      	sxtb	r3, r3
 800101c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	461a      	mov	r2, r3
 8001022:	2101      	movs	r1, #1
 8001024:	2020      	movs	r0, #32
 8001026:	f000 faf7 	bl	8001618 <write_single_icm20948_reg>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800103c:	2114      	movs	r1, #20
 800103e:	2020      	movs	r0, #32
 8001040:	f000 fab4 	bl	80015ac <read_single_icm20948_reg>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	b25a      	sxtb	r2, r3
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4313      	orrs	r3, r2
 8001054:	b25b      	sxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	461a      	mov	r2, r3
 800105c:	2101      	movs	r1, #1
 800105e:	2020      	movs	r0, #32
 8001060:	f000 fada 	bl	8001618 <write_single_icm20948_reg>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	461a      	mov	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	2020      	movs	r0, #32
 800107e:	f000 facb 	bl	8001618 <write_single_icm20948_reg>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	461a      	mov	r2, r3
 80010aa:	2110      	movs	r1, #16
 80010ac:	2020      	movs	r0, #32
 80010ae:	f000 fab3 	bl	8001618 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	461a      	mov	r2, r3
 80010b6:	2111      	movs	r1, #17
 80010b8:	2020      	movs	r0, #32
 80010ba:	f000 faad 	bl	8001618 <write_single_icm20948_reg>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <icm20948_gyro_calibration>:
	write_single_ak09916_reg(MAG_CNTL2, mode);
	HAL_Delay(100);
}

void icm20948_gyro_calibration()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	2300      	movs	r3, #0
 80010e0:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	e031      	b.n	800114c <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fe2b 	bl	8000d48 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001108:	ee17 3a90 	vmov	r3, s15
 800110c:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	edd7 7a07 	vldr	s15, [r7, #28]
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 3a90 	vmov	r3, s15
 8001128:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001134:	edd7 7a08 	vldr	s15, [r7, #32]
 8001138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	ee17 3a90 	vmov	r3, s15
 8001144:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	3301      	adds	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	2b63      	cmp	r3, #99	; 0x63
 8001150:	ddca      	ble.n	80010e8 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4a29      	ldr	r2, [pc, #164]	; (80011fc <icm20948_gyro_calibration+0x134>)
 8001156:	fb82 1203 	smull	r1, r2, r2, r3
 800115a:	1152      	asrs	r2, r2, #5
 800115c:	17db      	asrs	r3, r3, #31
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4a25      	ldr	r2, [pc, #148]	; (80011fc <icm20948_gyro_calibration+0x134>)
 8001166:	fb82 1203 	smull	r1, r2, r2, r3
 800116a:	1152      	asrs	r2, r2, #5
 800116c:	17db      	asrs	r3, r3, #31
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <icm20948_gyro_calibration+0x134>)
 8001176:	fb82 1203 	smull	r1, r2, r2, r3
 800117a:	1152      	asrs	r2, r2, #5
 800117c:	17db      	asrs	r3, r3, #31
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	425b      	negs	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	da00      	bge.n	800118c <icm20948_gyro_calibration+0xc4>
 800118a:	3303      	adds	r3, #3
 800118c:	109b      	asrs	r3, r3, #2
 800118e:	121b      	asrs	r3, r3, #8
 8001190:	b2db      	uxtb	r3, r3
 8001192:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	425b      	negs	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <icm20948_gyro_calibration+0xd6>
 800119c:	3303      	adds	r3, #3
 800119e:	109b      	asrs	r3, r3, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	425b      	negs	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da00      	bge.n	80011ae <icm20948_gyro_calibration+0xe6>
 80011ac:	3303      	adds	r3, #3
 80011ae:	109b      	asrs	r3, r3, #2
 80011b0:	121b      	asrs	r3, r3, #8
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	425b      	negs	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da00      	bge.n	80011c0 <icm20948_gyro_calibration+0xf8>
 80011be:	3303      	adds	r3, #3
 80011c0:	109b      	asrs	r3, r3, #2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	425b      	negs	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da00      	bge.n	80011d0 <icm20948_gyro_calibration+0x108>
 80011ce:	3303      	adds	r3, #3
 80011d0:	109b      	asrs	r3, r3, #2
 80011d2:	121b      	asrs	r3, r3, #8
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	425b      	negs	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da00      	bge.n	80011e2 <icm20948_gyro_calibration+0x11a>
 80011e0:	3303      	adds	r3, #3
 80011e2:	109b      	asrs	r3, r3, #2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 80011e8:	1d3a      	adds	r2, r7, #4
 80011ea:	2306      	movs	r3, #6
 80011ec:	2103      	movs	r1, #3
 80011ee:	2020      	movs	r0, #32
 80011f0:	f000 fa76 	bl	80016e0 <write_multiple_icm20948_reg>
}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	51eb851f 	.word	0x51eb851f

08001200 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	2300      	movs	r3, #0
 8001224:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800122a:	e031      	b.n	8001290 <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fdcd 	bl	8000dd0 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001240:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124c:	ee17 3a90 	vmov	r3, s15
 8001250:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001278:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001284:	ee17 3a90 	vmov	r3, s15
 8001288:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 800128a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800128c:	3301      	adds	r3, #1
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001292:	2b63      	cmp	r3, #99	; 0x63
 8001294:	ddca      	ble.n	800122c <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4a5e      	ldr	r2, [pc, #376]	; (8001414 <icm20948_accel_calibration+0x214>)
 800129a:	fb82 1203 	smull	r1, r2, r2, r3
 800129e:	1152      	asrs	r2, r2, #5
 80012a0:	17db      	asrs	r3, r3, #31
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4a5a      	ldr	r2, [pc, #360]	; (8001414 <icm20948_accel_calibration+0x214>)
 80012aa:	fb82 1203 	smull	r1, r2, r2, r3
 80012ae:	1152      	asrs	r2, r2, #5
 80012b0:	17db      	asrs	r3, r3, #31
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	4a56      	ldr	r2, [pc, #344]	; (8001414 <icm20948_accel_calibration+0x214>)
 80012ba:	fb82 1203 	smull	r1, r2, r2, r3
 80012be:	1152      	asrs	r2, r2, #5
 80012c0:	17db      	asrs	r3, r3, #31
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 80012c6:	4a54      	ldr	r2, [pc, #336]	; (8001418 <icm20948_accel_calibration+0x218>)
 80012c8:	463b      	mov	r3, r7
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4611      	mov	r1, r2
 80012ce:	8019      	strh	r1, [r3, #0]
 80012d0:	3302      	adds	r3, #2
 80012d2:	0c12      	lsrs	r2, r2, #16
 80012d4:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80012d6:	2202      	movs	r2, #2
 80012d8:	2114      	movs	r1, #20
 80012da:	2010      	movs	r0, #16
 80012dc:	f000 f9c6 	bl	800166c <read_multiple_icm20948_reg>
 80012e0:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80012e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012ea:	3201      	adds	r2, #1
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	3301      	adds	r3, #1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001300:	2202      	movs	r2, #2
 8001302:	2117      	movs	r1, #23
 8001304:	2010      	movs	r0, #16
 8001306:	f000 f9b1 	bl	800166c <read_multiple_icm20948_reg>
 800130a:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001314:	3201      	adds	r2, #1
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 800131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131e:	3301      	adds	r3, #1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800132a:	2202      	movs	r2, #2
 800132c:	211a      	movs	r1, #26
 800132e:	2010      	movs	r0, #16
 8001330:	f000 f99c 	bl	800166c <read_multiple_icm20948_reg>
 8001334:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800133e:	3201      	adds	r2, #1
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8001346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001348:	3301      	adds	r3, #1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da00      	bge.n	800135e <icm20948_accel_calibration+0x15e>
 800135c:	3307      	adds	r3, #7
 800135e:	10db      	asrs	r3, r3, #3
 8001360:	425b      	negs	r3, r3
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	da00      	bge.n	8001370 <icm20948_accel_calibration+0x170>
 800136e:	3307      	adds	r3, #7
 8001370:	10db      	asrs	r3, r3, #3
 8001372:	425b      	negs	r3, r3
 8001374:	4413      	add	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da00      	bge.n	8001382 <icm20948_accel_calibration+0x182>
 8001380:	3307      	adds	r3, #7
 8001382:	10db      	asrs	r3, r3, #3
 8001384:	425b      	negs	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	121b      	asrs	r3, r3, #8
 800138e:	b2db      	uxtb	r3, r3
 8001390:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800139e:	797a      	ldrb	r2, [r7, #5]
 80013a0:	783b      	ldrb	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	121b      	asrs	r3, r3, #8
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	787b      	ldrb	r3, [r7, #1]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	121b      	asrs	r3, r3, #8
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80013da:	7a7a      	ldrb	r2, [r7, #9]
 80013dc:	78bb      	ldrb	r3, [r7, #2]
 80013de:	4313      	orrs	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80013e4:	1d3a      	adds	r2, r7, #4
 80013e6:	2302      	movs	r3, #2
 80013e8:	2114      	movs	r1, #20
 80013ea:	2010      	movs	r0, #16
 80013ec:	f000 f978 	bl	80016e0 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	1c9a      	adds	r2, r3, #2
 80013f4:	2302      	movs	r3, #2
 80013f6:	2117      	movs	r1, #23
 80013f8:	2010      	movs	r0, #16
 80013fa:	f000 f971 	bl	80016e0 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	1d1a      	adds	r2, r3, #4
 8001402:	2302      	movs	r3, #2
 8001404:	211a      	movs	r1, #26
 8001406:	2010      	movs	r0, #16
 8001408:	f000 f96a 	bl	80016e0 <write_multiple_icm20948_reg>
}
 800140c:	bf00      	nop
 800140e:	3740      	adds	r7, #64	; 0x40
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	08007a7c 	.word	0x08007a7c

0800141c <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001426:	2101      	movs	r1, #1
 8001428:	2020      	movs	r0, #32
 800142a:	f000 f8bf 	bl	80015ac <read_single_icm20948_reg>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d827      	bhi.n	8001488 <icm20948_gyro_full_scale_select+0x6c>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <icm20948_gyro_full_scale_select+0x24>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001451 	.word	0x08001451
 8001444:	08001459 	.word	0x08001459
 8001448:	08001469 	.word	0x08001469
 800144c:	08001479 	.word	0x08001479
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <icm20948_gyro_full_scale_select+0x80>)
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <icm20948_gyro_full_scale_select+0x84>)
 8001454:	601a      	str	r2, [r3, #0]
			break;
 8001456:	e017      	b.n	8001488 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <icm20948_gyro_full_scale_select+0x80>)
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <icm20948_gyro_full_scale_select+0x88>)
 8001464:	601a      	str	r2, [r3, #0]
			break;
 8001466:	e00f      	b.n	8001488 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <icm20948_gyro_full_scale_select+0x80>)
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <icm20948_gyro_full_scale_select+0x8c>)
 8001474:	601a      	str	r2, [r3, #0]
			break;
 8001476:	e007      	b.n	8001488 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	f043 0306 	orr.w	r3, r3, #6
 800147e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <icm20948_gyro_full_scale_select+0x80>)
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <icm20948_gyro_full_scale_select+0x90>)
 8001484:	601a      	str	r2, [r3, #0]
			break;
 8001486:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	461a      	mov	r2, r3
 800148c:	2101      	movs	r1, #1
 800148e:	2020      	movs	r0, #32
 8001490:	f000 f8c2 	bl	8001618 <write_single_icm20948_reg>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200002ec 	.word	0x200002ec
 80014a0:	43030000 	.word	0x43030000
 80014a4:	42830000 	.word	0x42830000
 80014a8:	42033333 	.word	0x42033333
 80014ac:	41833333 	.word	0x41833333

080014b0 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80014ba:	2114      	movs	r1, #20
 80014bc:	2020      	movs	r0, #32
 80014be:	f000 f875 	bl	80015ac <read_single_icm20948_reg>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d82b      	bhi.n	8001524 <icm20948_accel_full_scale_select+0x74>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <icm20948_accel_full_scale_select+0x24>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014ef 	.word	0x080014ef
 80014dc:	08001501 	.word	0x08001501
 80014e0:	08001513 	.word	0x08001513
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <icm20948_accel_full_scale_select+0x88>)
 80014e6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80014ea:	601a      	str	r2, [r3, #0]
			break;
 80014ec:	e01a      	b.n	8001524 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <icm20948_accel_full_scale_select+0x88>)
 80014f8:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80014fc:	601a      	str	r2, [r3, #0]
			break;
 80014fe:	e011      	b.n	8001524 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <icm20948_accel_full_scale_select+0x88>)
 800150a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800150e:	601a      	str	r2, [r3, #0]
			break;
 8001510:	e008      	b.n	8001524 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	f043 0306 	orr.w	r3, r3, #6
 8001518:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <icm20948_accel_full_scale_select+0x88>)
 800151c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001520:	601a      	str	r2, [r3, #0]
			break;
 8001522:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	461a      	mov	r2, r3
 8001528:	2114      	movs	r1, #20
 800152a:	2020      	movs	r0, #32
 800152c:	f000 f874 	bl	8001618 <write_single_icm20948_reg>
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200002f0 	.word	0x200002f0

0800153c <cs_high>:


/* Static Functions */
static void cs_high()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2110      	movs	r1, #16
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <cs_high+0x14>)
 8001546:	f000 fc2d 	bl	8001da4 <HAL_GPIO_WritePin>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022400 	.word	0x40022400

08001554 <cs_low>:

static void cs_low()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2110      	movs	r1, #16
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <cs_low+0x14>)
 800155e:	f000 fc21 	bl	8001da4 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022400 	.word	0x40022400

0800156c <select_user_bank>:

static void select_user_bank(userbank ub)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001576:	237f      	movs	r3, #127	; 0x7f
 8001578:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	737b      	strb	r3, [r7, #13]

	cs_low();
 800157e:	f7ff ffe9 	bl	8001554 <cs_low>
	ret=HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001582:	f107 010c 	add.w	r1, r7, #12
 8001586:	230a      	movs	r3, #10
 8001588:	2202      	movs	r2, #2
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <select_user_bank+0x38>)
 800158c:	f001 fd8b 	bl	80030a6 <HAL_SPI_Transmit>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <select_user_bank+0x3c>)
 8001596:	701a      	strb	r2, [r3, #0]
	cs_high();
 8001598:	f7ff ffd0 	bl	800153c <cs_high>
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001fc 	.word	0x200001fc
 80015a8:	200002f4 	.word	0x200002f4

080015ac <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	460a      	mov	r2, r1
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	4613      	mov	r3, r2
 80015ba:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ffcf 	bl	800156c <select_user_bank>

	cs_low();
 80015ce:	f7ff ffc1 	bl	8001554 <cs_low>
	ret= HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80015d2:	f107 010f 	add.w	r1, r7, #15
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	2201      	movs	r2, #1
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <read_single_icm20948_reg+0x64>)
 80015de:	f001 fd62 	bl	80030a6 <HAL_SPI_Transmit>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <read_single_icm20948_reg+0x68>)
 80015e8:	701a      	strb	r2, [r3, #0]
	ret= HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80015ea:	f107 010e 	add.w	r1, r7, #14
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	2201      	movs	r2, #1
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <read_single_icm20948_reg+0x64>)
 80015f6:	f001 fec4 	bl	8003382 <HAL_SPI_Receive>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <read_single_icm20948_reg+0x68>)
 8001600:	701a      	strb	r2, [r3, #0]
	cs_high();
 8001602:	f7ff ff9b 	bl	800153c <cs_high>

	return reg_val;
 8001606:	7bbb      	ldrb	r3, [r7, #14]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200001fc 	.word	0x200001fc
 8001614:	200002f4 	.word	0x200002f4

08001618 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	460b      	mov	r3, r1
 8001624:	71bb      	strb	r3, [r7, #6]
 8001626:	4613      	mov	r3, r2
 8001628:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff99 	bl	800156c <select_user_bank>

	cs_low();
 800163a:	f7ff ff8b 	bl	8001554 <cs_low>
	ret=HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800163e:	f107 010c 	add.w	r1, r7, #12
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	2202      	movs	r2, #2
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <write_single_icm20948_reg+0x4c>)
 800164a:	f001 fd2c 	bl	80030a6 <HAL_SPI_Transmit>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <write_single_icm20948_reg+0x50>)
 8001654:	701a      	strb	r2, [r3, #0]
	cs_high();
 8001656:	f7ff ff71 	bl	800153c <cs_high>
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200001fc 	.word	0x200001fc
 8001668:	200002f4 	.word	0x200002f4

0800166c <read_multiple_icm20948_reg>:

 uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	460b      	mov	r3, r1
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	4613      	mov	r3, r2
 800167c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001684:	b2db      	uxtb	r3, r3
 8001686:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff6e 	bl	800156c <select_user_bank>

	cs_low();
 8001690:	f7ff ff60 	bl	8001554 <cs_low>
	ret=HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001694:	f107 010f 	add.w	r1, r7, #15
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	2201      	movs	r2, #1
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <read_multiple_icm20948_reg+0x68>)
 80016a0:	f001 fd01 	bl	80030a6 <HAL_SPI_Transmit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <read_multiple_icm20948_reg+0x6c>)
 80016aa:	701a      	strb	r2, [r3, #0]
	ret=HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b4:	4909      	ldr	r1, [pc, #36]	; (80016dc <read_multiple_icm20948_reg+0x70>)
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <read_multiple_icm20948_reg+0x68>)
 80016b8:	f001 fe63 	bl	8003382 <HAL_SPI_Receive>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <read_multiple_icm20948_reg+0x6c>)
 80016c2:	701a      	strb	r2, [r3, #0]
	cs_high();
 80016c4:	f7ff ff3a 	bl	800153c <cs_high>

	return reg_val;
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <read_multiple_icm20948_reg+0x70>)
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001fc 	.word	0x200001fc
 80016d8:	200002f4 	.word	0x200002f4
 80016dc:	2000032c 	.word	0x2000032c

080016e0 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	603a      	str	r2, [r7, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
 80016ee:	460b      	mov	r3, r1
 80016f0:	71bb      	strb	r3, [r7, #6]
 80016f2:	4613      	mov	r3, r2
 80016f4:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff35 	bl	800156c <select_user_bank>

	cs_low();
 8001702:	f7ff ff27 	bl	8001554 <cs_low>
	ret=HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001706:	f107 010f 	add.w	r1, r7, #15
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	2201      	movs	r2, #1
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <write_multiple_icm20948_reg+0x64>)
 8001712:	f001 fcc8 	bl	80030a6 <HAL_SPI_Transmit>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <write_multiple_icm20948_reg+0x68>)
 800171c:	701a      	strb	r2, [r3, #0]
	ret=HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 800171e:	797b      	ldrb	r3, [r7, #5]
 8001720:	b29a      	uxth	r2, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <write_multiple_icm20948_reg+0x64>)
 800172a:	f001 fcbc 	bl	80030a6 <HAL_SPI_Transmit>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <write_multiple_icm20948_reg+0x68>)
 8001734:	701a      	strb	r2, [r3, #0]
	cs_high();
 8001736:	f7ff ff01 	bl	800153c <cs_high>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001fc 	.word	0x200001fc
 8001748:	200002f4 	.word	0x200002f4

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f92f 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f806 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff f8e6 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f93b 	bl	8001a02 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f911 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000334 	.word	0x20000334

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000334 	.word	0x20000334

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	05fa0000 	.word	0x05fa0000

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff47 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff5c 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffb0 	bl	8001970 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e175      	b.n	8001d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8164 	bne.w	8001d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_GPIO_Init+0x56>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d130      	bne.n	8001ad4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d017      	beq.n	8001b10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d123      	bne.n	8001b64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80be 	beq.w	8001d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bbe:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d037      	beq.n	8001c5a <HAL_GPIO_Init+0x23e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_GPIO_Init+0x23a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x236>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x338>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x232>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_GPIO_Init+0x33c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x22e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a53      	ldr	r2, [pc, #332]	; (8001d5c <HAL_GPIO_Init+0x340>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x22a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_GPIO_Init+0x344>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_GPIO_Init+0x348>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x34c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x350>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c32:	2309      	movs	r3, #9
 8001c34:	e012      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c36:	230a      	movs	r3, #10
 8001c38:	e010      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00e      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae86 	bls.w	8001a3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40022400 	.word	0x40022400
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e29b      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e08:	4b93      	ldr	r3, [pc, #588]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d112      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
 8001e14:	4b90      	ldr	r3, [pc, #576]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x130>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d168      	bne.n	8001f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e275      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x7a>
 8001e44:	4b84      	ldr	r3, [pc, #528]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a83      	ldr	r2, [pc, #524]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x9c>
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7b      	ldr	r2, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	4b76      	ldr	r3, [pc, #472]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a75      	ldr	r2, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6b      	ldr	r2, [pc, #428]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc9a 	bl	80017f0 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fc96 	bl	80017f0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e229      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc86 	bl	80017f0 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fc82 	bl	80017f0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e215      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x110>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d069      	beq.n	8001fea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x190>
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1e9      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	493d      	ldr	r1, [pc, #244]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e040      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a38      	ldr	r2, [pc, #224]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fc38 	bl	80017f0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f84:	f7ff fc34 	bl	80017f0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1c7      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4929      	ldr	r1, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a26      	ldr	r2, [pc, #152]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fc14 	bl	80017f0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fc10 	bl	80017f0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1a3      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d038      	beq.n	8002068 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d019      	beq.n	8002032 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fbf1 	bl	80017f0 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7ff fbed 	bl	80017f0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e180      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x23a>
 8002030:	e01a      	b.n	8002068 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff fbd7 	bl	80017f0 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff fbd3 	bl	80017f0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d903      	bls.n	800205c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e166      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
 8002058:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b92      	ldr	r3, [pc, #584]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a4 	beq.w	80021be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a88      	ldr	r2, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b86      	ldr	r3, [pc, #536]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209e:	4b83      	ldr	r3, [pc, #524]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020aa:	4b80      	ldr	r3, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7f      	ldr	r2, [pc, #508]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fb9b 	bl	80017f0 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7ff fb97 	bl	80017f0 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e12a      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d0:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x31a>
 80020e4:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a6f      	ldr	r2, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	e02d      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x33c>
 80020fa:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a6a      	ldr	r2, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a67      	ldr	r2, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
 8002112:	e01c      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x35e>
 800211c:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a5b      	ldr	r2, [pc, #364]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff fb4b 	bl	80017f0 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fb47 	bl	80017f0 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0d8      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ee      	beq.n	800215e <HAL_RCC_OscConfig+0x386>
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff fb35 	bl	80017f0 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff fb31 	bl	80017f0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0c2      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80ae 	beq.w	8002324 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d06d      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d14b      	bne.n	8002274 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff fb02 	bl	80017f0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff fafe 	bl	80017f0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e091      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	071b      	lsls	r3, r3, #28
 800223a:	491b      	ldr	r1, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff fad0 	bl	80017f0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff facc 	bl	80017f0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e05f      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x47c>
 8002272:	e057      	b.n	8002324 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff fab6 	bl	80017f0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff fab2 	bl	80017f0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e045      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x4b0>
 80022a6:	e03d      	b.n	8002324 <HAL_RCC_OscConfig+0x54c>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_RCC_OscConfig+0x558>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d030      	beq.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d129      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d122      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d119      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	3b01      	subs	r3, #1
 80022fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10f      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d0      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	4965      	ldr	r1, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d040      	beq.n	8002458 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e073      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06b      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4936      	ldr	r1, [pc, #216]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7ff f9e2 	bl	80017f0 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7ff f9de 	bl	80017f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e053      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d210      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1cc>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1d0>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f93e 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00
 80024fc:	40023800 	.word	0x40023800
 8002500:	08007af0 	.word	0x08007af0
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002510:	b090      	sub	sp, #64	; 0x40
 8002512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
 8002518:	2300      	movs	r3, #0
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d00d      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x40>
 8002530:	2b08      	cmp	r3, #8
 8002532:	f200 80a1 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x34>
 800253a:	2b04      	cmp	r3, #4
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x3a>
 800253e:	e09b      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002544:	e09b      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254a:	e098      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002556:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d028      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	2200      	movs	r2, #0
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	627a      	str	r2, [r7, #36]	; 0x24
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002574:	2100      	movs	r1, #0
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002578:	fb03 f201 	mul.w	r2, r3, r1
 800257c:	2300      	movs	r3, #0
 800257e:	fb00 f303 	mul.w	r3, r0, r3
 8002582:	4413      	add	r3, r2
 8002584:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002586:	fba0 1202 	umull	r1, r2, r0, r2
 800258a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800258c:	460a      	mov	r2, r1
 800258e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002592:	4413      	add	r3, r2
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	2200      	movs	r2, #0
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	61fa      	str	r2, [r7, #28]
 800259e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025a6:	f7fd fea3 	bl	80002f0 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4613      	mov	r3, r2
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b2:	e053      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	2200      	movs	r2, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	617a      	str	r2, [r7, #20]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025c6:	f04f 0b00 	mov.w	fp, #0
 80025ca:	4652      	mov	r2, sl
 80025cc:	465b      	mov	r3, fp
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ebb2 080a 	subs.w	r8, r2, sl
 80025e6:	eb63 090b 	sbc.w	r9, r3, fp
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002602:	eb63 0509 	sbc.w	r5, r3, r9
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	00eb      	lsls	r3, r5, #3
 8002610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002614:	00e2      	lsls	r2, r4, #3
 8002616:	4614      	mov	r4, r2
 8002618:	461d      	mov	r5, r3
 800261a:	eb14 030a 	adds.w	r3, r4, sl
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	eb45 030b 	adc.w	r3, r5, fp
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002632:	4629      	mov	r1, r5
 8002634:	028b      	lsls	r3, r1, #10
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800263c:	4621      	mov	r1, r4
 800263e:	028a      	lsls	r2, r1, #10
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	2200      	movs	r2, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002650:	f7fd fe4e 	bl	80002f0 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800266c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002680:	4618      	mov	r0, r3
 8002682:	3740      	adds	r7, #64	; 0x40
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	00f42400 	.word	0x00f42400
 8002694:	017d7840 	.word	0x017d7840

08002698 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_GetHCLKFreq+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000000 	.word	0x20000000

080026b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b4:	f7ff fff0 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0a9b      	lsrs	r3, r3, #10
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	08007b00 	.word	0x08007b00

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026dc:	f7ff ffdc 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0b5b      	lsrs	r3, r3, #13
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08007b00 	.word	0x08007b00

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a68      	ldr	r2, [pc, #416]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002732:	6093      	str	r3, [r2, #8]
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	4964      	ldr	r1, [pc, #400]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d017      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	4959      	ldr	r1, [pc, #356]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002778:	d101      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002786:	2301      	movs	r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d017      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002796:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	494a      	ldr	r1, [pc, #296]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b4:	d101      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 808b 	beq.w	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7fe fff2 	bl	80017f0 <HAL_GetTick>
 800280c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002810:	f7fe ffee 	bl	80017f0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e38f      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282e:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002836:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d035      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d02e      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002854:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d114      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe ffb6 	bl	80017f0 <HAL_GetTick>
 8002884:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe ffb2 	bl	80017f0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e351      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ee      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b6:	d111      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028c6:	400b      	ands	r3, r1
 80028c8:	4901      	ldr	r1, [pc, #4]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000
 80028d8:	0ffffcff 	.word	0x0ffffcff
 80028dc:	4bac      	ldr	r3, [pc, #688]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4aab      	ldr	r2, [pc, #684]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028e6:	6093      	str	r3, [r2, #8]
 80028e8:	4ba9      	ldr	r3, [pc, #676]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	49a6      	ldr	r1, [pc, #664]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d010      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002906:	4ba2      	ldr	r3, [pc, #648]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800290c:	4aa0      	ldr	r2, [pc, #640]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002912:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002916:	4b9e      	ldr	r3, [pc, #632]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002918:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	499b      	ldr	r1, [pc, #620]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002934:	4b96      	ldr	r3, [pc, #600]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002942:	4993      	ldr	r1, [pc, #588]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002956:	4b8e      	ldr	r3, [pc, #568]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002964:	498a      	ldr	r1, [pc, #552]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002978:	4b85      	ldr	r3, [pc, #532]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002986:	4982      	ldr	r1, [pc, #520]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800299a:	4b7d      	ldr	r3, [pc, #500]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4979      	ldr	r1, [pc, #484]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029bc:	4b74      	ldr	r3, [pc, #464]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4971      	ldr	r1, [pc, #452]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029de:	4b6c      	ldr	r3, [pc, #432]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	f023 020c 	bic.w	r2, r3, #12
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	4968      	ldr	r1, [pc, #416]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a00:	4b63      	ldr	r3, [pc, #396]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	4960      	ldr	r1, [pc, #384]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a22:	4b5b      	ldr	r3, [pc, #364]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a30:	4957      	ldr	r1, [pc, #348]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a44:	4b52      	ldr	r3, [pc, #328]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	494f      	ldr	r1, [pc, #316]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4946      	ldr	r1, [pc, #280]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a88:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	493e      	ldr	r1, [pc, #248]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab8:	4935      	ldr	r1, [pc, #212]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002acc:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ada:	492d      	ldr	r1, [pc, #180]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aee:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afc:	4924      	ldr	r1, [pc, #144]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3c:	4914      	ldr	r1, [pc, #80]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b60:	490b      	ldr	r1, [pc, #44]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00f      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b84:	4902      	ldr	r1, [pc, #8]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b8c:	e002      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ba0:	4b8a      	ldr	r3, [pc, #552]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	4986      	ldr	r1, [pc, #536]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bc4:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd4:	497d      	ldr	r1, [pc, #500]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d006      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80d6 	beq.w	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bf0:	4b76      	ldr	r3, [pc, #472]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a75      	ldr	r2, [pc, #468]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fdf8 	bl	80017f0 <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c04:	f7fe fdf4 	bl	80017f0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e195      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c16:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d021      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11d      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c36:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c44:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4a:	0e1b      	lsrs	r3, r3, #24
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	019a      	lsls	r2, r3, #6
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	071b      	lsls	r3, r3, #28
 8002c6a:	4958      	ldr	r1, [pc, #352]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d02e      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9c:	d129      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cac:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb2:	0f1b      	lsrs	r3, r3, #28
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	019a      	lsls	r2, r3, #6
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	493e      	ldr	r1, [pc, #248]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cda:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce0:	f023 021f 	bic.w	r2, r3, #31
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	4938      	ldr	r1, [pc, #224]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01d      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cfe:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d04:	0e1b      	lsrs	r3, r3, #24
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d12:	0f1b      	lsrs	r3, r3, #28
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	019a      	lsls	r2, r3, #6
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	4926      	ldr	r1, [pc, #152]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d011      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	019a      	lsls	r2, r3, #6
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	491a      	ldr	r1, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d76:	f7fe fd3b 	bl	80017f0 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d7e:	f7fe fd37 	bl	80017f0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b64      	cmp	r3, #100	; 0x64
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0d8      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	f040 80ce 	bne.w	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe fd1e 	bl	80017f0 <HAL_GetTick>
 8002db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db8:	f7fe fd1a 	bl	80017f0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d904      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0bb      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ddc:	d0ec      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02e      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d12a      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e06:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e14:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	0f1b      	lsrs	r3, r3, #28
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	019a      	lsls	r2, r3, #6
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	4944      	ldr	r1, [pc, #272]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e42:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	493d      	ldr	r1, [pc, #244]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d022      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e70:	d11d      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	0e1b      	lsrs	r3, r3, #24
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e80:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	0f1b      	lsrs	r3, r3, #28
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	4929      	ldr	r1, [pc, #164]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	0e1b      	lsrs	r3, r3, #24
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	019a      	lsls	r2, r3, #6
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	4917      	ldr	r1, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4911      	ldr	r1, [pc, #68]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe fc6a 	bl	80017f0 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f20:	f7fe fc66 	bl	80017f0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e007      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f3e:	d1ef      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e09d      	b.n	800309e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d108      	bne.n	8002f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f72:	d009      	beq.n	8002f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
 8002f7a:	e005      	b.n	8002f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fc7e 	bl	80008a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc8:	d902      	bls.n	8002fd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e002      	b.n	8002fd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fde:	d007      	beq.n	8002ff0 <HAL_SPI_Init+0xa0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fe8:	d002      	beq.n	8002ff0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	ea42 0103 	orr.w	r1, r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f003 0204 	and.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800306c:	ea42 0103 	orr.w	r1, r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b088      	sub	sp, #32
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_SPI_Transmit+0x22>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e158      	b.n	800337a <HAL_SPI_Transmit+0x2d4>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030d0:	f7fe fb8e 	bl	80017f0 <HAL_GetTick>
 80030d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d002      	beq.n	80030ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
 80030e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ea:	e13d      	b.n	8003368 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_SPI_Transmit+0x52>
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030fc:	e134      	b.n	8003368 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2203      	movs	r2, #3
 8003102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	88fa      	ldrh	r2, [r7, #6]
 800311c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003148:	d10f      	bne.n	800316a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003168:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d007      	beq.n	8003188 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003190:	d94b      	bls.n	800322a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Transmit+0xfa>
 800319a:	8afb      	ldrh	r3, [r7, #22]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d13e      	bne.n	800321e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	881a      	ldrh	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031c4:	e02b      	b.n	800321e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d112      	bne.n	80031fa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	881a      	ldrh	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	1c9a      	adds	r2, r3, #2
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031f8:	e011      	b.n	800321e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031fa:	f7fe faf9 	bl	80017f0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d803      	bhi.n	8003212 <HAL_SPI_Transmit+0x16c>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d102      	bne.n	8003218 <HAL_SPI_Transmit+0x172>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800321c:	e0a4      	b.n	8003368 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ce      	bne.n	80031c6 <HAL_SPI_Transmit+0x120>
 8003228:	e07c      	b.n	8003324 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_SPI_Transmit+0x192>
 8003232:	8afb      	ldrh	r3, [r7, #22]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d170      	bne.n	800331a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d912      	bls.n	8003268 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b02      	subs	r3, #2
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003266:	e058      	b.n	800331a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800328e:	e044      	b.n	800331a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b02      	cmp	r3, #2
 800329c:	d12b      	bne.n	80032f6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d912      	bls.n	80032ce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b02      	subs	r3, #2
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032cc:	e025      	b.n	800331a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032f4:	e011      	b.n	800331a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f6:	f7fe fa7b 	bl	80017f0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d803      	bhi.n	800330e <HAL_SPI_Transmit+0x268>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d102      	bne.n	8003314 <HAL_SPI_Transmit+0x26e>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003318:	e026      	b.n	8003368 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1b5      	bne.n	8003290 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	6839      	ldr	r1, [r7, #0]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fd07 	bl	8003d3c <SPI_EndRxTxTransaction>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e000      	b.n	8003368 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003366:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003378:	7ffb      	ldrb	r3, [r7, #31]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af02      	add	r7, sp, #8
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339e:	d112      	bne.n	80033c6 <HAL_SPI_Receive+0x44>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10e      	bne.n	80033c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2204      	movs	r2, #4
 80033ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4613      	mov	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f910 	bl	80035e2 <HAL_SPI_TransmitReceive>
 80033c2:	4603      	mov	r3, r0
 80033c4:	e109      	b.n	80035da <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_SPI_Receive+0x52>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e102      	b.n	80035da <HAL_SPI_Receive+0x258>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033dc:	f7fe fa08 	bl	80017f0 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
 80033f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033f2:	e0e9      	b.n	80035c8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Receive+0x7e>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003404:	e0e0      	b.n	80035c8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2204      	movs	r2, #4
 800340a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	88fa      	ldrh	r2, [r7, #6]
 8003426:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003450:	d908      	bls.n	8003464 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e007      	b.n	8003474 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347c:	d10f      	bne.n	800349e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800349c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d007      	beq.n	80034bc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034c4:	d867      	bhi.n	8003596 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034c6:	e030      	b.n	800352a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d117      	bne.n	8003506 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f103 020c 	add.w	r2, r3, #12
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003504:	e011      	b.n	800352a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003506:	f7fe f973 	bl	80017f0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d803      	bhi.n	800351e <HAL_SPI_Receive+0x19c>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d102      	bne.n	8003524 <HAL_SPI_Receive+0x1a2>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003528:	e04e      	b.n	80035c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1c8      	bne.n	80034c8 <HAL_SPI_Receive+0x146>
 8003536:	e034      	b.n	80035a2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d115      	bne.n	8003572 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	b292      	uxth	r2, r2
 8003552:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	1c9a      	adds	r2, r3, #2
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003570:	e011      	b.n	8003596 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003572:	f7fe f93d 	bl	80017f0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d803      	bhi.n	800358a <HAL_SPI_Receive+0x208>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d102      	bne.n	8003590 <HAL_SPI_Receive+0x20e>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003594:	e018      	b.n	80035c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ca      	bne.n	8003538 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb4c 	bl	8003c44 <SPI_EndRxTransaction>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
 80035c4:	e000      	b.n	80035c8 <HAL_SPI_Receive+0x246>
  }

error :
 80035c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b08a      	sub	sp, #40	; 0x28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035f0:	2301      	movs	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_SPI_TransmitReceive+0x26>
 8003604:	2302      	movs	r3, #2
 8003606:	e1fb      	b.n	8003a00 <HAL_SPI_TransmitReceive+0x41e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003610:	f7fe f8ee 	bl	80017f0 <HAL_GetTick>
 8003614:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800361c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800362c:	7efb      	ldrb	r3, [r7, #27]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d00e      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x6e>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003638:	d106      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x66>
 8003642:	7efb      	ldrb	r3, [r7, #27]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d003      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800364e:	e1cd      	b.n	80039ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x80>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x80>
 800365c:	887b      	ldrh	r3, [r7, #2]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003668:	e1c0      	b.n	80039ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b04      	cmp	r3, #4
 8003674:	d003      	beq.n	800367e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2205      	movs	r2, #5
 800367a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	887a      	ldrh	r2, [r7, #2]
 800368e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	887a      	ldrh	r2, [r7, #2]
 8003696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	887a      	ldrh	r2, [r7, #2]
 80036aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c0:	d802      	bhi.n	80036c8 <HAL_SPI_TransmitReceive+0xe6>
 80036c2:	8a3b      	ldrh	r3, [r7, #16]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d908      	bls.n	80036da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	e007      	b.n	80036ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d007      	beq.n	8003708 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003710:	d97c      	bls.n	800380c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x13e>
 800371a:	8a7b      	ldrh	r3, [r7, #18]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d169      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	1c9a      	adds	r2, r3, #2
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003744:	e056      	b.n	80037f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d11b      	bne.n	800378c <HAL_SPI_TransmitReceive+0x1aa>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <HAL_SPI_TransmitReceive+0x1aa>
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	2b01      	cmp	r3, #1
 8003762:	d113      	bne.n	800378c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	1c9a      	adds	r2, r3, #2
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d11c      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x1f2>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	b292      	uxth	r2, r2
 80037b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037d0:	2301      	movs	r3, #1
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037d4:	f7fe f80c 	bl	80017f0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d807      	bhi.n	80037f4 <HAL_SPI_TransmitReceive+0x212>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d003      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037f2:	e0fb      	b.n	80039ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1a3      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x164>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d19d      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x164>
 800380a:	e0df      	b.n	80039cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_SPI_TransmitReceive+0x23a>
 8003814:	8a7b      	ldrh	r3, [r7, #18]
 8003816:	2b01      	cmp	r3, #1
 8003818:	f040 80cb 	bne.w	80039b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d912      	bls.n	800384c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	1c9a      	adds	r2, r3, #2
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b02      	subs	r3, #2
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	87da      	strh	r2, [r3, #62]	; 0x3e
 800384a:	e0b2      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	330c      	adds	r3, #12
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003872:	e09e      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d134      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x30a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02f      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x30a>
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	2b01      	cmp	r3, #1
 8003890:	d12c      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d912      	bls.n	80038c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	881a      	ldrh	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	1c9a      	adds	r2, r3, #2
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b02      	subs	r3, #2
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038c0:	e012      	b.n	80038e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d148      	bne.n	800398c <HAL_SPI_TransmitReceive+0x3aa>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d042      	beq.n	800398c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d923      	bls.n	800395a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	b292      	uxth	r2, r2
 800391e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	1c9a      	adds	r2, r3, #2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b02      	subs	r3, #2
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d81f      	bhi.n	8003988 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	e016      	b.n	8003988 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f103 020c 	add.w	r2, r3, #12
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	7812      	ldrb	r2, [r2, #0]
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003988:	2301      	movs	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800398c:	f7fd ff30 	bl	80017f0 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003998:	429a      	cmp	r2, r3
 800399a:	d803      	bhi.n	80039a4 <HAL_SPI_TransmitReceive+0x3c2>
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d102      	bne.n	80039aa <HAL_SPI_TransmitReceive+0x3c8>
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80039b0:	e01c      	b.n	80039ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f47f af5b 	bne.w	8003874 <HAL_SPI_TransmitReceive+0x292>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f47f af54 	bne.w	8003874 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f9b3 	bl	8003d3c <SPI_EndRxTxTransaction>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	661a      	str	r2, [r3, #96]	; 0x60
 80039e8:	e000      	b.n	80039ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3728      	adds	r7, #40	; 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a18:	f7fd feea 	bl	80017f0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a28:	f7fd fee2 	bl	80017f0 <HAL_GetTick>
 8003a2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	0d1b      	lsrs	r3, r3, #20
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a3e:	e054      	b.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d050      	beq.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a48:	f7fd fed2 	bl	80017f0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d902      	bls.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d13d      	bne.n	8003ada <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a76:	d111      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a80:	d004      	beq.n	8003a8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d107      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa4:	d10f      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e017      	b.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d19b      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000000 	.word	0x20000000

08003b18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b2a:	f7fd fe61 	bl	80017f0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	4413      	add	r3, r2
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b3a:	f7fd fe59 	bl	80017f0 <HAL_GetTick>
 8003b3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b48:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00da      	lsls	r2, r3, #3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	0d1b      	lsrs	r3, r3, #20
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b60:	e060      	b.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b68:	d107      	bne.n	8003b7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d104      	bne.n	8003b7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d050      	beq.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b82:	f7fd fe35 	bl	80017f0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d902      	bls.n	8003b98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d13d      	bne.n	8003c14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb0:	d111      	bne.n	8003bd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bba:	d004      	beq.n	8003bc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d107      	bne.n	8003bd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bde:	d10f      	bne.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e010      	b.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d196      	bne.n	8003b62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000000 	.word	0x20000000

08003c44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c58:	d111      	bne.n	8003c7e <SPI_EndRxTransaction+0x3a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c62:	d004      	beq.n	8003c6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6c:	d107      	bne.n	8003c7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c86:	d112      	bne.n	8003cae <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff feb8 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d021      	beq.n	8003ce2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e03d      	b.n	8003d2a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <SPI_EndRxTransaction+0xf0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <SPI_EndRxTransaction+0xf4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0d5b      	lsrs	r3, r3, #21
 8003cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d0f2      	beq.n	8003cc4 <SPI_EndRxTransaction+0x80>
 8003cde:	e000      	b.n	8003ce2 <SPI_EndRxTransaction+0x9e>
        break;
 8003ce0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cea:	d11d      	bne.n	8003d28 <SPI_EndRxTransaction+0xe4>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf4:	d004      	beq.n	8003d00 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d113      	bne.n	8003d28 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f7ff ff03 	bl	8003b18 <SPI_WaitFifoStateUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e000      	b.n	8003d2a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000
 8003d38:	165e9f81 	.word	0x165e9f81

08003d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7ff fedf 	bl	8003b18 <SPI_WaitFifoStateUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e046      	b.n	8003dfe <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <SPI_EndRxTxTransaction+0xcc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <SPI_EndRxTxTransaction+0xd0>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0d5b      	lsrs	r3, r3, #21
 8003d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8e:	d112      	bne.n	8003db6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fe34 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003daa:	f043 0220 	orr.w	r2, r3, #32
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e023      	b.n	8003dfe <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d0f2      	beq.n	8003db6 <SPI_EndRxTxTransaction+0x7a>
 8003dd0:	e000      	b.n	8003dd4 <SPI_EndRxTxTransaction+0x98>
        break;
 8003dd2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff fe99 	bl	8003b18 <SPI_WaitFifoStateUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	165e9f81 	.word	0x165e9f81

08003e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e040      	b.n	8003ea4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc fed0 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f8b0 	bl	8003fb4 <UART_SetConfig>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e022      	b.n	8003ea4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fb08 	bl	800447c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb8f 	bl	80045c0 <UART_CheckIdleState>
 8003ea2:	4603      	mov	r3, r0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d171      	bne.n	8003fa8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Transmit+0x24>
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e06a      	b.n	8003faa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2221      	movs	r2, #33	; 0x21
 8003ee0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd fc85 	bl	80017f0 <HAL_GetTick>
 8003ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d108      	bne.n	8003f14 <HAL_UART_Transmit+0x68>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	e003      	b.n	8003f1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f1c:	e02c      	b.n	8003f78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fb96 	bl	800465a <UART_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e038      	b.n	8003faa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3302      	adds	r3, #2
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	e007      	b.n	8003f66 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	781a      	ldrb	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3301      	adds	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1cc      	bne.n	8003f1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fb63 	bl	800465a <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e005      	b.n	8003faa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4ba6      	ldr	r3, [pc, #664]	; (8004278 <UART_SetConfig+0x2c4>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	6979      	ldr	r1, [r7, #20]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a94      	ldr	r2, [pc, #592]	; (800427c <UART_SetConfig+0x2c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d120      	bne.n	8004072 <UART_SetConfig+0xbe>
 8004030:	4b93      	ldr	r3, [pc, #588]	; (8004280 <UART_SetConfig+0x2cc>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b03      	cmp	r3, #3
 800403c:	d816      	bhi.n	800406c <UART_SetConfig+0xb8>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0x90>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004055 	.word	0x08004055
 8004048:	08004061 	.word	0x08004061
 800404c:	0800405b 	.word	0x0800405b
 8004050:	08004067 	.word	0x08004067
 8004054:	2301      	movs	r3, #1
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e150      	b.n	80042fc <UART_SetConfig+0x348>
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e14d      	b.n	80042fc <UART_SetConfig+0x348>
 8004060:	2304      	movs	r3, #4
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e14a      	b.n	80042fc <UART_SetConfig+0x348>
 8004066:	2308      	movs	r3, #8
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e147      	b.n	80042fc <UART_SetConfig+0x348>
 800406c:	2310      	movs	r3, #16
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e144      	b.n	80042fc <UART_SetConfig+0x348>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a83      	ldr	r2, [pc, #524]	; (8004284 <UART_SetConfig+0x2d0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d132      	bne.n	80040e2 <UART_SetConfig+0x12e>
 800407c:	4b80      	ldr	r3, [pc, #512]	; (8004280 <UART_SetConfig+0x2cc>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d828      	bhi.n	80040dc <UART_SetConfig+0x128>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0xdc>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080040dd 	.word	0x080040dd
 8004098:	080040dd 	.word	0x080040dd
 800409c:	080040dd 	.word	0x080040dd
 80040a0:	080040d1 	.word	0x080040d1
 80040a4:	080040dd 	.word	0x080040dd
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040dd 	.word	0x080040dd
 80040b0:	080040cb 	.word	0x080040cb
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040dd 	.word	0x080040dd
 80040c0:	080040d7 	.word	0x080040d7
 80040c4:	2300      	movs	r3, #0
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e118      	b.n	80042fc <UART_SetConfig+0x348>
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e115      	b.n	80042fc <UART_SetConfig+0x348>
 80040d0:	2304      	movs	r3, #4
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e112      	b.n	80042fc <UART_SetConfig+0x348>
 80040d6:	2308      	movs	r3, #8
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e10f      	b.n	80042fc <UART_SetConfig+0x348>
 80040dc:	2310      	movs	r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e10c      	b.n	80042fc <UART_SetConfig+0x348>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a68      	ldr	r2, [pc, #416]	; (8004288 <UART_SetConfig+0x2d4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d120      	bne.n	800412e <UART_SetConfig+0x17a>
 80040ec:	4b64      	ldr	r3, [pc, #400]	; (8004280 <UART_SetConfig+0x2cc>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040f6:	2b30      	cmp	r3, #48	; 0x30
 80040f8:	d013      	beq.n	8004122 <UART_SetConfig+0x16e>
 80040fa:	2b30      	cmp	r3, #48	; 0x30
 80040fc:	d814      	bhi.n	8004128 <UART_SetConfig+0x174>
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d009      	beq.n	8004116 <UART_SetConfig+0x162>
 8004102:	2b20      	cmp	r3, #32
 8004104:	d810      	bhi.n	8004128 <UART_SetConfig+0x174>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x15c>
 800410a:	2b10      	cmp	r3, #16
 800410c:	d006      	beq.n	800411c <UART_SetConfig+0x168>
 800410e:	e00b      	b.n	8004128 <UART_SetConfig+0x174>
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e0f2      	b.n	80042fc <UART_SetConfig+0x348>
 8004116:	2302      	movs	r3, #2
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e0ef      	b.n	80042fc <UART_SetConfig+0x348>
 800411c:	2304      	movs	r3, #4
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e0ec      	b.n	80042fc <UART_SetConfig+0x348>
 8004122:	2308      	movs	r3, #8
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e0e9      	b.n	80042fc <UART_SetConfig+0x348>
 8004128:	2310      	movs	r3, #16
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e0e6      	b.n	80042fc <UART_SetConfig+0x348>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a56      	ldr	r2, [pc, #344]	; (800428c <UART_SetConfig+0x2d8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d120      	bne.n	800417a <UART_SetConfig+0x1c6>
 8004138:	4b51      	ldr	r3, [pc, #324]	; (8004280 <UART_SetConfig+0x2cc>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004142:	2bc0      	cmp	r3, #192	; 0xc0
 8004144:	d013      	beq.n	800416e <UART_SetConfig+0x1ba>
 8004146:	2bc0      	cmp	r3, #192	; 0xc0
 8004148:	d814      	bhi.n	8004174 <UART_SetConfig+0x1c0>
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d009      	beq.n	8004162 <UART_SetConfig+0x1ae>
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d810      	bhi.n	8004174 <UART_SetConfig+0x1c0>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <UART_SetConfig+0x1a8>
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d006      	beq.n	8004168 <UART_SetConfig+0x1b4>
 800415a:	e00b      	b.n	8004174 <UART_SetConfig+0x1c0>
 800415c:	2300      	movs	r3, #0
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e0cc      	b.n	80042fc <UART_SetConfig+0x348>
 8004162:	2302      	movs	r3, #2
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e0c9      	b.n	80042fc <UART_SetConfig+0x348>
 8004168:	2304      	movs	r3, #4
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e0c6      	b.n	80042fc <UART_SetConfig+0x348>
 800416e:	2308      	movs	r3, #8
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e0c3      	b.n	80042fc <UART_SetConfig+0x348>
 8004174:	2310      	movs	r3, #16
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e0c0      	b.n	80042fc <UART_SetConfig+0x348>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a44      	ldr	r2, [pc, #272]	; (8004290 <UART_SetConfig+0x2dc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d125      	bne.n	80041d0 <UART_SetConfig+0x21c>
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <UART_SetConfig+0x2cc>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004192:	d017      	beq.n	80041c4 <UART_SetConfig+0x210>
 8004194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004198:	d817      	bhi.n	80041ca <UART_SetConfig+0x216>
 800419a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419e:	d00b      	beq.n	80041b8 <UART_SetConfig+0x204>
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d811      	bhi.n	80041ca <UART_SetConfig+0x216>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <UART_SetConfig+0x1fe>
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d006      	beq.n	80041be <UART_SetConfig+0x20a>
 80041b0:	e00b      	b.n	80041ca <UART_SetConfig+0x216>
 80041b2:	2300      	movs	r3, #0
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e0a1      	b.n	80042fc <UART_SetConfig+0x348>
 80041b8:	2302      	movs	r3, #2
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e09e      	b.n	80042fc <UART_SetConfig+0x348>
 80041be:	2304      	movs	r3, #4
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	e09b      	b.n	80042fc <UART_SetConfig+0x348>
 80041c4:	2308      	movs	r3, #8
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e098      	b.n	80042fc <UART_SetConfig+0x348>
 80041ca:	2310      	movs	r3, #16
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e095      	b.n	80042fc <UART_SetConfig+0x348>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <UART_SetConfig+0x2e0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d125      	bne.n	8004226 <UART_SetConfig+0x272>
 80041da:	4b29      	ldr	r3, [pc, #164]	; (8004280 <UART_SetConfig+0x2cc>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e8:	d017      	beq.n	800421a <UART_SetConfig+0x266>
 80041ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ee:	d817      	bhi.n	8004220 <UART_SetConfig+0x26c>
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d00b      	beq.n	800420e <UART_SetConfig+0x25a>
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fa:	d811      	bhi.n	8004220 <UART_SetConfig+0x26c>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <UART_SetConfig+0x254>
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d006      	beq.n	8004214 <UART_SetConfig+0x260>
 8004206:	e00b      	b.n	8004220 <UART_SetConfig+0x26c>
 8004208:	2301      	movs	r3, #1
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e076      	b.n	80042fc <UART_SetConfig+0x348>
 800420e:	2302      	movs	r3, #2
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e073      	b.n	80042fc <UART_SetConfig+0x348>
 8004214:	2304      	movs	r3, #4
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e070      	b.n	80042fc <UART_SetConfig+0x348>
 800421a:	2308      	movs	r3, #8
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e06d      	b.n	80042fc <UART_SetConfig+0x348>
 8004220:	2310      	movs	r3, #16
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e06a      	b.n	80042fc <UART_SetConfig+0x348>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <UART_SetConfig+0x2e4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d138      	bne.n	80042a2 <UART_SetConfig+0x2ee>
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <UART_SetConfig+0x2cc>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800423a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800423e:	d017      	beq.n	8004270 <UART_SetConfig+0x2bc>
 8004240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004244:	d82a      	bhi.n	800429c <UART_SetConfig+0x2e8>
 8004246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424a:	d00b      	beq.n	8004264 <UART_SetConfig+0x2b0>
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004250:	d824      	bhi.n	800429c <UART_SetConfig+0x2e8>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <UART_SetConfig+0x2aa>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425a:	d006      	beq.n	800426a <UART_SetConfig+0x2b6>
 800425c:	e01e      	b.n	800429c <UART_SetConfig+0x2e8>
 800425e:	2300      	movs	r3, #0
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e04b      	b.n	80042fc <UART_SetConfig+0x348>
 8004264:	2302      	movs	r3, #2
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e048      	b.n	80042fc <UART_SetConfig+0x348>
 800426a:	2304      	movs	r3, #4
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e045      	b.n	80042fc <UART_SetConfig+0x348>
 8004270:	2308      	movs	r3, #8
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e042      	b.n	80042fc <UART_SetConfig+0x348>
 8004276:	bf00      	nop
 8004278:	efff69f3 	.word	0xefff69f3
 800427c:	40011000 	.word	0x40011000
 8004280:	40023800 	.word	0x40023800
 8004284:	40004400 	.word	0x40004400
 8004288:	40004800 	.word	0x40004800
 800428c:	40004c00 	.word	0x40004c00
 8004290:	40005000 	.word	0x40005000
 8004294:	40011400 	.word	0x40011400
 8004298:	40007800 	.word	0x40007800
 800429c:	2310      	movs	r3, #16
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e02c      	b.n	80042fc <UART_SetConfig+0x348>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a72      	ldr	r2, [pc, #456]	; (8004470 <UART_SetConfig+0x4bc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d125      	bne.n	80042f8 <UART_SetConfig+0x344>
 80042ac:	4b71      	ldr	r3, [pc, #452]	; (8004474 <UART_SetConfig+0x4c0>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042ba:	d017      	beq.n	80042ec <UART_SetConfig+0x338>
 80042bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042c0:	d817      	bhi.n	80042f2 <UART_SetConfig+0x33e>
 80042c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c6:	d00b      	beq.n	80042e0 <UART_SetConfig+0x32c>
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d811      	bhi.n	80042f2 <UART_SetConfig+0x33e>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <UART_SetConfig+0x326>
 80042d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d6:	d006      	beq.n	80042e6 <UART_SetConfig+0x332>
 80042d8:	e00b      	b.n	80042f2 <UART_SetConfig+0x33e>
 80042da:	2300      	movs	r3, #0
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e00d      	b.n	80042fc <UART_SetConfig+0x348>
 80042e0:	2302      	movs	r3, #2
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e00a      	b.n	80042fc <UART_SetConfig+0x348>
 80042e6:	2304      	movs	r3, #4
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e007      	b.n	80042fc <UART_SetConfig+0x348>
 80042ec:	2308      	movs	r3, #8
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e004      	b.n	80042fc <UART_SetConfig+0x348>
 80042f2:	2310      	movs	r3, #16
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e001      	b.n	80042fc <UART_SetConfig+0x348>
 80042f8:	2310      	movs	r3, #16
 80042fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	d15b      	bne.n	80043be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004306:	7ffb      	ldrb	r3, [r7, #31]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d828      	bhi.n	800435e <UART_SetConfig+0x3aa>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <UART_SetConfig+0x360>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004339 	.word	0x08004339
 8004318:	08004341 	.word	0x08004341
 800431c:	08004349 	.word	0x08004349
 8004320:	0800435f 	.word	0x0800435f
 8004324:	0800434f 	.word	0x0800434f
 8004328:	0800435f 	.word	0x0800435f
 800432c:	0800435f 	.word	0x0800435f
 8004330:	0800435f 	.word	0x0800435f
 8004334:	08004357 	.word	0x08004357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7fe f9ba 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 800433c:	61b8      	str	r0, [r7, #24]
        break;
 800433e:	e013      	b.n	8004368 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004340:	f7fe f9ca 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8004344:	61b8      	str	r0, [r7, #24]
        break;
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004348:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <UART_SetConfig+0x4c4>)
 800434a:	61bb      	str	r3, [r7, #24]
        break;
 800434c:	e00c      	b.n	8004368 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434e:	f7fe f8dd 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8004352:	61b8      	str	r0, [r7, #24]
        break;
 8004354:	e008      	b.n	8004368 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435a:	61bb      	str	r3, [r7, #24]
        break;
 800435c:	e004      	b.n	8004368 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	77bb      	strb	r3, [r7, #30]
        break;
 8004366:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d074      	beq.n	8004458 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	005a      	lsls	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b0f      	cmp	r3, #15
 8004388:	d916      	bls.n	80043b8 <UART_SetConfig+0x404>
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d212      	bcs.n	80043b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f023 030f 	bic.w	r3, r3, #15
 800439a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	89fb      	ldrh	r3, [r7, #14]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	89fa      	ldrh	r2, [r7, #14]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e04f      	b.n	8004458 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	77bb      	strb	r3, [r7, #30]
 80043bc:	e04c      	b.n	8004458 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043be:	7ffb      	ldrb	r3, [r7, #31]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d828      	bhi.n	8004416 <UART_SetConfig+0x462>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x418>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe f95e 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80043f4:	61b8      	str	r0, [r7, #24]
        break;
 80043f6:	e013      	b.n	8004420 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe f96e 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 80043fc:	61b8      	str	r0, [r7, #24]
        break;
 80043fe:	e00f      	b.n	8004420 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <UART_SetConfig+0x4c4>)
 8004402:	61bb      	str	r3, [r7, #24]
        break;
 8004404:	e00c      	b.n	8004420 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fe f881 	bl	800250c <HAL_RCC_GetSysClockFreq>
 800440a:	61b8      	str	r0, [r7, #24]
        break;
 800440c:	e008      	b.n	8004420 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	61bb      	str	r3, [r7, #24]
        break;
 8004414:	e004      	b.n	8004420 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	77bb      	strb	r3, [r7, #30]
        break;
 800441e:	bf00      	nop
    }

    if (pclk != 0U)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d018      	beq.n	8004458 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	085a      	lsrs	r2, r3, #1
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	441a      	add	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b0f      	cmp	r3, #15
 800443e:	d909      	bls.n	8004454 <UART_SetConfig+0x4a0>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004446:	d205      	bcs.n	8004454 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	e001      	b.n	8004458 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004464:	7fbb      	ldrb	r3, [r7, #30]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40007c00 	.word	0x40007c00
 8004474:	40023800 	.word	0x40023800
 8004478:	00f42400 	.word	0x00f42400

0800447c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457a:	d10a      	bne.n	8004592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d0:	f7fd f90e 	bl	80017f0 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d10e      	bne.n	8004602 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f831 	bl	800465a <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e027      	b.n	8004652 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d10e      	bne.n	800462e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f81b 	bl	800465a <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e011      	b.n	8004652 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b09c      	sub	sp, #112	; 0x70
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466a:	e0a7      	b.n	80047bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	f000 80a3 	beq.w	80047bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fd f8bb 	bl	80017f0 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <UART_WaitOnFlagUntilTimeout+0x32>
 8004686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004688:	2b00      	cmp	r3, #0
 800468a:	d13f      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046a0:	667b      	str	r3, [r7, #100]	; 0x64
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e6      	bne.n	800468c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	663b      	str	r3, [r7, #96]	; 0x60
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3308      	adds	r3, #8
 80046dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046de:	64ba      	str	r2, [r7, #72]	; 0x48
 80046e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e068      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d050      	beq.n	80047bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004728:	d148      	bne.n	80047bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004732:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004748:	66fb      	str	r3, [r7, #108]	; 0x6c
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
 8004754:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	613b      	str	r3, [r7, #16]
   return(result);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	66bb      	str	r3, [r7, #104]	; 0x68
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004786:	623a      	str	r2, [r7, #32]
 8004788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	69f9      	ldr	r1, [r7, #28]
 800478c:	6a3a      	ldr	r2, [r7, #32]
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	61bb      	str	r3, [r7, #24]
   return(result);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e010      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	f43f af48 	beq.w	800466c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3770      	adds	r7, #112	; 0x70
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <icm_hd_mvmt_init>:

float angle = 0, pi = 3.1415;


void icm_hd_mvmt_init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
	  //check chip id
	  icm20948_who_am_i();
 80047ec:	f7fc fb92 	bl	8000f14 <icm20948_who_am_i>

	  //initialize icm-20948
	  arg_mvp1_snsr_mtn_icm20948_init();
 80047f0:	f7fc fa79 	bl	8000ce6 <arg_mvp1_snsr_mtn_icm20948_init>

	  //message for initial orientation
	  printf("\r\nPlease put glasses in horizontal position to ground for proper functioning.");
 80047f4:	4822      	ldr	r0, [pc, #136]	; (8004880 <icm_hd_mvmt_init+0x98>)
 80047f6:	f000 fd35 	bl	8005264 <iprintf>

	  //print degrees until the user button is pressed.
	  while(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80047fa:	e031      	b.n	8004860 <icm_hd_mvmt_init+0x78>
	  {
		    //read accelerometer g values.
		  	icm20948_accel_read_g(&acc_axes);
 80047fc:	4821      	ldr	r0, [pc, #132]	; (8004884 <icm_hd_mvmt_init+0x9c>)
 80047fe:	f7fc fb31 	bl	8000e64 <icm20948_accel_read_g>

		  	//converting values to degrees.
		  	angle = atan2(acc_axes.x, acc_axes.z)*180/pi;
 8004802:	4b20      	ldr	r3, [pc, #128]	; (8004884 <icm_hd_mvmt_init+0x9c>)
 8004804:	edd3 7a00 	vldr	s15, [r3]
 8004808:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <icm_hd_mvmt_init+0x9c>)
 800480e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004812:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004816:	eeb0 1b46 	vmov.f64	d1, d6
 800481a:	eeb0 0b47 	vmov.f64	d0, d7
 800481e:	f002 ff35 	bl	800768c <atan2>
 8004822:	eeb0 7b40 	vmov.f64	d7, d0
 8004826:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8004878 <icm_hd_mvmt_init+0x90>
 800482a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800482e:	4b16      	ldr	r3, [pc, #88]	; (8004888 <icm_hd_mvmt_init+0xa0>)
 8004830:	edd3 7a00 	vldr	s15, [r3]
 8004834:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004838:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800483c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004840:	4b12      	ldr	r3, [pc, #72]	; (800488c <icm_hd_mvmt_init+0xa4>)
 8004842:	edc3 7a00 	vstr	s15, [r3]

		    printf("\r\n degree - %.0f", angle);
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <icm_hd_mvmt_init+0xa4>)
 8004848:	edd3 7a00 	vldr	s15, [r3]
 800484c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004850:	ec53 2b17 	vmov	r2, r3, d7
 8004854:	480e      	ldr	r0, [pc, #56]	; (8004890 <icm_hd_mvmt_init+0xa8>)
 8004856:	f000 fd05 	bl	8005264 <iprintf>
		    HAL_Delay(100);
 800485a:	2064      	movs	r0, #100	; 0x64
 800485c:	f7fc ffd4 	bl	8001808 <HAL_Delay>
	  while(!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8004860:	2101      	movs	r1, #1
 8004862:	480c      	ldr	r0, [pc, #48]	; (8004894 <icm_hd_mvmt_init+0xac>)
 8004864:	f7fd fa86 	bl	8001d74 <HAL_GPIO_ReadPin>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0c6      	beq.n	80047fc <icm_hd_mvmt_init+0x14>
	  }
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	bd80      	pop	{r7, pc}
 8004874:	f3af 8000 	nop.w
 8004878:	00000000 	.word	0x00000000
 800487c:	40668000 	.word	0x40668000
 8004880:	08007a8c 	.word	0x08007a8c
 8004884:	20000338 	.word	0x20000338
 8004888:	2000000c 	.word	0x2000000c
 800488c:	20000344 	.word	0x20000344
 8004890:	08007adc 	.word	0x08007adc
 8004894:	40020000 	.word	0x40020000

08004898 <icm_hd_mvmt_process>:

int icm_hd_mvmt_process(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
	  //reading accelerometer raw values and converting it to g.
	  icm20948_accel_read_g(&acc_axes);
 800489c:	4832      	ldr	r0, [pc, #200]	; (8004968 <icm_hd_mvmt_process+0xd0>)
 800489e:	f7fc fae1 	bl	8000e64 <icm20948_accel_read_g>

	  //conversion formula to convert accelerometer g values to degrees(taking x-axis as reference).
	  angle = atan2(acc_axes.x, acc_axes.z)*180/pi;
 80048a2:	4b31      	ldr	r3, [pc, #196]	; (8004968 <icm_hd_mvmt_process+0xd0>)
 80048a4:	edd3 7a00 	vldr	s15, [r3]
 80048a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048ac:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <icm_hd_mvmt_process+0xd0>)
 80048ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80048b2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80048b6:	eeb0 1b46 	vmov.f64	d1, d6
 80048ba:	eeb0 0b47 	vmov.f64	d0, d7
 80048be:	f002 fee5 	bl	800768c <atan2>
 80048c2:	eeb0 7b40 	vmov.f64	d7, d0
 80048c6:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8004960 <icm_hd_mvmt_process+0xc8>
 80048ca:	ee27 5b06 	vmul.f64	d5, d7, d6
 80048ce:	4b27      	ldr	r3, [pc, #156]	; (800496c <icm_hd_mvmt_process+0xd4>)
 80048d0:	edd3 7a00 	vldr	s15, [r3]
 80048d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80048d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80048dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048e0:	4b23      	ldr	r3, [pc, #140]	; (8004970 <icm_hd_mvmt_process+0xd8>)
 80048e2:	edc3 7a00 	vstr	s15, [r3]


	  //logic to print angle between -90 to +90 range.
	  if(acc_axes.x >= 0 && acc_axes.z >= 0)
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <icm_hd_mvmt_process+0xd0>)
 80048e8:	edd3 7a00 	vldr	s15, [r3]
 80048ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	db11      	blt.n	800491a <icm_hd_mvmt_process+0x82>
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <icm_hd_mvmt_process+0xd0>)
 80048f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80048fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	db09      	blt.n	800491a <icm_hd_mvmt_process+0x82>
	  {
		  //going to right
		  return (int)90 - angle*MUL_FACTOR;
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <icm_hd_mvmt_process+0xd8>)
 8004908:	edd3 7a00 	vldr	s15, [r3]
 800490c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004974 <icm_hd_mvmt_process+0xdc>
 8004910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004918:	e01b      	b.n	8004952 <icm_hd_mvmt_process+0xba>

	  }
	  else if(acc_axes.x >= 0 && acc_axes.z < 0)
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <icm_hd_mvmt_process+0xd0>)
 800491c:	edd3 7a00 	vldr	s15, [r3]
 8004920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004928:	db11      	blt.n	800494e <icm_hd_mvmt_process+0xb6>
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <icm_hd_mvmt_process+0xd0>)
 800492c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d509      	bpl.n	800494e <icm_hd_mvmt_process+0xb6>
	  {
		  //going to left
		  return (int)90 - angle*MUL_FACTOR;
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <icm_hd_mvmt_process+0xd8>)
 800493c:	edd3 7a00 	vldr	s15, [r3]
 8004940:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004974 <icm_hd_mvmt_process+0xdc>
 8004944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800494c:	e001      	b.n	8004952 <icm_hd_mvmt_process+0xba>
	  }

	  return 404;
 800494e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004978 <icm_hd_mvmt_process+0xe0>
}
 8004952:	ee17 3a90 	vmov	r3, s15
 8004956:	4618      	mov	r0, r3
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w
 8004960:	00000000 	.word	0x00000000
 8004964:	40668000 	.word	0x40668000
 8004968:	20000338 	.word	0x20000338
 800496c:	2000000c 	.word	0x2000000c
 8004970:	20000344 	.word	0x20000344
 8004974:	42b40000 	.word	0x42b40000
 8004978:	00000194 	.word	0x00000194

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000010 	.word	0x20000010

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	; (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	; (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	; (80049cc <__libc_init_array+0x44>)
 800499c:	f003 f840 	bl	8007a20 <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08007f60 	.word	0x08007f60
 80049c4:	08007f60 	.word	0x08007f60
 80049c8:	08007f60 	.word	0x08007f60
 80049cc:	08007f64 	.word	0x08007f64

080049d0 <memset>:
 80049d0:	4402      	add	r2, r0
 80049d2:	4603      	mov	r3, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d100      	bne.n	80049da <memset+0xa>
 80049d8:	4770      	bx	lr
 80049da:	f803 1b01 	strb.w	r1, [r3], #1
 80049de:	e7f9      	b.n	80049d4 <memset+0x4>

080049e0 <__cvt>:
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	ed2d 8b02 	vpush	{d8}
 80049e6:	eeb0 8b40 	vmov.f64	d8, d0
 80049ea:	b085      	sub	sp, #20
 80049ec:	4617      	mov	r7, r2
 80049ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80049f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80049f2:	ee18 2a90 	vmov	r2, s17
 80049f6:	f025 0520 	bic.w	r5, r5, #32
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	bfb6      	itet	lt
 80049fe:	222d      	movlt	r2, #45	; 0x2d
 8004a00:	2200      	movge	r2, #0
 8004a02:	eeb1 8b40 	vneglt.f64	d8, d0
 8004a06:	2d46      	cmp	r5, #70	; 0x46
 8004a08:	460c      	mov	r4, r1
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	d004      	beq.n	8004a18 <__cvt+0x38>
 8004a0e:	2d45      	cmp	r5, #69	; 0x45
 8004a10:	d100      	bne.n	8004a14 <__cvt+0x34>
 8004a12:	3401      	adds	r4, #1
 8004a14:	2102      	movs	r1, #2
 8004a16:	e000      	b.n	8004a1a <__cvt+0x3a>
 8004a18:	2103      	movs	r1, #3
 8004a1a:	ab03      	add	r3, sp, #12
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	ab02      	add	r3, sp, #8
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4622      	mov	r2, r4
 8004a24:	4633      	mov	r3, r6
 8004a26:	eeb0 0b48 	vmov.f64	d0, d8
 8004a2a:	f000 fce1 	bl	80053f0 <_dtoa_r>
 8004a2e:	2d47      	cmp	r5, #71	; 0x47
 8004a30:	d101      	bne.n	8004a36 <__cvt+0x56>
 8004a32:	07fb      	lsls	r3, r7, #31
 8004a34:	d51a      	bpl.n	8004a6c <__cvt+0x8c>
 8004a36:	2d46      	cmp	r5, #70	; 0x46
 8004a38:	eb00 0204 	add.w	r2, r0, r4
 8004a3c:	d10c      	bne.n	8004a58 <__cvt+0x78>
 8004a3e:	7803      	ldrb	r3, [r0, #0]
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d107      	bne.n	8004a54 <__cvt+0x74>
 8004a44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4c:	bf1c      	itt	ne
 8004a4e:	f1c4 0401 	rsbne	r4, r4, #1
 8004a52:	6034      	strne	r4, [r6, #0]
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	441a      	add	r2, r3
 8004a58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a60:	bf08      	it	eq
 8004a62:	9203      	streq	r2, [sp, #12]
 8004a64:	2130      	movs	r1, #48	; 0x30
 8004a66:	9b03      	ldr	r3, [sp, #12]
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d307      	bcc.n	8004a7c <__cvt+0x9c>
 8004a6c:	9b03      	ldr	r3, [sp, #12]
 8004a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a70:	1a1b      	subs	r3, r3, r0
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	b005      	add	sp, #20
 8004a76:	ecbd 8b02 	vpop	{d8}
 8004a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7c:	1c5c      	adds	r4, r3, #1
 8004a7e:	9403      	str	r4, [sp, #12]
 8004a80:	7019      	strb	r1, [r3, #0]
 8004a82:	e7f0      	b.n	8004a66 <__cvt+0x86>

08004a84 <__exponent>:
 8004a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a86:	4603      	mov	r3, r0
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	bfb8      	it	lt
 8004a8c:	4249      	neglt	r1, r1
 8004a8e:	f803 2b02 	strb.w	r2, [r3], #2
 8004a92:	bfb4      	ite	lt
 8004a94:	222d      	movlt	r2, #45	; 0x2d
 8004a96:	222b      	movge	r2, #43	; 0x2b
 8004a98:	2909      	cmp	r1, #9
 8004a9a:	7042      	strb	r2, [r0, #1]
 8004a9c:	dd2a      	ble.n	8004af4 <__exponent+0x70>
 8004a9e:	f10d 0407 	add.w	r4, sp, #7
 8004aa2:	46a4      	mov	ip, r4
 8004aa4:	270a      	movs	r7, #10
 8004aa6:	46a6      	mov	lr, r4
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8004aae:	fb07 1516 	mls	r5, r7, r6, r1
 8004ab2:	3530      	adds	r5, #48	; 0x30
 8004ab4:	2a63      	cmp	r2, #99	; 0x63
 8004ab6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004aba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004abe:	4631      	mov	r1, r6
 8004ac0:	dcf1      	bgt.n	8004aa6 <__exponent+0x22>
 8004ac2:	3130      	adds	r1, #48	; 0x30
 8004ac4:	f1ae 0502 	sub.w	r5, lr, #2
 8004ac8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004acc:	1c44      	adds	r4, r0, #1
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4561      	cmp	r1, ip
 8004ad2:	d30a      	bcc.n	8004aea <__exponent+0x66>
 8004ad4:	f10d 0209 	add.w	r2, sp, #9
 8004ad8:	eba2 020e 	sub.w	r2, r2, lr
 8004adc:	4565      	cmp	r5, ip
 8004ade:	bf88      	it	hi
 8004ae0:	2200      	movhi	r2, #0
 8004ae2:	4413      	add	r3, r2
 8004ae4:	1a18      	subs	r0, r3, r0
 8004ae6:	b003      	add	sp, #12
 8004ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004af2:	e7ed      	b.n	8004ad0 <__exponent+0x4c>
 8004af4:	2330      	movs	r3, #48	; 0x30
 8004af6:	3130      	adds	r1, #48	; 0x30
 8004af8:	7083      	strb	r3, [r0, #2]
 8004afa:	70c1      	strb	r1, [r0, #3]
 8004afc:	1d03      	adds	r3, r0, #4
 8004afe:	e7f1      	b.n	8004ae4 <__exponent+0x60>

08004b00 <_printf_float>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	b08b      	sub	sp, #44	; 0x2c
 8004b06:	460c      	mov	r4, r1
 8004b08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	461f      	mov	r7, r3
 8004b10:	4605      	mov	r5, r0
 8004b12:	f001 fad1 	bl	80060b8 <_localeconv_r>
 8004b16:	f8d0 b000 	ldr.w	fp, [r0]
 8004b1a:	4658      	mov	r0, fp
 8004b1c:	f7fb fb90 	bl	8000240 <strlen>
 8004b20:	2300      	movs	r3, #0
 8004b22:	9308      	str	r3, [sp, #32]
 8004b24:	f8d8 3000 	ldr.w	r3, [r8]
 8004b28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	3307      	adds	r3, #7
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	f103 0108 	add.w	r1, r3, #8
 8004b38:	f8c8 1000 	str.w	r1, [r8]
 8004b3c:	4682      	mov	sl, r0
 8004b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004b46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004da8 <_printf_float+0x2a8>
 8004b4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004b4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8004b52:	eeb4 6b47 	vcmp.f64	d6, d7
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	dd24      	ble.n	8004ba6 <_printf_float+0xa6>
 8004b5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	d502      	bpl.n	8004b6c <_printf_float+0x6c>
 8004b66:	232d      	movs	r3, #45	; 0x2d
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6c:	4b90      	ldr	r3, [pc, #576]	; (8004db0 <_printf_float+0x2b0>)
 8004b6e:	4891      	ldr	r0, [pc, #580]	; (8004db4 <_printf_float+0x2b4>)
 8004b70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b74:	bf94      	ite	ls
 8004b76:	4698      	movls	r8, r3
 8004b78:	4680      	movhi	r8, r0
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	f022 0204 	bic.w	r2, r2, #4
 8004b82:	2300      	movs	r3, #0
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	9304      	str	r3, [sp, #16]
 8004b88:	9700      	str	r7, [sp, #0]
 8004b8a:	4633      	mov	r3, r6
 8004b8c:	aa09      	add	r2, sp, #36	; 0x24
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4628      	mov	r0, r5
 8004b92:	f000 f9d3 	bl	8004f3c <_printf_common>
 8004b96:	3001      	adds	r0, #1
 8004b98:	f040 808a 	bne.w	8004cb0 <_printf_float+0x1b0>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	b00b      	add	sp, #44	; 0x2c
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	eeb4 0b40 	vcmp.f64	d0, d0
 8004baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bae:	d709      	bvc.n	8004bc4 <_printf_float+0xc4>
 8004bb0:	ee10 3a90 	vmov	r3, s1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bfbc      	itt	lt
 8004bb8:	232d      	movlt	r3, #45	; 0x2d
 8004bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bbe:	487e      	ldr	r0, [pc, #504]	; (8004db8 <_printf_float+0x2b8>)
 8004bc0:	4b7e      	ldr	r3, [pc, #504]	; (8004dbc <_printf_float+0x2bc>)
 8004bc2:	e7d5      	b.n	8004b70 <_printf_float+0x70>
 8004bc4:	6863      	ldr	r3, [r4, #4]
 8004bc6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004bca:	9104      	str	r1, [sp, #16]
 8004bcc:	1c59      	adds	r1, r3, #1
 8004bce:	d13c      	bne.n	8004c4a <_printf_float+0x14a>
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9303      	str	r3, [sp, #12]
 8004bd8:	ab08      	add	r3, sp, #32
 8004bda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004bde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004be2:	ab07      	add	r3, sp, #28
 8004be4:	6861      	ldr	r1, [r4, #4]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	f10d 031b 	add.w	r3, sp, #27
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f7ff fef6 	bl	80049e0 <__cvt>
 8004bf4:	9b04      	ldr	r3, [sp, #16]
 8004bf6:	9907      	ldr	r1, [sp, #28]
 8004bf8:	2b47      	cmp	r3, #71	; 0x47
 8004bfa:	4680      	mov	r8, r0
 8004bfc:	d108      	bne.n	8004c10 <_printf_float+0x110>
 8004bfe:	1cc8      	adds	r0, r1, #3
 8004c00:	db02      	blt.n	8004c08 <_printf_float+0x108>
 8004c02:	6863      	ldr	r3, [r4, #4]
 8004c04:	4299      	cmp	r1, r3
 8004c06:	dd41      	ble.n	8004c8c <_printf_float+0x18c>
 8004c08:	f1a9 0902 	sub.w	r9, r9, #2
 8004c0c:	fa5f f989 	uxtb.w	r9, r9
 8004c10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c14:	d820      	bhi.n	8004c58 <_printf_float+0x158>
 8004c16:	3901      	subs	r1, #1
 8004c18:	464a      	mov	r2, r9
 8004c1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c1e:	9107      	str	r1, [sp, #28]
 8004c20:	f7ff ff30 	bl	8004a84 <__exponent>
 8004c24:	9a08      	ldr	r2, [sp, #32]
 8004c26:	9004      	str	r0, [sp, #16]
 8004c28:	1813      	adds	r3, r2, r0
 8004c2a:	2a01      	cmp	r2, #1
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	dc02      	bgt.n	8004c36 <_printf_float+0x136>
 8004c30:	6822      	ldr	r2, [r4, #0]
 8004c32:	07d2      	lsls	r2, r2, #31
 8004c34:	d501      	bpl.n	8004c3a <_printf_float+0x13a>
 8004c36:	3301      	adds	r3, #1
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0a2      	beq.n	8004b88 <_printf_float+0x88>
 8004c42:	232d      	movs	r3, #45	; 0x2d
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c48:	e79e      	b.n	8004b88 <_printf_float+0x88>
 8004c4a:	9904      	ldr	r1, [sp, #16]
 8004c4c:	2947      	cmp	r1, #71	; 0x47
 8004c4e:	d1c1      	bne.n	8004bd4 <_printf_float+0xd4>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1bf      	bne.n	8004bd4 <_printf_float+0xd4>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e7bc      	b.n	8004bd2 <_printf_float+0xd2>
 8004c58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c5c:	d118      	bne.n	8004c90 <_printf_float+0x190>
 8004c5e:	2900      	cmp	r1, #0
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	dd0b      	ble.n	8004c7c <_printf_float+0x17c>
 8004c64:	6121      	str	r1, [r4, #16]
 8004c66:	b913      	cbnz	r3, 8004c6e <_printf_float+0x16e>
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	07d0      	lsls	r0, r2, #31
 8004c6c:	d502      	bpl.n	8004c74 <_printf_float+0x174>
 8004c6e:	3301      	adds	r3, #1
 8004c70:	440b      	add	r3, r1
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	2300      	movs	r3, #0
 8004c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	e7de      	b.n	8004c3a <_printf_float+0x13a>
 8004c7c:	b913      	cbnz	r3, 8004c84 <_printf_float+0x184>
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	07d2      	lsls	r2, r2, #31
 8004c82:	d501      	bpl.n	8004c88 <_printf_float+0x188>
 8004c84:	3302      	adds	r3, #2
 8004c86:	e7f4      	b.n	8004c72 <_printf_float+0x172>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e7f2      	b.n	8004c72 <_printf_float+0x172>
 8004c8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c90:	9b08      	ldr	r3, [sp, #32]
 8004c92:	4299      	cmp	r1, r3
 8004c94:	db05      	blt.n	8004ca2 <_printf_float+0x1a2>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	6121      	str	r1, [r4, #16]
 8004c9a:	07d8      	lsls	r0, r3, #31
 8004c9c:	d5ea      	bpl.n	8004c74 <_printf_float+0x174>
 8004c9e:	1c4b      	adds	r3, r1, #1
 8004ca0:	e7e7      	b.n	8004c72 <_printf_float+0x172>
 8004ca2:	2900      	cmp	r1, #0
 8004ca4:	bfd4      	ite	le
 8004ca6:	f1c1 0202 	rsble	r2, r1, #2
 8004caa:	2201      	movgt	r2, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	e7e0      	b.n	8004c72 <_printf_float+0x172>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	055a      	lsls	r2, r3, #21
 8004cb4:	d407      	bmi.n	8004cc6 <_printf_float+0x1c6>
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	4642      	mov	r2, r8
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d12a      	bne.n	8004d1a <_printf_float+0x21a>
 8004cc4:	e76a      	b.n	8004b9c <_printf_float+0x9c>
 8004cc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cca:	f240 80e2 	bls.w	8004e92 <_printf_float+0x392>
 8004cce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004cd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	d133      	bne.n	8004d44 <_printf_float+0x244>
 8004cdc:	4a38      	ldr	r2, [pc, #224]	; (8004dc0 <_printf_float+0x2c0>)
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af58 	beq.w	8004b9c <_printf_float+0x9c>
 8004cec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	db02      	blt.n	8004cfa <_printf_float+0x1fa>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	07d8      	lsls	r0, r3, #31
 8004cf8:	d50f      	bpl.n	8004d1a <_printf_float+0x21a>
 8004cfa:	4653      	mov	r3, sl
 8004cfc:	465a      	mov	r2, fp
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f af49 	beq.w	8004b9c <_printf_float+0x9c>
 8004d0a:	f04f 0800 	mov.w	r8, #0
 8004d0e:	f104 091a 	add.w	r9, r4, #26
 8004d12:	9b08      	ldr	r3, [sp, #32]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4543      	cmp	r3, r8
 8004d18:	dc09      	bgt.n	8004d2e <_printf_float+0x22e>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	079b      	lsls	r3, r3, #30
 8004d1e:	f100 8108 	bmi.w	8004f32 <_printf_float+0x432>
 8004d22:	68e0      	ldr	r0, [r4, #12]
 8004d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d26:	4298      	cmp	r0, r3
 8004d28:	bfb8      	it	lt
 8004d2a:	4618      	movlt	r0, r3
 8004d2c:	e738      	b.n	8004ba0 <_printf_float+0xa0>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	464a      	mov	r2, r9
 8004d32:	4631      	mov	r1, r6
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b8      	blx	r7
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f43f af2f 	beq.w	8004b9c <_printf_float+0x9c>
 8004d3e:	f108 0801 	add.w	r8, r8, #1
 8004d42:	e7e6      	b.n	8004d12 <_printf_float+0x212>
 8004d44:	9b07      	ldr	r3, [sp, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dc3c      	bgt.n	8004dc4 <_printf_float+0x2c4>
 8004d4a:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <_printf_float+0x2c0>)
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f af21 	beq.w	8004b9c <_printf_float+0x9c>
 8004d5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d102      	bne.n	8004d68 <_printf_float+0x268>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	07d9      	lsls	r1, r3, #31
 8004d66:	d5d8      	bpl.n	8004d1a <_printf_float+0x21a>
 8004d68:	4653      	mov	r3, sl
 8004d6a:	465a      	mov	r2, fp
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f af12 	beq.w	8004b9c <_printf_float+0x9c>
 8004d78:	f04f 0900 	mov.w	r9, #0
 8004d7c:	f104 0a1a 	add.w	sl, r4, #26
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	425b      	negs	r3, r3
 8004d84:	454b      	cmp	r3, r9
 8004d86:	dc01      	bgt.n	8004d8c <_printf_float+0x28c>
 8004d88:	9b08      	ldr	r3, [sp, #32]
 8004d8a:	e795      	b.n	8004cb8 <_printf_float+0x1b8>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4652      	mov	r2, sl
 8004d90:	4631      	mov	r1, r6
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f af00 	beq.w	8004b9c <_printf_float+0x9c>
 8004d9c:	f109 0901 	add.w	r9, r9, #1
 8004da0:	e7ee      	b.n	8004d80 <_printf_float+0x280>
 8004da2:	bf00      	nop
 8004da4:	f3af 8000 	nop.w
 8004da8:	ffffffff 	.word	0xffffffff
 8004dac:	7fefffff 	.word	0x7fefffff
 8004db0:	08007b0c 	.word	0x08007b0c
 8004db4:	08007b10 	.word	0x08007b10
 8004db8:	08007b18 	.word	0x08007b18
 8004dbc:	08007b14 	.word	0x08007b14
 8004dc0:	08007b1c 	.word	0x08007b1c
 8004dc4:	9a08      	ldr	r2, [sp, #32]
 8004dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	bfa8      	it	ge
 8004dcc:	461a      	movge	r2, r3
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	4691      	mov	r9, r2
 8004dd2:	dc38      	bgt.n	8004e46 <_printf_float+0x346>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ddc:	f104 021a 	add.w	r2, r4, #26
 8004de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de2:	9905      	ldr	r1, [sp, #20]
 8004de4:	9304      	str	r3, [sp, #16]
 8004de6:	eba3 0309 	sub.w	r3, r3, r9
 8004dea:	428b      	cmp	r3, r1
 8004dec:	dc33      	bgt.n	8004e56 <_printf_float+0x356>
 8004dee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	db3c      	blt.n	8004e70 <_printf_float+0x370>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	07da      	lsls	r2, r3, #31
 8004dfa:	d439      	bmi.n	8004e70 <_printf_float+0x370>
 8004dfc:	9b08      	ldr	r3, [sp, #32]
 8004dfe:	9a04      	ldr	r2, [sp, #16]
 8004e00:	9907      	ldr	r1, [sp, #28]
 8004e02:	1a9a      	subs	r2, r3, r2
 8004e04:	eba3 0901 	sub.w	r9, r3, r1
 8004e08:	4591      	cmp	r9, r2
 8004e0a:	bfa8      	it	ge
 8004e0c:	4691      	movge	r9, r2
 8004e0e:	f1b9 0f00 	cmp.w	r9, #0
 8004e12:	dc35      	bgt.n	8004e80 <_printf_float+0x380>
 8004e14:	f04f 0800 	mov.w	r8, #0
 8004e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e1c:	f104 0a1a 	add.w	sl, r4, #26
 8004e20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	eba3 0309 	sub.w	r3, r3, r9
 8004e2a:	4543      	cmp	r3, r8
 8004e2c:	f77f af75 	ble.w	8004d1a <_printf_float+0x21a>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4652      	mov	r2, sl
 8004e34:	4631      	mov	r1, r6
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f aeae 	beq.w	8004b9c <_printf_float+0x9c>
 8004e40:	f108 0801 	add.w	r8, r8, #1
 8004e44:	e7ec      	b.n	8004e20 <_printf_float+0x320>
 8004e46:	4613      	mov	r3, r2
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	d1bf      	bne.n	8004dd4 <_printf_float+0x2d4>
 8004e54:	e6a2      	b.n	8004b9c <_printf_float+0x9c>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	9204      	str	r2, [sp, #16]
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae9b 	beq.w	8004b9c <_printf_float+0x9c>
 8004e66:	9b05      	ldr	r3, [sp, #20]
 8004e68:	9a04      	ldr	r2, [sp, #16]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	9305      	str	r3, [sp, #20]
 8004e6e:	e7b7      	b.n	8004de0 <_printf_float+0x2e0>
 8004e70:	4653      	mov	r3, sl
 8004e72:	465a      	mov	r2, fp
 8004e74:	4631      	mov	r1, r6
 8004e76:	4628      	mov	r0, r5
 8004e78:	47b8      	blx	r7
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d1be      	bne.n	8004dfc <_printf_float+0x2fc>
 8004e7e:	e68d      	b.n	8004b9c <_printf_float+0x9c>
 8004e80:	9a04      	ldr	r2, [sp, #16]
 8004e82:	464b      	mov	r3, r9
 8004e84:	4442      	add	r2, r8
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d1c1      	bne.n	8004e14 <_printf_float+0x314>
 8004e90:	e684      	b.n	8004b9c <_printf_float+0x9c>
 8004e92:	9a08      	ldr	r2, [sp, #32]
 8004e94:	2a01      	cmp	r2, #1
 8004e96:	dc01      	bgt.n	8004e9c <_printf_float+0x39c>
 8004e98:	07db      	lsls	r3, r3, #31
 8004e9a:	d537      	bpl.n	8004f0c <_printf_float+0x40c>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f ae78 	beq.w	8004b9c <_printf_float+0x9c>
 8004eac:	4653      	mov	r3, sl
 8004eae:	465a      	mov	r2, fp
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b8      	blx	r7
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f43f ae70 	beq.w	8004b9c <_printf_float+0x9c>
 8004ebc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004ec0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec8:	d01b      	beq.n	8004f02 <_printf_float+0x402>
 8004eca:	9b08      	ldr	r3, [sp, #32]
 8004ecc:	f108 0201 	add.w	r2, r8, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d10e      	bne.n	8004efa <_printf_float+0x3fa>
 8004edc:	e65e      	b.n	8004b9c <_printf_float+0x9c>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	464a      	mov	r2, r9
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f ae57 	beq.w	8004b9c <_printf_float+0x9c>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	9b08      	ldr	r3, [sp, #32]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	4543      	cmp	r3, r8
 8004ef8:	dcf1      	bgt.n	8004ede <_printf_float+0x3de>
 8004efa:	9b04      	ldr	r3, [sp, #16]
 8004efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f00:	e6db      	b.n	8004cba <_printf_float+0x1ba>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	f104 091a 	add.w	r9, r4, #26
 8004f0a:	e7f2      	b.n	8004ef2 <_printf_float+0x3f2>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4642      	mov	r2, r8
 8004f10:	e7df      	b.n	8004ed2 <_printf_float+0x3d2>
 8004f12:	2301      	movs	r3, #1
 8004f14:	464a      	mov	r2, r9
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f43f ae3d 	beq.w	8004b9c <_printf_float+0x9c>
 8004f22:	f108 0801 	add.w	r8, r8, #1
 8004f26:	68e3      	ldr	r3, [r4, #12]
 8004f28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f2a:	1a5b      	subs	r3, r3, r1
 8004f2c:	4543      	cmp	r3, r8
 8004f2e:	dcf0      	bgt.n	8004f12 <_printf_float+0x412>
 8004f30:	e6f7      	b.n	8004d22 <_printf_float+0x222>
 8004f32:	f04f 0800 	mov.w	r8, #0
 8004f36:	f104 0919 	add.w	r9, r4, #25
 8004f3a:	e7f4      	b.n	8004f26 <_printf_float+0x426>

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4616      	mov	r6, r2
 8004f42:	4699      	mov	r9, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfb8      	it	lt
 8004f50:	4613      	movlt	r3, r2
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f58:	4607      	mov	r7, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	b10a      	cbz	r2, 8004f62 <_printf_common+0x26>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	0699      	lsls	r1, r3, #26
 8004f66:	bf42      	ittt	mi
 8004f68:	6833      	ldrmi	r3, [r6, #0]
 8004f6a:	3302      	addmi	r3, #2
 8004f6c:	6033      	strmi	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d106      	bne.n	8004f84 <_printf_common+0x48>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dc26      	bgt.n	8004fd2 <_printf_common+0x96>
 8004f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f88:	1e13      	subs	r3, r2, #0
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d42b      	bmi.n	8004fec <_printf_common+0xb0>
 8004f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f98:	4649      	mov	r1, r9
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d01e      	beq.n	8004fe0 <_printf_common+0xa4>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	68e5      	ldr	r5, [r4, #12]
 8004fa6:	6832      	ldr	r2, [r6, #0]
 8004fa8:	f003 0306 	and.w	r3, r3, #6
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	bf08      	it	eq
 8004fb0:	1aad      	subeq	r5, r5, r2
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	bf0c      	ite	eq
 8004fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fbc:	2500      	movne	r5, #0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bfc4      	itt	gt
 8004fc2:	1a9b      	subgt	r3, r3, r2
 8004fc4:	18ed      	addgt	r5, r5, r3
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	341a      	adds	r4, #26
 8004fca:	42b5      	cmp	r5, r6
 8004fcc:	d11a      	bne.n	8005004 <_printf_common+0xc8>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e008      	b.n	8004fe4 <_printf_common+0xa8>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d103      	bne.n	8004fe8 <_printf_common+0xac>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7c6      	b.n	8004f7a <_printf_common+0x3e>
 8004fec:	18e1      	adds	r1, r4, r3
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff6:	4422      	add	r2, r4
 8004ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005000:	3302      	adds	r3, #2
 8005002:	e7c7      	b.n	8004f94 <_printf_common+0x58>
 8005004:	2301      	movs	r3, #1
 8005006:	4622      	mov	r2, r4
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d0e6      	beq.n	8004fe0 <_printf_common+0xa4>
 8005012:	3601      	adds	r6, #1
 8005014:	e7d9      	b.n	8004fca <_printf_common+0x8e>
	...

08005018 <_printf_i>:
 8005018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	7e0f      	ldrb	r7, [r1, #24]
 800501e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005020:	2f78      	cmp	r7, #120	; 0x78
 8005022:	4691      	mov	r9, r2
 8005024:	4680      	mov	r8, r0
 8005026:	460c      	mov	r4, r1
 8005028:	469a      	mov	sl, r3
 800502a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800502e:	d807      	bhi.n	8005040 <_printf_i+0x28>
 8005030:	2f62      	cmp	r7, #98	; 0x62
 8005032:	d80a      	bhi.n	800504a <_printf_i+0x32>
 8005034:	2f00      	cmp	r7, #0
 8005036:	f000 80d8 	beq.w	80051ea <_printf_i+0x1d2>
 800503a:	2f58      	cmp	r7, #88	; 0x58
 800503c:	f000 80a3 	beq.w	8005186 <_printf_i+0x16e>
 8005040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005048:	e03a      	b.n	80050c0 <_printf_i+0xa8>
 800504a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800504e:	2b15      	cmp	r3, #21
 8005050:	d8f6      	bhi.n	8005040 <_printf_i+0x28>
 8005052:	a101      	add	r1, pc, #4	; (adr r1, 8005058 <_printf_i+0x40>)
 8005054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005058:	080050b1 	.word	0x080050b1
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005041 	.word	0x08005041
 8005064:	08005041 	.word	0x08005041
 8005068:	08005041 	.word	0x08005041
 800506c:	08005041 	.word	0x08005041
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005041 	.word	0x08005041
 8005078:	08005041 	.word	0x08005041
 800507c:	08005041 	.word	0x08005041
 8005080:	08005041 	.word	0x08005041
 8005084:	080051d1 	.word	0x080051d1
 8005088:	080050f5 	.word	0x080050f5
 800508c:	080051b3 	.word	0x080051b3
 8005090:	08005041 	.word	0x08005041
 8005094:	08005041 	.word	0x08005041
 8005098:	080051f3 	.word	0x080051f3
 800509c:	08005041 	.word	0x08005041
 80050a0:	080050f5 	.word	0x080050f5
 80050a4:	08005041 	.word	0x08005041
 80050a8:	08005041 	.word	0x08005041
 80050ac:	080051bb 	.word	0x080051bb
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	1d1a      	adds	r2, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	602a      	str	r2, [r5, #0]
 80050b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0a3      	b.n	800520c <_printf_i+0x1f4>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	6829      	ldr	r1, [r5, #0]
 80050c8:	0606      	lsls	r6, r0, #24
 80050ca:	f101 0304 	add.w	r3, r1, #4
 80050ce:	d50a      	bpl.n	80050e6 <_printf_i+0xce>
 80050d0:	680e      	ldr	r6, [r1, #0]
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	2e00      	cmp	r6, #0
 80050d6:	da03      	bge.n	80050e0 <_printf_i+0xc8>
 80050d8:	232d      	movs	r3, #45	; 0x2d
 80050da:	4276      	negs	r6, r6
 80050dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e0:	485e      	ldr	r0, [pc, #376]	; (800525c <_printf_i+0x244>)
 80050e2:	230a      	movs	r3, #10
 80050e4:	e019      	b.n	800511a <_printf_i+0x102>
 80050e6:	680e      	ldr	r6, [r1, #0]
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ee:	bf18      	it	ne
 80050f0:	b236      	sxthne	r6, r6
 80050f2:	e7ef      	b.n	80050d4 <_printf_i+0xbc>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	6820      	ldr	r0, [r4, #0]
 80050f8:	1d19      	adds	r1, r3, #4
 80050fa:	6029      	str	r1, [r5, #0]
 80050fc:	0601      	lsls	r1, r0, #24
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0xec>
 8005100:	681e      	ldr	r6, [r3, #0]
 8005102:	e002      	b.n	800510a <_printf_i+0xf2>
 8005104:	0646      	lsls	r6, r0, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0xe8>
 8005108:	881e      	ldrh	r6, [r3, #0]
 800510a:	4854      	ldr	r0, [pc, #336]	; (800525c <_printf_i+0x244>)
 800510c:	2f6f      	cmp	r7, #111	; 0x6f
 800510e:	bf0c      	ite	eq
 8005110:	2308      	moveq	r3, #8
 8005112:	230a      	movne	r3, #10
 8005114:	2100      	movs	r1, #0
 8005116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800511a:	6865      	ldr	r5, [r4, #4]
 800511c:	60a5      	str	r5, [r4, #8]
 800511e:	2d00      	cmp	r5, #0
 8005120:	bfa2      	ittt	ge
 8005122:	6821      	ldrge	r1, [r4, #0]
 8005124:	f021 0104 	bicge.w	r1, r1, #4
 8005128:	6021      	strge	r1, [r4, #0]
 800512a:	b90e      	cbnz	r6, 8005130 <_printf_i+0x118>
 800512c:	2d00      	cmp	r5, #0
 800512e:	d04d      	beq.n	80051cc <_printf_i+0x1b4>
 8005130:	4615      	mov	r5, r2
 8005132:	fbb6 f1f3 	udiv	r1, r6, r3
 8005136:	fb03 6711 	mls	r7, r3, r1, r6
 800513a:	5dc7      	ldrb	r7, [r0, r7]
 800513c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005140:	4637      	mov	r7, r6
 8005142:	42bb      	cmp	r3, r7
 8005144:	460e      	mov	r6, r1
 8005146:	d9f4      	bls.n	8005132 <_printf_i+0x11a>
 8005148:	2b08      	cmp	r3, #8
 800514a:	d10b      	bne.n	8005164 <_printf_i+0x14c>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	07de      	lsls	r6, r3, #31
 8005150:	d508      	bpl.n	8005164 <_printf_i+0x14c>
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	6861      	ldr	r1, [r4, #4]
 8005156:	4299      	cmp	r1, r3
 8005158:	bfde      	ittt	le
 800515a:	2330      	movle	r3, #48	; 0x30
 800515c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005164:	1b52      	subs	r2, r2, r5
 8005166:	6122      	str	r2, [r4, #16]
 8005168:	f8cd a000 	str.w	sl, [sp]
 800516c:	464b      	mov	r3, r9
 800516e:	aa03      	add	r2, sp, #12
 8005170:	4621      	mov	r1, r4
 8005172:	4640      	mov	r0, r8
 8005174:	f7ff fee2 	bl	8004f3c <_printf_common>
 8005178:	3001      	adds	r0, #1
 800517a:	d14c      	bne.n	8005216 <_printf_i+0x1fe>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	b004      	add	sp, #16
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	4835      	ldr	r0, [pc, #212]	; (800525c <_printf_i+0x244>)
 8005188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800518c:	6829      	ldr	r1, [r5, #0]
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f851 6b04 	ldr.w	r6, [r1], #4
 8005194:	6029      	str	r1, [r5, #0]
 8005196:	061d      	lsls	r5, r3, #24
 8005198:	d514      	bpl.n	80051c4 <_printf_i+0x1ac>
 800519a:	07df      	lsls	r7, r3, #31
 800519c:	bf44      	itt	mi
 800519e:	f043 0320 	orrmi.w	r3, r3, #32
 80051a2:	6023      	strmi	r3, [r4, #0]
 80051a4:	b91e      	cbnz	r6, 80051ae <_printf_i+0x196>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	f023 0320 	bic.w	r3, r3, #32
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	2310      	movs	r3, #16
 80051b0:	e7b0      	b.n	8005114 <_printf_i+0xfc>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	2378      	movs	r3, #120	; 0x78
 80051bc:	4828      	ldr	r0, [pc, #160]	; (8005260 <_printf_i+0x248>)
 80051be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051c2:	e7e3      	b.n	800518c <_printf_i+0x174>
 80051c4:	0659      	lsls	r1, r3, #25
 80051c6:	bf48      	it	mi
 80051c8:	b2b6      	uxthmi	r6, r6
 80051ca:	e7e6      	b.n	800519a <_printf_i+0x182>
 80051cc:	4615      	mov	r5, r2
 80051ce:	e7bb      	b.n	8005148 <_printf_i+0x130>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	6826      	ldr	r6, [r4, #0]
 80051d4:	6961      	ldr	r1, [r4, #20]
 80051d6:	1d18      	adds	r0, r3, #4
 80051d8:	6028      	str	r0, [r5, #0]
 80051da:	0635      	lsls	r5, r6, #24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	d501      	bpl.n	80051e4 <_printf_i+0x1cc>
 80051e0:	6019      	str	r1, [r3, #0]
 80051e2:	e002      	b.n	80051ea <_printf_i+0x1d2>
 80051e4:	0670      	lsls	r0, r6, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_printf_i+0x1c8>
 80051e8:	8019      	strh	r1, [r3, #0]
 80051ea:	2300      	movs	r3, #0
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	4615      	mov	r5, r2
 80051f0:	e7ba      	b.n	8005168 <_printf_i+0x150>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	1d1a      	adds	r2, r3, #4
 80051f6:	602a      	str	r2, [r5, #0]
 80051f8:	681d      	ldr	r5, [r3, #0]
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4628      	mov	r0, r5
 8005200:	f7fb f826 	bl	8000250 <memchr>
 8005204:	b108      	cbz	r0, 800520a <_printf_i+0x1f2>
 8005206:	1b40      	subs	r0, r0, r5
 8005208:	6060      	str	r0, [r4, #4]
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	6123      	str	r3, [r4, #16]
 800520e:	2300      	movs	r3, #0
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005214:	e7a8      	b.n	8005168 <_printf_i+0x150>
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	462a      	mov	r2, r5
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	47d0      	blx	sl
 8005220:	3001      	adds	r0, #1
 8005222:	d0ab      	beq.n	800517c <_printf_i+0x164>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	079b      	lsls	r3, r3, #30
 8005228:	d413      	bmi.n	8005252 <_printf_i+0x23a>
 800522a:	68e0      	ldr	r0, [r4, #12]
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	4298      	cmp	r0, r3
 8005230:	bfb8      	it	lt
 8005232:	4618      	movlt	r0, r3
 8005234:	e7a4      	b.n	8005180 <_printf_i+0x168>
 8005236:	2301      	movs	r3, #1
 8005238:	4632      	mov	r2, r6
 800523a:	4649      	mov	r1, r9
 800523c:	4640      	mov	r0, r8
 800523e:	47d0      	blx	sl
 8005240:	3001      	adds	r0, #1
 8005242:	d09b      	beq.n	800517c <_printf_i+0x164>
 8005244:	3501      	adds	r5, #1
 8005246:	68e3      	ldr	r3, [r4, #12]
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	1a5b      	subs	r3, r3, r1
 800524c:	42ab      	cmp	r3, r5
 800524e:	dcf2      	bgt.n	8005236 <_printf_i+0x21e>
 8005250:	e7eb      	b.n	800522a <_printf_i+0x212>
 8005252:	2500      	movs	r5, #0
 8005254:	f104 0619 	add.w	r6, r4, #25
 8005258:	e7f5      	b.n	8005246 <_printf_i+0x22e>
 800525a:	bf00      	nop
 800525c:	08007b1e 	.word	0x08007b1e
 8005260:	08007b2f 	.word	0x08007b2f

08005264 <iprintf>:
 8005264:	b40f      	push	{r0, r1, r2, r3}
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <iprintf+0x2c>)
 8005268:	b513      	push	{r0, r1, r4, lr}
 800526a:	681c      	ldr	r4, [r3, #0]
 800526c:	b124      	cbz	r4, 8005278 <iprintf+0x14>
 800526e:	69a3      	ldr	r3, [r4, #24]
 8005270:	b913      	cbnz	r3, 8005278 <iprintf+0x14>
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fe82 	bl	8005f7c <__sinit>
 8005278:	ab05      	add	r3, sp, #20
 800527a:	9a04      	ldr	r2, [sp, #16]
 800527c:	68a1      	ldr	r1, [r4, #8]
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	4620      	mov	r0, r4
 8005282:	f001 fd37 	bl	8006cf4 <_vfiprintf_r>
 8005286:	b002      	add	sp, #8
 8005288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800528c:	b004      	add	sp, #16
 800528e:	4770      	bx	lr
 8005290:	20000010 	.word	0x20000010

08005294 <siprintf>:
 8005294:	b40e      	push	{r1, r2, r3}
 8005296:	b500      	push	{lr}
 8005298:	b09c      	sub	sp, #112	; 0x70
 800529a:	ab1d      	add	r3, sp, #116	; 0x74
 800529c:	9002      	str	r0, [sp, #8]
 800529e:	9006      	str	r0, [sp, #24]
 80052a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052a4:	4809      	ldr	r0, [pc, #36]	; (80052cc <siprintf+0x38>)
 80052a6:	9107      	str	r1, [sp, #28]
 80052a8:	9104      	str	r1, [sp, #16]
 80052aa:	4909      	ldr	r1, [pc, #36]	; (80052d0 <siprintf+0x3c>)
 80052ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b0:	9105      	str	r1, [sp, #20]
 80052b2:	6800      	ldr	r0, [r0, #0]
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	a902      	add	r1, sp, #8
 80052b8:	f001 fbf2 	bl	8006aa0 <_svfiprintf_r>
 80052bc:	9b02      	ldr	r3, [sp, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	b01c      	add	sp, #112	; 0x70
 80052c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052c8:	b003      	add	sp, #12
 80052ca:	4770      	bx	lr
 80052cc:	20000010 	.word	0x20000010
 80052d0:	ffff0208 	.word	0xffff0208

080052d4 <quorem>:
 80052d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	6903      	ldr	r3, [r0, #16]
 80052da:	690c      	ldr	r4, [r1, #16]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	4607      	mov	r7, r0
 80052e0:	f2c0 8081 	blt.w	80053e6 <quorem+0x112>
 80052e4:	3c01      	subs	r4, #1
 80052e6:	f101 0814 	add.w	r8, r1, #20
 80052ea:	f100 0514 	add.w	r5, r0, #20
 80052ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052fc:	3301      	adds	r3, #1
 80052fe:	429a      	cmp	r2, r3
 8005300:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005308:	fbb2 f6f3 	udiv	r6, r2, r3
 800530c:	d331      	bcc.n	8005372 <quorem+0x9e>
 800530e:	f04f 0e00 	mov.w	lr, #0
 8005312:	4640      	mov	r0, r8
 8005314:	46ac      	mov	ip, r5
 8005316:	46f2      	mov	sl, lr
 8005318:	f850 2b04 	ldr.w	r2, [r0], #4
 800531c:	b293      	uxth	r3, r2
 800531e:	fb06 e303 	mla	r3, r6, r3, lr
 8005322:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005326:	b29b      	uxth	r3, r3
 8005328:	ebaa 0303 	sub.w	r3, sl, r3
 800532c:	f8dc a000 	ldr.w	sl, [ip]
 8005330:	0c12      	lsrs	r2, r2, #16
 8005332:	fa13 f38a 	uxtah	r3, r3, sl
 8005336:	fb06 e202 	mla	r2, r6, r2, lr
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	9b00      	ldr	r3, [sp, #0]
 800533e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005342:	b292      	uxth	r2, r2
 8005344:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800534c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005350:	4581      	cmp	r9, r0
 8005352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005356:	f84c 3b04 	str.w	r3, [ip], #4
 800535a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800535e:	d2db      	bcs.n	8005318 <quorem+0x44>
 8005360:	f855 300b 	ldr.w	r3, [r5, fp]
 8005364:	b92b      	cbnz	r3, 8005372 <quorem+0x9e>
 8005366:	9b01      	ldr	r3, [sp, #4]
 8005368:	3b04      	subs	r3, #4
 800536a:	429d      	cmp	r5, r3
 800536c:	461a      	mov	r2, r3
 800536e:	d32e      	bcc.n	80053ce <quorem+0xfa>
 8005370:	613c      	str	r4, [r7, #16]
 8005372:	4638      	mov	r0, r7
 8005374:	f001 f940 	bl	80065f8 <__mcmp>
 8005378:	2800      	cmp	r0, #0
 800537a:	db24      	blt.n	80053c6 <quorem+0xf2>
 800537c:	3601      	adds	r6, #1
 800537e:	4628      	mov	r0, r5
 8005380:	f04f 0c00 	mov.w	ip, #0
 8005384:	f858 2b04 	ldr.w	r2, [r8], #4
 8005388:	f8d0 e000 	ldr.w	lr, [r0]
 800538c:	b293      	uxth	r3, r2
 800538e:	ebac 0303 	sub.w	r3, ip, r3
 8005392:	0c12      	lsrs	r2, r2, #16
 8005394:	fa13 f38e 	uxtah	r3, r3, lr
 8005398:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800539c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053a6:	45c1      	cmp	r9, r8
 80053a8:	f840 3b04 	str.w	r3, [r0], #4
 80053ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053b0:	d2e8      	bcs.n	8005384 <quorem+0xb0>
 80053b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053ba:	b922      	cbnz	r2, 80053c6 <quorem+0xf2>
 80053bc:	3b04      	subs	r3, #4
 80053be:	429d      	cmp	r5, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	d30a      	bcc.n	80053da <quorem+0x106>
 80053c4:	613c      	str	r4, [r7, #16]
 80053c6:	4630      	mov	r0, r6
 80053c8:	b003      	add	sp, #12
 80053ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	2a00      	cmp	r2, #0
 80053d4:	d1cc      	bne.n	8005370 <quorem+0x9c>
 80053d6:	3c01      	subs	r4, #1
 80053d8:	e7c7      	b.n	800536a <quorem+0x96>
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	3b04      	subs	r3, #4
 80053de:	2a00      	cmp	r2, #0
 80053e0:	d1f0      	bne.n	80053c4 <quorem+0xf0>
 80053e2:	3c01      	subs	r4, #1
 80053e4:	e7eb      	b.n	80053be <quorem+0xea>
 80053e6:	2000      	movs	r0, #0
 80053e8:	e7ee      	b.n	80053c8 <quorem+0xf4>
 80053ea:	0000      	movs	r0, r0
 80053ec:	0000      	movs	r0, r0
	...

080053f0 <_dtoa_r>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	ed2d 8b02 	vpush	{d8}
 80053f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053fa:	b091      	sub	sp, #68	; 0x44
 80053fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005400:	ec59 8b10 	vmov	r8, r9, d0
 8005404:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005406:	9106      	str	r1, [sp, #24]
 8005408:	4606      	mov	r6, r0
 800540a:	9208      	str	r2, [sp, #32]
 800540c:	930c      	str	r3, [sp, #48]	; 0x30
 800540e:	b975      	cbnz	r5, 800542e <_dtoa_r+0x3e>
 8005410:	2010      	movs	r0, #16
 8005412:	f000 fe59 	bl	80060c8 <malloc>
 8005416:	4602      	mov	r2, r0
 8005418:	6270      	str	r0, [r6, #36]	; 0x24
 800541a:	b920      	cbnz	r0, 8005426 <_dtoa_r+0x36>
 800541c:	4baa      	ldr	r3, [pc, #680]	; (80056c8 <_dtoa_r+0x2d8>)
 800541e:	21ea      	movs	r1, #234	; 0xea
 8005420:	48aa      	ldr	r0, [pc, #680]	; (80056cc <_dtoa_r+0x2dc>)
 8005422:	f001 febd 	bl	80071a0 <__assert_func>
 8005426:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800542a:	6005      	str	r5, [r0, #0]
 800542c:	60c5      	str	r5, [r0, #12]
 800542e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	b151      	cbz	r1, 800544a <_dtoa_r+0x5a>
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	604a      	str	r2, [r1, #4]
 8005438:	2301      	movs	r3, #1
 800543a:	4093      	lsls	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
 800543e:	4630      	mov	r0, r6
 8005440:	f000 fe98 	bl	8006174 <_Bfree>
 8005444:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f1b9 0300 	subs.w	r3, r9, #0
 800544e:	bfbb      	ittet	lt
 8005450:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005454:	9303      	strlt	r3, [sp, #12]
 8005456:	2300      	movge	r3, #0
 8005458:	2201      	movlt	r2, #1
 800545a:	bfac      	ite	ge
 800545c:	6023      	strge	r3, [r4, #0]
 800545e:	6022      	strlt	r2, [r4, #0]
 8005460:	4b9b      	ldr	r3, [pc, #620]	; (80056d0 <_dtoa_r+0x2e0>)
 8005462:	9c03      	ldr	r4, [sp, #12]
 8005464:	43a3      	bics	r3, r4
 8005466:	d11c      	bne.n	80054a2 <_dtoa_r+0xb2>
 8005468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800546a:	f242 730f 	movw	r3, #9999	; 0x270f
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005474:	ea53 0308 	orrs.w	r3, r3, r8
 8005478:	f000 84fd 	beq.w	8005e76 <_dtoa_r+0xa86>
 800547c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800547e:	b963      	cbnz	r3, 800549a <_dtoa_r+0xaa>
 8005480:	4b94      	ldr	r3, [pc, #592]	; (80056d4 <_dtoa_r+0x2e4>)
 8005482:	e01f      	b.n	80054c4 <_dtoa_r+0xd4>
 8005484:	4b94      	ldr	r3, [pc, #592]	; (80056d8 <_dtoa_r+0x2e8>)
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	3308      	adds	r3, #8
 800548a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	9801      	ldr	r0, [sp, #4]
 8005490:	b011      	add	sp, #68	; 0x44
 8005492:	ecbd 8b02 	vpop	{d8}
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	4b8e      	ldr	r3, [pc, #568]	; (80056d4 <_dtoa_r+0x2e4>)
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	3303      	adds	r3, #3
 80054a0:	e7f3      	b.n	800548a <_dtoa_r+0x9a>
 80054a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80054a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80054aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ae:	d10b      	bne.n	80054c8 <_dtoa_r+0xd8>
 80054b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054b2:	2301      	movs	r3, #1
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 84d9 	beq.w	8005e70 <_dtoa_r+0xa80>
 80054be:	4887      	ldr	r0, [pc, #540]	; (80056dc <_dtoa_r+0x2ec>)
 80054c0:	6018      	str	r0, [r3, #0]
 80054c2:	1e43      	subs	r3, r0, #1
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	e7e2      	b.n	800548e <_dtoa_r+0x9e>
 80054c8:	a90f      	add	r1, sp, #60	; 0x3c
 80054ca:	aa0e      	add	r2, sp, #56	; 0x38
 80054cc:	4630      	mov	r0, r6
 80054ce:	eeb0 0b48 	vmov.f64	d0, d8
 80054d2:	f001 f937 	bl	8006744 <__d2b>
 80054d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80054da:	4605      	mov	r5, r0
 80054dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80054de:	2900      	cmp	r1, #0
 80054e0:	d046      	beq.n	8005570 <_dtoa_r+0x180>
 80054e2:	ee18 4a90 	vmov	r4, s17
 80054e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80054ea:	ec53 2b18 	vmov	r2, r3, d8
 80054ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80054f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80054fa:	2400      	movs	r4, #0
 80054fc:	ec43 2b16 	vmov	d6, r2, r3
 8005500:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005504:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80056b0 <_dtoa_r+0x2c0>
 8005508:	ee36 7b47 	vsub.f64	d7, d6, d7
 800550c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80056b8 <_dtoa_r+0x2c8>
 8005510:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005514:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80056c0 <_dtoa_r+0x2d0>
 8005518:	ee07 1a90 	vmov	s15, r1
 800551c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005520:	eeb0 7b46 	vmov.f64	d7, d6
 8005524:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005528:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800552c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005534:	ee16 ba90 	vmov	fp, s13
 8005538:	940a      	str	r4, [sp, #40]	; 0x28
 800553a:	d508      	bpl.n	800554e <_dtoa_r+0x15e>
 800553c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005540:	eeb4 6b47 	vcmp.f64	d6, d7
 8005544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005548:	bf18      	it	ne
 800554a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800554e:	f1bb 0f16 	cmp.w	fp, #22
 8005552:	d82f      	bhi.n	80055b4 <_dtoa_r+0x1c4>
 8005554:	4b62      	ldr	r3, [pc, #392]	; (80056e0 <_dtoa_r+0x2f0>)
 8005556:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800555a:	ed93 7b00 	vldr	d7, [r3]
 800555e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	d501      	bpl.n	800556c <_dtoa_r+0x17c>
 8005568:	f10b 3bff 	add.w	fp, fp, #4294967295
 800556c:	2300      	movs	r3, #0
 800556e:	e022      	b.n	80055b6 <_dtoa_r+0x1c6>
 8005570:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005572:	4401      	add	r1, r0
 8005574:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005578:	2b20      	cmp	r3, #32
 800557a:	bfc1      	itttt	gt
 800557c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005580:	fa04 f303 	lslgt.w	r3, r4, r3
 8005584:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005588:	fa28 f804 	lsrgt.w	r8, r8, r4
 800558c:	bfd6      	itet	le
 800558e:	f1c3 0320 	rsble	r3, r3, #32
 8005592:	ea43 0808 	orrgt.w	r8, r3, r8
 8005596:	fa08 f803 	lslle.w	r8, r8, r3
 800559a:	ee07 8a90 	vmov	s15, r8
 800559e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80055a2:	3901      	subs	r1, #1
 80055a4:	ee17 4a90 	vmov	r4, s15
 80055a8:	ec53 2b17 	vmov	r2, r3, d7
 80055ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80055b0:	2401      	movs	r4, #1
 80055b2:	e7a3      	b.n	80054fc <_dtoa_r+0x10c>
 80055b4:	2301      	movs	r3, #1
 80055b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055b8:	1a43      	subs	r3, r0, r1
 80055ba:	1e5a      	subs	r2, r3, #1
 80055bc:	bf45      	ittet	mi
 80055be:	f1c3 0301 	rsbmi	r3, r3, #1
 80055c2:	9304      	strmi	r3, [sp, #16]
 80055c4:	2300      	movpl	r3, #0
 80055c6:	2300      	movmi	r3, #0
 80055c8:	9205      	str	r2, [sp, #20]
 80055ca:	bf54      	ite	pl
 80055cc:	9304      	strpl	r3, [sp, #16]
 80055ce:	9305      	strmi	r3, [sp, #20]
 80055d0:	f1bb 0f00 	cmp.w	fp, #0
 80055d4:	db18      	blt.n	8005608 <_dtoa_r+0x218>
 80055d6:	9b05      	ldr	r3, [sp, #20]
 80055d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80055dc:	445b      	add	r3, fp
 80055de:	9305      	str	r3, [sp, #20]
 80055e0:	2300      	movs	r3, #0
 80055e2:	9a06      	ldr	r2, [sp, #24]
 80055e4:	2a09      	cmp	r2, #9
 80055e6:	d849      	bhi.n	800567c <_dtoa_r+0x28c>
 80055e8:	2a05      	cmp	r2, #5
 80055ea:	bfc4      	itt	gt
 80055ec:	3a04      	subgt	r2, #4
 80055ee:	9206      	strgt	r2, [sp, #24]
 80055f0:	9a06      	ldr	r2, [sp, #24]
 80055f2:	f1a2 0202 	sub.w	r2, r2, #2
 80055f6:	bfcc      	ite	gt
 80055f8:	2400      	movgt	r4, #0
 80055fa:	2401      	movle	r4, #1
 80055fc:	2a03      	cmp	r2, #3
 80055fe:	d848      	bhi.n	8005692 <_dtoa_r+0x2a2>
 8005600:	e8df f002 	tbb	[pc, r2]
 8005604:	3a2c2e0b 	.word	0x3a2c2e0b
 8005608:	9b04      	ldr	r3, [sp, #16]
 800560a:	2200      	movs	r2, #0
 800560c:	eba3 030b 	sub.w	r3, r3, fp
 8005610:	9304      	str	r3, [sp, #16]
 8005612:	9209      	str	r2, [sp, #36]	; 0x24
 8005614:	f1cb 0300 	rsb	r3, fp, #0
 8005618:	e7e3      	b.n	80055e2 <_dtoa_r+0x1f2>
 800561a:	2200      	movs	r2, #0
 800561c:	9207      	str	r2, [sp, #28]
 800561e:	9a08      	ldr	r2, [sp, #32]
 8005620:	2a00      	cmp	r2, #0
 8005622:	dc39      	bgt.n	8005698 <_dtoa_r+0x2a8>
 8005624:	f04f 0a01 	mov.w	sl, #1
 8005628:	46d1      	mov	r9, sl
 800562a:	4652      	mov	r2, sl
 800562c:	f8cd a020 	str.w	sl, [sp, #32]
 8005630:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8005632:	2100      	movs	r1, #0
 8005634:	6079      	str	r1, [r7, #4]
 8005636:	2004      	movs	r0, #4
 8005638:	f100 0c14 	add.w	ip, r0, #20
 800563c:	4594      	cmp	ip, r2
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	d92f      	bls.n	80056a2 <_dtoa_r+0x2b2>
 8005642:	4630      	mov	r0, r6
 8005644:	930d      	str	r3, [sp, #52]	; 0x34
 8005646:	f000 fd55 	bl	80060f4 <_Balloc>
 800564a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800564c:	9001      	str	r0, [sp, #4]
 800564e:	4602      	mov	r2, r0
 8005650:	2800      	cmp	r0, #0
 8005652:	d149      	bne.n	80056e8 <_dtoa_r+0x2f8>
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <_dtoa_r+0x2f4>)
 8005656:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800565a:	e6e1      	b.n	8005420 <_dtoa_r+0x30>
 800565c:	2201      	movs	r2, #1
 800565e:	e7dd      	b.n	800561c <_dtoa_r+0x22c>
 8005660:	2200      	movs	r2, #0
 8005662:	9207      	str	r2, [sp, #28]
 8005664:	9a08      	ldr	r2, [sp, #32]
 8005666:	eb0b 0a02 	add.w	sl, fp, r2
 800566a:	f10a 0901 	add.w	r9, sl, #1
 800566e:	464a      	mov	r2, r9
 8005670:	2a01      	cmp	r2, #1
 8005672:	bfb8      	it	lt
 8005674:	2201      	movlt	r2, #1
 8005676:	e7db      	b.n	8005630 <_dtoa_r+0x240>
 8005678:	2201      	movs	r2, #1
 800567a:	e7f2      	b.n	8005662 <_dtoa_r+0x272>
 800567c:	2401      	movs	r4, #1
 800567e:	2200      	movs	r2, #0
 8005680:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005684:	f04f 3aff 	mov.w	sl, #4294967295
 8005688:	2100      	movs	r1, #0
 800568a:	46d1      	mov	r9, sl
 800568c:	2212      	movs	r2, #18
 800568e:	9108      	str	r1, [sp, #32]
 8005690:	e7ce      	b.n	8005630 <_dtoa_r+0x240>
 8005692:	2201      	movs	r2, #1
 8005694:	9207      	str	r2, [sp, #28]
 8005696:	e7f5      	b.n	8005684 <_dtoa_r+0x294>
 8005698:	f8dd a020 	ldr.w	sl, [sp, #32]
 800569c:	46d1      	mov	r9, sl
 800569e:	4652      	mov	r2, sl
 80056a0:	e7c6      	b.n	8005630 <_dtoa_r+0x240>
 80056a2:	3101      	adds	r1, #1
 80056a4:	6079      	str	r1, [r7, #4]
 80056a6:	0040      	lsls	r0, r0, #1
 80056a8:	e7c6      	b.n	8005638 <_dtoa_r+0x248>
 80056aa:	bf00      	nop
 80056ac:	f3af 8000 	nop.w
 80056b0:	636f4361 	.word	0x636f4361
 80056b4:	3fd287a7 	.word	0x3fd287a7
 80056b8:	8b60c8b3 	.word	0x8b60c8b3
 80056bc:	3fc68a28 	.word	0x3fc68a28
 80056c0:	509f79fb 	.word	0x509f79fb
 80056c4:	3fd34413 	.word	0x3fd34413
 80056c8:	08007b4d 	.word	0x08007b4d
 80056cc:	08007b64 	.word	0x08007b64
 80056d0:	7ff00000 	.word	0x7ff00000
 80056d4:	08007b49 	.word	0x08007b49
 80056d8:	08007b40 	.word	0x08007b40
 80056dc:	08007b1d 	.word	0x08007b1d
 80056e0:	08007cb8 	.word	0x08007cb8
 80056e4:	08007bbf 	.word	0x08007bbf
 80056e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80056ea:	9901      	ldr	r1, [sp, #4]
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	f1b9 0f0e 	cmp.w	r9, #14
 80056f2:	d86c      	bhi.n	80057ce <_dtoa_r+0x3de>
 80056f4:	2c00      	cmp	r4, #0
 80056f6:	d06a      	beq.n	80057ce <_dtoa_r+0x3de>
 80056f8:	f1bb 0f00 	cmp.w	fp, #0
 80056fc:	f340 80a0 	ble.w	8005840 <_dtoa_r+0x450>
 8005700:	49c1      	ldr	r1, [pc, #772]	; (8005a08 <_dtoa_r+0x618>)
 8005702:	f00b 020f 	and.w	r2, fp, #15
 8005706:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800570a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800570e:	ed92 7b00 	vldr	d7, [r2]
 8005712:	ea4f 112b 	mov.w	r1, fp, asr #4
 8005716:	f000 8087 	beq.w	8005828 <_dtoa_r+0x438>
 800571a:	4abc      	ldr	r2, [pc, #752]	; (8005a0c <_dtoa_r+0x61c>)
 800571c:	ed92 6b08 	vldr	d6, [r2, #32]
 8005720:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005724:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005728:	f001 010f 	and.w	r1, r1, #15
 800572c:	2203      	movs	r2, #3
 800572e:	48b7      	ldr	r0, [pc, #732]	; (8005a0c <_dtoa_r+0x61c>)
 8005730:	2900      	cmp	r1, #0
 8005732:	d17b      	bne.n	800582c <_dtoa_r+0x43c>
 8005734:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005738:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800573c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005742:	2900      	cmp	r1, #0
 8005744:	f000 80a2 	beq.w	800588c <_dtoa_r+0x49c>
 8005748:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800574c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005750:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005758:	f140 8098 	bpl.w	800588c <_dtoa_r+0x49c>
 800575c:	f1b9 0f00 	cmp.w	r9, #0
 8005760:	f000 8094 	beq.w	800588c <_dtoa_r+0x49c>
 8005764:	f1ba 0f00 	cmp.w	sl, #0
 8005768:	dd2f      	ble.n	80057ca <_dtoa_r+0x3da>
 800576a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800576e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005772:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005776:	f10b 37ff 	add.w	r7, fp, #4294967295
 800577a:	3201      	adds	r2, #1
 800577c:	4650      	mov	r0, sl
 800577e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005782:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005786:	ee07 2a90 	vmov	s15, r2
 800578a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800578e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005792:	ee15 4a90 	vmov	r4, s11
 8005796:	ec52 1b15 	vmov	r1, r2, d5
 800579a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800579e:	2800      	cmp	r0, #0
 80057a0:	d177      	bne.n	8005892 <_dtoa_r+0x4a2>
 80057a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80057a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80057aa:	ec42 1b17 	vmov	d7, r1, r2
 80057ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b6:	f300 8263 	bgt.w	8005c80 <_dtoa_r+0x890>
 80057ba:	eeb1 7b47 	vneg.f64	d7, d7
 80057be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c6:	f100 8258 	bmi.w	8005c7a <_dtoa_r+0x88a>
 80057ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80057ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	f2c0 811d 	blt.w	8005a10 <_dtoa_r+0x620>
 80057d6:	f1bb 0f0e 	cmp.w	fp, #14
 80057da:	f300 8119 	bgt.w	8005a10 <_dtoa_r+0x620>
 80057de:	4b8a      	ldr	r3, [pc, #552]	; (8005a08 <_dtoa_r+0x618>)
 80057e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057e4:	ed93 6b00 	vldr	d6, [r3]
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f280 80b7 	bge.w	800595e <_dtoa_r+0x56e>
 80057f0:	f1b9 0f00 	cmp.w	r9, #0
 80057f4:	f300 80b3 	bgt.w	800595e <_dtoa_r+0x56e>
 80057f8:	f040 823f 	bne.w	8005c7a <_dtoa_r+0x88a>
 80057fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005800:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005804:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005810:	464c      	mov	r4, r9
 8005812:	464f      	mov	r7, r9
 8005814:	f280 8215 	bge.w	8005c42 <_dtoa_r+0x852>
 8005818:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800581c:	2331      	movs	r3, #49	; 0x31
 800581e:	f808 3b01 	strb.w	r3, [r8], #1
 8005822:	f10b 0b01 	add.w	fp, fp, #1
 8005826:	e211      	b.n	8005c4c <_dtoa_r+0x85c>
 8005828:	2202      	movs	r2, #2
 800582a:	e780      	b.n	800572e <_dtoa_r+0x33e>
 800582c:	07cc      	lsls	r4, r1, #31
 800582e:	d504      	bpl.n	800583a <_dtoa_r+0x44a>
 8005830:	ed90 6b00 	vldr	d6, [r0]
 8005834:	3201      	adds	r2, #1
 8005836:	ee27 7b06 	vmul.f64	d7, d7, d6
 800583a:	1049      	asrs	r1, r1, #1
 800583c:	3008      	adds	r0, #8
 800583e:	e777      	b.n	8005730 <_dtoa_r+0x340>
 8005840:	d022      	beq.n	8005888 <_dtoa_r+0x498>
 8005842:	f1cb 0100 	rsb	r1, fp, #0
 8005846:	4a70      	ldr	r2, [pc, #448]	; (8005a08 <_dtoa_r+0x618>)
 8005848:	f001 000f 	and.w	r0, r1, #15
 800584c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005850:	ed92 7b00 	vldr	d7, [r2]
 8005854:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005858:	ed8d 7b02 	vstr	d7, [sp, #8]
 800585c:	486b      	ldr	r0, [pc, #428]	; (8005a0c <_dtoa_r+0x61c>)
 800585e:	1109      	asrs	r1, r1, #4
 8005860:	2400      	movs	r4, #0
 8005862:	2202      	movs	r2, #2
 8005864:	b929      	cbnz	r1, 8005872 <_dtoa_r+0x482>
 8005866:	2c00      	cmp	r4, #0
 8005868:	f43f af6a 	beq.w	8005740 <_dtoa_r+0x350>
 800586c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005870:	e766      	b.n	8005740 <_dtoa_r+0x350>
 8005872:	07cf      	lsls	r7, r1, #31
 8005874:	d505      	bpl.n	8005882 <_dtoa_r+0x492>
 8005876:	ed90 6b00 	vldr	d6, [r0]
 800587a:	3201      	adds	r2, #1
 800587c:	2401      	movs	r4, #1
 800587e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005882:	1049      	asrs	r1, r1, #1
 8005884:	3008      	adds	r0, #8
 8005886:	e7ed      	b.n	8005864 <_dtoa_r+0x474>
 8005888:	2202      	movs	r2, #2
 800588a:	e759      	b.n	8005740 <_dtoa_r+0x350>
 800588c:	465f      	mov	r7, fp
 800588e:	4648      	mov	r0, r9
 8005890:	e775      	b.n	800577e <_dtoa_r+0x38e>
 8005892:	ec42 1b17 	vmov	d7, r1, r2
 8005896:	4a5c      	ldr	r2, [pc, #368]	; (8005a08 <_dtoa_r+0x618>)
 8005898:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800589c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80058a0:	9a01      	ldr	r2, [sp, #4]
 80058a2:	1814      	adds	r4, r2, r0
 80058a4:	9a07      	ldr	r2, [sp, #28]
 80058a6:	b352      	cbz	r2, 80058fe <_dtoa_r+0x50e>
 80058a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80058ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80058b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80058b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80058b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80058bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80058c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80058c4:	ee14 2a90 	vmov	r2, s9
 80058c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80058cc:	3230      	adds	r2, #48	; 0x30
 80058ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80058d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	f808 2b01 	strb.w	r2, [r8], #1
 80058de:	d439      	bmi.n	8005954 <_dtoa_r+0x564>
 80058e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80058e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80058e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ec:	d472      	bmi.n	80059d4 <_dtoa_r+0x5e4>
 80058ee:	45a0      	cmp	r8, r4
 80058f0:	f43f af6b 	beq.w	80057ca <_dtoa_r+0x3da>
 80058f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80058f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80058fc:	e7e0      	b.n	80058c0 <_dtoa_r+0x4d0>
 80058fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005902:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005906:	4621      	mov	r1, r4
 8005908:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800590c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005910:	ee14 2a90 	vmov	r2, s9
 8005914:	3230      	adds	r2, #48	; 0x30
 8005916:	f808 2b01 	strb.w	r2, [r8], #1
 800591a:	45a0      	cmp	r8, r4
 800591c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005920:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005924:	d118      	bne.n	8005958 <_dtoa_r+0x568>
 8005926:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800592a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800592e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005936:	dc4d      	bgt.n	80059d4 <_dtoa_r+0x5e4>
 8005938:	ee35 7b47 	vsub.f64	d7, d5, d7
 800593c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005944:	f57f af41 	bpl.w	80057ca <_dtoa_r+0x3da>
 8005948:	4688      	mov	r8, r1
 800594a:	3901      	subs	r1, #1
 800594c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005950:	2b30      	cmp	r3, #48	; 0x30
 8005952:	d0f9      	beq.n	8005948 <_dtoa_r+0x558>
 8005954:	46bb      	mov	fp, r7
 8005956:	e02a      	b.n	80059ae <_dtoa_r+0x5be>
 8005958:	ee26 6b03 	vmul.f64	d6, d6, d3
 800595c:	e7d6      	b.n	800590c <_dtoa_r+0x51c>
 800595e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005962:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005966:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800596a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800596e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005972:	ee15 3a10 	vmov	r3, s10
 8005976:	3330      	adds	r3, #48	; 0x30
 8005978:	f808 3b01 	strb.w	r3, [r8], #1
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	eba8 0303 	sub.w	r3, r8, r3
 8005982:	4599      	cmp	r9, r3
 8005984:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005988:	eea3 7b46 	vfms.f64	d7, d3, d6
 800598c:	d133      	bne.n	80059f6 <_dtoa_r+0x606>
 800598e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005992:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599a:	dc1a      	bgt.n	80059d2 <_dtoa_r+0x5e2>
 800599c:	eeb4 7b46 	vcmp.f64	d7, d6
 80059a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a4:	d103      	bne.n	80059ae <_dtoa_r+0x5be>
 80059a6:	ee15 3a10 	vmov	r3, s10
 80059aa:	07d9      	lsls	r1, r3, #31
 80059ac:	d411      	bmi.n	80059d2 <_dtoa_r+0x5e2>
 80059ae:	4629      	mov	r1, r5
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 fbdf 	bl	8006174 <_Bfree>
 80059b6:	2300      	movs	r3, #0
 80059b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ba:	f888 3000 	strb.w	r3, [r8]
 80059be:	f10b 0301 	add.w	r3, fp, #1
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f43f ad61 	beq.w	800548e <_dtoa_r+0x9e>
 80059cc:	f8c3 8000 	str.w	r8, [r3]
 80059d0:	e55d      	b.n	800548e <_dtoa_r+0x9e>
 80059d2:	465f      	mov	r7, fp
 80059d4:	4643      	mov	r3, r8
 80059d6:	4698      	mov	r8, r3
 80059d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059dc:	2a39      	cmp	r2, #57	; 0x39
 80059de:	d106      	bne.n	80059ee <_dtoa_r+0x5fe>
 80059e0:	9a01      	ldr	r2, [sp, #4]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d1f7      	bne.n	80059d6 <_dtoa_r+0x5e6>
 80059e6:	9901      	ldr	r1, [sp, #4]
 80059e8:	2230      	movs	r2, #48	; 0x30
 80059ea:	3701      	adds	r7, #1
 80059ec:	700a      	strb	r2, [r1, #0]
 80059ee:	781a      	ldrb	r2, [r3, #0]
 80059f0:	3201      	adds	r2, #1
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e7ae      	b.n	8005954 <_dtoa_r+0x564>
 80059f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80059fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a02:	d1b2      	bne.n	800596a <_dtoa_r+0x57a>
 8005a04:	e7d3      	b.n	80059ae <_dtoa_r+0x5be>
 8005a06:	bf00      	nop
 8005a08:	08007cb8 	.word	0x08007cb8
 8005a0c:	08007c90 	.word	0x08007c90
 8005a10:	9907      	ldr	r1, [sp, #28]
 8005a12:	2900      	cmp	r1, #0
 8005a14:	f000 80d0 	beq.w	8005bb8 <_dtoa_r+0x7c8>
 8005a18:	9906      	ldr	r1, [sp, #24]
 8005a1a:	2901      	cmp	r1, #1
 8005a1c:	f300 80b4 	bgt.w	8005b88 <_dtoa_r+0x798>
 8005a20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a22:	2900      	cmp	r1, #0
 8005a24:	f000 80ac 	beq.w	8005b80 <_dtoa_r+0x790>
 8005a28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005a30:	461c      	mov	r4, r3
 8005a32:	930a      	str	r3, [sp, #40]	; 0x28
 8005a34:	9b04      	ldr	r3, [sp, #16]
 8005a36:	4413      	add	r3, r2
 8005a38:	9304      	str	r3, [sp, #16]
 8005a3a:	9b05      	ldr	r3, [sp, #20]
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	4630      	mov	r0, r6
 8005a42:	9305      	str	r3, [sp, #20]
 8005a44:	f000 fc4e 	bl	80062e4 <__i2b>
 8005a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	f1b8 0f00 	cmp.w	r8, #0
 8005a50:	dd0d      	ble.n	8005a6e <_dtoa_r+0x67e>
 8005a52:	9a05      	ldr	r2, [sp, #20]
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	dd0a      	ble.n	8005a6e <_dtoa_r+0x67e>
 8005a58:	4542      	cmp	r2, r8
 8005a5a:	9904      	ldr	r1, [sp, #16]
 8005a5c:	bfa8      	it	ge
 8005a5e:	4642      	movge	r2, r8
 8005a60:	1a89      	subs	r1, r1, r2
 8005a62:	9104      	str	r1, [sp, #16]
 8005a64:	9905      	ldr	r1, [sp, #20]
 8005a66:	eba8 0802 	sub.w	r8, r8, r2
 8005a6a:	1a8a      	subs	r2, r1, r2
 8005a6c:	9205      	str	r2, [sp, #20]
 8005a6e:	b303      	cbz	r3, 8005ab2 <_dtoa_r+0x6c2>
 8005a70:	9a07      	ldr	r2, [sp, #28]
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	f000 80a5 	beq.w	8005bc2 <_dtoa_r+0x7d2>
 8005a78:	2c00      	cmp	r4, #0
 8005a7a:	dd13      	ble.n	8005aa4 <_dtoa_r+0x6b4>
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	4622      	mov	r2, r4
 8005a80:	4630      	mov	r0, r6
 8005a82:	930d      	str	r3, [sp, #52]	; 0x34
 8005a84:	f000 fcee 	bl	8006464 <__pow5mult>
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 fc3e 	bl	8006310 <__multiply>
 8005a94:	4629      	mov	r1, r5
 8005a96:	900a      	str	r0, [sp, #40]	; 0x28
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f000 fb6b 	bl	8006174 <_Bfree>
 8005a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aa2:	4615      	mov	r5, r2
 8005aa4:	1b1a      	subs	r2, r3, r4
 8005aa6:	d004      	beq.n	8005ab2 <_dtoa_r+0x6c2>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f000 fcda 	bl	8006464 <__pow5mult>
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f000 fc15 	bl	80062e4 <__i2b>
 8005aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	f340 8081 	ble.w	8005bc6 <_dtoa_r+0x7d6>
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 fccb 	bl	8006464 <__pow5mult>
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	dd7a      	ble.n	8005bcc <_dtoa_r+0x7dc>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8005ada:	6922      	ldr	r2, [r4, #16]
 8005adc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005ae0:	6910      	ldr	r0, [r2, #16]
 8005ae2:	f000 fbaf 	bl	8006244 <__hi0bits>
 8005ae6:	f1c0 0020 	rsb	r0, r0, #32
 8005aea:	9b05      	ldr	r3, [sp, #20]
 8005aec:	4418      	add	r0, r3
 8005aee:	f010 001f 	ands.w	r0, r0, #31
 8005af2:	f000 808c 	beq.w	8005c0e <_dtoa_r+0x81e>
 8005af6:	f1c0 0220 	rsb	r2, r0, #32
 8005afa:	2a04      	cmp	r2, #4
 8005afc:	f340 8085 	ble.w	8005c0a <_dtoa_r+0x81a>
 8005b00:	f1c0 001c 	rsb	r0, r0, #28
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	4403      	add	r3, r0
 8005b08:	9304      	str	r3, [sp, #16]
 8005b0a:	9b05      	ldr	r3, [sp, #20]
 8005b0c:	4403      	add	r3, r0
 8005b0e:	4480      	add	r8, r0
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	dd05      	ble.n	8005b24 <_dtoa_r+0x734>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f000 fcfb 	bl	8006518 <__lshift>
 8005b22:	4605      	mov	r5, r0
 8005b24:	9b05      	ldr	r3, [sp, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd05      	ble.n	8005b36 <_dtoa_r+0x746>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f000 fcf2 	bl	8006518 <__lshift>
 8005b34:	4604      	mov	r4, r0
 8005b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d06a      	beq.n	8005c12 <_dtoa_r+0x822>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 fd5a 	bl	80065f8 <__mcmp>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	da64      	bge.n	8005c12 <_dtoa_r+0x822>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f000 fb32 	bl	80061b8 <__multadd>
 8005b54:	9b07      	ldr	r3, [sp, #28]
 8005b56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8191 	beq.w	8005e84 <_dtoa_r+0xa94>
 8005b62:	4639      	mov	r1, r7
 8005b64:	2300      	movs	r3, #0
 8005b66:	220a      	movs	r2, #10
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f000 fb25 	bl	80061b8 <__multadd>
 8005b6e:	f1ba 0f00 	cmp.w	sl, #0
 8005b72:	4607      	mov	r7, r0
 8005b74:	f300 808d 	bgt.w	8005c92 <_dtoa_r+0x8a2>
 8005b78:	9b06      	ldr	r3, [sp, #24]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	dc50      	bgt.n	8005c20 <_dtoa_r+0x830>
 8005b7e:	e088      	b.n	8005c92 <_dtoa_r+0x8a2>
 8005b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005b86:	e751      	b.n	8005a2c <_dtoa_r+0x63c>
 8005b88:	f109 34ff 	add.w	r4, r9, #4294967295
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	bfbf      	itttt	lt
 8005b90:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8005b92:	1ae3      	sublt	r3, r4, r3
 8005b94:	18d2      	addlt	r2, r2, r3
 8005b96:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005b98:	bfb6      	itet	lt
 8005b9a:	4623      	movlt	r3, r4
 8005b9c:	1b1c      	subge	r4, r3, r4
 8005b9e:	2400      	movlt	r4, #0
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	bfb5      	itete	lt
 8005ba6:	9a04      	ldrlt	r2, [sp, #16]
 8005ba8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005bac:	eba2 0809 	sublt.w	r8, r2, r9
 8005bb0:	464a      	movge	r2, r9
 8005bb2:	bfb8      	it	lt
 8005bb4:	2200      	movlt	r2, #0
 8005bb6:	e73c      	b.n	8005a32 <_dtoa_r+0x642>
 8005bb8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005bbc:	9f07      	ldr	r7, [sp, #28]
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	e744      	b.n	8005a4c <_dtoa_r+0x65c>
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	e770      	b.n	8005aa8 <_dtoa_r+0x6b8>
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	dc18      	bgt.n	8005bfe <_dtoa_r+0x80e>
 8005bcc:	9b02      	ldr	r3, [sp, #8]
 8005bce:	b9b3      	cbnz	r3, 8005bfe <_dtoa_r+0x80e>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005bd6:	b9a2      	cbnz	r2, 8005c02 <_dtoa_r+0x812>
 8005bd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bdc:	0d12      	lsrs	r2, r2, #20
 8005bde:	0512      	lsls	r2, r2, #20
 8005be0:	b18a      	cbz	r2, 8005c06 <_dtoa_r+0x816>
 8005be2:	9b04      	ldr	r3, [sp, #16]
 8005be4:	3301      	adds	r3, #1
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	9b05      	ldr	r3, [sp, #20]
 8005bea:	3301      	adds	r3, #1
 8005bec:	9305      	str	r3, [sp, #20]
 8005bee:	2301      	movs	r3, #1
 8005bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f af70 	bne.w	8005ada <_dtoa_r+0x6ea>
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	e775      	b.n	8005aea <_dtoa_r+0x6fa>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e7f6      	b.n	8005bf0 <_dtoa_r+0x800>
 8005c02:	9b02      	ldr	r3, [sp, #8]
 8005c04:	e7f4      	b.n	8005bf0 <_dtoa_r+0x800>
 8005c06:	920a      	str	r2, [sp, #40]	; 0x28
 8005c08:	e7f3      	b.n	8005bf2 <_dtoa_r+0x802>
 8005c0a:	d082      	beq.n	8005b12 <_dtoa_r+0x722>
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	301c      	adds	r0, #28
 8005c10:	e778      	b.n	8005b04 <_dtoa_r+0x714>
 8005c12:	f1b9 0f00 	cmp.w	r9, #0
 8005c16:	dc37      	bgt.n	8005c88 <_dtoa_r+0x898>
 8005c18:	9b06      	ldr	r3, [sp, #24]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	dd34      	ble.n	8005c88 <_dtoa_r+0x898>
 8005c1e:	46ca      	mov	sl, r9
 8005c20:	f1ba 0f00 	cmp.w	sl, #0
 8005c24:	d10d      	bne.n	8005c42 <_dtoa_r+0x852>
 8005c26:	4621      	mov	r1, r4
 8005c28:	4653      	mov	r3, sl
 8005c2a:	2205      	movs	r2, #5
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f000 fac3 	bl	80061b8 <__multadd>
 8005c32:	4601      	mov	r1, r0
 8005c34:	4604      	mov	r4, r0
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 fcde 	bl	80065f8 <__mcmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f73f adeb 	bgt.w	8005818 <_dtoa_r+0x428>
 8005c42:	9b08      	ldr	r3, [sp, #32]
 8005c44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c48:	ea6f 0b03 	mvn.w	fp, r3
 8005c4c:	f04f 0900 	mov.w	r9, #0
 8005c50:	4621      	mov	r1, r4
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 fa8e 	bl	8006174 <_Bfree>
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	f43f aea8 	beq.w	80059ae <_dtoa_r+0x5be>
 8005c5e:	f1b9 0f00 	cmp.w	r9, #0
 8005c62:	d005      	beq.n	8005c70 <_dtoa_r+0x880>
 8005c64:	45b9      	cmp	r9, r7
 8005c66:	d003      	beq.n	8005c70 <_dtoa_r+0x880>
 8005c68:	4649      	mov	r1, r9
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 fa82 	bl	8006174 <_Bfree>
 8005c70:	4639      	mov	r1, r7
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 fa7e 	bl	8006174 <_Bfree>
 8005c78:	e699      	b.n	80059ae <_dtoa_r+0x5be>
 8005c7a:	2400      	movs	r4, #0
 8005c7c:	4627      	mov	r7, r4
 8005c7e:	e7e0      	b.n	8005c42 <_dtoa_r+0x852>
 8005c80:	46bb      	mov	fp, r7
 8005c82:	4604      	mov	r4, r0
 8005c84:	4607      	mov	r7, r0
 8005c86:	e5c7      	b.n	8005818 <_dtoa_r+0x428>
 8005c88:	9b07      	ldr	r3, [sp, #28]
 8005c8a:	46ca      	mov	sl, r9
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8100 	beq.w	8005e92 <_dtoa_r+0xaa2>
 8005c92:	f1b8 0f00 	cmp.w	r8, #0
 8005c96:	dd05      	ble.n	8005ca4 <_dtoa_r+0x8b4>
 8005c98:	4639      	mov	r1, r7
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f000 fc3b 	bl	8006518 <__lshift>
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d05d      	beq.n	8005d66 <_dtoa_r+0x976>
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4630      	mov	r0, r6
 8005cae:	f000 fa21 	bl	80060f4 <_Balloc>
 8005cb2:	4680      	mov	r8, r0
 8005cb4:	b928      	cbnz	r0, 8005cc2 <_dtoa_r+0x8d2>
 8005cb6:	4b82      	ldr	r3, [pc, #520]	; (8005ec0 <_dtoa_r+0xad0>)
 8005cb8:	4602      	mov	r2, r0
 8005cba:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cbe:	f7ff bbaf 	b.w	8005420 <_dtoa_r+0x30>
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	3202      	adds	r2, #2
 8005cc6:	0092      	lsls	r2, r2, #2
 8005cc8:	f107 010c 	add.w	r1, r7, #12
 8005ccc:	300c      	adds	r0, #12
 8005cce:	f000 fa03 	bl	80060d8 <memcpy>
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 fc1e 	bl	8006518 <__lshift>
 8005cdc:	9b01      	ldr	r3, [sp, #4]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9b01      	ldr	r3, [sp, #4]
 8005ce4:	4453      	add	r3, sl
 8005ce6:	9308      	str	r3, [sp, #32]
 8005ce8:	9b02      	ldr	r3, [sp, #8]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	46b9      	mov	r9, r7
 8005cf0:	9307      	str	r3, [sp, #28]
 8005cf2:	4607      	mov	r7, r0
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	9302      	str	r3, [sp, #8]
 8005cfe:	f7ff fae9 	bl	80052d4 <quorem>
 8005d02:	4603      	mov	r3, r0
 8005d04:	3330      	adds	r3, #48	; 0x30
 8005d06:	9005      	str	r0, [sp, #20]
 8005d08:	4649      	mov	r1, r9
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0e:	f000 fc73 	bl	80065f8 <__mcmp>
 8005d12:	463a      	mov	r2, r7
 8005d14:	4682      	mov	sl, r0
 8005d16:	4621      	mov	r1, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 fc89 	bl	8006630 <__mdiff>
 8005d1e:	68c2      	ldr	r2, [r0, #12]
 8005d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d22:	4680      	mov	r8, r0
 8005d24:	bb0a      	cbnz	r2, 8005d6a <_dtoa_r+0x97a>
 8005d26:	4601      	mov	r1, r0
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 fc65 	bl	80065f8 <__mcmp>
 8005d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d30:	4602      	mov	r2, r0
 8005d32:	4641      	mov	r1, r8
 8005d34:	4630      	mov	r0, r6
 8005d36:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005d3a:	f000 fa1b 	bl	8006174 <_Bfree>
 8005d3e:	9b06      	ldr	r3, [sp, #24]
 8005d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005d46:	ea43 0102 	orr.w	r1, r3, r2
 8005d4a:	9b07      	ldr	r3, [sp, #28]
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d50:	d10d      	bne.n	8005d6e <_dtoa_r+0x97e>
 8005d52:	2b39      	cmp	r3, #57	; 0x39
 8005d54:	d029      	beq.n	8005daa <_dtoa_r+0x9ba>
 8005d56:	f1ba 0f00 	cmp.w	sl, #0
 8005d5a:	dd01      	ble.n	8005d60 <_dtoa_r+0x970>
 8005d5c:	9b05      	ldr	r3, [sp, #20]
 8005d5e:	3331      	adds	r3, #49	; 0x31
 8005d60:	9a02      	ldr	r2, [sp, #8]
 8005d62:	7013      	strb	r3, [r2, #0]
 8005d64:	e774      	b.n	8005c50 <_dtoa_r+0x860>
 8005d66:	4638      	mov	r0, r7
 8005d68:	e7b8      	b.n	8005cdc <_dtoa_r+0x8ec>
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	e7e1      	b.n	8005d32 <_dtoa_r+0x942>
 8005d6e:	f1ba 0f00 	cmp.w	sl, #0
 8005d72:	db06      	blt.n	8005d82 <_dtoa_r+0x992>
 8005d74:	9906      	ldr	r1, [sp, #24]
 8005d76:	ea41 0a0a 	orr.w	sl, r1, sl
 8005d7a:	9907      	ldr	r1, [sp, #28]
 8005d7c:	ea5a 0101 	orrs.w	r1, sl, r1
 8005d80:	d120      	bne.n	8005dc4 <_dtoa_r+0x9d4>
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	ddec      	ble.n	8005d60 <_dtoa_r+0x970>
 8005d86:	4629      	mov	r1, r5
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	f000 fbc3 	bl	8006518 <__lshift>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4605      	mov	r5, r0
 8005d96:	f000 fc2f 	bl	80065f8 <__mcmp>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	dc02      	bgt.n	8005da6 <_dtoa_r+0x9b6>
 8005da0:	d1de      	bne.n	8005d60 <_dtoa_r+0x970>
 8005da2:	07da      	lsls	r2, r3, #31
 8005da4:	d5dc      	bpl.n	8005d60 <_dtoa_r+0x970>
 8005da6:	2b39      	cmp	r3, #57	; 0x39
 8005da8:	d1d8      	bne.n	8005d5c <_dtoa_r+0x96c>
 8005daa:	9a02      	ldr	r2, [sp, #8]
 8005dac:	2339      	movs	r3, #57	; 0x39
 8005dae:	7013      	strb	r3, [r2, #0]
 8005db0:	4643      	mov	r3, r8
 8005db2:	4698      	mov	r8, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005dba:	2a39      	cmp	r2, #57	; 0x39
 8005dbc:	d051      	beq.n	8005e62 <_dtoa_r+0xa72>
 8005dbe:	3201      	adds	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e745      	b.n	8005c50 <_dtoa_r+0x860>
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	dd03      	ble.n	8005dd0 <_dtoa_r+0x9e0>
 8005dc8:	2b39      	cmp	r3, #57	; 0x39
 8005dca:	d0ee      	beq.n	8005daa <_dtoa_r+0x9ba>
 8005dcc:	3301      	adds	r3, #1
 8005dce:	e7c7      	b.n	8005d60 <_dtoa_r+0x970>
 8005dd0:	9a04      	ldr	r2, [sp, #16]
 8005dd2:	9908      	ldr	r1, [sp, #32]
 8005dd4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005dd8:	428a      	cmp	r2, r1
 8005dda:	d02b      	beq.n	8005e34 <_dtoa_r+0xa44>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	2300      	movs	r3, #0
 8005de0:	220a      	movs	r2, #10
 8005de2:	4630      	mov	r0, r6
 8005de4:	f000 f9e8 	bl	80061b8 <__multadd>
 8005de8:	45b9      	cmp	r9, r7
 8005dea:	4605      	mov	r5, r0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	f04f 020a 	mov.w	r2, #10
 8005df4:	4649      	mov	r1, r9
 8005df6:	4630      	mov	r0, r6
 8005df8:	d107      	bne.n	8005e0a <_dtoa_r+0xa1a>
 8005dfa:	f000 f9dd 	bl	80061b8 <__multadd>
 8005dfe:	4681      	mov	r9, r0
 8005e00:	4607      	mov	r7, r0
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	3301      	adds	r3, #1
 8005e06:	9304      	str	r3, [sp, #16]
 8005e08:	e774      	b.n	8005cf4 <_dtoa_r+0x904>
 8005e0a:	f000 f9d5 	bl	80061b8 <__multadd>
 8005e0e:	4639      	mov	r1, r7
 8005e10:	4681      	mov	r9, r0
 8005e12:	2300      	movs	r3, #0
 8005e14:	220a      	movs	r2, #10
 8005e16:	4630      	mov	r0, r6
 8005e18:	f000 f9ce 	bl	80061b8 <__multadd>
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	e7f0      	b.n	8005e02 <_dtoa_r+0xa12>
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	9a01      	ldr	r2, [sp, #4]
 8005e26:	bfcc      	ite	gt
 8005e28:	46d0      	movgt	r8, sl
 8005e2a:	f04f 0801 	movle.w	r8, #1
 8005e2e:	4490      	add	r8, r2
 8005e30:	f04f 0900 	mov.w	r9, #0
 8005e34:	4629      	mov	r1, r5
 8005e36:	2201      	movs	r2, #1
 8005e38:	4630      	mov	r0, r6
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	f000 fb6c 	bl	8006518 <__lshift>
 8005e40:	4621      	mov	r1, r4
 8005e42:	4605      	mov	r5, r0
 8005e44:	f000 fbd8 	bl	80065f8 <__mcmp>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	dcb1      	bgt.n	8005db0 <_dtoa_r+0x9c0>
 8005e4c:	d102      	bne.n	8005e54 <_dtoa_r+0xa64>
 8005e4e:	9b02      	ldr	r3, [sp, #8]
 8005e50:	07db      	lsls	r3, r3, #31
 8005e52:	d4ad      	bmi.n	8005db0 <_dtoa_r+0x9c0>
 8005e54:	4643      	mov	r3, r8
 8005e56:	4698      	mov	r8, r3
 8005e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e5c:	2a30      	cmp	r2, #48	; 0x30
 8005e5e:	d0fa      	beq.n	8005e56 <_dtoa_r+0xa66>
 8005e60:	e6f6      	b.n	8005c50 <_dtoa_r+0x860>
 8005e62:	9a01      	ldr	r2, [sp, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d1a4      	bne.n	8005db2 <_dtoa_r+0x9c2>
 8005e68:	f10b 0b01 	add.w	fp, fp, #1
 8005e6c:	2331      	movs	r3, #49	; 0x31
 8005e6e:	e778      	b.n	8005d62 <_dtoa_r+0x972>
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <_dtoa_r+0xad4>)
 8005e72:	f7ff bb27 	b.w	80054c4 <_dtoa_r+0xd4>
 8005e76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f47f ab03 	bne.w	8005484 <_dtoa_r+0x94>
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <_dtoa_r+0xad8>)
 8005e80:	f7ff bb20 	b.w	80054c4 <_dtoa_r+0xd4>
 8005e84:	f1ba 0f00 	cmp.w	sl, #0
 8005e88:	dc03      	bgt.n	8005e92 <_dtoa_r+0xaa2>
 8005e8a:	9b06      	ldr	r3, [sp, #24]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	f73f aec7 	bgt.w	8005c20 <_dtoa_r+0x830>
 8005e92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005e96:	4621      	mov	r1, r4
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f7ff fa1b 	bl	80052d4 <quorem>
 8005e9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ea2:	f808 3b01 	strb.w	r3, [r8], #1
 8005ea6:	9a01      	ldr	r2, [sp, #4]
 8005ea8:	eba8 0202 	sub.w	r2, r8, r2
 8005eac:	4592      	cmp	sl, r2
 8005eae:	ddb7      	ble.n	8005e20 <_dtoa_r+0xa30>
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	220a      	movs	r2, #10
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f000 f97e 	bl	80061b8 <__multadd>
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	e7ea      	b.n	8005e96 <_dtoa_r+0xaa6>
 8005ec0:	08007bbf 	.word	0x08007bbf
 8005ec4:	08007b1c 	.word	0x08007b1c
 8005ec8:	08007b40 	.word	0x08007b40

08005ecc <std>:
 8005ecc:	2300      	movs	r3, #0
 8005ece:	b510      	push	{r4, lr}
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eda:	6083      	str	r3, [r0, #8]
 8005edc:	8181      	strh	r1, [r0, #12]
 8005ede:	6643      	str	r3, [r0, #100]	; 0x64
 8005ee0:	81c2      	strh	r2, [r0, #14]
 8005ee2:	6183      	str	r3, [r0, #24]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	305c      	adds	r0, #92	; 0x5c
 8005eea:	f7fe fd71 	bl	80049d0 <memset>
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <std+0x38>)
 8005ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <std+0x3c>)
 8005ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <std+0x40>)
 8005ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <std+0x44>)
 8005efc:	6224      	str	r4, [r4, #32]
 8005efe:	6323      	str	r3, [r4, #48]	; 0x30
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	bf00      	nop
 8005f04:	08006f75 	.word	0x08006f75
 8005f08:	08006f97 	.word	0x08006f97
 8005f0c:	08006fcf 	.word	0x08006fcf
 8005f10:	08006ff3 	.word	0x08006ff3

08005f14 <_cleanup_r>:
 8005f14:	4901      	ldr	r1, [pc, #4]	; (8005f1c <_cleanup_r+0x8>)
 8005f16:	f000 b8af 	b.w	8006078 <_fwalk_reent>
 8005f1a:	bf00      	nop
 8005f1c:	08007309 	.word	0x08007309

08005f20 <__sfmoreglue>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	2268      	movs	r2, #104	; 0x68
 8005f24:	1e4d      	subs	r5, r1, #1
 8005f26:	4355      	muls	r5, r2
 8005f28:	460e      	mov	r6, r1
 8005f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f2e:	f000 fce7 	bl	8006900 <_malloc_r>
 8005f32:	4604      	mov	r4, r0
 8005f34:	b140      	cbz	r0, 8005f48 <__sfmoreglue+0x28>
 8005f36:	2100      	movs	r1, #0
 8005f38:	e9c0 1600 	strd	r1, r6, [r0]
 8005f3c:	300c      	adds	r0, #12
 8005f3e:	60a0      	str	r0, [r4, #8]
 8005f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f44:	f7fe fd44 	bl	80049d0 <memset>
 8005f48:	4620      	mov	r0, r4
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}

08005f4c <__sfp_lock_acquire>:
 8005f4c:	4801      	ldr	r0, [pc, #4]	; (8005f54 <__sfp_lock_acquire+0x8>)
 8005f4e:	f000 b8b8 	b.w	80060c2 <__retarget_lock_acquire_recursive>
 8005f52:	bf00      	nop
 8005f54:	20000349 	.word	0x20000349

08005f58 <__sfp_lock_release>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__sfp_lock_release+0x8>)
 8005f5a:	f000 b8b3 	b.w	80060c4 <__retarget_lock_release_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20000349 	.word	0x20000349

08005f64 <__sinit_lock_acquire>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__sinit_lock_acquire+0x8>)
 8005f66:	f000 b8ac 	b.w	80060c2 <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	2000034a 	.word	0x2000034a

08005f70 <__sinit_lock_release>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__sinit_lock_release+0x8>)
 8005f72:	f000 b8a7 	b.w	80060c4 <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	2000034a 	.word	0x2000034a

08005f7c <__sinit>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	4604      	mov	r4, r0
 8005f80:	f7ff fff0 	bl	8005f64 <__sinit_lock_acquire>
 8005f84:	69a3      	ldr	r3, [r4, #24]
 8005f86:	b11b      	cbz	r3, 8005f90 <__sinit+0x14>
 8005f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f8c:	f7ff bff0 	b.w	8005f70 <__sinit_lock_release>
 8005f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f94:	6523      	str	r3, [r4, #80]	; 0x50
 8005f96:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <__sinit+0x68>)
 8005f98:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <__sinit+0x6c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	bf04      	itt	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	61a3      	streq	r3, [r4, #24]
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f000 f820 	bl	8005fec <__sfp>
 8005fac:	6060      	str	r0, [r4, #4]
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 f81c 	bl	8005fec <__sfp>
 8005fb4:	60a0      	str	r0, [r4, #8]
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f818 	bl	8005fec <__sfp>
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	60e0      	str	r0, [r4, #12]
 8005fc0:	2104      	movs	r1, #4
 8005fc2:	6860      	ldr	r0, [r4, #4]
 8005fc4:	f7ff ff82 	bl	8005ecc <std>
 8005fc8:	68a0      	ldr	r0, [r4, #8]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	2109      	movs	r1, #9
 8005fce:	f7ff ff7d 	bl	8005ecc <std>
 8005fd2:	68e0      	ldr	r0, [r4, #12]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	2112      	movs	r1, #18
 8005fd8:	f7ff ff78 	bl	8005ecc <std>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	61a3      	str	r3, [r4, #24]
 8005fe0:	e7d2      	b.n	8005f88 <__sinit+0xc>
 8005fe2:	bf00      	nop
 8005fe4:	08007b08 	.word	0x08007b08
 8005fe8:	08005f15 	.word	0x08005f15

08005fec <__sfp>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	4607      	mov	r7, r0
 8005ff0:	f7ff ffac 	bl	8005f4c <__sfp_lock_acquire>
 8005ff4:	4b1e      	ldr	r3, [pc, #120]	; (8006070 <__sfp+0x84>)
 8005ff6:	681e      	ldr	r6, [r3, #0]
 8005ff8:	69b3      	ldr	r3, [r6, #24]
 8005ffa:	b913      	cbnz	r3, 8006002 <__sfp+0x16>
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff ffbd 	bl	8005f7c <__sinit>
 8006002:	3648      	adds	r6, #72	; 0x48
 8006004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006008:	3b01      	subs	r3, #1
 800600a:	d503      	bpl.n	8006014 <__sfp+0x28>
 800600c:	6833      	ldr	r3, [r6, #0]
 800600e:	b30b      	cbz	r3, 8006054 <__sfp+0x68>
 8006010:	6836      	ldr	r6, [r6, #0]
 8006012:	e7f7      	b.n	8006004 <__sfp+0x18>
 8006014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006018:	b9d5      	cbnz	r5, 8006050 <__sfp+0x64>
 800601a:	4b16      	ldr	r3, [pc, #88]	; (8006074 <__sfp+0x88>)
 800601c:	60e3      	str	r3, [r4, #12]
 800601e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006022:	6665      	str	r5, [r4, #100]	; 0x64
 8006024:	f000 f84c 	bl	80060c0 <__retarget_lock_init_recursive>
 8006028:	f7ff ff96 	bl	8005f58 <__sfp_lock_release>
 800602c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006034:	6025      	str	r5, [r4, #0]
 8006036:	61a5      	str	r5, [r4, #24]
 8006038:	2208      	movs	r2, #8
 800603a:	4629      	mov	r1, r5
 800603c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006040:	f7fe fcc6 	bl	80049d0 <memset>
 8006044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800604c:	4620      	mov	r0, r4
 800604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006050:	3468      	adds	r4, #104	; 0x68
 8006052:	e7d9      	b.n	8006008 <__sfp+0x1c>
 8006054:	2104      	movs	r1, #4
 8006056:	4638      	mov	r0, r7
 8006058:	f7ff ff62 	bl	8005f20 <__sfmoreglue>
 800605c:	4604      	mov	r4, r0
 800605e:	6030      	str	r0, [r6, #0]
 8006060:	2800      	cmp	r0, #0
 8006062:	d1d5      	bne.n	8006010 <__sfp+0x24>
 8006064:	f7ff ff78 	bl	8005f58 <__sfp_lock_release>
 8006068:	230c      	movs	r3, #12
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	e7ee      	b.n	800604c <__sfp+0x60>
 800606e:	bf00      	nop
 8006070:	08007b08 	.word	0x08007b08
 8006074:	ffff0001 	.word	0xffff0001

08006078 <_fwalk_reent>:
 8006078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800607c:	4606      	mov	r6, r0
 800607e:	4688      	mov	r8, r1
 8006080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006084:	2700      	movs	r7, #0
 8006086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800608a:	f1b9 0901 	subs.w	r9, r9, #1
 800608e:	d505      	bpl.n	800609c <_fwalk_reent+0x24>
 8006090:	6824      	ldr	r4, [r4, #0]
 8006092:	2c00      	cmp	r4, #0
 8006094:	d1f7      	bne.n	8006086 <_fwalk_reent+0xe>
 8006096:	4638      	mov	r0, r7
 8006098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609c:	89ab      	ldrh	r3, [r5, #12]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d907      	bls.n	80060b2 <_fwalk_reent+0x3a>
 80060a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060a6:	3301      	adds	r3, #1
 80060a8:	d003      	beq.n	80060b2 <_fwalk_reent+0x3a>
 80060aa:	4629      	mov	r1, r5
 80060ac:	4630      	mov	r0, r6
 80060ae:	47c0      	blx	r8
 80060b0:	4307      	orrs	r7, r0
 80060b2:	3568      	adds	r5, #104	; 0x68
 80060b4:	e7e9      	b.n	800608a <_fwalk_reent+0x12>
	...

080060b8 <_localeconv_r>:
 80060b8:	4800      	ldr	r0, [pc, #0]	; (80060bc <_localeconv_r+0x4>)
 80060ba:	4770      	bx	lr
 80060bc:	20000164 	.word	0x20000164

080060c0 <__retarget_lock_init_recursive>:
 80060c0:	4770      	bx	lr

080060c2 <__retarget_lock_acquire_recursive>:
 80060c2:	4770      	bx	lr

080060c4 <__retarget_lock_release_recursive>:
 80060c4:	4770      	bx	lr
	...

080060c8 <malloc>:
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <malloc+0xc>)
 80060ca:	4601      	mov	r1, r0
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	f000 bc17 	b.w	8006900 <_malloc_r>
 80060d2:	bf00      	nop
 80060d4:	20000010 	.word	0x20000010

080060d8 <memcpy>:
 80060d8:	440a      	add	r2, r1
 80060da:	4291      	cmp	r1, r2
 80060dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060e0:	d100      	bne.n	80060e4 <memcpy+0xc>
 80060e2:	4770      	bx	lr
 80060e4:	b510      	push	{r4, lr}
 80060e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ee:	4291      	cmp	r1, r2
 80060f0:	d1f9      	bne.n	80060e6 <memcpy+0xe>
 80060f2:	bd10      	pop	{r4, pc}

080060f4 <_Balloc>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060f8:	4604      	mov	r4, r0
 80060fa:	460d      	mov	r5, r1
 80060fc:	b976      	cbnz	r6, 800611c <_Balloc+0x28>
 80060fe:	2010      	movs	r0, #16
 8006100:	f7ff ffe2 	bl	80060c8 <malloc>
 8006104:	4602      	mov	r2, r0
 8006106:	6260      	str	r0, [r4, #36]	; 0x24
 8006108:	b920      	cbnz	r0, 8006114 <_Balloc+0x20>
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <_Balloc+0x78>)
 800610c:	4818      	ldr	r0, [pc, #96]	; (8006170 <_Balloc+0x7c>)
 800610e:	2166      	movs	r1, #102	; 0x66
 8006110:	f001 f846 	bl	80071a0 <__assert_func>
 8006114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006118:	6006      	str	r6, [r0, #0]
 800611a:	60c6      	str	r6, [r0, #12]
 800611c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800611e:	68f3      	ldr	r3, [r6, #12]
 8006120:	b183      	cbz	r3, 8006144 <_Balloc+0x50>
 8006122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800612a:	b9b8      	cbnz	r0, 800615c <_Balloc+0x68>
 800612c:	2101      	movs	r1, #1
 800612e:	fa01 f605 	lsl.w	r6, r1, r5
 8006132:	1d72      	adds	r2, r6, #5
 8006134:	0092      	lsls	r2, r2, #2
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fb60 	bl	80067fc <_calloc_r>
 800613c:	b160      	cbz	r0, 8006158 <_Balloc+0x64>
 800613e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006142:	e00e      	b.n	8006162 <_Balloc+0x6e>
 8006144:	2221      	movs	r2, #33	; 0x21
 8006146:	2104      	movs	r1, #4
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fb57 	bl	80067fc <_calloc_r>
 800614e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006150:	60f0      	str	r0, [r6, #12]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e4      	bne.n	8006122 <_Balloc+0x2e>
 8006158:	2000      	movs	r0, #0
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	6802      	ldr	r2, [r0, #0]
 800615e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006162:	2300      	movs	r3, #0
 8006164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006168:	e7f7      	b.n	800615a <_Balloc+0x66>
 800616a:	bf00      	nop
 800616c:	08007b4d 	.word	0x08007b4d
 8006170:	08007c30 	.word	0x08007c30

08006174 <_Bfree>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006178:	4605      	mov	r5, r0
 800617a:	460c      	mov	r4, r1
 800617c:	b976      	cbnz	r6, 800619c <_Bfree+0x28>
 800617e:	2010      	movs	r0, #16
 8006180:	f7ff ffa2 	bl	80060c8 <malloc>
 8006184:	4602      	mov	r2, r0
 8006186:	6268      	str	r0, [r5, #36]	; 0x24
 8006188:	b920      	cbnz	r0, 8006194 <_Bfree+0x20>
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <_Bfree+0x3c>)
 800618c:	4809      	ldr	r0, [pc, #36]	; (80061b4 <_Bfree+0x40>)
 800618e:	218a      	movs	r1, #138	; 0x8a
 8006190:	f001 f806 	bl	80071a0 <__assert_func>
 8006194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006198:	6006      	str	r6, [r0, #0]
 800619a:	60c6      	str	r6, [r0, #12]
 800619c:	b13c      	cbz	r4, 80061ae <_Bfree+0x3a>
 800619e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a8:	6021      	str	r1, [r4, #0]
 80061aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	08007b4d 	.word	0x08007b4d
 80061b4:	08007c30 	.word	0x08007c30

080061b8 <__multadd>:
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	690d      	ldr	r5, [r1, #16]
 80061be:	4607      	mov	r7, r0
 80061c0:	460c      	mov	r4, r1
 80061c2:	461e      	mov	r6, r3
 80061c4:	f101 0c14 	add.w	ip, r1, #20
 80061c8:	2000      	movs	r0, #0
 80061ca:	f8dc 3000 	ldr.w	r3, [ip]
 80061ce:	b299      	uxth	r1, r3
 80061d0:	fb02 6101 	mla	r1, r2, r1, r6
 80061d4:	0c1e      	lsrs	r6, r3, #16
 80061d6:	0c0b      	lsrs	r3, r1, #16
 80061d8:	fb02 3306 	mla	r3, r2, r6, r3
 80061dc:	b289      	uxth	r1, r1
 80061de:	3001      	adds	r0, #1
 80061e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061e4:	4285      	cmp	r5, r0
 80061e6:	f84c 1b04 	str.w	r1, [ip], #4
 80061ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ee:	dcec      	bgt.n	80061ca <__multadd+0x12>
 80061f0:	b30e      	cbz	r6, 8006236 <__multadd+0x7e>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dc19      	bgt.n	800622c <__multadd+0x74>
 80061f8:	6861      	ldr	r1, [r4, #4]
 80061fa:	4638      	mov	r0, r7
 80061fc:	3101      	adds	r1, #1
 80061fe:	f7ff ff79 	bl	80060f4 <_Balloc>
 8006202:	4680      	mov	r8, r0
 8006204:	b928      	cbnz	r0, 8006212 <__multadd+0x5a>
 8006206:	4602      	mov	r2, r0
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <__multadd+0x84>)
 800620a:	480d      	ldr	r0, [pc, #52]	; (8006240 <__multadd+0x88>)
 800620c:	21b5      	movs	r1, #181	; 0xb5
 800620e:	f000 ffc7 	bl	80071a0 <__assert_func>
 8006212:	6922      	ldr	r2, [r4, #16]
 8006214:	3202      	adds	r2, #2
 8006216:	f104 010c 	add.w	r1, r4, #12
 800621a:	0092      	lsls	r2, r2, #2
 800621c:	300c      	adds	r0, #12
 800621e:	f7ff ff5b 	bl	80060d8 <memcpy>
 8006222:	4621      	mov	r1, r4
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ffa5 	bl	8006174 <_Bfree>
 800622a:	4644      	mov	r4, r8
 800622c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006230:	3501      	adds	r5, #1
 8006232:	615e      	str	r6, [r3, #20]
 8006234:	6125      	str	r5, [r4, #16]
 8006236:	4620      	mov	r0, r4
 8006238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800623c:	08007bbf 	.word	0x08007bbf
 8006240:	08007c30 	.word	0x08007c30

08006244 <__hi0bits>:
 8006244:	0c03      	lsrs	r3, r0, #16
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	b9d3      	cbnz	r3, 8006280 <__hi0bits+0x3c>
 800624a:	0400      	lsls	r0, r0, #16
 800624c:	2310      	movs	r3, #16
 800624e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006252:	bf04      	itt	eq
 8006254:	0200      	lsleq	r0, r0, #8
 8006256:	3308      	addeq	r3, #8
 8006258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800625c:	bf04      	itt	eq
 800625e:	0100      	lsleq	r0, r0, #4
 8006260:	3304      	addeq	r3, #4
 8006262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006266:	bf04      	itt	eq
 8006268:	0080      	lsleq	r0, r0, #2
 800626a:	3302      	addeq	r3, #2
 800626c:	2800      	cmp	r0, #0
 800626e:	db05      	blt.n	800627c <__hi0bits+0x38>
 8006270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006274:	f103 0301 	add.w	r3, r3, #1
 8006278:	bf08      	it	eq
 800627a:	2320      	moveq	r3, #32
 800627c:	4618      	mov	r0, r3
 800627e:	4770      	bx	lr
 8006280:	2300      	movs	r3, #0
 8006282:	e7e4      	b.n	800624e <__hi0bits+0xa>

08006284 <__lo0bits>:
 8006284:	6803      	ldr	r3, [r0, #0]
 8006286:	f013 0207 	ands.w	r2, r3, #7
 800628a:	4601      	mov	r1, r0
 800628c:	d00b      	beq.n	80062a6 <__lo0bits+0x22>
 800628e:	07da      	lsls	r2, r3, #31
 8006290:	d423      	bmi.n	80062da <__lo0bits+0x56>
 8006292:	0798      	lsls	r0, r3, #30
 8006294:	bf49      	itett	mi
 8006296:	085b      	lsrmi	r3, r3, #1
 8006298:	089b      	lsrpl	r3, r3, #2
 800629a:	2001      	movmi	r0, #1
 800629c:	600b      	strmi	r3, [r1, #0]
 800629e:	bf5c      	itt	pl
 80062a0:	600b      	strpl	r3, [r1, #0]
 80062a2:	2002      	movpl	r0, #2
 80062a4:	4770      	bx	lr
 80062a6:	b298      	uxth	r0, r3
 80062a8:	b9a8      	cbnz	r0, 80062d6 <__lo0bits+0x52>
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	2010      	movs	r0, #16
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	b90a      	cbnz	r2, 80062b6 <__lo0bits+0x32>
 80062b2:	3008      	adds	r0, #8
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	071a      	lsls	r2, r3, #28
 80062b8:	bf04      	itt	eq
 80062ba:	091b      	lsreq	r3, r3, #4
 80062bc:	3004      	addeq	r0, #4
 80062be:	079a      	lsls	r2, r3, #30
 80062c0:	bf04      	itt	eq
 80062c2:	089b      	lsreq	r3, r3, #2
 80062c4:	3002      	addeq	r0, #2
 80062c6:	07da      	lsls	r2, r3, #31
 80062c8:	d403      	bmi.n	80062d2 <__lo0bits+0x4e>
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	f100 0001 	add.w	r0, r0, #1
 80062d0:	d005      	beq.n	80062de <__lo0bits+0x5a>
 80062d2:	600b      	str	r3, [r1, #0]
 80062d4:	4770      	bx	lr
 80062d6:	4610      	mov	r0, r2
 80062d8:	e7e9      	b.n	80062ae <__lo0bits+0x2a>
 80062da:	2000      	movs	r0, #0
 80062dc:	4770      	bx	lr
 80062de:	2020      	movs	r0, #32
 80062e0:	4770      	bx	lr
	...

080062e4 <__i2b>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	460c      	mov	r4, r1
 80062e8:	2101      	movs	r1, #1
 80062ea:	f7ff ff03 	bl	80060f4 <_Balloc>
 80062ee:	4602      	mov	r2, r0
 80062f0:	b928      	cbnz	r0, 80062fe <__i2b+0x1a>
 80062f2:	4b05      	ldr	r3, [pc, #20]	; (8006308 <__i2b+0x24>)
 80062f4:	4805      	ldr	r0, [pc, #20]	; (800630c <__i2b+0x28>)
 80062f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062fa:	f000 ff51 	bl	80071a0 <__assert_func>
 80062fe:	2301      	movs	r3, #1
 8006300:	6144      	str	r4, [r0, #20]
 8006302:	6103      	str	r3, [r0, #16]
 8006304:	bd10      	pop	{r4, pc}
 8006306:	bf00      	nop
 8006308:	08007bbf 	.word	0x08007bbf
 800630c:	08007c30 	.word	0x08007c30

08006310 <__multiply>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	4691      	mov	r9, r2
 8006316:	690a      	ldr	r2, [r1, #16]
 8006318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800631c:	429a      	cmp	r2, r3
 800631e:	bfb8      	it	lt
 8006320:	460b      	movlt	r3, r1
 8006322:	460c      	mov	r4, r1
 8006324:	bfbc      	itt	lt
 8006326:	464c      	movlt	r4, r9
 8006328:	4699      	movlt	r9, r3
 800632a:	6927      	ldr	r7, [r4, #16]
 800632c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006330:	68a3      	ldr	r3, [r4, #8]
 8006332:	6861      	ldr	r1, [r4, #4]
 8006334:	eb07 060a 	add.w	r6, r7, sl
 8006338:	42b3      	cmp	r3, r6
 800633a:	b085      	sub	sp, #20
 800633c:	bfb8      	it	lt
 800633e:	3101      	addlt	r1, #1
 8006340:	f7ff fed8 	bl	80060f4 <_Balloc>
 8006344:	b930      	cbnz	r0, 8006354 <__multiply+0x44>
 8006346:	4602      	mov	r2, r0
 8006348:	4b44      	ldr	r3, [pc, #272]	; (800645c <__multiply+0x14c>)
 800634a:	4845      	ldr	r0, [pc, #276]	; (8006460 <__multiply+0x150>)
 800634c:	f240 115d 	movw	r1, #349	; 0x15d
 8006350:	f000 ff26 	bl	80071a0 <__assert_func>
 8006354:	f100 0514 	add.w	r5, r0, #20
 8006358:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800635c:	462b      	mov	r3, r5
 800635e:	2200      	movs	r2, #0
 8006360:	4543      	cmp	r3, r8
 8006362:	d321      	bcc.n	80063a8 <__multiply+0x98>
 8006364:	f104 0314 	add.w	r3, r4, #20
 8006368:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800636c:	f109 0314 	add.w	r3, r9, #20
 8006370:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006374:	9202      	str	r2, [sp, #8]
 8006376:	1b3a      	subs	r2, r7, r4
 8006378:	3a15      	subs	r2, #21
 800637a:	f022 0203 	bic.w	r2, r2, #3
 800637e:	3204      	adds	r2, #4
 8006380:	f104 0115 	add.w	r1, r4, #21
 8006384:	428f      	cmp	r7, r1
 8006386:	bf38      	it	cc
 8006388:	2204      	movcc	r2, #4
 800638a:	9201      	str	r2, [sp, #4]
 800638c:	9a02      	ldr	r2, [sp, #8]
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d80c      	bhi.n	80063ae <__multiply+0x9e>
 8006394:	2e00      	cmp	r6, #0
 8006396:	dd03      	ble.n	80063a0 <__multiply+0x90>
 8006398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05a      	beq.n	8006456 <__multiply+0x146>
 80063a0:	6106      	str	r6, [r0, #16]
 80063a2:	b005      	add	sp, #20
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a8:	f843 2b04 	str.w	r2, [r3], #4
 80063ac:	e7d8      	b.n	8006360 <__multiply+0x50>
 80063ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80063b2:	f1ba 0f00 	cmp.w	sl, #0
 80063b6:	d024      	beq.n	8006402 <__multiply+0xf2>
 80063b8:	f104 0e14 	add.w	lr, r4, #20
 80063bc:	46a9      	mov	r9, r5
 80063be:	f04f 0c00 	mov.w	ip, #0
 80063c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063c6:	f8d9 1000 	ldr.w	r1, [r9]
 80063ca:	fa1f fb82 	uxth.w	fp, r2
 80063ce:	b289      	uxth	r1, r1
 80063d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80063d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063d8:	f8d9 2000 	ldr.w	r2, [r9]
 80063dc:	4461      	add	r1, ip
 80063de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80063e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063ea:	b289      	uxth	r1, r1
 80063ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063f0:	4577      	cmp	r7, lr
 80063f2:	f849 1b04 	str.w	r1, [r9], #4
 80063f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063fa:	d8e2      	bhi.n	80063c2 <__multiply+0xb2>
 80063fc:	9a01      	ldr	r2, [sp, #4]
 80063fe:	f845 c002 	str.w	ip, [r5, r2]
 8006402:	9a03      	ldr	r2, [sp, #12]
 8006404:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006408:	3304      	adds	r3, #4
 800640a:	f1b9 0f00 	cmp.w	r9, #0
 800640e:	d020      	beq.n	8006452 <__multiply+0x142>
 8006410:	6829      	ldr	r1, [r5, #0]
 8006412:	f104 0c14 	add.w	ip, r4, #20
 8006416:	46ae      	mov	lr, r5
 8006418:	f04f 0a00 	mov.w	sl, #0
 800641c:	f8bc b000 	ldrh.w	fp, [ip]
 8006420:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006424:	fb09 220b 	mla	r2, r9, fp, r2
 8006428:	4492      	add	sl, r2
 800642a:	b289      	uxth	r1, r1
 800642c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006430:	f84e 1b04 	str.w	r1, [lr], #4
 8006434:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006438:	f8be 1000 	ldrh.w	r1, [lr]
 800643c:	0c12      	lsrs	r2, r2, #16
 800643e:	fb09 1102 	mla	r1, r9, r2, r1
 8006442:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006446:	4567      	cmp	r7, ip
 8006448:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800644c:	d8e6      	bhi.n	800641c <__multiply+0x10c>
 800644e:	9a01      	ldr	r2, [sp, #4]
 8006450:	50a9      	str	r1, [r5, r2]
 8006452:	3504      	adds	r5, #4
 8006454:	e79a      	b.n	800638c <__multiply+0x7c>
 8006456:	3e01      	subs	r6, #1
 8006458:	e79c      	b.n	8006394 <__multiply+0x84>
 800645a:	bf00      	nop
 800645c:	08007bbf 	.word	0x08007bbf
 8006460:	08007c30 	.word	0x08007c30

08006464 <__pow5mult>:
 8006464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006468:	4615      	mov	r5, r2
 800646a:	f012 0203 	ands.w	r2, r2, #3
 800646e:	4606      	mov	r6, r0
 8006470:	460f      	mov	r7, r1
 8006472:	d007      	beq.n	8006484 <__pow5mult+0x20>
 8006474:	4c25      	ldr	r4, [pc, #148]	; (800650c <__pow5mult+0xa8>)
 8006476:	3a01      	subs	r2, #1
 8006478:	2300      	movs	r3, #0
 800647a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800647e:	f7ff fe9b 	bl	80061b8 <__multadd>
 8006482:	4607      	mov	r7, r0
 8006484:	10ad      	asrs	r5, r5, #2
 8006486:	d03d      	beq.n	8006504 <__pow5mult+0xa0>
 8006488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800648a:	b97c      	cbnz	r4, 80064ac <__pow5mult+0x48>
 800648c:	2010      	movs	r0, #16
 800648e:	f7ff fe1b 	bl	80060c8 <malloc>
 8006492:	4602      	mov	r2, r0
 8006494:	6270      	str	r0, [r6, #36]	; 0x24
 8006496:	b928      	cbnz	r0, 80064a4 <__pow5mult+0x40>
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <__pow5mult+0xac>)
 800649a:	481e      	ldr	r0, [pc, #120]	; (8006514 <__pow5mult+0xb0>)
 800649c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064a0:	f000 fe7e 	bl	80071a0 <__assert_func>
 80064a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a8:	6004      	str	r4, [r0, #0]
 80064aa:	60c4      	str	r4, [r0, #12]
 80064ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b4:	b94c      	cbnz	r4, 80064ca <__pow5mult+0x66>
 80064b6:	f240 2171 	movw	r1, #625	; 0x271
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff ff12 	bl	80062e4 <__i2b>
 80064c0:	2300      	movs	r3, #0
 80064c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c6:	4604      	mov	r4, r0
 80064c8:	6003      	str	r3, [r0, #0]
 80064ca:	f04f 0900 	mov.w	r9, #0
 80064ce:	07eb      	lsls	r3, r5, #31
 80064d0:	d50a      	bpl.n	80064e8 <__pow5mult+0x84>
 80064d2:	4639      	mov	r1, r7
 80064d4:	4622      	mov	r2, r4
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff ff1a 	bl	8006310 <__multiply>
 80064dc:	4639      	mov	r1, r7
 80064de:	4680      	mov	r8, r0
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff fe47 	bl	8006174 <_Bfree>
 80064e6:	4647      	mov	r7, r8
 80064e8:	106d      	asrs	r5, r5, #1
 80064ea:	d00b      	beq.n	8006504 <__pow5mult+0xa0>
 80064ec:	6820      	ldr	r0, [r4, #0]
 80064ee:	b938      	cbnz	r0, 8006500 <__pow5mult+0x9c>
 80064f0:	4622      	mov	r2, r4
 80064f2:	4621      	mov	r1, r4
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7ff ff0b 	bl	8006310 <__multiply>
 80064fa:	6020      	str	r0, [r4, #0]
 80064fc:	f8c0 9000 	str.w	r9, [r0]
 8006500:	4604      	mov	r4, r0
 8006502:	e7e4      	b.n	80064ce <__pow5mult+0x6a>
 8006504:	4638      	mov	r0, r7
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	bf00      	nop
 800650c:	08007d80 	.word	0x08007d80
 8006510:	08007b4d 	.word	0x08007b4d
 8006514:	08007c30 	.word	0x08007c30

08006518 <__lshift>:
 8006518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	460c      	mov	r4, r1
 800651e:	6849      	ldr	r1, [r1, #4]
 8006520:	6923      	ldr	r3, [r4, #16]
 8006522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	4607      	mov	r7, r0
 800652a:	4691      	mov	r9, r2
 800652c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006530:	f108 0601 	add.w	r6, r8, #1
 8006534:	42b3      	cmp	r3, r6
 8006536:	db0b      	blt.n	8006550 <__lshift+0x38>
 8006538:	4638      	mov	r0, r7
 800653a:	f7ff fddb 	bl	80060f4 <_Balloc>
 800653e:	4605      	mov	r5, r0
 8006540:	b948      	cbnz	r0, 8006556 <__lshift+0x3e>
 8006542:	4602      	mov	r2, r0
 8006544:	4b2a      	ldr	r3, [pc, #168]	; (80065f0 <__lshift+0xd8>)
 8006546:	482b      	ldr	r0, [pc, #172]	; (80065f4 <__lshift+0xdc>)
 8006548:	f240 11d9 	movw	r1, #473	; 0x1d9
 800654c:	f000 fe28 	bl	80071a0 <__assert_func>
 8006550:	3101      	adds	r1, #1
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	e7ee      	b.n	8006534 <__lshift+0x1c>
 8006556:	2300      	movs	r3, #0
 8006558:	f100 0114 	add.w	r1, r0, #20
 800655c:	f100 0210 	add.w	r2, r0, #16
 8006560:	4618      	mov	r0, r3
 8006562:	4553      	cmp	r3, sl
 8006564:	db37      	blt.n	80065d6 <__lshift+0xbe>
 8006566:	6920      	ldr	r0, [r4, #16]
 8006568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800656c:	f104 0314 	add.w	r3, r4, #20
 8006570:	f019 091f 	ands.w	r9, r9, #31
 8006574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006578:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800657c:	d02f      	beq.n	80065de <__lshift+0xc6>
 800657e:	f1c9 0e20 	rsb	lr, r9, #32
 8006582:	468a      	mov	sl, r1
 8006584:	f04f 0c00 	mov.w	ip, #0
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	fa02 f209 	lsl.w	r2, r2, r9
 800658e:	ea42 020c 	orr.w	r2, r2, ip
 8006592:	f84a 2b04 	str.w	r2, [sl], #4
 8006596:	f853 2b04 	ldr.w	r2, [r3], #4
 800659a:	4298      	cmp	r0, r3
 800659c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80065a0:	d8f2      	bhi.n	8006588 <__lshift+0x70>
 80065a2:	1b03      	subs	r3, r0, r4
 80065a4:	3b15      	subs	r3, #21
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	3304      	adds	r3, #4
 80065ac:	f104 0215 	add.w	r2, r4, #21
 80065b0:	4290      	cmp	r0, r2
 80065b2:	bf38      	it	cc
 80065b4:	2304      	movcc	r3, #4
 80065b6:	f841 c003 	str.w	ip, [r1, r3]
 80065ba:	f1bc 0f00 	cmp.w	ip, #0
 80065be:	d001      	beq.n	80065c4 <__lshift+0xac>
 80065c0:	f108 0602 	add.w	r6, r8, #2
 80065c4:	3e01      	subs	r6, #1
 80065c6:	4638      	mov	r0, r7
 80065c8:	612e      	str	r6, [r5, #16]
 80065ca:	4621      	mov	r1, r4
 80065cc:	f7ff fdd2 	bl	8006174 <_Bfree>
 80065d0:	4628      	mov	r0, r5
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80065da:	3301      	adds	r3, #1
 80065dc:	e7c1      	b.n	8006562 <__lshift+0x4a>
 80065de:	3904      	subs	r1, #4
 80065e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80065e8:	4298      	cmp	r0, r3
 80065ea:	d8f9      	bhi.n	80065e0 <__lshift+0xc8>
 80065ec:	e7ea      	b.n	80065c4 <__lshift+0xac>
 80065ee:	bf00      	nop
 80065f0:	08007bbf 	.word	0x08007bbf
 80065f4:	08007c30 	.word	0x08007c30

080065f8 <__mcmp>:
 80065f8:	b530      	push	{r4, r5, lr}
 80065fa:	6902      	ldr	r2, [r0, #16]
 80065fc:	690c      	ldr	r4, [r1, #16]
 80065fe:	1b12      	subs	r2, r2, r4
 8006600:	d10e      	bne.n	8006620 <__mcmp+0x28>
 8006602:	f100 0314 	add.w	r3, r0, #20
 8006606:	3114      	adds	r1, #20
 8006608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800660c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006618:	42a5      	cmp	r5, r4
 800661a:	d003      	beq.n	8006624 <__mcmp+0x2c>
 800661c:	d305      	bcc.n	800662a <__mcmp+0x32>
 800661e:	2201      	movs	r2, #1
 8006620:	4610      	mov	r0, r2
 8006622:	bd30      	pop	{r4, r5, pc}
 8006624:	4283      	cmp	r3, r0
 8006626:	d3f3      	bcc.n	8006610 <__mcmp+0x18>
 8006628:	e7fa      	b.n	8006620 <__mcmp+0x28>
 800662a:	f04f 32ff 	mov.w	r2, #4294967295
 800662e:	e7f7      	b.n	8006620 <__mcmp+0x28>

08006630 <__mdiff>:
 8006630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	4606      	mov	r6, r0
 8006638:	4611      	mov	r1, r2
 800663a:	4620      	mov	r0, r4
 800663c:	4690      	mov	r8, r2
 800663e:	f7ff ffdb 	bl	80065f8 <__mcmp>
 8006642:	1e05      	subs	r5, r0, #0
 8006644:	d110      	bne.n	8006668 <__mdiff+0x38>
 8006646:	4629      	mov	r1, r5
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff fd53 	bl	80060f4 <_Balloc>
 800664e:	b930      	cbnz	r0, 800665e <__mdiff+0x2e>
 8006650:	4b3a      	ldr	r3, [pc, #232]	; (800673c <__mdiff+0x10c>)
 8006652:	4602      	mov	r2, r0
 8006654:	f240 2132 	movw	r1, #562	; 0x232
 8006658:	4839      	ldr	r0, [pc, #228]	; (8006740 <__mdiff+0x110>)
 800665a:	f000 fda1 	bl	80071a0 <__assert_func>
 800665e:	2301      	movs	r3, #1
 8006660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	bfa4      	itt	ge
 800666a:	4643      	movge	r3, r8
 800666c:	46a0      	movge	r8, r4
 800666e:	4630      	mov	r0, r6
 8006670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006674:	bfa6      	itte	ge
 8006676:	461c      	movge	r4, r3
 8006678:	2500      	movge	r5, #0
 800667a:	2501      	movlt	r5, #1
 800667c:	f7ff fd3a 	bl	80060f4 <_Balloc>
 8006680:	b920      	cbnz	r0, 800668c <__mdiff+0x5c>
 8006682:	4b2e      	ldr	r3, [pc, #184]	; (800673c <__mdiff+0x10c>)
 8006684:	4602      	mov	r2, r0
 8006686:	f44f 7110 	mov.w	r1, #576	; 0x240
 800668a:	e7e5      	b.n	8006658 <__mdiff+0x28>
 800668c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006690:	6926      	ldr	r6, [r4, #16]
 8006692:	60c5      	str	r5, [r0, #12]
 8006694:	f104 0914 	add.w	r9, r4, #20
 8006698:	f108 0514 	add.w	r5, r8, #20
 800669c:	f100 0e14 	add.w	lr, r0, #20
 80066a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066a8:	f108 0210 	add.w	r2, r8, #16
 80066ac:	46f2      	mov	sl, lr
 80066ae:	2100      	movs	r1, #0
 80066b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80066b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066b8:	fa1f f883 	uxth.w	r8, r3
 80066bc:	fa11 f18b 	uxtah	r1, r1, fp
 80066c0:	0c1b      	lsrs	r3, r3, #16
 80066c2:	eba1 0808 	sub.w	r8, r1, r8
 80066c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066ce:	fa1f f888 	uxth.w	r8, r8
 80066d2:	1419      	asrs	r1, r3, #16
 80066d4:	454e      	cmp	r6, r9
 80066d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066da:	f84a 3b04 	str.w	r3, [sl], #4
 80066de:	d8e7      	bhi.n	80066b0 <__mdiff+0x80>
 80066e0:	1b33      	subs	r3, r6, r4
 80066e2:	3b15      	subs	r3, #21
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	3304      	adds	r3, #4
 80066ea:	3415      	adds	r4, #21
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	bf38      	it	cc
 80066f0:	2304      	movcc	r3, #4
 80066f2:	441d      	add	r5, r3
 80066f4:	4473      	add	r3, lr
 80066f6:	469e      	mov	lr, r3
 80066f8:	462e      	mov	r6, r5
 80066fa:	4566      	cmp	r6, ip
 80066fc:	d30e      	bcc.n	800671c <__mdiff+0xec>
 80066fe:	f10c 0203 	add.w	r2, ip, #3
 8006702:	1b52      	subs	r2, r2, r5
 8006704:	f022 0203 	bic.w	r2, r2, #3
 8006708:	3d03      	subs	r5, #3
 800670a:	45ac      	cmp	ip, r5
 800670c:	bf38      	it	cc
 800670e:	2200      	movcc	r2, #0
 8006710:	441a      	add	r2, r3
 8006712:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006716:	b17b      	cbz	r3, 8006738 <__mdiff+0x108>
 8006718:	6107      	str	r7, [r0, #16]
 800671a:	e7a3      	b.n	8006664 <__mdiff+0x34>
 800671c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006720:	fa11 f288 	uxtah	r2, r1, r8
 8006724:	1414      	asrs	r4, r2, #16
 8006726:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800672a:	b292      	uxth	r2, r2
 800672c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006730:	f84e 2b04 	str.w	r2, [lr], #4
 8006734:	1421      	asrs	r1, r4, #16
 8006736:	e7e0      	b.n	80066fa <__mdiff+0xca>
 8006738:	3f01      	subs	r7, #1
 800673a:	e7ea      	b.n	8006712 <__mdiff+0xe2>
 800673c:	08007bbf 	.word	0x08007bbf
 8006740:	08007c30 	.word	0x08007c30

08006744 <__d2b>:
 8006744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006748:	4689      	mov	r9, r1
 800674a:	2101      	movs	r1, #1
 800674c:	ec57 6b10 	vmov	r6, r7, d0
 8006750:	4690      	mov	r8, r2
 8006752:	f7ff fccf 	bl	80060f4 <_Balloc>
 8006756:	4604      	mov	r4, r0
 8006758:	b930      	cbnz	r0, 8006768 <__d2b+0x24>
 800675a:	4602      	mov	r2, r0
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <__d2b+0xb0>)
 800675e:	4826      	ldr	r0, [pc, #152]	; (80067f8 <__d2b+0xb4>)
 8006760:	f240 310a 	movw	r1, #778	; 0x30a
 8006764:	f000 fd1c 	bl	80071a0 <__assert_func>
 8006768:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800676c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006770:	bb35      	cbnz	r5, 80067c0 <__d2b+0x7c>
 8006772:	2e00      	cmp	r6, #0
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	d028      	beq.n	80067ca <__d2b+0x86>
 8006778:	4668      	mov	r0, sp
 800677a:	9600      	str	r6, [sp, #0]
 800677c:	f7ff fd82 	bl	8006284 <__lo0bits>
 8006780:	9900      	ldr	r1, [sp, #0]
 8006782:	b300      	cbz	r0, 80067c6 <__d2b+0x82>
 8006784:	9a01      	ldr	r2, [sp, #4]
 8006786:	f1c0 0320 	rsb	r3, r0, #32
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	430b      	orrs	r3, r1
 8006790:	40c2      	lsrs	r2, r0
 8006792:	6163      	str	r3, [r4, #20]
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	61a3      	str	r3, [r4, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	bf14      	ite	ne
 800679e:	2202      	movne	r2, #2
 80067a0:	2201      	moveq	r2, #1
 80067a2:	6122      	str	r2, [r4, #16]
 80067a4:	b1d5      	cbz	r5, 80067dc <__d2b+0x98>
 80067a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067aa:	4405      	add	r5, r0
 80067ac:	f8c9 5000 	str.w	r5, [r9]
 80067b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067b4:	f8c8 0000 	str.w	r0, [r8]
 80067b8:	4620      	mov	r0, r4
 80067ba:	b003      	add	sp, #12
 80067bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c4:	e7d5      	b.n	8006772 <__d2b+0x2e>
 80067c6:	6161      	str	r1, [r4, #20]
 80067c8:	e7e5      	b.n	8006796 <__d2b+0x52>
 80067ca:	a801      	add	r0, sp, #4
 80067cc:	f7ff fd5a 	bl	8006284 <__lo0bits>
 80067d0:	9b01      	ldr	r3, [sp, #4]
 80067d2:	6163      	str	r3, [r4, #20]
 80067d4:	2201      	movs	r2, #1
 80067d6:	6122      	str	r2, [r4, #16]
 80067d8:	3020      	adds	r0, #32
 80067da:	e7e3      	b.n	80067a4 <__d2b+0x60>
 80067dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067e4:	f8c9 0000 	str.w	r0, [r9]
 80067e8:	6918      	ldr	r0, [r3, #16]
 80067ea:	f7ff fd2b 	bl	8006244 <__hi0bits>
 80067ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067f2:	e7df      	b.n	80067b4 <__d2b+0x70>
 80067f4:	08007bbf 	.word	0x08007bbf
 80067f8:	08007c30 	.word	0x08007c30

080067fc <_calloc_r>:
 80067fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067fe:	fba1 2402 	umull	r2, r4, r1, r2
 8006802:	b94c      	cbnz	r4, 8006818 <_calloc_r+0x1c>
 8006804:	4611      	mov	r1, r2
 8006806:	9201      	str	r2, [sp, #4]
 8006808:	f000 f87a 	bl	8006900 <_malloc_r>
 800680c:	9a01      	ldr	r2, [sp, #4]
 800680e:	4605      	mov	r5, r0
 8006810:	b930      	cbnz	r0, 8006820 <_calloc_r+0x24>
 8006812:	4628      	mov	r0, r5
 8006814:	b003      	add	sp, #12
 8006816:	bd30      	pop	{r4, r5, pc}
 8006818:	220c      	movs	r2, #12
 800681a:	6002      	str	r2, [r0, #0]
 800681c:	2500      	movs	r5, #0
 800681e:	e7f8      	b.n	8006812 <_calloc_r+0x16>
 8006820:	4621      	mov	r1, r4
 8006822:	f7fe f8d5 	bl	80049d0 <memset>
 8006826:	e7f4      	b.n	8006812 <_calloc_r+0x16>

08006828 <_free_r>:
 8006828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682a:	2900      	cmp	r1, #0
 800682c:	d044      	beq.n	80068b8 <_free_r+0x90>
 800682e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f1a1 0404 	sub.w	r4, r1, #4
 800683a:	bfb8      	it	lt
 800683c:	18e4      	addlt	r4, r4, r3
 800683e:	f000 fe55 	bl	80074ec <__malloc_lock>
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <_free_r+0x94>)
 8006844:	9801      	ldr	r0, [sp, #4]
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	b933      	cbnz	r3, 8006858 <_free_r+0x30>
 800684a:	6063      	str	r3, [r4, #4]
 800684c:	6014      	str	r4, [r2, #0]
 800684e:	b003      	add	sp, #12
 8006850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006854:	f000 be50 	b.w	80074f8 <__malloc_unlock>
 8006858:	42a3      	cmp	r3, r4
 800685a:	d908      	bls.n	800686e <_free_r+0x46>
 800685c:	6825      	ldr	r5, [r4, #0]
 800685e:	1961      	adds	r1, r4, r5
 8006860:	428b      	cmp	r3, r1
 8006862:	bf01      	itttt	eq
 8006864:	6819      	ldreq	r1, [r3, #0]
 8006866:	685b      	ldreq	r3, [r3, #4]
 8006868:	1949      	addeq	r1, r1, r5
 800686a:	6021      	streq	r1, [r4, #0]
 800686c:	e7ed      	b.n	800684a <_free_r+0x22>
 800686e:	461a      	mov	r2, r3
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	b10b      	cbz	r3, 8006878 <_free_r+0x50>
 8006874:	42a3      	cmp	r3, r4
 8006876:	d9fa      	bls.n	800686e <_free_r+0x46>
 8006878:	6811      	ldr	r1, [r2, #0]
 800687a:	1855      	adds	r5, r2, r1
 800687c:	42a5      	cmp	r5, r4
 800687e:	d10b      	bne.n	8006898 <_free_r+0x70>
 8006880:	6824      	ldr	r4, [r4, #0]
 8006882:	4421      	add	r1, r4
 8006884:	1854      	adds	r4, r2, r1
 8006886:	42a3      	cmp	r3, r4
 8006888:	6011      	str	r1, [r2, #0]
 800688a:	d1e0      	bne.n	800684e <_free_r+0x26>
 800688c:	681c      	ldr	r4, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	6053      	str	r3, [r2, #4]
 8006892:	4421      	add	r1, r4
 8006894:	6011      	str	r1, [r2, #0]
 8006896:	e7da      	b.n	800684e <_free_r+0x26>
 8006898:	d902      	bls.n	80068a0 <_free_r+0x78>
 800689a:	230c      	movs	r3, #12
 800689c:	6003      	str	r3, [r0, #0]
 800689e:	e7d6      	b.n	800684e <_free_r+0x26>
 80068a0:	6825      	ldr	r5, [r4, #0]
 80068a2:	1961      	adds	r1, r4, r5
 80068a4:	428b      	cmp	r3, r1
 80068a6:	bf04      	itt	eq
 80068a8:	6819      	ldreq	r1, [r3, #0]
 80068aa:	685b      	ldreq	r3, [r3, #4]
 80068ac:	6063      	str	r3, [r4, #4]
 80068ae:	bf04      	itt	eq
 80068b0:	1949      	addeq	r1, r1, r5
 80068b2:	6021      	streq	r1, [r4, #0]
 80068b4:	6054      	str	r4, [r2, #4]
 80068b6:	e7ca      	b.n	800684e <_free_r+0x26>
 80068b8:	b003      	add	sp, #12
 80068ba:	bd30      	pop	{r4, r5, pc}
 80068bc:	2000034c 	.word	0x2000034c

080068c0 <sbrk_aligned>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4e0e      	ldr	r6, [pc, #56]	; (80068fc <sbrk_aligned+0x3c>)
 80068c4:	460c      	mov	r4, r1
 80068c6:	6831      	ldr	r1, [r6, #0]
 80068c8:	4605      	mov	r5, r0
 80068ca:	b911      	cbnz	r1, 80068d2 <sbrk_aligned+0x12>
 80068cc:	f000 fb42 	bl	8006f54 <_sbrk_r>
 80068d0:	6030      	str	r0, [r6, #0]
 80068d2:	4621      	mov	r1, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 fb3d 	bl	8006f54 <_sbrk_r>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	d00a      	beq.n	80068f4 <sbrk_aligned+0x34>
 80068de:	1cc4      	adds	r4, r0, #3
 80068e0:	f024 0403 	bic.w	r4, r4, #3
 80068e4:	42a0      	cmp	r0, r4
 80068e6:	d007      	beq.n	80068f8 <sbrk_aligned+0x38>
 80068e8:	1a21      	subs	r1, r4, r0
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 fb32 	bl	8006f54 <_sbrk_r>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d101      	bne.n	80068f8 <sbrk_aligned+0x38>
 80068f4:	f04f 34ff 	mov.w	r4, #4294967295
 80068f8:	4620      	mov	r0, r4
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	20000350 	.word	0x20000350

08006900 <_malloc_r>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	1ccd      	adds	r5, r1, #3
 8006906:	f025 0503 	bic.w	r5, r5, #3
 800690a:	3508      	adds	r5, #8
 800690c:	2d0c      	cmp	r5, #12
 800690e:	bf38      	it	cc
 8006910:	250c      	movcc	r5, #12
 8006912:	2d00      	cmp	r5, #0
 8006914:	4607      	mov	r7, r0
 8006916:	db01      	blt.n	800691c <_malloc_r+0x1c>
 8006918:	42a9      	cmp	r1, r5
 800691a:	d905      	bls.n	8006928 <_malloc_r+0x28>
 800691c:	230c      	movs	r3, #12
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	2600      	movs	r6, #0
 8006922:	4630      	mov	r0, r6
 8006924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006928:	4e2e      	ldr	r6, [pc, #184]	; (80069e4 <_malloc_r+0xe4>)
 800692a:	f000 fddf 	bl	80074ec <__malloc_lock>
 800692e:	6833      	ldr	r3, [r6, #0]
 8006930:	461c      	mov	r4, r3
 8006932:	bb34      	cbnz	r4, 8006982 <_malloc_r+0x82>
 8006934:	4629      	mov	r1, r5
 8006936:	4638      	mov	r0, r7
 8006938:	f7ff ffc2 	bl	80068c0 <sbrk_aligned>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	4604      	mov	r4, r0
 8006940:	d14d      	bne.n	80069de <_malloc_r+0xde>
 8006942:	6834      	ldr	r4, [r6, #0]
 8006944:	4626      	mov	r6, r4
 8006946:	2e00      	cmp	r6, #0
 8006948:	d140      	bne.n	80069cc <_malloc_r+0xcc>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	4631      	mov	r1, r6
 800694e:	4638      	mov	r0, r7
 8006950:	eb04 0803 	add.w	r8, r4, r3
 8006954:	f000 fafe 	bl	8006f54 <_sbrk_r>
 8006958:	4580      	cmp	r8, r0
 800695a:	d13a      	bne.n	80069d2 <_malloc_r+0xd2>
 800695c:	6821      	ldr	r1, [r4, #0]
 800695e:	3503      	adds	r5, #3
 8006960:	1a6d      	subs	r5, r5, r1
 8006962:	f025 0503 	bic.w	r5, r5, #3
 8006966:	3508      	adds	r5, #8
 8006968:	2d0c      	cmp	r5, #12
 800696a:	bf38      	it	cc
 800696c:	250c      	movcc	r5, #12
 800696e:	4629      	mov	r1, r5
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff ffa5 	bl	80068c0 <sbrk_aligned>
 8006976:	3001      	adds	r0, #1
 8006978:	d02b      	beq.n	80069d2 <_malloc_r+0xd2>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	442b      	add	r3, r5
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	e00e      	b.n	80069a0 <_malloc_r+0xa0>
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	1b52      	subs	r2, r2, r5
 8006986:	d41e      	bmi.n	80069c6 <_malloc_r+0xc6>
 8006988:	2a0b      	cmp	r2, #11
 800698a:	d916      	bls.n	80069ba <_malloc_r+0xba>
 800698c:	1961      	adds	r1, r4, r5
 800698e:	42a3      	cmp	r3, r4
 8006990:	6025      	str	r5, [r4, #0]
 8006992:	bf18      	it	ne
 8006994:	6059      	strne	r1, [r3, #4]
 8006996:	6863      	ldr	r3, [r4, #4]
 8006998:	bf08      	it	eq
 800699a:	6031      	streq	r1, [r6, #0]
 800699c:	5162      	str	r2, [r4, r5]
 800699e:	604b      	str	r3, [r1, #4]
 80069a0:	4638      	mov	r0, r7
 80069a2:	f104 060b 	add.w	r6, r4, #11
 80069a6:	f000 fda7 	bl	80074f8 <__malloc_unlock>
 80069aa:	f026 0607 	bic.w	r6, r6, #7
 80069ae:	1d23      	adds	r3, r4, #4
 80069b0:	1af2      	subs	r2, r6, r3
 80069b2:	d0b6      	beq.n	8006922 <_malloc_r+0x22>
 80069b4:	1b9b      	subs	r3, r3, r6
 80069b6:	50a3      	str	r3, [r4, r2]
 80069b8:	e7b3      	b.n	8006922 <_malloc_r+0x22>
 80069ba:	6862      	ldr	r2, [r4, #4]
 80069bc:	42a3      	cmp	r3, r4
 80069be:	bf0c      	ite	eq
 80069c0:	6032      	streq	r2, [r6, #0]
 80069c2:	605a      	strne	r2, [r3, #4]
 80069c4:	e7ec      	b.n	80069a0 <_malloc_r+0xa0>
 80069c6:	4623      	mov	r3, r4
 80069c8:	6864      	ldr	r4, [r4, #4]
 80069ca:	e7b2      	b.n	8006932 <_malloc_r+0x32>
 80069cc:	4634      	mov	r4, r6
 80069ce:	6876      	ldr	r6, [r6, #4]
 80069d0:	e7b9      	b.n	8006946 <_malloc_r+0x46>
 80069d2:	230c      	movs	r3, #12
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	4638      	mov	r0, r7
 80069d8:	f000 fd8e 	bl	80074f8 <__malloc_unlock>
 80069dc:	e7a1      	b.n	8006922 <_malloc_r+0x22>
 80069de:	6025      	str	r5, [r4, #0]
 80069e0:	e7de      	b.n	80069a0 <_malloc_r+0xa0>
 80069e2:	bf00      	nop
 80069e4:	2000034c 	.word	0x2000034c

080069e8 <__ssputs_r>:
 80069e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ec:	688e      	ldr	r6, [r1, #8]
 80069ee:	429e      	cmp	r6, r3
 80069f0:	4682      	mov	sl, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	4690      	mov	r8, r2
 80069f6:	461f      	mov	r7, r3
 80069f8:	d838      	bhi.n	8006a6c <__ssputs_r+0x84>
 80069fa:	898a      	ldrh	r2, [r1, #12]
 80069fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a00:	d032      	beq.n	8006a68 <__ssputs_r+0x80>
 8006a02:	6825      	ldr	r5, [r4, #0]
 8006a04:	6909      	ldr	r1, [r1, #16]
 8006a06:	eba5 0901 	sub.w	r9, r5, r1
 8006a0a:	6965      	ldr	r5, [r4, #20]
 8006a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a14:	3301      	adds	r3, #1
 8006a16:	444b      	add	r3, r9
 8006a18:	106d      	asrs	r5, r5, #1
 8006a1a:	429d      	cmp	r5, r3
 8006a1c:	bf38      	it	cc
 8006a1e:	461d      	movcc	r5, r3
 8006a20:	0553      	lsls	r3, r2, #21
 8006a22:	d531      	bpl.n	8006a88 <__ssputs_r+0xa0>
 8006a24:	4629      	mov	r1, r5
 8006a26:	f7ff ff6b 	bl	8006900 <_malloc_r>
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	b950      	cbnz	r0, 8006a44 <__ssputs_r+0x5c>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	f8ca 3000 	str.w	r3, [sl]
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	6921      	ldr	r1, [r4, #16]
 8006a46:	464a      	mov	r2, r9
 8006a48:	f7ff fb46 	bl	80060d8 <memcpy>
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	6126      	str	r6, [r4, #16]
 8006a5a:	6165      	str	r5, [r4, #20]
 8006a5c:	444e      	add	r6, r9
 8006a5e:	eba5 0509 	sub.w	r5, r5, r9
 8006a62:	6026      	str	r6, [r4, #0]
 8006a64:	60a5      	str	r5, [r4, #8]
 8006a66:	463e      	mov	r6, r7
 8006a68:	42be      	cmp	r6, r7
 8006a6a:	d900      	bls.n	8006a6e <__ssputs_r+0x86>
 8006a6c:	463e      	mov	r6, r7
 8006a6e:	6820      	ldr	r0, [r4, #0]
 8006a70:	4632      	mov	r2, r6
 8006a72:	4641      	mov	r1, r8
 8006a74:	f000 fd20 	bl	80074b8 <memmove>
 8006a78:	68a3      	ldr	r3, [r4, #8]
 8006a7a:	1b9b      	subs	r3, r3, r6
 8006a7c:	60a3      	str	r3, [r4, #8]
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	4433      	add	r3, r6
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	2000      	movs	r0, #0
 8006a86:	e7db      	b.n	8006a40 <__ssputs_r+0x58>
 8006a88:	462a      	mov	r2, r5
 8006a8a:	f000 fd3b 	bl	8007504 <_realloc_r>
 8006a8e:	4606      	mov	r6, r0
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d1e1      	bne.n	8006a58 <__ssputs_r+0x70>
 8006a94:	6921      	ldr	r1, [r4, #16]
 8006a96:	4650      	mov	r0, sl
 8006a98:	f7ff fec6 	bl	8006828 <_free_r>
 8006a9c:	e7c7      	b.n	8006a2e <__ssputs_r+0x46>
	...

08006aa0 <_svfiprintf_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	4698      	mov	r8, r3
 8006aa6:	898b      	ldrh	r3, [r1, #12]
 8006aa8:	061b      	lsls	r3, r3, #24
 8006aaa:	b09d      	sub	sp, #116	; 0x74
 8006aac:	4607      	mov	r7, r0
 8006aae:	460d      	mov	r5, r1
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	d50e      	bpl.n	8006ad2 <_svfiprintf_r+0x32>
 8006ab4:	690b      	ldr	r3, [r1, #16]
 8006ab6:	b963      	cbnz	r3, 8006ad2 <_svfiprintf_r+0x32>
 8006ab8:	2140      	movs	r1, #64	; 0x40
 8006aba:	f7ff ff21 	bl	8006900 <_malloc_r>
 8006abe:	6028      	str	r0, [r5, #0]
 8006ac0:	6128      	str	r0, [r5, #16]
 8006ac2:	b920      	cbnz	r0, 8006ace <_svfiprintf_r+0x2e>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	e0d1      	b.n	8006c72 <_svfiprintf_r+0x1d2>
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	616b      	str	r3, [r5, #20]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad6:	2320      	movs	r3, #32
 8006ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae0:	2330      	movs	r3, #48	; 0x30
 8006ae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c8c <_svfiprintf_r+0x1ec>
 8006ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aea:	f04f 0901 	mov.w	r9, #1
 8006aee:	4623      	mov	r3, r4
 8006af0:	469a      	mov	sl, r3
 8006af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af6:	b10a      	cbz	r2, 8006afc <_svfiprintf_r+0x5c>
 8006af8:	2a25      	cmp	r2, #37	; 0x25
 8006afa:	d1f9      	bne.n	8006af0 <_svfiprintf_r+0x50>
 8006afc:	ebba 0b04 	subs.w	fp, sl, r4
 8006b00:	d00b      	beq.n	8006b1a <_svfiprintf_r+0x7a>
 8006b02:	465b      	mov	r3, fp
 8006b04:	4622      	mov	r2, r4
 8006b06:	4629      	mov	r1, r5
 8006b08:	4638      	mov	r0, r7
 8006b0a:	f7ff ff6d 	bl	80069e8 <__ssputs_r>
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f000 80aa 	beq.w	8006c68 <_svfiprintf_r+0x1c8>
 8006b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b16:	445a      	add	r2, fp
 8006b18:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80a2 	beq.w	8006c68 <_svfiprintf_r+0x1c8>
 8006b24:	2300      	movs	r3, #0
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b2e:	f10a 0a01 	add.w	sl, sl, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	9307      	str	r3, [sp, #28]
 8006b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b3c:	4654      	mov	r4, sl
 8006b3e:	2205      	movs	r2, #5
 8006b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b44:	4851      	ldr	r0, [pc, #324]	; (8006c8c <_svfiprintf_r+0x1ec>)
 8006b46:	f7f9 fb83 	bl	8000250 <memchr>
 8006b4a:	9a04      	ldr	r2, [sp, #16]
 8006b4c:	b9d8      	cbnz	r0, 8006b86 <_svfiprintf_r+0xe6>
 8006b4e:	06d0      	lsls	r0, r2, #27
 8006b50:	bf44      	itt	mi
 8006b52:	2320      	movmi	r3, #32
 8006b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b58:	0711      	lsls	r1, r2, #28
 8006b5a:	bf44      	itt	mi
 8006b5c:	232b      	movmi	r3, #43	; 0x2b
 8006b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b62:	f89a 3000 	ldrb.w	r3, [sl]
 8006b66:	2b2a      	cmp	r3, #42	; 0x2a
 8006b68:	d015      	beq.n	8006b96 <_svfiprintf_r+0xf6>
 8006b6a:	9a07      	ldr	r2, [sp, #28]
 8006b6c:	4654      	mov	r4, sl
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f04f 0c0a 	mov.w	ip, #10
 8006b74:	4621      	mov	r1, r4
 8006b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7a:	3b30      	subs	r3, #48	; 0x30
 8006b7c:	2b09      	cmp	r3, #9
 8006b7e:	d94e      	bls.n	8006c1e <_svfiprintf_r+0x17e>
 8006b80:	b1b0      	cbz	r0, 8006bb0 <_svfiprintf_r+0x110>
 8006b82:	9207      	str	r2, [sp, #28]
 8006b84:	e014      	b.n	8006bb0 <_svfiprintf_r+0x110>
 8006b86:	eba0 0308 	sub.w	r3, r0, r8
 8006b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	9304      	str	r3, [sp, #16]
 8006b92:	46a2      	mov	sl, r4
 8006b94:	e7d2      	b.n	8006b3c <_svfiprintf_r+0x9c>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	9103      	str	r1, [sp, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bfbb      	ittet	lt
 8006ba2:	425b      	neglt	r3, r3
 8006ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba8:	9307      	strge	r3, [sp, #28]
 8006baa:	9307      	strlt	r3, [sp, #28]
 8006bac:	bfb8      	it	lt
 8006bae:	9204      	strlt	r2, [sp, #16]
 8006bb0:	7823      	ldrb	r3, [r4, #0]
 8006bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb4:	d10c      	bne.n	8006bd0 <_svfiprintf_r+0x130>
 8006bb6:	7863      	ldrb	r3, [r4, #1]
 8006bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bba:	d135      	bne.n	8006c28 <_svfiprintf_r+0x188>
 8006bbc:	9b03      	ldr	r3, [sp, #12]
 8006bbe:	1d1a      	adds	r2, r3, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	9203      	str	r2, [sp, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bfb8      	it	lt
 8006bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bcc:	3402      	adds	r4, #2
 8006bce:	9305      	str	r3, [sp, #20]
 8006bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c9c <_svfiprintf_r+0x1fc>
 8006bd4:	7821      	ldrb	r1, [r4, #0]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	4650      	mov	r0, sl
 8006bda:	f7f9 fb39 	bl	8000250 <memchr>
 8006bde:	b140      	cbz	r0, 8006bf2 <_svfiprintf_r+0x152>
 8006be0:	2340      	movs	r3, #64	; 0x40
 8006be2:	eba0 000a 	sub.w	r0, r0, sl
 8006be6:	fa03 f000 	lsl.w	r0, r3, r0
 8006bea:	9b04      	ldr	r3, [sp, #16]
 8006bec:	4303      	orrs	r3, r0
 8006bee:	3401      	adds	r4, #1
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf6:	4826      	ldr	r0, [pc, #152]	; (8006c90 <_svfiprintf_r+0x1f0>)
 8006bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bfc:	2206      	movs	r2, #6
 8006bfe:	f7f9 fb27 	bl	8000250 <memchr>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d038      	beq.n	8006c78 <_svfiprintf_r+0x1d8>
 8006c06:	4b23      	ldr	r3, [pc, #140]	; (8006c94 <_svfiprintf_r+0x1f4>)
 8006c08:	bb1b      	cbnz	r3, 8006c52 <_svfiprintf_r+0x1b2>
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	3307      	adds	r3, #7
 8006c0e:	f023 0307 	bic.w	r3, r3, #7
 8006c12:	3308      	adds	r3, #8
 8006c14:	9303      	str	r3, [sp, #12]
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	4433      	add	r3, r6
 8006c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1c:	e767      	b.n	8006aee <_svfiprintf_r+0x4e>
 8006c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c22:	460c      	mov	r4, r1
 8006c24:	2001      	movs	r0, #1
 8006c26:	e7a5      	b.n	8006b74 <_svfiprintf_r+0xd4>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	3401      	adds	r4, #1
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f04f 0c0a 	mov.w	ip, #10
 8006c34:	4620      	mov	r0, r4
 8006c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3a:	3a30      	subs	r2, #48	; 0x30
 8006c3c:	2a09      	cmp	r2, #9
 8006c3e:	d903      	bls.n	8006c48 <_svfiprintf_r+0x1a8>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0c5      	beq.n	8006bd0 <_svfiprintf_r+0x130>
 8006c44:	9105      	str	r1, [sp, #20]
 8006c46:	e7c3      	b.n	8006bd0 <_svfiprintf_r+0x130>
 8006c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e7f0      	b.n	8006c34 <_svfiprintf_r+0x194>
 8006c52:	ab03      	add	r3, sp, #12
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	462a      	mov	r2, r5
 8006c58:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <_svfiprintf_r+0x1f8>)
 8006c5a:	a904      	add	r1, sp, #16
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f7fd ff4f 	bl	8004b00 <_printf_float>
 8006c62:	1c42      	adds	r2, r0, #1
 8006c64:	4606      	mov	r6, r0
 8006c66:	d1d6      	bne.n	8006c16 <_svfiprintf_r+0x176>
 8006c68:	89ab      	ldrh	r3, [r5, #12]
 8006c6a:	065b      	lsls	r3, r3, #25
 8006c6c:	f53f af2c 	bmi.w	8006ac8 <_svfiprintf_r+0x28>
 8006c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c72:	b01d      	add	sp, #116	; 0x74
 8006c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c78:	ab03      	add	r3, sp, #12
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	462a      	mov	r2, r5
 8006c7e:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <_svfiprintf_r+0x1f8>)
 8006c80:	a904      	add	r1, sp, #16
 8006c82:	4638      	mov	r0, r7
 8006c84:	f7fe f9c8 	bl	8005018 <_printf_i>
 8006c88:	e7eb      	b.n	8006c62 <_svfiprintf_r+0x1c2>
 8006c8a:	bf00      	nop
 8006c8c:	08007d8c 	.word	0x08007d8c
 8006c90:	08007d96 	.word	0x08007d96
 8006c94:	08004b01 	.word	0x08004b01
 8006c98:	080069e9 	.word	0x080069e9
 8006c9c:	08007d92 	.word	0x08007d92

08006ca0 <__sfputc_r>:
 8006ca0:	6893      	ldr	r3, [r2, #8]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	b410      	push	{r4}
 8006ca8:	6093      	str	r3, [r2, #8]
 8006caa:	da08      	bge.n	8006cbe <__sfputc_r+0x1e>
 8006cac:	6994      	ldr	r4, [r2, #24]
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	db01      	blt.n	8006cb6 <__sfputc_r+0x16>
 8006cb2:	290a      	cmp	r1, #10
 8006cb4:	d103      	bne.n	8006cbe <__sfputc_r+0x1e>
 8006cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cba:	f000 b99f 	b.w	8006ffc <__swbuf_r>
 8006cbe:	6813      	ldr	r3, [r2, #0]
 8006cc0:	1c58      	adds	r0, r3, #1
 8006cc2:	6010      	str	r0, [r2, #0]
 8006cc4:	7019      	strb	r1, [r3, #0]
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <__sfputs_r>:
 8006cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	460f      	mov	r7, r1
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	18d5      	adds	r5, r2, r3
 8006cd8:	42ac      	cmp	r4, r5
 8006cda:	d101      	bne.n	8006ce0 <__sfputs_r+0x12>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e007      	b.n	8006cf0 <__sfputs_r+0x22>
 8006ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce4:	463a      	mov	r2, r7
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7ff ffda 	bl	8006ca0 <__sfputc_r>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d1f3      	bne.n	8006cd8 <__sfputs_r+0xa>
 8006cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf4 <_vfiprintf_r>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	b09d      	sub	sp, #116	; 0x74
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	4698      	mov	r8, r3
 8006d00:	4606      	mov	r6, r0
 8006d02:	b118      	cbz	r0, 8006d0c <_vfiprintf_r+0x18>
 8006d04:	6983      	ldr	r3, [r0, #24]
 8006d06:	b90b      	cbnz	r3, 8006d0c <_vfiprintf_r+0x18>
 8006d08:	f7ff f938 	bl	8005f7c <__sinit>
 8006d0c:	4b89      	ldr	r3, [pc, #548]	; (8006f34 <_vfiprintf_r+0x240>)
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	d11b      	bne.n	8006d4a <_vfiprintf_r+0x56>
 8006d12:	6875      	ldr	r5, [r6, #4]
 8006d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d16:	07d9      	lsls	r1, r3, #31
 8006d18:	d405      	bmi.n	8006d26 <_vfiprintf_r+0x32>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	059a      	lsls	r2, r3, #22
 8006d1e:	d402      	bmi.n	8006d26 <_vfiprintf_r+0x32>
 8006d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d22:	f7ff f9ce 	bl	80060c2 <__retarget_lock_acquire_recursive>
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	071b      	lsls	r3, r3, #28
 8006d2a:	d501      	bpl.n	8006d30 <_vfiprintf_r+0x3c>
 8006d2c:	692b      	ldr	r3, [r5, #16]
 8006d2e:	b9eb      	cbnz	r3, 8006d6c <_vfiprintf_r+0x78>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4630      	mov	r0, r6
 8006d34:	f000 f9c6 	bl	80070c4 <__swsetup_r>
 8006d38:	b1c0      	cbz	r0, 8006d6c <_vfiprintf_r+0x78>
 8006d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d3c:	07dc      	lsls	r4, r3, #31
 8006d3e:	d50e      	bpl.n	8006d5e <_vfiprintf_r+0x6a>
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	b01d      	add	sp, #116	; 0x74
 8006d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <_vfiprintf_r+0x244>)
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	d101      	bne.n	8006d54 <_vfiprintf_r+0x60>
 8006d50:	68b5      	ldr	r5, [r6, #8]
 8006d52:	e7df      	b.n	8006d14 <_vfiprintf_r+0x20>
 8006d54:	4b79      	ldr	r3, [pc, #484]	; (8006f3c <_vfiprintf_r+0x248>)
 8006d56:	429d      	cmp	r5, r3
 8006d58:	bf08      	it	eq
 8006d5a:	68f5      	ldreq	r5, [r6, #12]
 8006d5c:	e7da      	b.n	8006d14 <_vfiprintf_r+0x20>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	0598      	lsls	r0, r3, #22
 8006d62:	d4ed      	bmi.n	8006d40 <_vfiprintf_r+0x4c>
 8006d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d66:	f7ff f9ad 	bl	80060c4 <__retarget_lock_release_recursive>
 8006d6a:	e7e9      	b.n	8006d40 <_vfiprintf_r+0x4c>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d70:	2320      	movs	r3, #32
 8006d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d7a:	2330      	movs	r3, #48	; 0x30
 8006d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f40 <_vfiprintf_r+0x24c>
 8006d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d84:	f04f 0901 	mov.w	r9, #1
 8006d88:	4623      	mov	r3, r4
 8006d8a:	469a      	mov	sl, r3
 8006d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d90:	b10a      	cbz	r2, 8006d96 <_vfiprintf_r+0xa2>
 8006d92:	2a25      	cmp	r2, #37	; 0x25
 8006d94:	d1f9      	bne.n	8006d8a <_vfiprintf_r+0x96>
 8006d96:	ebba 0b04 	subs.w	fp, sl, r4
 8006d9a:	d00b      	beq.n	8006db4 <_vfiprintf_r+0xc0>
 8006d9c:	465b      	mov	r3, fp
 8006d9e:	4622      	mov	r2, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7ff ff93 	bl	8006cce <__sfputs_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	f000 80aa 	beq.w	8006f02 <_vfiprintf_r+0x20e>
 8006dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db0:	445a      	add	r2, fp
 8006db2:	9209      	str	r2, [sp, #36]	; 0x24
 8006db4:	f89a 3000 	ldrb.w	r3, [sl]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80a2 	beq.w	8006f02 <_vfiprintf_r+0x20e>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc8:	f10a 0a01 	add.w	sl, sl, #1
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd6:	4654      	mov	r4, sl
 8006dd8:	2205      	movs	r2, #5
 8006dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dde:	4858      	ldr	r0, [pc, #352]	; (8006f40 <_vfiprintf_r+0x24c>)
 8006de0:	f7f9 fa36 	bl	8000250 <memchr>
 8006de4:	9a04      	ldr	r2, [sp, #16]
 8006de6:	b9d8      	cbnz	r0, 8006e20 <_vfiprintf_r+0x12c>
 8006de8:	06d1      	lsls	r1, r2, #27
 8006dea:	bf44      	itt	mi
 8006dec:	2320      	movmi	r3, #32
 8006dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df2:	0713      	lsls	r3, r2, #28
 8006df4:	bf44      	itt	mi
 8006df6:	232b      	movmi	r3, #43	; 0x2b
 8006df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006e00:	2b2a      	cmp	r3, #42	; 0x2a
 8006e02:	d015      	beq.n	8006e30 <_vfiprintf_r+0x13c>
 8006e04:	9a07      	ldr	r2, [sp, #28]
 8006e06:	4654      	mov	r4, sl
 8006e08:	2000      	movs	r0, #0
 8006e0a:	f04f 0c0a 	mov.w	ip, #10
 8006e0e:	4621      	mov	r1, r4
 8006e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e14:	3b30      	subs	r3, #48	; 0x30
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	d94e      	bls.n	8006eb8 <_vfiprintf_r+0x1c4>
 8006e1a:	b1b0      	cbz	r0, 8006e4a <_vfiprintf_r+0x156>
 8006e1c:	9207      	str	r2, [sp, #28]
 8006e1e:	e014      	b.n	8006e4a <_vfiprintf_r+0x156>
 8006e20:	eba0 0308 	sub.w	r3, r0, r8
 8006e24:	fa09 f303 	lsl.w	r3, r9, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	46a2      	mov	sl, r4
 8006e2e:	e7d2      	b.n	8006dd6 <_vfiprintf_r+0xe2>
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	1d19      	adds	r1, r3, #4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	9103      	str	r1, [sp, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bfbb      	ittet	lt
 8006e3c:	425b      	neglt	r3, r3
 8006e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e42:	9307      	strge	r3, [sp, #28]
 8006e44:	9307      	strlt	r3, [sp, #28]
 8006e46:	bfb8      	it	lt
 8006e48:	9204      	strlt	r2, [sp, #16]
 8006e4a:	7823      	ldrb	r3, [r4, #0]
 8006e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4e:	d10c      	bne.n	8006e6a <_vfiprintf_r+0x176>
 8006e50:	7863      	ldrb	r3, [r4, #1]
 8006e52:	2b2a      	cmp	r3, #42	; 0x2a
 8006e54:	d135      	bne.n	8006ec2 <_vfiprintf_r+0x1ce>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	9203      	str	r2, [sp, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfb8      	it	lt
 8006e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e66:	3402      	adds	r4, #2
 8006e68:	9305      	str	r3, [sp, #20]
 8006e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f50 <_vfiprintf_r+0x25c>
 8006e6e:	7821      	ldrb	r1, [r4, #0]
 8006e70:	2203      	movs	r2, #3
 8006e72:	4650      	mov	r0, sl
 8006e74:	f7f9 f9ec 	bl	8000250 <memchr>
 8006e78:	b140      	cbz	r0, 8006e8c <_vfiprintf_r+0x198>
 8006e7a:	2340      	movs	r3, #64	; 0x40
 8006e7c:	eba0 000a 	sub.w	r0, r0, sl
 8006e80:	fa03 f000 	lsl.w	r0, r3, r0
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	4303      	orrs	r3, r0
 8006e88:	3401      	adds	r4, #1
 8006e8a:	9304      	str	r3, [sp, #16]
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	482c      	ldr	r0, [pc, #176]	; (8006f44 <_vfiprintf_r+0x250>)
 8006e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e96:	2206      	movs	r2, #6
 8006e98:	f7f9 f9da 	bl	8000250 <memchr>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d03f      	beq.n	8006f20 <_vfiprintf_r+0x22c>
 8006ea0:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <_vfiprintf_r+0x254>)
 8006ea2:	bb1b      	cbnz	r3, 8006eec <_vfiprintf_r+0x1f8>
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	3307      	adds	r3, #7
 8006ea8:	f023 0307 	bic.w	r3, r3, #7
 8006eac:	3308      	adds	r3, #8
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb2:	443b      	add	r3, r7
 8006eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb6:	e767      	b.n	8006d88 <_vfiprintf_r+0x94>
 8006eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	e7a5      	b.n	8006e0e <_vfiprintf_r+0x11a>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	3401      	adds	r4, #1
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f04f 0c0a 	mov.w	ip, #10
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed4:	3a30      	subs	r2, #48	; 0x30
 8006ed6:	2a09      	cmp	r2, #9
 8006ed8:	d903      	bls.n	8006ee2 <_vfiprintf_r+0x1ee>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0c5      	beq.n	8006e6a <_vfiprintf_r+0x176>
 8006ede:	9105      	str	r1, [sp, #20]
 8006ee0:	e7c3      	b.n	8006e6a <_vfiprintf_r+0x176>
 8006ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e7f0      	b.n	8006ece <_vfiprintf_r+0x1da>
 8006eec:	ab03      	add	r3, sp, #12
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <_vfiprintf_r+0x258>)
 8006ef4:	a904      	add	r1, sp, #16
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f7fd fe02 	bl	8004b00 <_printf_float>
 8006efc:	4607      	mov	r7, r0
 8006efe:	1c78      	adds	r0, r7, #1
 8006f00:	d1d6      	bne.n	8006eb0 <_vfiprintf_r+0x1bc>
 8006f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f04:	07d9      	lsls	r1, r3, #31
 8006f06:	d405      	bmi.n	8006f14 <_vfiprintf_r+0x220>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	059a      	lsls	r2, r3, #22
 8006f0c:	d402      	bmi.n	8006f14 <_vfiprintf_r+0x220>
 8006f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f10:	f7ff f8d8 	bl	80060c4 <__retarget_lock_release_recursive>
 8006f14:	89ab      	ldrh	r3, [r5, #12]
 8006f16:	065b      	lsls	r3, r3, #25
 8006f18:	f53f af12 	bmi.w	8006d40 <_vfiprintf_r+0x4c>
 8006f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f1e:	e711      	b.n	8006d44 <_vfiprintf_r+0x50>
 8006f20:	ab03      	add	r3, sp, #12
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	462a      	mov	r2, r5
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <_vfiprintf_r+0x258>)
 8006f28:	a904      	add	r1, sp, #16
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f7fe f874 	bl	8005018 <_printf_i>
 8006f30:	e7e4      	b.n	8006efc <_vfiprintf_r+0x208>
 8006f32:	bf00      	nop
 8006f34:	08007bf0 	.word	0x08007bf0
 8006f38:	08007c10 	.word	0x08007c10
 8006f3c:	08007bd0 	.word	0x08007bd0
 8006f40:	08007d8c 	.word	0x08007d8c
 8006f44:	08007d96 	.word	0x08007d96
 8006f48:	08004b01 	.word	0x08004b01
 8006f4c:	08006ccf 	.word	0x08006ccf
 8006f50:	08007d92 	.word	0x08007d92

08006f54 <_sbrk_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d06      	ldr	r5, [pc, #24]	; (8006f70 <_sbrk_r+0x1c>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7f9 fdc2 	bl	8000ae8 <_sbrk>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_sbrk_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_sbrk_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000354 	.word	0x20000354

08006f74 <__sread>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	460c      	mov	r4, r1
 8006f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7c:	f000 faf2 	bl	8007564 <_read_r>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	bfab      	itete	ge
 8006f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f86:	89a3      	ldrhlt	r3, [r4, #12]
 8006f88:	181b      	addge	r3, r3, r0
 8006f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f8e:	bfac      	ite	ge
 8006f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f92:	81a3      	strhlt	r3, [r4, #12]
 8006f94:	bd10      	pop	{r4, pc}

08006f96 <__swrite>:
 8006f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9a:	461f      	mov	r7, r3
 8006f9c:	898b      	ldrh	r3, [r1, #12]
 8006f9e:	05db      	lsls	r3, r3, #23
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	d505      	bpl.n	8006fb4 <__swrite+0x1e>
 8006fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fac:	2302      	movs	r3, #2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f000 f9f8 	bl	80073a4 <_lseek_r>
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	f000 b869 	b.w	80070a0 <_write_r>

08006fce <__sseek>:
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd6:	f000 f9e5 	bl	80073a4 <_lseek_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	bf15      	itete	ne
 8006fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fea:	81a3      	strheq	r3, [r4, #12]
 8006fec:	bf18      	it	ne
 8006fee:	81a3      	strhne	r3, [r4, #12]
 8006ff0:	bd10      	pop	{r4, pc}

08006ff2 <__sclose>:
 8006ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff6:	f000 b8f1 	b.w	80071dc <_close_r>
	...

08006ffc <__swbuf_r>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	460e      	mov	r6, r1
 8007000:	4614      	mov	r4, r2
 8007002:	4605      	mov	r5, r0
 8007004:	b118      	cbz	r0, 800700e <__swbuf_r+0x12>
 8007006:	6983      	ldr	r3, [r0, #24]
 8007008:	b90b      	cbnz	r3, 800700e <__swbuf_r+0x12>
 800700a:	f7fe ffb7 	bl	8005f7c <__sinit>
 800700e:	4b21      	ldr	r3, [pc, #132]	; (8007094 <__swbuf_r+0x98>)
 8007010:	429c      	cmp	r4, r3
 8007012:	d12b      	bne.n	800706c <__swbuf_r+0x70>
 8007014:	686c      	ldr	r4, [r5, #4]
 8007016:	69a3      	ldr	r3, [r4, #24]
 8007018:	60a3      	str	r3, [r4, #8]
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	071a      	lsls	r2, r3, #28
 800701e:	d52f      	bpl.n	8007080 <__swbuf_r+0x84>
 8007020:	6923      	ldr	r3, [r4, #16]
 8007022:	b36b      	cbz	r3, 8007080 <__swbuf_r+0x84>
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	1ac0      	subs	r0, r0, r3
 800702a:	6963      	ldr	r3, [r4, #20]
 800702c:	b2f6      	uxtb	r6, r6
 800702e:	4283      	cmp	r3, r0
 8007030:	4637      	mov	r7, r6
 8007032:	dc04      	bgt.n	800703e <__swbuf_r+0x42>
 8007034:	4621      	mov	r1, r4
 8007036:	4628      	mov	r0, r5
 8007038:	f000 f966 	bl	8007308 <_fflush_r>
 800703c:	bb30      	cbnz	r0, 800708c <__swbuf_r+0x90>
 800703e:	68a3      	ldr	r3, [r4, #8]
 8007040:	3b01      	subs	r3, #1
 8007042:	60a3      	str	r3, [r4, #8]
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	6022      	str	r2, [r4, #0]
 800704a:	701e      	strb	r6, [r3, #0]
 800704c:	6963      	ldr	r3, [r4, #20]
 800704e:	3001      	adds	r0, #1
 8007050:	4283      	cmp	r3, r0
 8007052:	d004      	beq.n	800705e <__swbuf_r+0x62>
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	07db      	lsls	r3, r3, #31
 8007058:	d506      	bpl.n	8007068 <__swbuf_r+0x6c>
 800705a:	2e0a      	cmp	r6, #10
 800705c:	d104      	bne.n	8007068 <__swbuf_r+0x6c>
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f000 f951 	bl	8007308 <_fflush_r>
 8007066:	b988      	cbnz	r0, 800708c <__swbuf_r+0x90>
 8007068:	4638      	mov	r0, r7
 800706a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <__swbuf_r+0x9c>)
 800706e:	429c      	cmp	r4, r3
 8007070:	d101      	bne.n	8007076 <__swbuf_r+0x7a>
 8007072:	68ac      	ldr	r4, [r5, #8]
 8007074:	e7cf      	b.n	8007016 <__swbuf_r+0x1a>
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <__swbuf_r+0xa0>)
 8007078:	429c      	cmp	r4, r3
 800707a:	bf08      	it	eq
 800707c:	68ec      	ldreq	r4, [r5, #12]
 800707e:	e7ca      	b.n	8007016 <__swbuf_r+0x1a>
 8007080:	4621      	mov	r1, r4
 8007082:	4628      	mov	r0, r5
 8007084:	f000 f81e 	bl	80070c4 <__swsetup_r>
 8007088:	2800      	cmp	r0, #0
 800708a:	d0cb      	beq.n	8007024 <__swbuf_r+0x28>
 800708c:	f04f 37ff 	mov.w	r7, #4294967295
 8007090:	e7ea      	b.n	8007068 <__swbuf_r+0x6c>
 8007092:	bf00      	nop
 8007094:	08007bf0 	.word	0x08007bf0
 8007098:	08007c10 	.word	0x08007c10
 800709c:	08007bd0 	.word	0x08007bd0

080070a0 <_write_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d07      	ldr	r5, [pc, #28]	; (80070c0 <_write_r+0x20>)
 80070a4:	4604      	mov	r4, r0
 80070a6:	4608      	mov	r0, r1
 80070a8:	4611      	mov	r1, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7f9 fcc9 	bl	8000a46 <_write>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_write_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_write_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20000354 	.word	0x20000354

080070c4 <__swsetup_r>:
 80070c4:	4b32      	ldr	r3, [pc, #200]	; (8007190 <__swsetup_r+0xcc>)
 80070c6:	b570      	push	{r4, r5, r6, lr}
 80070c8:	681d      	ldr	r5, [r3, #0]
 80070ca:	4606      	mov	r6, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	b125      	cbz	r5, 80070da <__swsetup_r+0x16>
 80070d0:	69ab      	ldr	r3, [r5, #24]
 80070d2:	b913      	cbnz	r3, 80070da <__swsetup_r+0x16>
 80070d4:	4628      	mov	r0, r5
 80070d6:	f7fe ff51 	bl	8005f7c <__sinit>
 80070da:	4b2e      	ldr	r3, [pc, #184]	; (8007194 <__swsetup_r+0xd0>)
 80070dc:	429c      	cmp	r4, r3
 80070de:	d10f      	bne.n	8007100 <__swsetup_r+0x3c>
 80070e0:	686c      	ldr	r4, [r5, #4]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070e8:	0719      	lsls	r1, r3, #28
 80070ea:	d42c      	bmi.n	8007146 <__swsetup_r+0x82>
 80070ec:	06dd      	lsls	r5, r3, #27
 80070ee:	d411      	bmi.n	8007114 <__swsetup_r+0x50>
 80070f0:	2309      	movs	r3, #9
 80070f2:	6033      	str	r3, [r6, #0]
 80070f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	e03e      	b.n	800717e <__swsetup_r+0xba>
 8007100:	4b25      	ldr	r3, [pc, #148]	; (8007198 <__swsetup_r+0xd4>)
 8007102:	429c      	cmp	r4, r3
 8007104:	d101      	bne.n	800710a <__swsetup_r+0x46>
 8007106:	68ac      	ldr	r4, [r5, #8]
 8007108:	e7eb      	b.n	80070e2 <__swsetup_r+0x1e>
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <__swsetup_r+0xd8>)
 800710c:	429c      	cmp	r4, r3
 800710e:	bf08      	it	eq
 8007110:	68ec      	ldreq	r4, [r5, #12]
 8007112:	e7e6      	b.n	80070e2 <__swsetup_r+0x1e>
 8007114:	0758      	lsls	r0, r3, #29
 8007116:	d512      	bpl.n	800713e <__swsetup_r+0x7a>
 8007118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800711a:	b141      	cbz	r1, 800712e <__swsetup_r+0x6a>
 800711c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007120:	4299      	cmp	r1, r3
 8007122:	d002      	beq.n	800712a <__swsetup_r+0x66>
 8007124:	4630      	mov	r0, r6
 8007126:	f7ff fb7f 	bl	8006828 <_free_r>
 800712a:	2300      	movs	r3, #0
 800712c:	6363      	str	r3, [r4, #52]	; 0x34
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007134:	81a3      	strh	r3, [r4, #12]
 8007136:	2300      	movs	r3, #0
 8007138:	6063      	str	r3, [r4, #4]
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f043 0308 	orr.w	r3, r3, #8
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	b94b      	cbnz	r3, 800715e <__swsetup_r+0x9a>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007154:	d003      	beq.n	800715e <__swsetup_r+0x9a>
 8007156:	4621      	mov	r1, r4
 8007158:	4630      	mov	r0, r6
 800715a:	f000 f95b 	bl	8007414 <__smakebuf_r>
 800715e:	89a0      	ldrh	r0, [r4, #12]
 8007160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007164:	f010 0301 	ands.w	r3, r0, #1
 8007168:	d00a      	beq.n	8007180 <__swsetup_r+0xbc>
 800716a:	2300      	movs	r3, #0
 800716c:	60a3      	str	r3, [r4, #8]
 800716e:	6963      	ldr	r3, [r4, #20]
 8007170:	425b      	negs	r3, r3
 8007172:	61a3      	str	r3, [r4, #24]
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	b943      	cbnz	r3, 800718a <__swsetup_r+0xc6>
 8007178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800717c:	d1ba      	bne.n	80070f4 <__swsetup_r+0x30>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	0781      	lsls	r1, r0, #30
 8007182:	bf58      	it	pl
 8007184:	6963      	ldrpl	r3, [r4, #20]
 8007186:	60a3      	str	r3, [r4, #8]
 8007188:	e7f4      	b.n	8007174 <__swsetup_r+0xb0>
 800718a:	2000      	movs	r0, #0
 800718c:	e7f7      	b.n	800717e <__swsetup_r+0xba>
 800718e:	bf00      	nop
 8007190:	20000010 	.word	0x20000010
 8007194:	08007bf0 	.word	0x08007bf0
 8007198:	08007c10 	.word	0x08007c10
 800719c:	08007bd0 	.word	0x08007bd0

080071a0 <__assert_func>:
 80071a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071a2:	4614      	mov	r4, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	4b09      	ldr	r3, [pc, #36]	; (80071cc <__assert_func+0x2c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4605      	mov	r5, r0
 80071ac:	68d8      	ldr	r0, [r3, #12]
 80071ae:	b14c      	cbz	r4, 80071c4 <__assert_func+0x24>
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <__assert_func+0x30>)
 80071b2:	9100      	str	r1, [sp, #0]
 80071b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071b8:	4906      	ldr	r1, [pc, #24]	; (80071d4 <__assert_func+0x34>)
 80071ba:	462b      	mov	r3, r5
 80071bc:	f000 f8e0 	bl	8007380 <fiprintf>
 80071c0:	f000 f9ef 	bl	80075a2 <abort>
 80071c4:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <__assert_func+0x38>)
 80071c6:	461c      	mov	r4, r3
 80071c8:	e7f3      	b.n	80071b2 <__assert_func+0x12>
 80071ca:	bf00      	nop
 80071cc:	20000010 	.word	0x20000010
 80071d0:	08007d9d 	.word	0x08007d9d
 80071d4:	08007daa 	.word	0x08007daa
 80071d8:	08007dd8 	.word	0x08007dd8

080071dc <_close_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4d06      	ldr	r5, [pc, #24]	; (80071f8 <_close_r+0x1c>)
 80071e0:	2300      	movs	r3, #0
 80071e2:	4604      	mov	r4, r0
 80071e4:	4608      	mov	r0, r1
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	f7f9 fc49 	bl	8000a7e <_close>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_close_r+0x1a>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_close_r+0x1a>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	20000354 	.word	0x20000354

080071fc <__sflush_r>:
 80071fc:	898a      	ldrh	r2, [r1, #12]
 80071fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007202:	4605      	mov	r5, r0
 8007204:	0710      	lsls	r0, r2, #28
 8007206:	460c      	mov	r4, r1
 8007208:	d458      	bmi.n	80072bc <__sflush_r+0xc0>
 800720a:	684b      	ldr	r3, [r1, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc05      	bgt.n	800721c <__sflush_r+0x20>
 8007210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	dc02      	bgt.n	800721c <__sflush_r+0x20>
 8007216:	2000      	movs	r0, #0
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800721e:	2e00      	cmp	r6, #0
 8007220:	d0f9      	beq.n	8007216 <__sflush_r+0x1a>
 8007222:	2300      	movs	r3, #0
 8007224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007228:	682f      	ldr	r7, [r5, #0]
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	d032      	beq.n	8007294 <__sflush_r+0x98>
 800722e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	075a      	lsls	r2, r3, #29
 8007234:	d505      	bpl.n	8007242 <__sflush_r+0x46>
 8007236:	6863      	ldr	r3, [r4, #4]
 8007238:	1ac0      	subs	r0, r0, r3
 800723a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800723c:	b10b      	cbz	r3, 8007242 <__sflush_r+0x46>
 800723e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007240:	1ac0      	subs	r0, r0, r3
 8007242:	2300      	movs	r3, #0
 8007244:	4602      	mov	r2, r0
 8007246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007248:	6a21      	ldr	r1, [r4, #32]
 800724a:	4628      	mov	r0, r5
 800724c:	47b0      	blx	r6
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	d106      	bne.n	8007262 <__sflush_r+0x66>
 8007254:	6829      	ldr	r1, [r5, #0]
 8007256:	291d      	cmp	r1, #29
 8007258:	d82c      	bhi.n	80072b4 <__sflush_r+0xb8>
 800725a:	4a2a      	ldr	r2, [pc, #168]	; (8007304 <__sflush_r+0x108>)
 800725c:	40ca      	lsrs	r2, r1
 800725e:	07d6      	lsls	r6, r2, #31
 8007260:	d528      	bpl.n	80072b4 <__sflush_r+0xb8>
 8007262:	2200      	movs	r2, #0
 8007264:	6062      	str	r2, [r4, #4]
 8007266:	04d9      	lsls	r1, r3, #19
 8007268:	6922      	ldr	r2, [r4, #16]
 800726a:	6022      	str	r2, [r4, #0]
 800726c:	d504      	bpl.n	8007278 <__sflush_r+0x7c>
 800726e:	1c42      	adds	r2, r0, #1
 8007270:	d101      	bne.n	8007276 <__sflush_r+0x7a>
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	b903      	cbnz	r3, 8007278 <__sflush_r+0x7c>
 8007276:	6560      	str	r0, [r4, #84]	; 0x54
 8007278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800727a:	602f      	str	r7, [r5, #0]
 800727c:	2900      	cmp	r1, #0
 800727e:	d0ca      	beq.n	8007216 <__sflush_r+0x1a>
 8007280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007284:	4299      	cmp	r1, r3
 8007286:	d002      	beq.n	800728e <__sflush_r+0x92>
 8007288:	4628      	mov	r0, r5
 800728a:	f7ff facd 	bl	8006828 <_free_r>
 800728e:	2000      	movs	r0, #0
 8007290:	6360      	str	r0, [r4, #52]	; 0x34
 8007292:	e7c1      	b.n	8007218 <__sflush_r+0x1c>
 8007294:	6a21      	ldr	r1, [r4, #32]
 8007296:	2301      	movs	r3, #1
 8007298:	4628      	mov	r0, r5
 800729a:	47b0      	blx	r6
 800729c:	1c41      	adds	r1, r0, #1
 800729e:	d1c7      	bne.n	8007230 <__sflush_r+0x34>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0c4      	beq.n	8007230 <__sflush_r+0x34>
 80072a6:	2b1d      	cmp	r3, #29
 80072a8:	d001      	beq.n	80072ae <__sflush_r+0xb2>
 80072aa:	2b16      	cmp	r3, #22
 80072ac:	d101      	bne.n	80072b2 <__sflush_r+0xb6>
 80072ae:	602f      	str	r7, [r5, #0]
 80072b0:	e7b1      	b.n	8007216 <__sflush_r+0x1a>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	e7ad      	b.n	8007218 <__sflush_r+0x1c>
 80072bc:	690f      	ldr	r7, [r1, #16]
 80072be:	2f00      	cmp	r7, #0
 80072c0:	d0a9      	beq.n	8007216 <__sflush_r+0x1a>
 80072c2:	0793      	lsls	r3, r2, #30
 80072c4:	680e      	ldr	r6, [r1, #0]
 80072c6:	bf08      	it	eq
 80072c8:	694b      	ldreq	r3, [r1, #20]
 80072ca:	600f      	str	r7, [r1, #0]
 80072cc:	bf18      	it	ne
 80072ce:	2300      	movne	r3, #0
 80072d0:	eba6 0807 	sub.w	r8, r6, r7
 80072d4:	608b      	str	r3, [r1, #8]
 80072d6:	f1b8 0f00 	cmp.w	r8, #0
 80072da:	dd9c      	ble.n	8007216 <__sflush_r+0x1a>
 80072dc:	6a21      	ldr	r1, [r4, #32]
 80072de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072e0:	4643      	mov	r3, r8
 80072e2:	463a      	mov	r2, r7
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b0      	blx	r6
 80072e8:	2800      	cmp	r0, #0
 80072ea:	dc06      	bgt.n	80072fa <__sflush_r+0xfe>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e78e      	b.n	8007218 <__sflush_r+0x1c>
 80072fa:	4407      	add	r7, r0
 80072fc:	eba8 0800 	sub.w	r8, r8, r0
 8007300:	e7e9      	b.n	80072d6 <__sflush_r+0xda>
 8007302:	bf00      	nop
 8007304:	20400001 	.word	0x20400001

08007308 <_fflush_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	690b      	ldr	r3, [r1, #16]
 800730c:	4605      	mov	r5, r0
 800730e:	460c      	mov	r4, r1
 8007310:	b913      	cbnz	r3, 8007318 <_fflush_r+0x10>
 8007312:	2500      	movs	r5, #0
 8007314:	4628      	mov	r0, r5
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	b118      	cbz	r0, 8007322 <_fflush_r+0x1a>
 800731a:	6983      	ldr	r3, [r0, #24]
 800731c:	b90b      	cbnz	r3, 8007322 <_fflush_r+0x1a>
 800731e:	f7fe fe2d 	bl	8005f7c <__sinit>
 8007322:	4b14      	ldr	r3, [pc, #80]	; (8007374 <_fflush_r+0x6c>)
 8007324:	429c      	cmp	r4, r3
 8007326:	d11b      	bne.n	8007360 <_fflush_r+0x58>
 8007328:	686c      	ldr	r4, [r5, #4]
 800732a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0ef      	beq.n	8007312 <_fflush_r+0xa>
 8007332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007334:	07d0      	lsls	r0, r2, #31
 8007336:	d404      	bmi.n	8007342 <_fflush_r+0x3a>
 8007338:	0599      	lsls	r1, r3, #22
 800733a:	d402      	bmi.n	8007342 <_fflush_r+0x3a>
 800733c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800733e:	f7fe fec0 	bl	80060c2 <__retarget_lock_acquire_recursive>
 8007342:	4628      	mov	r0, r5
 8007344:	4621      	mov	r1, r4
 8007346:	f7ff ff59 	bl	80071fc <__sflush_r>
 800734a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800734c:	07da      	lsls	r2, r3, #31
 800734e:	4605      	mov	r5, r0
 8007350:	d4e0      	bmi.n	8007314 <_fflush_r+0xc>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	059b      	lsls	r3, r3, #22
 8007356:	d4dd      	bmi.n	8007314 <_fflush_r+0xc>
 8007358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800735a:	f7fe feb3 	bl	80060c4 <__retarget_lock_release_recursive>
 800735e:	e7d9      	b.n	8007314 <_fflush_r+0xc>
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <_fflush_r+0x70>)
 8007362:	429c      	cmp	r4, r3
 8007364:	d101      	bne.n	800736a <_fflush_r+0x62>
 8007366:	68ac      	ldr	r4, [r5, #8]
 8007368:	e7df      	b.n	800732a <_fflush_r+0x22>
 800736a:	4b04      	ldr	r3, [pc, #16]	; (800737c <_fflush_r+0x74>)
 800736c:	429c      	cmp	r4, r3
 800736e:	bf08      	it	eq
 8007370:	68ec      	ldreq	r4, [r5, #12]
 8007372:	e7da      	b.n	800732a <_fflush_r+0x22>
 8007374:	08007bf0 	.word	0x08007bf0
 8007378:	08007c10 	.word	0x08007c10
 800737c:	08007bd0 	.word	0x08007bd0

08007380 <fiprintf>:
 8007380:	b40e      	push	{r1, r2, r3}
 8007382:	b503      	push	{r0, r1, lr}
 8007384:	4601      	mov	r1, r0
 8007386:	ab03      	add	r3, sp, #12
 8007388:	4805      	ldr	r0, [pc, #20]	; (80073a0 <fiprintf+0x20>)
 800738a:	f853 2b04 	ldr.w	r2, [r3], #4
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f7ff fcaf 	bl	8006cf4 <_vfiprintf_r>
 8007396:	b002      	add	sp, #8
 8007398:	f85d eb04 	ldr.w	lr, [sp], #4
 800739c:	b003      	add	sp, #12
 800739e:	4770      	bx	lr
 80073a0:	20000010 	.word	0x20000010

080073a4 <_lseek_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d07      	ldr	r5, [pc, #28]	; (80073c4 <_lseek_r+0x20>)
 80073a8:	4604      	mov	r4, r0
 80073aa:	4608      	mov	r0, r1
 80073ac:	4611      	mov	r1, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f7f9 fb8a 	bl	8000acc <_lseek>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_lseek_r+0x1e>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_lseek_r+0x1e>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	20000354 	.word	0x20000354

080073c8 <__swhatbuf_r>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	460e      	mov	r6, r1
 80073cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d0:	2900      	cmp	r1, #0
 80073d2:	b096      	sub	sp, #88	; 0x58
 80073d4:	4614      	mov	r4, r2
 80073d6:	461d      	mov	r5, r3
 80073d8:	da08      	bge.n	80073ec <__swhatbuf_r+0x24>
 80073da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	602a      	str	r2, [r5, #0]
 80073e2:	061a      	lsls	r2, r3, #24
 80073e4:	d410      	bmi.n	8007408 <__swhatbuf_r+0x40>
 80073e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ea:	e00e      	b.n	800740a <__swhatbuf_r+0x42>
 80073ec:	466a      	mov	r2, sp
 80073ee:	f000 f8df 	bl	80075b0 <_fstat_r>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	dbf1      	blt.n	80073da <__swhatbuf_r+0x12>
 80073f6:	9a01      	ldr	r2, [sp, #4]
 80073f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007400:	425a      	negs	r2, r3
 8007402:	415a      	adcs	r2, r3
 8007404:	602a      	str	r2, [r5, #0]
 8007406:	e7ee      	b.n	80073e6 <__swhatbuf_r+0x1e>
 8007408:	2340      	movs	r3, #64	; 0x40
 800740a:	2000      	movs	r0, #0
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	b016      	add	sp, #88	; 0x58
 8007410:	bd70      	pop	{r4, r5, r6, pc}
	...

08007414 <__smakebuf_r>:
 8007414:	898b      	ldrh	r3, [r1, #12]
 8007416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007418:	079d      	lsls	r5, r3, #30
 800741a:	4606      	mov	r6, r0
 800741c:	460c      	mov	r4, r1
 800741e:	d507      	bpl.n	8007430 <__smakebuf_r+0x1c>
 8007420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	2301      	movs	r3, #1
 800742a:	6163      	str	r3, [r4, #20]
 800742c:	b002      	add	sp, #8
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	ab01      	add	r3, sp, #4
 8007432:	466a      	mov	r2, sp
 8007434:	f7ff ffc8 	bl	80073c8 <__swhatbuf_r>
 8007438:	9900      	ldr	r1, [sp, #0]
 800743a:	4605      	mov	r5, r0
 800743c:	4630      	mov	r0, r6
 800743e:	f7ff fa5f 	bl	8006900 <_malloc_r>
 8007442:	b948      	cbnz	r0, 8007458 <__smakebuf_r+0x44>
 8007444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007448:	059a      	lsls	r2, r3, #22
 800744a:	d4ef      	bmi.n	800742c <__smakebuf_r+0x18>
 800744c:	f023 0303 	bic.w	r3, r3, #3
 8007450:	f043 0302 	orr.w	r3, r3, #2
 8007454:	81a3      	strh	r3, [r4, #12]
 8007456:	e7e3      	b.n	8007420 <__smakebuf_r+0xc>
 8007458:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <__smakebuf_r+0x7c>)
 800745a:	62b3      	str	r3, [r6, #40]	; 0x28
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	6020      	str	r0, [r4, #0]
 8007460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	9b00      	ldr	r3, [sp, #0]
 8007468:	6163      	str	r3, [r4, #20]
 800746a:	9b01      	ldr	r3, [sp, #4]
 800746c:	6120      	str	r0, [r4, #16]
 800746e:	b15b      	cbz	r3, 8007488 <__smakebuf_r+0x74>
 8007470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007474:	4630      	mov	r0, r6
 8007476:	f000 f8ad 	bl	80075d4 <_isatty_r>
 800747a:	b128      	cbz	r0, 8007488 <__smakebuf_r+0x74>
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	f023 0303 	bic.w	r3, r3, #3
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	89a0      	ldrh	r0, [r4, #12]
 800748a:	4305      	orrs	r5, r0
 800748c:	81a5      	strh	r5, [r4, #12]
 800748e:	e7cd      	b.n	800742c <__smakebuf_r+0x18>
 8007490:	08005f15 	.word	0x08005f15

08007494 <__ascii_mbtowc>:
 8007494:	b082      	sub	sp, #8
 8007496:	b901      	cbnz	r1, 800749a <__ascii_mbtowc+0x6>
 8007498:	a901      	add	r1, sp, #4
 800749a:	b142      	cbz	r2, 80074ae <__ascii_mbtowc+0x1a>
 800749c:	b14b      	cbz	r3, 80074b2 <__ascii_mbtowc+0x1e>
 800749e:	7813      	ldrb	r3, [r2, #0]
 80074a0:	600b      	str	r3, [r1, #0]
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	1e10      	subs	r0, r2, #0
 80074a6:	bf18      	it	ne
 80074a8:	2001      	movne	r0, #1
 80074aa:	b002      	add	sp, #8
 80074ac:	4770      	bx	lr
 80074ae:	4610      	mov	r0, r2
 80074b0:	e7fb      	b.n	80074aa <__ascii_mbtowc+0x16>
 80074b2:	f06f 0001 	mvn.w	r0, #1
 80074b6:	e7f8      	b.n	80074aa <__ascii_mbtowc+0x16>

080074b8 <memmove>:
 80074b8:	4288      	cmp	r0, r1
 80074ba:	b510      	push	{r4, lr}
 80074bc:	eb01 0402 	add.w	r4, r1, r2
 80074c0:	d902      	bls.n	80074c8 <memmove+0x10>
 80074c2:	4284      	cmp	r4, r0
 80074c4:	4623      	mov	r3, r4
 80074c6:	d807      	bhi.n	80074d8 <memmove+0x20>
 80074c8:	1e43      	subs	r3, r0, #1
 80074ca:	42a1      	cmp	r1, r4
 80074cc:	d008      	beq.n	80074e0 <memmove+0x28>
 80074ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074d6:	e7f8      	b.n	80074ca <memmove+0x12>
 80074d8:	4402      	add	r2, r0
 80074da:	4601      	mov	r1, r0
 80074dc:	428a      	cmp	r2, r1
 80074de:	d100      	bne.n	80074e2 <memmove+0x2a>
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ea:	e7f7      	b.n	80074dc <memmove+0x24>

080074ec <__malloc_lock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__malloc_lock+0x8>)
 80074ee:	f7fe bde8 	b.w	80060c2 <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	20000348 	.word	0x20000348

080074f8 <__malloc_unlock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_unlock+0x8>)
 80074fa:	f7fe bde3 	b.w	80060c4 <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	20000348 	.word	0x20000348

08007504 <_realloc_r>:
 8007504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007508:	4680      	mov	r8, r0
 800750a:	4614      	mov	r4, r2
 800750c:	460e      	mov	r6, r1
 800750e:	b921      	cbnz	r1, 800751a <_realloc_r+0x16>
 8007510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	4611      	mov	r1, r2
 8007516:	f7ff b9f3 	b.w	8006900 <_malloc_r>
 800751a:	b92a      	cbnz	r2, 8007528 <_realloc_r+0x24>
 800751c:	f7ff f984 	bl	8006828 <_free_r>
 8007520:	4625      	mov	r5, r4
 8007522:	4628      	mov	r0, r5
 8007524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007528:	f000 f864 	bl	80075f4 <_malloc_usable_size_r>
 800752c:	4284      	cmp	r4, r0
 800752e:	4607      	mov	r7, r0
 8007530:	d802      	bhi.n	8007538 <_realloc_r+0x34>
 8007532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007536:	d812      	bhi.n	800755e <_realloc_r+0x5a>
 8007538:	4621      	mov	r1, r4
 800753a:	4640      	mov	r0, r8
 800753c:	f7ff f9e0 	bl	8006900 <_malloc_r>
 8007540:	4605      	mov	r5, r0
 8007542:	2800      	cmp	r0, #0
 8007544:	d0ed      	beq.n	8007522 <_realloc_r+0x1e>
 8007546:	42bc      	cmp	r4, r7
 8007548:	4622      	mov	r2, r4
 800754a:	4631      	mov	r1, r6
 800754c:	bf28      	it	cs
 800754e:	463a      	movcs	r2, r7
 8007550:	f7fe fdc2 	bl	80060d8 <memcpy>
 8007554:	4631      	mov	r1, r6
 8007556:	4640      	mov	r0, r8
 8007558:	f7ff f966 	bl	8006828 <_free_r>
 800755c:	e7e1      	b.n	8007522 <_realloc_r+0x1e>
 800755e:	4635      	mov	r5, r6
 8007560:	e7df      	b.n	8007522 <_realloc_r+0x1e>
	...

08007564 <_read_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d07      	ldr	r5, [pc, #28]	; (8007584 <_read_r+0x20>)
 8007568:	4604      	mov	r4, r0
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	2200      	movs	r2, #0
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7f9 fa4a 	bl	8000a0c <_read>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_read_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_read_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000354 	.word	0x20000354

08007588 <__ascii_wctomb>:
 8007588:	b149      	cbz	r1, 800759e <__ascii_wctomb+0x16>
 800758a:	2aff      	cmp	r2, #255	; 0xff
 800758c:	bf85      	ittet	hi
 800758e:	238a      	movhi	r3, #138	; 0x8a
 8007590:	6003      	strhi	r3, [r0, #0]
 8007592:	700a      	strbls	r2, [r1, #0]
 8007594:	f04f 30ff 	movhi.w	r0, #4294967295
 8007598:	bf98      	it	ls
 800759a:	2001      	movls	r0, #1
 800759c:	4770      	bx	lr
 800759e:	4608      	mov	r0, r1
 80075a0:	4770      	bx	lr

080075a2 <abort>:
 80075a2:	b508      	push	{r3, lr}
 80075a4:	2006      	movs	r0, #6
 80075a6:	f000 f855 	bl	8007654 <raise>
 80075aa:	2001      	movs	r0, #1
 80075ac:	f7f9 fa24 	bl	80009f8 <_exit>

080075b0 <_fstat_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_fstat_r+0x20>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	f7f9 fa6a 	bl	8000a96 <_fstat>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d102      	bne.n	80075cc <_fstat_r+0x1c>
 80075c6:	682b      	ldr	r3, [r5, #0]
 80075c8:	b103      	cbz	r3, 80075cc <_fstat_r+0x1c>
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	bd38      	pop	{r3, r4, r5, pc}
 80075ce:	bf00      	nop
 80075d0:	20000354 	.word	0x20000354

080075d4 <_isatty_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d06      	ldr	r5, [pc, #24]	; (80075f0 <_isatty_r+0x1c>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	f7f9 fa69 	bl	8000ab6 <_isatty>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_isatty_r+0x1a>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_isatty_r+0x1a>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20000354 	.word	0x20000354

080075f4 <_malloc_usable_size_r>:
 80075f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f8:	1f18      	subs	r0, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bfbc      	itt	lt
 80075fe:	580b      	ldrlt	r3, [r1, r0]
 8007600:	18c0      	addlt	r0, r0, r3
 8007602:	4770      	bx	lr

08007604 <_raise_r>:
 8007604:	291f      	cmp	r1, #31
 8007606:	b538      	push	{r3, r4, r5, lr}
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
 800760c:	d904      	bls.n	8007618 <_raise_r+0x14>
 800760e:	2316      	movs	r3, #22
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	f04f 30ff 	mov.w	r0, #4294967295
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800761a:	b112      	cbz	r2, 8007622 <_raise_r+0x1e>
 800761c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007620:	b94b      	cbnz	r3, 8007636 <_raise_r+0x32>
 8007622:	4620      	mov	r0, r4
 8007624:	f000 f830 	bl	8007688 <_getpid_r>
 8007628:	462a      	mov	r2, r5
 800762a:	4601      	mov	r1, r0
 800762c:	4620      	mov	r0, r4
 800762e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007632:	f000 b817 	b.w	8007664 <_kill_r>
 8007636:	2b01      	cmp	r3, #1
 8007638:	d00a      	beq.n	8007650 <_raise_r+0x4c>
 800763a:	1c59      	adds	r1, r3, #1
 800763c:	d103      	bne.n	8007646 <_raise_r+0x42>
 800763e:	2316      	movs	r3, #22
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	2001      	movs	r0, #1
 8007644:	e7e7      	b.n	8007616 <_raise_r+0x12>
 8007646:	2400      	movs	r4, #0
 8007648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800764c:	4628      	mov	r0, r5
 800764e:	4798      	blx	r3
 8007650:	2000      	movs	r0, #0
 8007652:	e7e0      	b.n	8007616 <_raise_r+0x12>

08007654 <raise>:
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <raise+0xc>)
 8007656:	4601      	mov	r1, r0
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	f7ff bfd3 	b.w	8007604 <_raise_r>
 800765e:	bf00      	nop
 8007660:	20000010 	.word	0x20000010

08007664 <_kill_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d07      	ldr	r5, [pc, #28]	; (8007684 <_kill_r+0x20>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	602b      	str	r3, [r5, #0]
 8007672:	f7f9 f9b1 	bl	80009d8 <_kill>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d102      	bne.n	8007680 <_kill_r+0x1c>
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	b103      	cbz	r3, 8007680 <_kill_r+0x1c>
 800767e:	6023      	str	r3, [r4, #0]
 8007680:	bd38      	pop	{r3, r4, r5, pc}
 8007682:	bf00      	nop
 8007684:	20000354 	.word	0x20000354

08007688 <_getpid_r>:
 8007688:	f7f9 b99e 	b.w	80009c8 <_getpid>

0800768c <atan2>:
 800768c:	f000 b800 	b.w	8007690 <__ieee754_atan2>

08007690 <__ieee754_atan2>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	eeb0 7b40 	vmov.f64	d7, d0
 8007696:	ee11 6a10 	vmov	r6, s2
 800769a:	ee11 0a90 	vmov	r0, s3
 800769e:	4273      	negs	r3, r6
 80076a0:	4f59      	ldr	r7, [pc, #356]	; (8007808 <__ieee754_atan2+0x178>)
 80076a2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80076a6:	4333      	orrs	r3, r6
 80076a8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80076ac:	42bb      	cmp	r3, r7
 80076ae:	d80d      	bhi.n	80076cc <__ieee754_atan2+0x3c>
 80076b0:	ee10 ca10 	vmov	ip, s0
 80076b4:	ee17 5a90 	vmov	r5, s15
 80076b8:	f1cc 0100 	rsb	r1, ip, #0
 80076bc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80076c0:	ea41 010c 	orr.w	r1, r1, ip
 80076c4:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80076c8:	42b9      	cmp	r1, r7
 80076ca:	d904      	bls.n	80076d6 <__ieee754_atan2+0x46>
 80076cc:	ee37 7b01 	vadd.f64	d7, d7, d1
 80076d0:	eeb0 0b47 	vmov.f64	d0, d7
 80076d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80076da:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80076de:	4331      	orrs	r1, r6
 80076e0:	d103      	bne.n	80076ea <__ieee754_atan2+0x5a>
 80076e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076e6:	f000 b897 	b.w	8007818 <atan>
 80076ea:	1784      	asrs	r4, r0, #30
 80076ec:	f004 0402 	and.w	r4, r4, #2
 80076f0:	ea53 010c 	orrs.w	r1, r3, ip
 80076f4:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80076f8:	d107      	bne.n	800770a <__ieee754_atan2+0x7a>
 80076fa:	2c02      	cmp	r4, #2
 80076fc:	d05d      	beq.n	80077ba <__ieee754_atan2+0x12a>
 80076fe:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80077d0 <__ieee754_atan2+0x140>
 8007702:	2c03      	cmp	r4, #3
 8007704:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8007708:	e7e2      	b.n	80076d0 <__ieee754_atan2+0x40>
 800770a:	ea52 0106 	orrs.w	r1, r2, r6
 800770e:	d107      	bne.n	8007720 <__ieee754_atan2+0x90>
 8007710:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80077d8 <__ieee754_atan2+0x148>
 8007714:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80077e0 <__ieee754_atan2+0x150>
 8007718:	2d00      	cmp	r5, #0
 800771a:	fe27 7b00 	vselge.f64	d7, d7, d0
 800771e:	e7d7      	b.n	80076d0 <__ieee754_atan2+0x40>
 8007720:	42ba      	cmp	r2, r7
 8007722:	d10f      	bne.n	8007744 <__ieee754_atan2+0xb4>
 8007724:	4293      	cmp	r3, r2
 8007726:	f104 34ff 	add.w	r4, r4, #4294967295
 800772a:	d107      	bne.n	800773c <__ieee754_atan2+0xac>
 800772c:	2c02      	cmp	r4, #2
 800772e:	d847      	bhi.n	80077c0 <__ieee754_atan2+0x130>
 8007730:	4b36      	ldr	r3, [pc, #216]	; (800780c <__ieee754_atan2+0x17c>)
 8007732:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007736:	ed94 7b00 	vldr	d7, [r4]
 800773a:	e7c9      	b.n	80076d0 <__ieee754_atan2+0x40>
 800773c:	2c02      	cmp	r4, #2
 800773e:	d842      	bhi.n	80077c6 <__ieee754_atan2+0x136>
 8007740:	4b33      	ldr	r3, [pc, #204]	; (8007810 <__ieee754_atan2+0x180>)
 8007742:	e7f6      	b.n	8007732 <__ieee754_atan2+0xa2>
 8007744:	42bb      	cmp	r3, r7
 8007746:	d0e3      	beq.n	8007710 <__ieee754_atan2+0x80>
 8007748:	1a9b      	subs	r3, r3, r2
 800774a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800774e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007752:	da1a      	bge.n	800778a <__ieee754_atan2+0xfa>
 8007754:	2800      	cmp	r0, #0
 8007756:	da01      	bge.n	800775c <__ieee754_atan2+0xcc>
 8007758:	323c      	adds	r2, #60	; 0x3c
 800775a:	db19      	blt.n	8007790 <__ieee754_atan2+0x100>
 800775c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8007760:	f000 f954 	bl	8007a0c <fabs>
 8007764:	f000 f858 	bl	8007818 <atan>
 8007768:	eeb0 7b40 	vmov.f64	d7, d0
 800776c:	2c01      	cmp	r4, #1
 800776e:	d012      	beq.n	8007796 <__ieee754_atan2+0x106>
 8007770:	2c02      	cmp	r4, #2
 8007772:	d019      	beq.n	80077a8 <__ieee754_atan2+0x118>
 8007774:	2c00      	cmp	r4, #0
 8007776:	d0ab      	beq.n	80076d0 <__ieee754_atan2+0x40>
 8007778:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80077e8 <__ieee754_atan2+0x158>
 800777c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007780:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80077f0 <__ieee754_atan2+0x160>
 8007784:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007788:	e7a2      	b.n	80076d0 <__ieee754_atan2+0x40>
 800778a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80077d8 <__ieee754_atan2+0x148>
 800778e:	e7ed      	b.n	800776c <__ieee754_atan2+0xdc>
 8007790:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80077f8 <__ieee754_atan2+0x168>
 8007794:	e7ea      	b.n	800776c <__ieee754_atan2+0xdc>
 8007796:	ee17 1a90 	vmov	r1, s15
 800779a:	ec53 2b17 	vmov	r2, r3, d7
 800779e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a2:	ec43 2b17 	vmov	d7, r2, r3
 80077a6:	e793      	b.n	80076d0 <__ieee754_atan2+0x40>
 80077a8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80077e8 <__ieee754_atan2+0x158>
 80077ac:	ee37 7b40 	vsub.f64	d7, d7, d0
 80077b0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80077f0 <__ieee754_atan2+0x160>
 80077b4:	ee30 7b47 	vsub.f64	d7, d0, d7
 80077b8:	e78a      	b.n	80076d0 <__ieee754_atan2+0x40>
 80077ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80077f0 <__ieee754_atan2+0x160>
 80077be:	e787      	b.n	80076d0 <__ieee754_atan2+0x40>
 80077c0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007800 <__ieee754_atan2+0x170>
 80077c4:	e784      	b.n	80076d0 <__ieee754_atan2+0x40>
 80077c6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80077f8 <__ieee754_atan2+0x168>
 80077ca:	e781      	b.n	80076d0 <__ieee754_atan2+0x40>
 80077cc:	f3af 8000 	nop.w
 80077d0:	54442d18 	.word	0x54442d18
 80077d4:	c00921fb 	.word	0xc00921fb
 80077d8:	54442d18 	.word	0x54442d18
 80077dc:	3ff921fb 	.word	0x3ff921fb
 80077e0:	54442d18 	.word	0x54442d18
 80077e4:	bff921fb 	.word	0xbff921fb
 80077e8:	33145c07 	.word	0x33145c07
 80077ec:	3ca1a626 	.word	0x3ca1a626
 80077f0:	54442d18 	.word	0x54442d18
 80077f4:	400921fb 	.word	0x400921fb
	...
 8007800:	54442d18 	.word	0x54442d18
 8007804:	3fe921fb 	.word	0x3fe921fb
 8007808:	7ff00000 	.word	0x7ff00000
 800780c:	08007ee8 	.word	0x08007ee8
 8007810:	08007f00 	.word	0x08007f00
 8007814:	00000000 	.word	0x00000000

08007818 <atan>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	eeb0 7b40 	vmov.f64	d7, d0
 800781e:	ee17 5a90 	vmov	r5, s15
 8007822:	4b73      	ldr	r3, [pc, #460]	; (80079f0 <atan+0x1d8>)
 8007824:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007828:	429c      	cmp	r4, r3
 800782a:	dd13      	ble.n	8007854 <atan+0x3c>
 800782c:	4b71      	ldr	r3, [pc, #452]	; (80079f4 <atan+0x1dc>)
 800782e:	429c      	cmp	r4, r3
 8007830:	dc03      	bgt.n	800783a <atan+0x22>
 8007832:	d107      	bne.n	8007844 <atan+0x2c>
 8007834:	ee10 3a10 	vmov	r3, s0
 8007838:	b123      	cbz	r3, 8007844 <atan+0x2c>
 800783a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800783e:	eeb0 0b47 	vmov.f64	d0, d7
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8007980 <atan+0x168>
 8007848:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8007988 <atan+0x170>
 800784c:	2d00      	cmp	r5, #0
 800784e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8007852:	e7f4      	b.n	800783e <atan+0x26>
 8007854:	4b68      	ldr	r3, [pc, #416]	; (80079f8 <atan+0x1e0>)
 8007856:	429c      	cmp	r4, r3
 8007858:	dc11      	bgt.n	800787e <atan+0x66>
 800785a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800785e:	429c      	cmp	r4, r3
 8007860:	dc0a      	bgt.n	8007878 <atan+0x60>
 8007862:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007866:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8007990 <atan+0x178>
 800786a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800786e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007876:	dce2      	bgt.n	800783e <atan+0x26>
 8007878:	f04f 33ff 	mov.w	r3, #4294967295
 800787c:	e013      	b.n	80078a6 <atan+0x8e>
 800787e:	f000 f8c5 	bl	8007a0c <fabs>
 8007882:	4b5e      	ldr	r3, [pc, #376]	; (80079fc <atan+0x1e4>)
 8007884:	429c      	cmp	r4, r3
 8007886:	dc4f      	bgt.n	8007928 <atan+0x110>
 8007888:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800788c:	429c      	cmp	r4, r3
 800788e:	dc41      	bgt.n	8007914 <atan+0xfc>
 8007890:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007894:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007898:	2300      	movs	r3, #0
 800789a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800789e:	ee30 0b07 	vadd.f64	d0, d0, d7
 80078a2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80078a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007998 <atan+0x180>
 80078aa:	ee27 4b07 	vmul.f64	d4, d7, d7
 80078ae:	ee24 5b04 	vmul.f64	d5, d4, d4
 80078b2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80079a0 <atan+0x188>
 80078b6:	eea5 3b06 	vfma.f64	d3, d5, d6
 80078ba:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80079a8 <atan+0x190>
 80078be:	eea3 6b05 	vfma.f64	d6, d3, d5
 80078c2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80079b0 <atan+0x198>
 80078c6:	eea6 3b05 	vfma.f64	d3, d6, d5
 80078ca:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80079b8 <atan+0x1a0>
 80078ce:	eea3 6b05 	vfma.f64	d6, d3, d5
 80078d2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80079c0 <atan+0x1a8>
 80078d6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80079c8 <atan+0x1b0>
 80078da:	eea6 3b05 	vfma.f64	d3, d6, d5
 80078de:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80079d0 <atan+0x1b8>
 80078e2:	eea5 2b06 	vfma.f64	d2, d5, d6
 80078e6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80079d8 <atan+0x1c0>
 80078ea:	eea2 6b05 	vfma.f64	d6, d2, d5
 80078ee:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80079e0 <atan+0x1c8>
 80078f2:	eea6 2b05 	vfma.f64	d2, d6, d5
 80078f6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80079e8 <atan+0x1d0>
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007900:	ee26 6b05 	vmul.f64	d6, d6, d5
 8007904:	eea3 6b04 	vfma.f64	d6, d3, d4
 8007908:	ee27 6b06 	vmul.f64	d6, d7, d6
 800790c:	d121      	bne.n	8007952 <atan+0x13a>
 800790e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007912:	e794      	b.n	800783e <atan+0x26>
 8007914:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007918:	2301      	movs	r3, #1
 800791a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800791e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007922:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007926:	e7be      	b.n	80078a6 <atan+0x8e>
 8007928:	4b35      	ldr	r3, [pc, #212]	; (8007a00 <atan+0x1e8>)
 800792a:	429c      	cmp	r4, r3
 800792c:	da0b      	bge.n	8007946 <atan+0x12e>
 800792e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007932:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007936:	ee30 5b47 	vsub.f64	d5, d0, d7
 800793a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800793e:	2302      	movs	r3, #2
 8007940:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007944:	e7af      	b.n	80078a6 <atan+0x8e>
 8007946:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800794a:	2303      	movs	r3, #3
 800794c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007950:	e7a9      	b.n	80078a6 <atan+0x8e>
 8007952:	4a2c      	ldr	r2, [pc, #176]	; (8007a04 <atan+0x1ec>)
 8007954:	492c      	ldr	r1, [pc, #176]	; (8007a08 <atan+0x1f0>)
 8007956:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800795a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800795e:	ed93 5b00 	vldr	d5, [r3]
 8007962:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007966:	ee36 7b47 	vsub.f64	d7, d6, d7
 800796a:	ed92 6b00 	vldr	d6, [r2]
 800796e:	2d00      	cmp	r5, #0
 8007970:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007974:	bfb8      	it	lt
 8007976:	eeb1 7b47 	vneglt.f64	d7, d7
 800797a:	e760      	b.n	800783e <atan+0x26>
 800797c:	f3af 8000 	nop.w
 8007980:	54442d18 	.word	0x54442d18
 8007984:	3ff921fb 	.word	0x3ff921fb
 8007988:	54442d18 	.word	0x54442d18
 800798c:	bff921fb 	.word	0xbff921fb
 8007990:	8800759c 	.word	0x8800759c
 8007994:	7e37e43c 	.word	0x7e37e43c
 8007998:	e322da11 	.word	0xe322da11
 800799c:	3f90ad3a 	.word	0x3f90ad3a
 80079a0:	24760deb 	.word	0x24760deb
 80079a4:	3fa97b4b 	.word	0x3fa97b4b
 80079a8:	a0d03d51 	.word	0xa0d03d51
 80079ac:	3fb10d66 	.word	0x3fb10d66
 80079b0:	c54c206e 	.word	0xc54c206e
 80079b4:	3fb745cd 	.word	0x3fb745cd
 80079b8:	920083ff 	.word	0x920083ff
 80079bc:	3fc24924 	.word	0x3fc24924
 80079c0:	5555550d 	.word	0x5555550d
 80079c4:	3fd55555 	.word	0x3fd55555
 80079c8:	52defd9a 	.word	0x52defd9a
 80079cc:	bfadde2d 	.word	0xbfadde2d
 80079d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80079d4:	bfa2b444 	.word	0xbfa2b444
 80079d8:	af749a6d 	.word	0xaf749a6d
 80079dc:	bfb3b0f2 	.word	0xbfb3b0f2
 80079e0:	fe231671 	.word	0xfe231671
 80079e4:	bfbc71c6 	.word	0xbfbc71c6
 80079e8:	9998ebc4 	.word	0x9998ebc4
 80079ec:	bfc99999 	.word	0xbfc99999
 80079f0:	440fffff 	.word	0x440fffff
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	3fdbffff 	.word	0x3fdbffff
 80079fc:	3ff2ffff 	.word	0x3ff2ffff
 8007a00:	40038000 	.word	0x40038000
 8007a04:	08007f18 	.word	0x08007f18
 8007a08:	08007f38 	.word	0x08007f38

08007a0c <fabs>:
 8007a0c:	ec51 0b10 	vmov	r0, r1, d0
 8007a10:	ee10 2a10 	vmov	r2, s0
 8007a14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a18:	ec43 2b10 	vmov	d0, r2, r3
 8007a1c:	4770      	bx	lr
	...

08007a20 <_init>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	bf00      	nop
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr

08007a2c <_fini>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr
