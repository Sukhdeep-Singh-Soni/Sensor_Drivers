
EVK_PMIC_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f8  080036f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003700  08003700  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  08003718  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003718  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9d1  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc1  00000000  00000000  0002ea0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00031740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7ed  00000000  00000000  000323a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010476  00000000  00000000  0005eb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010faa3  00000000  00000000  0006f00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017eaae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003808  00000000  00000000  0017eb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080036d0 	.word	0x080036d0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080036d0 	.word	0x080036d0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a2e      	ldr	r2, [pc, #184]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800056a:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MX_GPIO_Init+0xd4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a28      	ldr	r2, [pc, #160]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a22      	ldr	r2, [pc, #136]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <MX_GPIO_Init+0xd4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	481c      	ldr	r0, [pc, #112]	; (8000614 <MX_GPIO_Init+0xd8>)
 80005a2:	f000 ff4d 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nEN_SIMO_GPIO_Port, nEN_SIMO_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	481a      	ldr	r0, [pc, #104]	; (8000618 <MX_GPIO_Init+0xdc>)
 80005ae:	f000 ff47 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMIC_INT_Pin;
 80005b2:	2320      	movs	r3, #32
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PMIC_INT_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4813      	ldr	r0, [pc, #76]	; (8000614 <MX_GPIO_Init+0xd8>)
 80005c6:	f000 fd8f 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <MX_GPIO_Init+0xd8>)
 80005e4:	f000 fd80 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nEN_SIMO_Pin;
 80005e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nEN_SIMO_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_GPIO_Init+0xdc>)
 8000602:	f000 fd71 	bl	80010e8 <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40020400 	.word	0x40020400
 8000618:	40022000 	.word	0x40022000

0800061c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_I2C1_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_I2C1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00606092;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_I2C1_Init+0x74>)
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_I2C1_Init+0x7c>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_I2C1_Init+0x74>)
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_I2C1_Init+0x74>)
 8000658:	f000 ff26 	bl	80014a8 <HAL_I2C_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000662:	f000 faef 	bl	8000c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <MX_I2C1_Init+0x74>)
 800066a:	f001 fc0f 	bl	8001e8c <HAL_I2CEx_ConfigAnalogFilter>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000674:	f000 fae6 	bl	8000c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2C1_Init+0x74>)
 800067c:	f001 fc51 	bl	8001f22 <HAL_I2CEx_ConfigDigitalFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 fadd 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000002c 	.word	0x2000002c
 8000694:	40005400 	.word	0x40005400
 8000698:	00606092 	.word	0x00606092

0800069c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0ae      	sub	sp, #184	; 0xb8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2290      	movs	r2, #144	; 0x90
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 ffff 	bl	80036c0 <memset>
  if(i2cHandle->Instance==I2C1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <HAL_I2C_MspInit+0xb0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d13b      	bne.n	8000744 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 f8ce 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006e6:	f000 faad 	bl	8000c44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <HAL_I2C_MspInit+0xb4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <HAL_I2C_MspInit+0xb4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <HAL_I2C_MspInit+0xb4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000702:	23c0      	movs	r3, #192	; 0xc0
 8000704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000708:	2312      	movs	r3, #18
 800070a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071a:	2304      	movs	r3, #4
 800071c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <HAL_I2C_MspInit+0xb8>)
 8000728:	f000 fcde 	bl	80010e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HAL_I2C_MspInit+0xb4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a07      	ldr	r2, [pc, #28]	; (8000750 <HAL_I2C_MspInit+0xb4>)
 8000732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_I2C_MspInit+0xb4>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	37b8      	adds	r7, #184	; 0xb8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40005400 	.word	0x40005400
 8000750:	40023800 	.word	0x40023800
 8000754:	40020400 	.word	0x40020400

08000758 <Charger_Init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

	/*Charger_Init Function*/
	void Charger_Init(uint8_t *Buffer)
	{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
		//setting charger VCHGIN-MIN = 4.7V, ICHGIN-LIM = 475mA, i_PQ = 20%, CHG_EN = enable
		PMIC_Write_Reg(CHG_B, 0xF3, Buffer);
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	21f3      	movs	r1, #243	; 0xf3
 8000764:	2021      	movs	r0, #33	; 0x21
 8000766:	f000 f865 	bl	8000834 <PMIC_Write_Reg>
		//setting CHG_PQ(V_PQ) = 2.3V, I_TERM = 10% of IFAST_CHG(300mA), topoff timer 0 min
		PMIC_Write_Reg(CHG_C, 0x10, Buffer);
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	2110      	movs	r1, #16
 800076e:	2022      	movs	r0, #34	; 0x22
 8000770:	f000 f860 	bl	8000834 <PMIC_Write_Reg>
		//setting die junction temp at 60degree celsius, system regulation voltage(VSYS-REG) = 4.5V
		PMIC_Write_Reg(CHG_D, 0x10, Buffer);
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	2110      	movs	r1, #16
 8000778:	2023      	movs	r0, #35	; 0x23
 800077a:	f000 f85b 	bl	8000834 <PMIC_Write_Reg>
		//setting CHG_CC(I_FAST-CHG) = 300mA, fast charge safety timer is 5hours
		PMIC_Write_Reg(CHG_E, 0x9E, Buffer);
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	219e      	movs	r1, #158	; 0x9e
 8000782:	2024      	movs	r0, #36	; 0x24
 8000784:	f000 f856 	bl	8000834 <PMIC_Write_Reg>
		//setting CHG_CV(V_FAST-CHG) = 4.25V, USBS = not suspended
		PMIC_Write_Reg(CHG_G, 0x68, Buffer);
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	2168      	movs	r1, #104	; 0x68
 800078c:	2026      	movs	r0, #38	; 0x26
 800078e:	f000 f851 	bl	8000834 <PMIC_Write_Reg>
		//setting battery discharge current full sacle current value = 8.2mA, AMUX = disabled
		PMIC_Write_Reg(CHG_I, 0x00, Buffer);
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	2100      	movs	r1, #0
 8000796:	2028      	movs	r0, #40	; 0x28
 8000798:	f000 f84c 	bl	8000834 <PMIC_Write_Reg>
	}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Check_Charger_Status>:
	 @retval 0 - Charger OK and charging
	 	 	 1 - Charger OFf or Disconnected
	 	 	 2 - Charger Connected and enabled but not charging
	 	 	 3 - Charger done state*/
	uint8_t Check_Charger_Status(uint8_t *Buffer)
	{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
		uint8_t status, ret;
		status = PMIC_Read_Reg(CHG_STAT_B, Buffer);
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 f85a 	bl	8000868 <PMIC_Read_Reg>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73bb      	strb	r3, [r7, #14]
		if((status & 0xF0) == 0x80)
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007be:	2b80      	cmp	r3, #128	; 0x80
 80007c0:	d102      	bne.n	80007c8 <Check_Charger_Status+0x24>
			ret = CHG_FULL;
 80007c2:	2303      	movs	r3, #3
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	e011      	b.n	80007ec <Check_Charger_Status+0x48>
		else if((status & 0xF0) != 0x00)
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00a      	beq.n	80007e8 <Check_Charger_Status+0x44>
		{
			if((status & 0x0F) == 0x0E)
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	2b0e      	cmp	r3, #14
 80007da:	d102      	bne.n	80007e2 <Check_Charger_Status+0x3e>
				ret  = CHG_OK; //charger debounced and charging OK
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e004      	b.n	80007ec <Check_Charger_Status+0x48>
			else
				ret = CHG_ERR; //either charger in ULVO || OVP || i/p is being debounced || Charging Not-OK
 80007e2:	2302      	movs	r3, #2
 80007e4:	73fb      	strb	r3, [r7, #15]
 80007e6:	e001      	b.n	80007ec <Check_Charger_Status+0x48>
		}
		else
			ret = CHG_DISCON; //Charger Disconnected or Charger OFF
 80007e8:	2301      	movs	r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]

		return ret;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
	}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <Suspend_Charger>:
	/*End*/

	/*Suspend Charger Function*/
	void Suspend_Charger(uint8_t *Buffer)
	{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
		//set USBS bit to suspend mode to disconnect charger
		PMIC_Write_Reg(CHG_G, 0x6A, Buffer);
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	216a      	movs	r1, #106	; 0x6a
 8000802:	2026      	movs	r0, #38	; 0x26
 8000804:	f000 f816 	bl	8000834 <PMIC_Write_Reg>
	}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <Global_Config_Init>:
	/*End*/

	/*Global_Config_Init Function*/
	void Global_Config_Init(uint8_t *Buffer)
	{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
		//Software Cold reset
		PMIC_Write_Reg(GLBL, 0x01, Buffer);
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	2101      	movs	r1, #1
 800081c:	2010      	movs	r0, #16
 800081e:	f000 f809 	bl	8000834 <PMIC_Write_Reg>
		//Main Bias force Enable by Software
		PMIC_Write_Reg(GLBL, 0x10, Buffer);
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	2110      	movs	r1, #16
 8000826:	2010      	movs	r0, #16
 8000828:	f000 f804 	bl	8000834 <PMIC_Write_Reg>
	}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <PMIC_Write_Reg>:
	/*End*/


	/*PMIC_Write_Reg Function*/
	uint8_t PMIC_Write_Reg(uint8_t Reg_Address, uint8_t data, uint8_t *Buffer)
	{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	603a      	str	r2, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	460b      	mov	r3, r1
 8000842:	71bb      	strb	r3, [r7, #6]
		uint8_t ret;
		Buffer[0] = Reg_Address;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	701a      	strb	r2, [r3, #0]
		Buffer[1] = data;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	79ba      	ldrb	r2, [r7, #6]
 8000850:	701a      	strb	r2, [r3, #0]
		ret = Local_I2C_Transmit(Buffer, 2);
 8000852:	2102      	movs	r1, #2
 8000854:	6838      	ldr	r0, [r7, #0]
 8000856:	f000 f82b 	bl	80008b0 <Local_I2C_Transmit>
 800085a:	4603      	mov	r3, r0
 800085c:	73fb      	strb	r3, [r7, #15]
		return ret;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <PMIC_Read_Reg>:
	/*End*/

	/*PMIC_Read_Reg Function*/
	uint8_t PMIC_Read_Reg(uint8_t Reg_Address, uint8_t *Buffer)
	{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
		uint8_t ret;
		Buffer[0] = Reg_Address;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	701a      	strb	r2, [r3, #0]
		ret = Local_I2C_Receive(Buffer, 1);
 800087a:	2101      	movs	r1, #1
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	f000 f841 	bl	8000904 <Local_I2C_Receive>
 8000882:	4603      	mov	r3, r0
 8000884:	73fb      	strb	r3, [r7, #15]
		return ret;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SIMO_PMIC_Init>:
	/*End*/


	/*SIMO_PMIC_Init Function*/
	uint8_t SIMO_PMIC_Init(uint8_t *Buffer)
	{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
		uint8_t received;
		/*Initializing SBB Drive strength slower*/
		received = PMIC_Write_Reg(SBB_TOP, 0x02, Buffer);
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	2102      	movs	r1, #2
 800089c:	202f      	movs	r0, #47	; 0x2f
 800089e:	f7ff ffc9 	bl	8000834 <PMIC_Write_Reg>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
		return received;
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
	}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Local_I2C_Transmit>:
#endif
	/*Local_I2C_Transmit Function
	  @retval - 1 - I2C trasmission error
	  	  	  	transmit_val - returns transmitted value*/
	uint8_t Local_I2C_Transmit(uint8_t *Buffer, uint8_t Bytes)
	{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
		uint8_t transmit,ret;
		transmit = HAL_I2C_Master_Transmit(&hi2c1, SlaveAddress, Buffer, Bytes, HAL_MAX_DELAY);
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <Local_I2C_Transmit+0x4c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b299      	uxth	r1, r3
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <Local_I2C_Transmit+0x50>)
 80008d0:	f000 fe7a 	bl	80015c8 <HAL_I2C_Master_Transmit>
 80008d4:	4603      	mov	r3, r0
 80008d6:	73bb      	strb	r3, [r7, #14]
		if(transmit != HAL_OK)
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <Local_I2C_Transmit+0x34>
		{
			ret = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e005      	b.n	80008f0 <Local_I2C_Transmit+0x40>
		}
		else
		{
			ret = Local_I2C_Receive(Buffer, 1);
 80008e4:	2101      	movs	r1, #1
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 f80c 	bl	8000904 <Local_I2C_Receive>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]

		}
		return ret;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
	}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000
 8000900:	2000002c 	.word	0x2000002c

08000904 <Local_I2C_Receive>:

	/*Local_I2C_Receive Function
	  @retval 1 - I2C transmission error
	  	  	  Receive_val[Buffer] - return the recieved value*/
	uint8_t Local_I2C_Receive(uint8_t *Buffer, uint8_t Bytes)
	{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
		uint8_t received,ret;
		ret = HAL_I2C_Master_Transmit(&hi2c1, SlaveAddress, Buffer, Bytes, HAL_MAX_DELAY);
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <Local_I2C_Receive+0x60>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b299      	uxth	r1, r3
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	b29b      	uxth	r3, r3
 800091a:	f04f 32ff 	mov.w	r2, #4294967295
 800091e:	9200      	str	r2, [sp, #0]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4811      	ldr	r0, [pc, #68]	; (8000968 <Local_I2C_Receive+0x64>)
 8000924:	f000 fe50 	bl	80015c8 <HAL_I2C_Master_Transmit>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
		received = HAL_I2C_Master_Receive(&hi2c1, SlaveAddress, Buffer, Bytes, HAL_MAX_DELAY);
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <Local_I2C_Receive+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b299      	uxth	r1, r3
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	b29b      	uxth	r3, r3
 8000936:	f04f 32ff 	mov.w	r2, #4294967295
 800093a:	9200      	str	r2, [sp, #0]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <Local_I2C_Receive+0x64>)
 8000940:	f000 ff36 	bl	80017b0 <HAL_I2C_Master_Receive>
 8000944:	4603      	mov	r3, r0
 8000946:	73bb      	strb	r3, [r7, #14]
		if(received != HAL_OK)
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <Local_I2C_Receive+0x50>
			ret = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	e002      	b.n	800095a <Local_I2C_Receive+0x56>
		else
		{
			ret = Buffer[0];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	73fb      	strb	r3, [r7, #15]
		}
		return ret;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
	}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	2000002c 	.word	0x2000002c

0800096c <Check_Chip_ID>:

	/*Check_Chip_ID Function
	  @retval 0 - Correct Chip ID
	  	  	  1 - Incorrect Chip ID*/
	uint8_t Check_Chip_ID(uint8_t *Buffer)
	{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
		uint8_t ret, Id;
		Id = PMIC_Read_Reg(CID, Buffer);
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	2014      	movs	r0, #20
 8000978:	f7ff ff76 	bl	8000868 <PMIC_Read_Reg>
 800097c:	4603      	mov	r3, r0
 800097e:	73bb      	strb	r3, [r7, #14]
		Id &= 0x0F;
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	73bb      	strb	r3, [r7, #14]
		if(Id == 0x06)
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	2b06      	cmp	r3, #6
 800098c:	d102      	bne.n	8000994 <Check_Chip_ID+0x28>
			ret = 0; //Chip ID is correct
 800098e:	2300      	movs	r3, #0
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	e001      	b.n	8000998 <Check_Chip_ID+0x2c>
		else
			ret = 1; // Chip ID is Incorrect
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]

		return ret;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
	}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <SIMO_SetSBB>:
	/*End*/

	/*SIMO_SetSBB Function*/
	uint8_t SIMO_SetSBB(uint8_t SBBx_A_Address, uint8_t *Buffer ,uint8_t voltage)
	{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	6039      	str	r1, [r7, #0]
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	4613      	mov	r3, r2
 80009b0:	71bb      	strb	r3, [r7, #6]
		uint8_t val;
			//SBB_A_Address + 1 = SBB_B_Address
			//Buck Mode, 333mA current, active discharge enabled, enabled irrespective of FPS
			val = PMIC_Write_Reg(SBBx_A_Address + 1, 0x7F, Buffer);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	217f      	movs	r1, #127	; 0x7f
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff39 	bl	8000834 <PMIC_Write_Reg>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
			if(val != 0x7F)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	2b7f      	cmp	r3, #127	; 0x7f
 80009ca:	d001      	beq.n	80009d0 <SIMO_SetSBB+0x2e>
				return 1; //i2c transmission error
 80009cc:	2301      	movs	r3, #1
 80009ce:	e00e      	b.n	80009ee <SIMO_SetSBB+0x4c>
			//SBB_A_Address
			//voltage to set at SBBx
			val = PMIC_Write_Reg(SBBx_A_Address, voltage, Buffer);
 80009d0:	79b9      	ldrb	r1, [r7, #6]
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff2c 	bl	8000834 <PMIC_Write_Reg>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]
			if(val != voltage)
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d001      	beq.n	80009ec <SIMO_SetSBB+0x4a>
				return 1; //i2c transmission error
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <SIMO_SetSBB+0x4c>
			else
			{
				//ReadBack_SIMO(val);
				return 0; //OK
 80009ec:	2300      	movs	r3, #0
			}
	}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <SIMO_SetLDO>:

	uint8_t SIMO_SetLDO(uint8_t LDOx_A_Address, uint8_t *Buffer ,uint8_t voltage)
		{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	6039      	str	r1, [r7, #0]
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	4613      	mov	r3, r2
 8000a04:	71bb      	strb	r3, [r7, #6]
			uint8_t val;
				//LDO_A_Address + 1 = LDO_B_Address
				//Buck Mode, 333mA current, active discharge enabled, enabled irrespective of FPS
				val = PMIC_Write_Reg(LDOx_A_Address + 1, 0x0E, Buffer);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	210e      	movs	r1, #14
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff0f 	bl	8000834 <PMIC_Write_Reg>
 8000a16:	4603      	mov	r3, r0
 8000a18:	73fb      	strb	r3, [r7, #15]
				if(val != 0x0E)
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	2b0e      	cmp	r3, #14
 8000a1e:	d001      	beq.n	8000a24 <SIMO_SetLDO+0x2e>
					return 1; //i2c transmission error
 8000a20:	2301      	movs	r3, #1
 8000a22:	e00e      	b.n	8000a42 <SIMO_SetLDO+0x4c>
				//LDO_A_Address
				//voltage to set at LDOxx
				val = PMIC_Write_Reg(LDOx_A_Address, voltage, Buffer);
 8000a24:	79b9      	ldrb	r1, [r7, #6]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff02 	bl	8000834 <PMIC_Write_Reg>
 8000a30:	4603      	mov	r3, r0
 8000a32:	73fb      	strb	r3, [r7, #15]
				if(val != voltage)
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d001      	beq.n	8000a40 <SIMO_SetLDO+0x4a>
					return 1; //i2c transmission error
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <SIMO_SetLDO+0x4c>
				else
				{
					//ReadBack_SIMO(val);
					return 0; //OK
 8000a40:	2300      	movs	r3, #0
				}
		}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a52:	f000 f9da 	bl	8000e0a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a56:	f000 f84b 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5a:	f7ff fd6f 	bl	800053c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a5e:	f7ff fddd 	bl	800061c <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a62:	f000 f95f 	bl	8000d24 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Buffer[20] = {0};
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10, GPIO_PIN_SET); //set nEN pin to HIGH
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7e:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <main+0x9c>)
 8000a80:	f000 fcde 	bl	8001440 <HAL_GPIO_WritePin>


  if(Check_Chip_ID(Buffer)) //check the chip id of max77654 pmic which should be 0xX6
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff70 	bl	800096c <Check_Chip_ID>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <main+0x4c>
	 Error_Handler();
 8000a92:	f000 f8d7 	bl	8000c44 <Error_Handler>
 8000a96:	e026      	b.n	8000ae6 <main+0x9a>
  else
  {
  Global_Config_Init(Buffer); //software cold reset and main bias enable by software
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff feb8 	bl	8000810 <Global_Config_Init>

  SIMO_PMIC_Init(Buffer);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fef4 	bl	8000890 <SIMO_PMIC_Init>

  Charger_Init(Buffer); //configured charger for fast charging
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe54 	bl	8000758 <Charger_Init>

  SIMO_SetSBB(SBB1_A, Buffer, 0x08);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	202b      	movs	r0, #43	; 0x2b
 8000ab8:	f7ff ff73 	bl	80009a2 <SIMO_SetSBB>
  SIMO_SetSBB(SBB2_A, Buffer, 0x32);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2232      	movs	r2, #50	; 0x32
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	202d      	movs	r0, #45	; 0x2d
 8000ac4:	f7ff ff6d 	bl	80009a2 <SIMO_SetSBB>

  SIMO_SetLDO(LDO0_A, Buffer, 0x28);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2228      	movs	r2, #40	; 0x28
 8000acc:	4619      	mov	r1, r3
 8000ace:	2038      	movs	r0, #56	; 0x38
 8000ad0:	f7ff ff91 	bl	80009f6 <SIMO_SetLDO>
  SIMO_SetLDO(LDO1_A, Buffer, 0x44);
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2244      	movs	r2, #68	; 0x44
 8000ad8:	4619      	mov	r1, r3
 8000ada:	203a      	movs	r0, #58	; 0x3a
 8000adc:	f7ff ff8b 	bl	80009f6 <SIMO_SetLDO>

  HAL_TIM_Base_Start_IT(&htim14);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <main+0xa0>)
 8000ae2:	f002 fb4b 	bl	800317c <HAL_TIM_Base_Start_IT>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x9a>
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	20000078 	.word	0x20000078

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2234      	movs	r2, #52	; 0x34
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fdde 	bl	80036c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <SystemClock_Config+0xac>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <SystemClock_Config+0xac>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <SystemClock_Config+0xac>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <SystemClock_Config+0xb0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <SystemClock_Config+0xb0>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <SystemClock_Config+0xb0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fa2e 	bl	8001fbc <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b66:	f000 f86d 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fcc7 	bl	8002518 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b90:	f000 f858 	bl	8000c44 <Error_Handler>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3750      	adds	r7, #80	; 0x50
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40007000 	.word	0x40007000

08000ba4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	  uint8_t Buffer[30] = {0};
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	831a      	strh	r2, [r3, #24]
	  if(htim == &htim14)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d12f      	bne.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x88>
	  {
		  switch(Check_Charger_Status(Buffer))
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fde7 	bl	80007a4 <Check_Charger_Status>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d829      	bhi.n	8000c30 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000bf5 	.word	0x08000bf5
 8000be8:	08000c01 	.word	0x08000c01
 8000bec:	08000c0f 	.word	0x08000c0f
 8000bf0:	08000c15 	.word	0x08000c15
		  {
		  	  case CHG_OK:
		  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12); //set LED1 HIGH
 8000bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bfa:	f000 fc3a 	bl	8001472 <HAL_GPIO_TogglePin>
		  		  break;
 8000bfe:	e018      	b.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  	  case CHG_DISCON:
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); //set LED1 LOW
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c08:	f000 fc1a 	bl	8001440 <HAL_GPIO_WritePin>
				  break;
 8000c0c:	e011      	b.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  	  case CHG_ERR:
		  		  Error_Handler();
 8000c0e:	f000 f819 	bl	8000c44 <Error_Handler>
		  		  break;
 8000c12:	e00e      	b.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  	  case CHG_FULL:
		  		  Suspend_Charger(Buffer);
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fdec 	bl	80007f6 <Suspend_Charger>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //set LED1 HIGH
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c26:	f000 fc0b 	bl	8001440 <HAL_GPIO_WritePin>
				  break;
 8000c2a:	e002      	b.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  	  default:
		  		  break;
		  }
	  }
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  		  break;
 8000c30:	bf00      	nop
	 // Check_TIM_Delay();
 }
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000078 	.word	0x20000078
 8000c40:	40020400 	.word	0x40020400

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x44>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x44>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x44>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x44>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x44>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler+0x4>

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f8ce 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000cf2:	f002 fabb 	bl	800326c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000078 	.word	0x20000078

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_TIM14_Init+0x40>)
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <MX_TIM14_Init+0x44>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 25000-1;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_TIM14_Init+0x40>)
 8000d30:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000d34:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_TIM14_Init+0x40>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_TIM14_Init+0x40>)
 8000d3e:	2263      	movs	r2, #99	; 0x63
 8000d40:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_TIM14_Init+0x40>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_TIM14_Init+0x40>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_TIM14_Init+0x40>)
 8000d50:	f002 f9bc 	bl	80030cc <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000d5a:	f7ff ff73 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000078 	.word	0x20000078
 8000d68:	40002000 	.word	0x40002000

08000d6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <HAL_TIM_Base_MspInit+0x44>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d113      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	202d      	movs	r0, #45	; 0x2d
 8000d9c:	f000 f96d 	bl	800107a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000da0:	202d      	movs	r0, #45	; 0x2d
 8000da2:	f000 f986 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40002000 	.word	0x40002000
 8000db4:	40023800 	.word	0x40023800

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ff8d 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f002 fc47 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fe2f 	bl	8000a4c <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dfc:	08003708 	.word	0x08003708
  ldr r2, =_sbss
 8000e00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e04:	200000c8 	.word	0x200000c8

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>

08000e0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 f928 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e14:	200f      	movs	r0, #15
 8000e16:	f000 f805 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1a:	f7ff ff19 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f943 	bl	80010ce <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f90b 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000008 	.word	0x20000008

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	200000c4 	.word	0x200000c4

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200000c4 	.word	0x200000c4

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	05fa0000 	.word	0x05fa0000

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff29 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff3e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff31 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa2 	bl	8001020 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e175      	b.n	80013f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8164 	bne.w	80013ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_GPIO_Init+0x56>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d130      	bne.n	80011a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d017      	beq.n	80011dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	69b9      	ldr	r1, [r7, #24]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80be 	beq.w	80013ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b66      	ldr	r3, [pc, #408]	; (800140c <HAL_GPIO_Init+0x324>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a65      	ldr	r2, [pc, #404]	; (800140c <HAL_GPIO_Init+0x324>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_GPIO_Init+0x324>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800128a:	4a61      	ldr	r2, [pc, #388]	; (8001410 <HAL_GPIO_Init+0x328>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_GPIO_Init+0x32c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d037      	beq.n	8001326 <HAL_GPIO_Init+0x23e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a57      	ldr	r2, [pc, #348]	; (8001418 <HAL_GPIO_Init+0x330>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d031      	beq.n	8001322 <HAL_GPIO_Init+0x23a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a56      	ldr	r2, [pc, #344]	; (800141c <HAL_GPIO_Init+0x334>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d02b      	beq.n	800131e <HAL_GPIO_Init+0x236>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a55      	ldr	r2, [pc, #340]	; (8001420 <HAL_GPIO_Init+0x338>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x232>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a54      	ldr	r2, [pc, #336]	; (8001424 <HAL_GPIO_Init+0x33c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x22e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a53      	ldr	r2, [pc, #332]	; (8001428 <HAL_GPIO_Init+0x340>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x22a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_GPIO_Init+0x344>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a51      	ldr	r2, [pc, #324]	; (8001430 <HAL_GPIO_Init+0x348>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x34c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x350>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x21a>
 80012fe:	2309      	movs	r3, #9
 8001300:	e012      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001302:	230a      	movs	r3, #10
 8001304:	e010      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001306:	2308      	movs	r3, #8
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800130a:	2307      	movs	r3, #7
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800130e:	2306      	movs	r3, #6
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x240>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x240>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x328>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b3d      	ldr	r3, [pc, #244]	; (800143c <HAL_GPIO_Init+0x354>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a34      	ldr	r2, [pc, #208]	; (800143c <HAL_GPIO_Init+0x354>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <HAL_GPIO_Init+0x354>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a29      	ldr	r2, [pc, #164]	; (800143c <HAL_GPIO_Init+0x354>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <HAL_GPIO_Init+0x354>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_GPIO_Init+0x354>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_GPIO_Init+0x354>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <HAL_GPIO_Init+0x354>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae86 	bls.w	8001108 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40022000 	.word	0x40022000
 8001438:	40022400 	.word	0x40022400
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	041a      	lsls	r2, r3, #16
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43d9      	mvns	r1, r3
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	400b      	ands	r3, r1
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e07f      	b.n	80015ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff f8e4 	bl	800069c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2224      	movs	r2, #36	; 0x24
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e006      	b.n	8001530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800152e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d104      	bne.n	8001542 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001540:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_I2C_Init+0x11c>)
 800154e:	430b      	orrs	r3, r1
 8001550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69d9      	ldr	r1, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1a      	ldr	r2, [r3, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2220      	movs	r2, #32
 80015a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	02008000 	.word	0x02008000

080015c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	461a      	mov	r2, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	817b      	strh	r3, [r7, #10]
 80015d8:	4613      	mov	r3, r2
 80015da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	f040 80da 	bne.w	800179e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_I2C_Master_Transmit+0x30>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e0d3      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x1d8>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001600:	f7ff fc54 	bl	8000eac <HAL_GetTick>
 8001604:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2319      	movs	r3, #25
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f9e6 	bl	80019e4 <I2C_WaitOnFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0be      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2221      	movs	r2, #33	; 0x21
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2210      	movs	r2, #16
 800162e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	893a      	ldrh	r2, [r7, #8]
 8001642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164e:	b29b      	uxth	r3, r3
 8001650:	2bff      	cmp	r3, #255	; 0xff
 8001652:	d90e      	bls.n	8001672 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	22ff      	movs	r2, #255	; 0xff
 8001658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	b2da      	uxtb	r2, r3
 8001660:	8979      	ldrh	r1, [r7, #10]
 8001662:	4b51      	ldr	r3, [pc, #324]	; (80017a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fbdc 	bl	8001e28 <I2C_TransferConfig>
 8001670:	e06c      	b.n	800174c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	b2da      	uxtb	r2, r3
 8001682:	8979      	ldrh	r1, [r7, #10]
 8001684:	4b48      	ldr	r3, [pc, #288]	; (80017a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 fbcb 	bl	8001e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001692:	e05b      	b.n	800174c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	6a39      	ldr	r1, [r7, #32]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f9e3 	bl	8001a64 <I2C_WaitOnTXISFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e07b      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d034      	beq.n	800174c <HAL_I2C_Master_Transmit+0x184>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d130      	bne.n	800174c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	2200      	movs	r2, #0
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f975 	bl	80019e4 <I2C_WaitOnFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e04d      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d90e      	bls.n	800172c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	22ff      	movs	r2, #255	; 0xff
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	b2da      	uxtb	r2, r3
 800171a:	8979      	ldrh	r1, [r7, #10]
 800171c:	2300      	movs	r3, #0
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 fb7f 	bl	8001e28 <I2C_TransferConfig>
 800172a:	e00f      	b.n	800174c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	b2da      	uxtb	r2, r3
 800173c:	8979      	ldrh	r1, [r7, #10]
 800173e:	2300      	movs	r3, #0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fb6e 	bl	8001e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d19e      	bne.n	8001694 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	6a39      	ldr	r1, [r7, #32]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f9c2 	bl	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e01a      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2220      	movs	r2, #32
 8001770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_I2C_Master_Transmit+0x1e4>)
 800177e:	400b      	ands	r3, r1
 8001780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800179e:	2302      	movs	r3, #2
  }
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	80002000 	.word	0x80002000
 80017ac:	fe00e800 	.word	0xfe00e800

080017b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	461a      	mov	r2, r3
 80017bc:	460b      	mov	r3, r1
 80017be:	817b      	strh	r3, [r7, #10]
 80017c0:	4613      	mov	r3, r2
 80017c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	f040 80db 	bne.w	8001988 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_I2C_Master_Receive+0x30>
 80017dc:	2302      	movs	r3, #2
 80017de:	e0d4      	b.n	800198a <HAL_I2C_Master_Receive+0x1da>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017e8:	f7ff fb60 	bl	8000eac <HAL_GetTick>
 80017ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2319      	movs	r3, #25
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f8f2 	bl	80019e4 <I2C_WaitOnFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0bf      	b.n	800198a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2222      	movs	r2, #34	; 0x22
 800180e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2210      	movs	r2, #16
 8001816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	893a      	ldrh	r2, [r7, #8]
 800182a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	2bff      	cmp	r3, #255	; 0xff
 800183a:	d90e      	bls.n	800185a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	22ff      	movs	r2, #255	; 0xff
 8001840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	b2da      	uxtb	r2, r3
 8001848:	8979      	ldrh	r1, [r7, #10]
 800184a:	4b52      	ldr	r3, [pc, #328]	; (8001994 <HAL_I2C_Master_Receive+0x1e4>)
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fae8 	bl	8001e28 <I2C_TransferConfig>
 8001858:	e06d      	b.n	8001936 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	b2da      	uxtb	r2, r3
 800186a:	8979      	ldrh	r1, [r7, #10]
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_I2C_Master_Receive+0x1e4>)
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fad7 	bl	8001e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800187a:	e05c      	b.n	8001936 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	6a39      	ldr	r1, [r7, #32]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f96b 	bl	8001b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e07c      	b.n	800198a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d034      	beq.n	8001936 <HAL_I2C_Master_Receive+0x186>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d130      	bne.n	8001936 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	2200      	movs	r2, #0
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f880 	bl	80019e4 <I2C_WaitOnFlagUntilTimeout>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e04d      	b.n	800198a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d90e      	bls.n	8001916 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	22ff      	movs	r2, #255	; 0xff
 80018fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	b2da      	uxtb	r2, r3
 8001904:	8979      	ldrh	r1, [r7, #10]
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fa8a 	bl	8001e28 <I2C_TransferConfig>
 8001914:	e00f      	b.n	8001936 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	b2da      	uxtb	r2, r3
 8001926:	8979      	ldrh	r1, [r7, #10]
 8001928:	2300      	movs	r3, #0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 fa79 	bl	8001e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d19d      	bne.n	800187c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	6a39      	ldr	r1, [r7, #32]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f8cd 	bl	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e01a      	b.n	800198a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2220      	movs	r2, #32
 800195a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_I2C_Master_Receive+0x1e8>)
 8001968:	400b      	ands	r3, r1
 800196a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001988:	2302      	movs	r3, #2
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	80002400 	.word	0x80002400
 8001998:	fe00e800 	.word	0xfe00e800

0800199c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d103      	bne.n	80019ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d007      	beq.n	80019d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	619a      	str	r2, [r3, #24]
  }
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f4:	e022      	b.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d01e      	beq.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fe:	f7ff fa55 	bl	8000eac <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d302      	bcc.n	8001a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d113      	bne.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f043 0220 	orr.w	r2, r3, #32
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00f      	b.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4013      	ands	r3, r2
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d0cd      	beq.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a70:	e02c      	b.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f8ea 	bl	8001c50 <I2C_IsErrorOccurred>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e02a      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d01e      	beq.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7ff fa0d 	bl	8000eac <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d302      	bcc.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d113      	bne.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0220 	orr.w	r2, r3, #32
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e007      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d1cb      	bne.n	8001a72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af0:	e028      	b.n	8001b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f8aa 	bl	8001c50 <I2C_IsErrorOccurred>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e026      	b.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b06:	f7ff f9d1 	bl	8000eac <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d113      	bne.n	8001b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e007      	b.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d1cf      	bne.n	8001af2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b68:	e064      	b.n	8001c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f86e 	bl	8001c50 <I2C_IsErrorOccurred>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e062      	b.n	8001c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d138      	bne.n	8001bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d105      	bne.n	8001ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e04e      	b.n	8001c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d107      	bne.n	8001bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8001bc2:	e002      	b.n	8001bca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001bde:	400b      	ands	r3, r1
 8001be0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e022      	b.n	8001c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfe:	f7ff f955 	bl	8000eac <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d302      	bcc.n	8001c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10f      	bne.n	8001c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d193      	bne.n	8001b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	fe00e800 	.word	0xfe00e800

08001c50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d075      	beq.n	8001d68 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2210      	movs	r2, #16
 8001c82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c84:	e056      	b.n	8001d34 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d052      	beq.n	8001d34 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c8e:	f7ff f90d 	bl	8000eac <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <I2C_IsErrorOccurred+0x54>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d147      	bne.n	8001d34 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc6:	d12e      	bne.n	8001d26 <I2C_IsErrorOccurred+0xd6>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cce:	d02a      	beq.n	8001d26 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001cd0:	7cfb      	ldrb	r3, [r7, #19]
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d027      	beq.n	8001d26 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ce6:	f7ff f8e1 	bl	8000eac <HAL_GetTick>
 8001cea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cec:	e01b      	b.n	8001d26 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cee:	f7ff f8dd 	bl	8000eac <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b19      	cmp	r3, #25
 8001cfa:	d914      	bls.n	8001d26 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	f043 0220 	orr.w	r2, r3, #32
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d1dc      	bne.n	8001cee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d003      	beq.n	8001d4a <I2C_IsErrorOccurred+0xfa>
 8001d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d09d      	beq.n	8001c86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2220      	movs	r2, #32
 8001d58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f043 0308 	orr.w	r3, r3, #8
 8001da2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d01c      	beq.n	8001e18 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fddc 	bl	800199c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <I2C_IsErrorOccurred+0x1d4>)
 8001df0:	400b      	ands	r3, r1
 8001df2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	fe00e800 	.word	0xfe00e800

08001e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	817b      	strh	r3, [r7, #10]
 8001e36:	4613      	mov	r3, r2
 8001e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e40:	7a7b      	ldrb	r3, [r7, #9]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e48:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e56:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	0d5b      	lsrs	r3, r3, #21
 8001e62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <I2C_TransferConfig+0x60>)
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	ea02 0103 	and.w	r1, r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	03ff63ff 	.word	0x03ff63ff

08001e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d138      	bne.n	8001f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e032      	b.n	8001f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2224      	movs	r2, #36	; 0x24
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d139      	bne.n	8001fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e033      	b.n	8001fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2224      	movs	r2, #36	; 0x24
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e29b      	b.n	800250a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8087 	beq.w	80020ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe0:	4b96      	ldr	r3, [pc, #600]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d00c      	beq.n	8002006 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fec:	4b93      	ldr	r3, [pc, #588]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d112      	bne.n	800201e <HAL_RCC_OscConfig+0x62>
 8001ff8:	4b90      	ldr	r3, [pc, #576]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002004:	d10b      	bne.n	800201e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	4b8d      	ldr	r3, [pc, #564]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06c      	beq.n	80020ec <HAL_RCC_OscConfig+0x130>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d168      	bne.n	80020ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e275      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x7a>
 8002028:	4b84      	ldr	r3, [pc, #528]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a83      	ldr	r2, [pc, #524]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e02e      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x9c>
 800203e:	4b7f      	ldr	r3, [pc, #508]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7e      	ldr	r2, [pc, #504]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b7c      	ldr	r3, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7b      	ldr	r2, [pc, #492]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0xc0>
 8002062:	4b76      	ldr	r3, [pc, #472]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a75      	ldr	r2, [pc, #468]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b73      	ldr	r3, [pc, #460]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a72      	ldr	r2, [pc, #456]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 800207c:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6e      	ldr	r2, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b6c      	ldr	r3, [pc, #432]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6b      	ldr	r2, [pc, #428]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ff06 	bl	8000eac <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe ff02 	bl	8000eac <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e229      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fef2 	bl	8000eac <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe feee 	bl	8000eac <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e215      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b57      	ldr	r3, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x110>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d069      	beq.n	80021ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fa:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_RCC_OscConfig+0x280>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x190>
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x17a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1e9      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	493d      	ldr	r1, [pc, #244]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e040      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a38      	ldr	r2, [pc, #224]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fea4 	bl	8000eac <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7fe fea0 	bl	8000eac <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4929      	ldr	r1, [pc, #164]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <HAL_RCC_OscConfig+0x280>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe80 	bl	8000eac <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe fe7c 	bl	8000eac <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1a3      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d038      	beq.n	800224c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_RCC_OscConfig+0x280>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_RCC_OscConfig+0x280>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fe5d 	bl	8000eac <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f6:	f7fe fe59 	bl	8000eac <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e180      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x23a>
 8002214:	e01a      	b.n	800224c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_RCC_OscConfig+0x280>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe fe43 	bl	8000eac <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe fe3f 	bl	8000eac <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d903      	bls.n	8002240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e166      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
 800223c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a4 	beq.w	80023a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b8c      	ldr	r3, [pc, #560]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a88      	ldr	r2, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b86      	ldr	r3, [pc, #536]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	4b83      	ldr	r3, [pc, #524]	; (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800228e:	4b80      	ldr	r3, [pc, #512]	; (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7f      	ldr	r2, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe fe07 	bl	8000eac <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe fe03 	bl	8000eac <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e12a      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCC_OscConfig+0x4d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x31a>
 80022c8:	4b70      	ldr	r3, [pc, #448]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a6f      	ldr	r2, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x33c>
 80022de:	4b6b      	ldr	r3, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ea:	4b68      	ldr	r3, [pc, #416]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	4a67      	ldr	r2, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6713      	str	r3, [r2, #112]	; 0x70
 80022f6:	e01c      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x35e>
 8002300:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	4a61      	ldr	r2, [pc, #388]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6713      	str	r3, [r2, #112]	; 0x70
 800230c:	4b5f      	ldr	r3, [pc, #380]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a5e      	ldr	r2, [pc, #376]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 800231a:	4b5c      	ldr	r3, [pc, #368]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5b      	ldr	r2, [pc, #364]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7fe fdb7 	bl	8000eac <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fdb3 	bl	8000eac <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0d8      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCC_OscConfig+0x386>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7fe fda1 	bl	8000eac <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fd9d 	bl	8000eac <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0c2      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a3c      	ldr	r2, [pc, #240]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80ae 	beq.w	8002508 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d06d      	beq.n	8002494 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d14b      	bne.n	8002458 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b32      	ldr	r3, [pc, #200]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fd6e 	bl	8000eac <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fd6a 	bl	8000eac <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e091      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	491b      	ldr	r1, [pc, #108]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fd3c 	bl	8000eac <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fd38 	bl	8000eac <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e05f      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x47c>
 8002456:	e057      	b.n	8002508 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fd22 	bl	8000eac <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fd1e 	bl	8000eac <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x4b0>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x54c>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_RCC_OscConfig+0x558>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d030      	beq.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d129      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d122      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d119      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10f      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 020f 	bic.w	r2, r3, #15
 8002546:	4965      	ldr	r1, [pc, #404]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe fc4e 	bl	8000eac <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fc4a 	bl	8000eac <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4922      	ldr	r1, [pc, #136]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1d0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fbaa 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	080036e8 	.word	0x080036e8
 80026e8:	20000004 	.word	0x20000004
 80026ec:	20000008 	.word	0x20000008

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b090      	sub	sp, #64	; 0x40
 80026f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
 80026fc:	2300      	movs	r3, #0
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002700:	2300      	movs	r3, #0
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_GetSysClockFreq+0x180>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x40>
 8002714:	2b08      	cmp	r3, #8
 8002716:	f200 80a1 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x16c>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e09b      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_GetSysClockFreq+0x184>)
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002728:	e09b      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272a:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_GetSysClockFreq+0x188>)
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800272e:	e098      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4b4f      	ldr	r3, [pc, #316]	; (8002870 <HAL_RCC_GetSysClockFreq+0x180>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800273a:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <HAL_RCC_GetSysClockFreq+0x180>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d028      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCC_GetSysClockFreq+0x180>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	2200      	movs	r2, #0
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	627a      	str	r2, [r7, #36]	; 0x24
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002758:	2100      	movs	r1, #0
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_GetSysClockFreq+0x188>)
 800275c:	fb03 f201 	mul.w	r2, r3, r1
 8002760:	2300      	movs	r3, #0
 8002762:	fb00 f303 	mul.w	r3, r0, r3
 8002766:	4413      	add	r3, r2
 8002768:	4a43      	ldr	r2, [pc, #268]	; (8002878 <HAL_RCC_GetSysClockFreq+0x188>)
 800276a:	fba0 1202 	umull	r1, r2, r0, r2
 800276e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002770:	460a      	mov	r2, r1
 8002772:	62ba      	str	r2, [r7, #40]	; 0x28
 8002774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002776:	4413      	add	r3, r2
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	2200      	movs	r2, #0
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	61fa      	str	r2, [r7, #28]
 8002782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002786:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800278a:	f7fd fd55 	bl	8000238 <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4613      	mov	r3, r2
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002796:	e053      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002798:	4b35      	ldr	r3, [pc, #212]	; (8002870 <HAL_RCC_GetSysClockFreq+0x180>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	2200      	movs	r2, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	617a      	str	r2, [r7, #20]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027aa:	f04f 0b00 	mov.w	fp, #0
 80027ae:	4652      	mov	r2, sl
 80027b0:	465b      	mov	r3, fp
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	0159      	lsls	r1, r3, #5
 80027bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c0:	0150      	lsls	r0, r2, #5
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	ebb2 080a 	subs.w	r8, r2, sl
 80027ca:	eb63 090b 	sbc.w	r9, r3, fp
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027e2:	ebb2 0408 	subs.w	r4, r2, r8
 80027e6:	eb63 0509 	sbc.w	r5, r3, r9
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	00eb      	lsls	r3, r5, #3
 80027f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f8:	00e2      	lsls	r2, r4, #3
 80027fa:	4614      	mov	r4, r2
 80027fc:	461d      	mov	r5, r3
 80027fe:	eb14 030a 	adds.w	r3, r4, sl
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	eb45 030b 	adc.w	r3, r5, fp
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002816:	4629      	mov	r1, r5
 8002818:	028b      	lsls	r3, r1, #10
 800281a:	4621      	mov	r1, r4
 800281c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002820:	4621      	mov	r1, r4
 8002822:	028a      	lsls	r2, r1, #10
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	2200      	movs	r2, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	60fa      	str	r2, [r7, #12]
 8002830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002834:	f7fd fd00 	bl	8000238 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4613      	mov	r3, r2
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_GetSysClockFreq+0x180>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	3301      	adds	r3, #1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetSysClockFreq+0x184>)
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002864:	4618      	mov	r0, r3
 8002866:	3740      	adds	r7, #64	; 0x40
 8002868:	46bd      	mov	sp, r7
 800286a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	00f42400 	.word	0x00f42400
 8002878:	017d7840 	.word	0x017d7840

0800287c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028ae:	6093      	str	r3, [r2, #8]
 80028b0:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	4964      	ldr	r1, [pc, #400]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	4959      	ldr	r1, [pc, #356]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d017      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002918:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	494a      	ldr	r1, [pc, #296]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002930:	d101      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 808b 	beq.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	; 0x40
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7fe fa92 	bl	8000eac <HAL_GetTick>
 8002988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298c:	f7fe fa8e 	bl	8000eac <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e38f      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d035      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d02e      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ea:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d114      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fa56 	bl	8000eac <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fe fa52 	bl	8000eac <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e351      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ee      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	d111      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a42:	400b      	ands	r3, r1
 8002a44:	4901      	ldr	r1, [pc, #4]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	0ffffcff 	.word	0x0ffffcff
 8002a58:	4bac      	ldr	r3, [pc, #688]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4aab      	ldr	r2, [pc, #684]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	4ba9      	ldr	r3, [pc, #676]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	49a6      	ldr	r1, [pc, #664]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a82:	4ba2      	ldr	r3, [pc, #648]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	4aa0      	ldr	r2, [pc, #640]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a92:	4b9e      	ldr	r3, [pc, #632]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	499b      	ldr	r1, [pc, #620]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab0:	4b96      	ldr	r3, [pc, #600]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abe:	4993      	ldr	r1, [pc, #588]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad2:	4b8e      	ldr	r3, [pc, #568]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae0:	498a      	ldr	r1, [pc, #552]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af4:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b02:	4982      	ldr	r1, [pc, #520]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b16:	4b7d      	ldr	r3, [pc, #500]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4979      	ldr	r1, [pc, #484]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b38:	4b74      	ldr	r3, [pc, #464]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4971      	ldr	r1, [pc, #452]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f023 020c 	bic.w	r2, r3, #12
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	4968      	ldr	r1, [pc, #416]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7c:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4960      	ldr	r1, [pc, #384]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bac:	4957      	ldr	r1, [pc, #348]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc0:	4b52      	ldr	r3, [pc, #328]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	494f      	ldr	r1, [pc, #316]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	4946      	ldr	r1, [pc, #280]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c04:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	493e      	ldr	r1, [pc, #248]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	4935      	ldr	r1, [pc, #212]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c56:	492d      	ldr	r1, [pc, #180]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d011      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c78:	4924      	ldr	r1, [pc, #144]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c88:	d101      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	4914      	ldr	r1, [pc, #80]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cdc:	490b      	ldr	r1, [pc, #44]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00f      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d00:	4902      	ldr	r1, [pc, #8]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	4986      	ldr	r1, [pc, #536]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d40:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d50:	497d      	ldr	r1, [pc, #500]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d006      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80d6 	beq.w	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d6c:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe f898 	bl	8000eac <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d80:	f7fe f894 	bl	8000eac <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e195      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d021      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11d      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc6:	0e1b      	lsrs	r3, r3, #24
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	019a      	lsls	r2, r3, #6
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	4958      	ldr	r1, [pc, #352]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02e      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e18:	d129      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e28:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2e:	0f1b      	lsrs	r3, r3, #28
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	019a      	lsls	r2, r3, #6
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	071b      	lsls	r3, r3, #28
 8002e4e:	493e      	ldr	r1, [pc, #248]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e56:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e5c:	f023 021f 	bic.w	r2, r3, #31
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	3b01      	subs	r3, #1
 8002e66:	4938      	ldr	r1, [pc, #224]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01d      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e80:	0e1b      	lsrs	r3, r3, #24
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e88:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8e:	0f1b      	lsrs	r3, r3, #28
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	019a      	lsls	r2, r3, #6
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	071b      	lsls	r3, r3, #28
 8002eae:	4926      	ldr	r1, [pc, #152]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d011      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	019a      	lsls	r2, r3, #6
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	071b      	lsls	r3, r3, #28
 8002ede:	491a      	ldr	r1, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef2:	f7fd ffdb 	bl	8000eac <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efa:	f7fd ffd7 	bl	8000eac <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	; 0x64
 8002f06:	d901      	bls.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0d8      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	f040 80ce 	bne.w	80030bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fd ffbe 	bl	8000eac <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f32:	e00b      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f34:	f7fd ffba 	bl	8000eac <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d904      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0bb      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f4c:	4b5e      	ldr	r3, [pc, #376]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f58:	d0ec      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02e      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d12a      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f82:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f90:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	0f1b      	lsrs	r3, r3, #28
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	019a      	lsls	r2, r3, #6
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	041b      	lsls	r3, r3, #16
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	4944      	ldr	r1, [pc, #272]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fbe:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	493d      	ldr	r1, [pc, #244]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d022      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fec:	d11d      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	0e1b      	lsrs	r3, r3, #24
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ffc:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	0f1b      	lsrs	r3, r3, #28
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	019a      	lsls	r2, r3, #6
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	071b      	lsls	r3, r3, #28
 8003022:	4929      	ldr	r1, [pc, #164]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d028      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	0e1b      	lsrs	r3, r3, #24
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	019a      	lsls	r2, r3, #6
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	4917      	ldr	r1, [pc, #92]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	4911      	ldr	r1, [pc, #68]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003094:	f7fd ff0a 	bl	8000eac <HAL_GetTick>
 8003098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800309c:	f7fd ff06 	bl	8000eac <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e007      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ba:	d1ef      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e049      	b.n	8003172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fe3a 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f000 f9f6 	bl	80034fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d001      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e054      	b.n	800323e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a26      	ldr	r2, [pc, #152]	; (800324c <HAL_TIM_Base_Start_IT+0xd0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x80>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031be:	d01d      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x80>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	; (8003250 <HAL_TIM_Base_Start_IT+0xd4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x80>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	; (8003254 <HAL_TIM_Base_Start_IT+0xd8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x80>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_TIM_Base_Start_IT+0xdc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x80>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <HAL_TIM_Base_Start_IT+0xe0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x80>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_TIM_Base_Start_IT+0xe4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x80>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_TIM_Base_Start_IT+0xe8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d115      	bne.n	8003228 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_TIM_Base_Start_IT+0xec>)
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b06      	cmp	r3, #6
 800320c:	d015      	beq.n	800323a <HAL_TIM_Base_Start_IT+0xbe>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d011      	beq.n	800323a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	e008      	b.n	800323a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e000      	b.n	800323c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40010000 	.word	0x40010000
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	40010400 	.word	0x40010400
 8003260:	40014000 	.word	0x40014000
 8003264:	40001800 	.word	0x40001800
 8003268:	00010007 	.word	0x00010007

0800326c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0202 	mvn.w	r2, #2
 8003298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f905 	bl	80034be <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8f7 	bl	80034aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f908 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d122      	bne.n	800331c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d11b      	bne.n	800331c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0204 	mvn.w	r2, #4
 80032ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8db 	bl	80034be <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8cd 	bl	80034aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f8de 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b08      	cmp	r3, #8
 8003328:	d122      	bne.n	8003370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b08      	cmp	r3, #8
 8003336:	d11b      	bne.n	8003370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0208 	mvn.w	r2, #8
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2204      	movs	r2, #4
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8b1 	bl	80034be <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8a3 	bl	80034aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f8b4 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b10      	cmp	r3, #16
 800337c:	d122      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b10      	cmp	r3, #16
 800338a:	d11b      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0210 	mvn.w	r2, #16
 8003394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2208      	movs	r2, #8
 800339a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f887 	bl	80034be <HAL_TIM_IC_CaptureCallback>
 80033b0:	e005      	b.n	80033be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f879 	bl	80034aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f88a 	bl	80034d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10e      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0201 	mvn.w	r2, #1
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fbda 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b80      	cmp	r3, #128	; 0x80
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f91a 	bl	8003650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342a:	d10e      	bne.n	800344a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d107      	bne.n	800344a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f90d 	bl	8003664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f838 	bl	80034e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b20      	cmp	r3, #32
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0220 	mvn.w	r2, #32
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8cd 	bl	800363c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a40      	ldr	r2, [pc, #256]	; (8003610 <TIM_Base_SetConfig+0x114>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d00f      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3d      	ldr	r2, [pc, #244]	; (8003614 <TIM_Base_SetConfig+0x118>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <TIM_Base_SetConfig+0x11c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3b      	ldr	r2, [pc, #236]	; (800361c <TIM_Base_SetConfig+0x120>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <TIM_Base_SetConfig+0x124>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <TIM_Base_SetConfig+0x114>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d027      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2c      	ldr	r2, [pc, #176]	; (8003614 <TIM_Base_SetConfig+0x118>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d023      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2b      	ldr	r2, [pc, #172]	; (8003618 <TIM_Base_SetConfig+0x11c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <TIM_Base_SetConfig+0x120>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a29      	ldr	r2, [pc, #164]	; (8003620 <TIM_Base_SetConfig+0x124>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d017      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a28      	ldr	r2, [pc, #160]	; (8003624 <TIM_Base_SetConfig+0x128>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <TIM_Base_SetConfig+0x12c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <TIM_Base_SetConfig+0x130>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <TIM_Base_SetConfig+0x134>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a24      	ldr	r2, [pc, #144]	; (8003634 <TIM_Base_SetConfig+0x138>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <TIM_Base_SetConfig+0x13c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d108      	bne.n	80035c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <TIM_Base_SetConfig+0x114>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_Base_SetConfig+0xf8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <TIM_Base_SetConfig+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d103      	bne.n	80035fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	615a      	str	r2, [r3, #20]
}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800
 8003630:	40001800 	.word	0x40001800
 8003634:	40001c00 	.word	0x40001c00
 8003638:	40002000 	.word	0x40002000

0800363c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	; (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	; (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	; (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x44>)
 800368c:	f000 f820 	bl	80036d0 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	08003700 	.word	0x08003700
 80036b4:	08003700 	.word	0x08003700
 80036b8:	08003700 	.word	0x08003700
 80036bc:	08003704 	.word	0x08003704

080036c0 <memset>:
 80036c0:	4402      	add	r2, r0
 80036c2:	4603      	mov	r3, r0
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d100      	bne.n	80036ca <memset+0xa>
 80036c8:	4770      	bx	lr
 80036ca:	f803 1b01 	strb.w	r1, [r3], #1
 80036ce:	e7f9      	b.n	80036c4 <memset+0x4>

080036d0 <_init>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr

080036dc <_fini>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr
