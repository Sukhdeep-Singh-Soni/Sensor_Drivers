
magnetometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000891c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a3  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008dfc  08008dfc  00018dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08008e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  20000074  08008e78  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001d0  08008e78  000201d0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001778b  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d0f  00000000  00000000  00037835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011e0  00000000  00000000  0003a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010a8  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033ea9  00000000  00000000  0003c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000169f6  00000000  00000000  00070679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d56b  00000000  00000000  0008706f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c45da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000051c4  00000000  00000000  001c462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000074 	.word	0x20000074
 8000250:	00000000 	.word	0x00000000
 8000254:	08008b38 	.word	0x08008b38

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000078 	.word	0x20000078
 8000270:	08008b38 	.word	0x08008b38

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	4b2c      	ldr	r3, [pc, #176]	; (800065c <MX_GPIO_Init+0xc8>)
 80005ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005b0:	4a2a      	ldr	r2, [pc, #168]	; (800065c <MX_GPIO_Init+0xc8>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <MX_GPIO_Init+0xc8>)
 80005bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <MX_GPIO_Init+0xc8>)
 80005ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MX_GPIO_Init+0xc8>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <MX_GPIO_Init+0xc8>)
 80005da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_GPIO_Init+0xc8>)
 80005e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_GPIO_Init+0xc8>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_GPIO_Init+0xc8>)
 80005f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	4815      	ldr	r0, [pc, #84]	; (8000660 <MX_GPIO_Init+0xcc>)
 800060a:	f001 f9c5 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <MX_GPIO_Init+0xcc>)
 8000626:	f000 ffdf 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT2_Pin;
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_GPIO_Init+0xd0>)
 8000630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <MX_GPIO_Init+0xcc>)
 800063e:	f000 ffd3 	bl	80015e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2012      	movs	r0, #18
 8000648:	f000 ff8b 	bl	8001562 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI7_IRQn);
  HAL_NVIC_DisableIRQ(EXTI7_IRQn);
 800064c:	2012      	movs	r0, #18
 800064e:	f000 ffb0 	bl	80015b2 <HAL_NVIC_DisableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	46020c00 	.word	0x46020c00
 8000660:	42021000 	.word	0x42021000
 8000664:	10110000 	.word	0x10110000

08000668 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_I2C1_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_I2C1_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_I2C1_Init+0x74>)
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <MX_I2C1_Init+0x7c>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_I2C1_Init+0x74>)
 8000680:	2201      	movs	r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <MX_I2C1_Init+0x74>)
 80006a4:	f001 f9c1 	bl	8001a2a <HAL_I2C_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ae:	f000 f900 	bl	80008b2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <MX_I2C1_Init+0x74>)
 80006b6:	f001 fea9 	bl	800240c <HAL_I2CEx_ConfigAnalogFilter>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c0:	f000 f8f7 	bl	80008b2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_I2C1_Init+0x74>)
 80006c8:	f001 feeb 	bl	80024a2 <HAL_I2CEx_ConfigDigitalFilter>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 f8ee 	bl	80008b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000090 	.word	0x20000090
 80006e0:	40005400 	.word	0x40005400
 80006e4:	00303d5b 	.word	0x00303d5b

080006e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0bc      	sub	sp, #240	; 0xf0
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	22c8      	movs	r2, #200	; 0xc8
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f007 f9fb 	bl	8007b04 <memset>
  if(i2cHandle->Instance==I2C1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <HAL_I2C_MspInit+0xc4>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d145      	bne.n	80007a4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000718:	f04f 0240 	mov.w	r2, #64	; 0x40
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4618      	mov	r0, r3
 800072e:	f003 fa83 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000738:	f000 f8bb 	bl	80008b2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_I2C_MspInit+0xc8>)
 800073e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <HAL_I2C_MspInit+0xc8>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_I2C_MspInit+0xc8>)
 800074e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 800075a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800075e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000762:	2312      	movs	r3, #18
 8000764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000774:	2304      	movs	r3, #4
 8000776:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800077e:	4619      	mov	r1, r3
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <HAL_I2C_MspInit+0xcc>)
 8000782:	f000 ff31 	bl	80015e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_I2C_MspInit+0xc8>)
 8000788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800078c:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_I2C_MspInit+0xc8>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000792:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_I2C_MspInit+0xc8>)
 8000798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800079c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a4:	bf00      	nop
 80007a6:	37f0      	adds	r7, #240	; 0xf0
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40005400 	.word	0x40005400
 80007b0:	46020c00 	.word	0x46020c00
 80007b4:	42020400 	.word	0x42020400

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f000 fd2a 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f80f 	bl	80007e2 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007c4:	f000 f869 	bl	800089a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f7ff fee4 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007cc:	f7ff ff4c 	bl	8000668 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007d0:	f000 f99a 	bl	8000b08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	  	  i2c_scanner();
 80007d4:	f000 fa76 	bl	8000cc4 <i2c_scanner>
  	  	  bsp_init(); //initialize magnetometer
 80007d8:	f000 fba6 	bl	8000f28 <bsp_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bsp_process();
 80007dc:	f000 fbb0 	bl	8000f40 <bsp_process>
 80007e0:	e7fc      	b.n	80007dc <main+0x24>

080007e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b09e      	sub	sp, #120	; 0x78
 80007e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	2260      	movs	r2, #96	; 0x60
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 f987 	bl	8007b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000806:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800080a:	f001 fe97 	bl	800253c <HAL_PWREx_ControlVoltageScaling>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000814:	f000 f84d 	bl	80008b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000818:	2310      	movs	r3, #16
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800082c:	2301      	movs	r3, #1
 800082e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000836:	2303      	movs	r3, #3
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800083a:	2308      	movs	r3, #8
 800083c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800084a:	230c      	movs	r3, #12
 800084c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 ff42 	bl	80026e0 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000862:	f000 f826 	bl	80008b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	231f      	movs	r3, #31
 8000868:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800086e:	230a      	movs	r3, #10
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fe02 	bl	800348c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800088e:	f000 f810 	bl	80008b2 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3778      	adds	r7, #120	; 0x78
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800089e:	2002      	movs	r0, #2
 80008a0:	f001 fece 	bl	8002640 <HAL_PWREx_ConfigSupply>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemPower_Config+0x14>
  {
    Error_Handler();
 80008aa:	f000 f802 	bl	80008b2 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b6:	b672      	cpsid	i
}
 80008b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ba:	e7fe      	b.n	80008ba <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_MspInit+0x30>)
 80008c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008c8:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x30>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x30>)
 80008d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	46020c00 	.word	0x46020c00

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 fcce 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8000948:	2080      	movs	r0, #128	; 0x80
 800094a:	f001 f83d 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}

08000952 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e00a      	b.n	800097a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000964:	e000      	b.n	8000968 <_read+0x16>
 8000966:	bf00      	nop
 8000968:	4601      	mov	r1, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	60ba      	str	r2, [r7, #8]
 8000970:	b2ca      	uxtb	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	3301      	adds	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	429a      	cmp	r2, r3
 8000980:	dbf0      	blt.n	8000964 <_read+0x12>
	}

return len;
 8000982:	687b      	ldr	r3, [r7, #4]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e009      	b.n	80009b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	60ba      	str	r2, [r7, #8]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fc22 	bl	80011f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	dbf1      	blt.n	800099e <_write+0x12>
	}
	return len;
 80009ba:	687b      	ldr	r3, [r7, #4]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_close>:

int _close(int file)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	return -1;
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ec:	605a      	str	r2, [r3, #4]
	return 0;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_isatty>:

int _isatty(int file)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	return 1;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <_sbrk+0x5c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <_sbrk+0x60>)
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <_sbrk+0x64>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <_sbrk+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d207      	bcs.n	8000a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a5c:	f007 f828 	bl	8007ab0 <__errno>
 8000a60:	4603      	mov	r3, r0
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200c0000 	.word	0x200c0000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	200000dc 	.word	0x200000dc
 8000a94:	200001d0 	.word	0x200001d0

08000a98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <SystemInit+0x68>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <SystemInit+0x68>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <SystemInit+0x6c>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <SystemInit+0x6c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <SystemInit+0x6c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <SystemInit+0x6c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <SystemInit+0x6c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <SystemInit+0x6c>)
 8000aca:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ace:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <SystemInit+0x6c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SystemInit+0x6c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <SystemInit+0x6c>)
 8000ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <SystemInit+0x6c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SystemInit+0x68>)
 8000aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	46020c00 	.word	0x46020c00

08000b08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <MX_USART1_UART_Init+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b52:	f005 fcbb 	bl	80064cc <HAL_UART_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b5c:	f7ff fea9 	bl	80008b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b64:	f006 f938 	bl	8006dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6e:	f7ff fea0 	bl	80008b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b76:	f006 f96d 	bl	8006e54 <HAL_UARTEx_SetRxFifoThreshold>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f7ff fe97 	bl	80008b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b86:	f006 f8ee 	bl	8006d66 <HAL_UARTEx_DisableFifoMode>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b90:	f7ff fe8f 	bl	80008b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000e0 	.word	0x200000e0
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0bc      	sub	sp, #240	; 0xf0
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	22c8      	movs	r2, #200	; 0xc8
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f006 ff9f 	bl	8007b04 <memset>
  if(uartHandle->Instance==USART1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_UART_MspInit+0xc4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d145      	bne.n	8000c5c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bd0:	f04f 0201 	mov.w	r2, #1
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 f827 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000bf0:	f7ff fe5f 	bl	80008b2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_UART_MspInit+0xc8>)
 8000bf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0xc8>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_UART_MspInit+0xc8>)
 8000c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0xc8>)
 8000c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_UART_MspInit+0xc8>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0xc8>)
 8000c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0xcc>)
 8000c58:	f000 fcc6 	bl	80015e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	37f0      	adds	r7, #240	; 0xf0
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40013800 	.word	0x40013800
 8000c68:	46020c00 	.word	0x46020c00
 8000c6c:	42020000 	.word	0x42020000

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopForever+0x2>
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c76:	e003      	b.n	8000c80 <LoopCopyDataInit>

08000c78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c7e:	3104      	adds	r1, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c88:	d3f6      	bcc.n	8000c78 <CopyDataInit>
	ldr	r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c8c:	e002      	b.n	8000c94 <LoopFillZerobss>

08000c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c90:	f842 3b04 	str.w	r3, [r2], #4

08000c94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <LoopForever+0x16>)
	cmp	r2, r3
 8000c96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c98:	d3f9      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9a:	f7ff fefd 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f006 ff0d 	bl	8007abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fd89 	bl	80007b8 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000ca8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000cac:	08008e04 	.word	0x08008e04
	ldr	r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cb4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000cb8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000cbc:	200001d0 	.word	0x200001d0

08000cc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_IRQHandler>
	...

08000cc4 <i2c_scanner>:
#if INT_FLAG
uint8_t int_flag = 0;
#endif

uint8_t i2c_scanner(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
	uint8_t dev_detected, addr, err_code, buffer=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	713b      	strb	r3, [r7, #4]
	for(addr=0; addr<255; addr++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71bb      	strb	r3, [r7, #6]
 8000cd2:	e013      	b.n	8000cfc <i2c_scanner+0x38>
	{
		err_code = HAL_I2C_Master_Receive(&hi2c1, addr, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	1d3a      	adds	r2, r7, #4
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <i2c_scanner+0x54>)
 8000ce4:	f001 f824 	bl	8001d30 <HAL_I2C_Master_Receive>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	717b      	strb	r3, [r7, #5]
		if(err_code == HAL_OK)
 8000cec:	797b      	ldrb	r3, [r7, #5]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <i2c_scanner+0x32>
		{
			dev_detected = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
	for(addr=0; addr<255; addr++)
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	71bb      	strb	r3, [r7, #6]
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2bff      	cmp	r3, #255	; 0xff
 8000d00:	d1e8      	bne.n	8000cd4 <i2c_scanner+0x10>
		}
	}
	if(!dev_detected)
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <i2c_scanner+0x48>
		return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <i2c_scanner+0x4a>
	else
		return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000090 	.word	0x20000090

08000d1c <i2c_mag_setup>:

void i2c_mag_setup(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	mag.IO.BusType   = LIS2MDL_I2C_BUS;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <i2c_mag_setup+0x34>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
	mag.IO.Address   = LIS2MDL_I2C_ADD;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <i2c_mag_setup+0x34>)
 8000d28:	223d      	movs	r2, #61	; 0x3d
 8000d2a:	731a      	strb	r2, [r3, #12]
	mag.Ctx.read_reg = i2c_read_8bit;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <i2c_mag_setup+0x34>)
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <i2c_mag_setup+0x38>)
 8000d30:	621a      	str	r2, [r3, #32]
	mag.Ctx.write_reg = i2c_write_8bit;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <i2c_mag_setup+0x34>)
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <i2c_mag_setup+0x3c>)
 8000d36:	61da      	str	r2, [r3, #28]
	mag.Ctx.handle    = &hi2c1;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <i2c_mag_setup+0x34>)
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <i2c_mag_setup+0x40>)
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
	mObj = &mag;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <i2c_mag_setup+0x44>)
 8000d40:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <i2c_mag_setup+0x34>)
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000178 	.word	0x20000178
 8000d54:	080010d9 	.word	0x080010d9
 8000d58:	08001149 	.word	0x08001149
 8000d5c:	20000090 	.word	0x20000090
 8000d60:	20000174 	.word	0x20000174

08000d64 <mag_reset>:

void mag_reset(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t soft_rst = 0x23;// mem_reboot = 0x43;
 8000d6a:	2323      	movs	r3, #35	; 0x23
 8000d6c:	71fb      	strb	r3, [r7, #7]
	//LIS2MDL_Read_Reg(mObj, LIS2MDL_CFG_REG_A, &mem_reboot);
	LIS2MDL_Read_Reg(mObj, LIS2MDL_CFG_REG_A, &soft_rst);
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <mag_reset+0x20>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	2160      	movs	r1, #96	; 0x60
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 fa80 	bl	800727c <LIS2MDL_Read_Reg>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000174 	.word	0x20000174

08000d88 <mag_init>:

void mag_init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
#if MAG_EN
		uint8_t buff;

		//reset magnetometer
		mag_reset();
 8000d8e:	f7ff ffe9 	bl	8000d64 <mag_reset>

	    //read chip ID of magnetometer(0x40).
		LIS2MDL_ReadID(mObj, &lis2mdl_ID);
 8000d92:	4b5c      	ldr	r3, [pc, #368]	; (8000f04 <mag_init+0x17c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	495c      	ldr	r1, [pc, #368]	; (8000f08 <mag_init+0x180>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 f96d 	bl	8007078 <LIS2MDL_ReadID>
		printf("\r\n1. 0x%X",lis2mdl_ID);
 8000d9e:	4b5a      	ldr	r3, [pc, #360]	; (8000f08 <mag_init+0x180>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4859      	ldr	r0, [pc, #356]	; (8000f0c <mag_init+0x184>)
 8000da6:	f006 feb5 	bl	8007b14 <iprintf>
		if(lis2mdl_ID != 0x40)
 8000daa:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <mag_init+0x180>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b40      	cmp	r3, #64	; 0x40
 8000db0:	d014      	beq.n	8000ddc <mag_init+0x54>
		{
			printf("\r\nreset function call");
 8000db2:	4857      	ldr	r0, [pc, #348]	; (8000f10 <mag_init+0x188>)
 8000db4:	f006 feae 	bl	8007b14 <iprintf>
			//reset magnetometer(lis2mdl)
			mag_reset();
 8000db8:	f7ff ffd4 	bl	8000d64 <mag_reset>

			//read chip ID of magnetometer(0x40).
			LIS2MDL_ReadID(mObj, &lis2mdl_ID);
 8000dbc:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <mag_init+0x17c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4951      	ldr	r1, [pc, #324]	; (8000f08 <mag_init+0x180>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 f958 	bl	8007078 <LIS2MDL_ReadID>
			HAL_Delay(500);
 8000dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dcc:	f000 faa6 	bl	800131c <HAL_Delay>
			printf("\r\n2. 0x%X",lis2mdl_ID);
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <mag_init+0x180>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	484f      	ldr	r0, [pc, #316]	; (8000f14 <mag_init+0x18c>)
 8000dd8:	f006 fe9c 	bl	8007b14 <iprintf>
		}
		if(lis2mdl_ID == 0x40)
 8000ddc:	4b4a      	ldr	r3, [pc, #296]	; (8000f08 <mag_init+0x180>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b40      	cmp	r3, #64	; 0x40
 8000de2:	f040 808b 	bne.w	8000efc <mag_init+0x174>
		{
			//Initialize magnetometer.
			LIS2MDL_Init(mObj);
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <mag_init+0x17c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f006 f8be 	bl	8006f6c <LIS2MDL_Init>

			//Enable magnetometer.
			LIS2MDL_MAG_Enable(mObj);
 8000df0:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <mag_init+0x17c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f006 f965 	bl	80070c4 <LIS2MDL_MAG_Enable>

			//enabling low pass filter
			LIS2MDL_Read_Reg(mObj, LIS2MDL_CFG_REG_B, &buff);
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <mag_init+0x17c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1dfa      	adds	r2, r7, #7
 8000e00:	2161      	movs	r1, #97	; 0x61
 8000e02:	4618      	mov	r0, r3
 8000e04:	f006 fa3a 	bl	800727c <LIS2MDL_Read_Reg>
			buff = buff | 0x01;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	71fb      	strb	r3, [r7, #7]
			LIS2MDL_Write_Reg(mObj, LIS2MDL_CFG_REG_B, buff);
 8000e12:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <mag_init+0x17c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	79fa      	ldrb	r2, [r7, #7]
 8000e18:	2161      	movs	r1, #97	; 0x61
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f006 fa58 	bl	80072d0 <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_CFG_REG_B, &buff);
 8000e20:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <mag_init+0x17c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	1dfa      	adds	r2, r7, #7
 8000e26:	2161      	movs	r1, #97	; 0x61
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fa27 	bl	800727c <LIS2MDL_Read_Reg>
			printf("\r\nLPF register = 0x%X", buff);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4839      	ldr	r0, [pc, #228]	; (8000f18 <mag_init+0x190>)
 8000e34:	f006 fe6e 	bl	8007b14 <iprintf>


			//set magnetometer in low power mode
			LIS2MDL_MAG_Set_Power_Mode(mObj, LOW_POWER_MODE);
 8000e38:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <mag_init+0x17c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f006 fa71 	bl	8007326 <LIS2MDL_MAG_Set_Power_Mode>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_CFG_REG_A, &buff);
 8000e44:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <mag_init+0x17c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1dfa      	adds	r2, r7, #7
 8000e4a:	2160      	movs	r1, #96	; 0x60
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 fa15 	bl	800727c <LIS2MDL_Read_Reg>
			printf("\r\nLPM register and ODR = 0x%X", buff);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4831      	ldr	r0, [pc, #196]	; (8000f1c <mag_init+0x194>)
 8000e58:	f006 fe5c 	bl	8007b14 <iprintf>

			//setting threshold lower byte (can set in magnetometer.h file)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_THS_L_REG, int_ths_l_reg);
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <mag_init+0x17c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	22e8      	movs	r2, #232	; 0xe8
 8000e62:	2165      	movs	r1, #101	; 0x65
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fa33 	bl	80072d0 <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj,LIS2MDL_INT_THS_L_REG, &buff);
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <mag_init+0x17c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1dfa      	adds	r2, r7, #7
 8000e70:	2165      	movs	r1, #101	; 0x65
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 fa02 	bl	800727c <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", buff);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <mag_init+0x198>)
 8000e7e:	f006 fe49 	bl	8007b14 <iprintf>

			//setting threshold higher byte (can set in magnetometer .h file)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_THS_H_REG, int_ths_h_reg);
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <mag_init+0x17c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2203      	movs	r2, #3
 8000e88:	2166      	movs	r1, #102	; 0x66
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 fa20 	bl	80072d0 <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_THS_H_REG, &buff);
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <mag_init+0x17c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1dfa      	adds	r2, r7, #7
 8000e96:	2166      	movs	r1, #102	; 0x66
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f006 f9ef 	bl	800727c <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", buff);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481f      	ldr	r0, [pc, #124]	; (8000f20 <mag_init+0x198>)
 8000ea4:	f006 fe36 	bl	8007b14 <iprintf>

			//putting full 16 bit value in threshold variable
			threshold = (int_ths_h_reg << 8) | int_ths_l_reg;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <mag_init+0x19c>)
 8000eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eae:	601a      	str	r2, [r3, #0]

			//enable interrupt on int/drdy pin of magnetometer
			LIS2MDL_Write_Reg(mObj, LIS2MDL_CFG_REG_C, cfg_reg_c);
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <mag_init+0x17c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2250      	movs	r2, #80	; 0x50
 8000eb6:	2162      	movs	r1, #98	; 0x62
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f006 fa09 	bl	80072d0 <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_CFG_REG_C, &buff);
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <mag_init+0x17c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	2162      	movs	r1, #98	; 0x62
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 f9d8 	bl	800727c <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", buff);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <mag_init+0x198>)
 8000ed2:	f006 fe1f 	bl	8007b14 <iprintf>

			//configuring interrupt control register with pulsed, INT = 1(give interrupt when magnet is near)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, int_ctrl_reg);
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <mag_init+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	22e5      	movs	r2, #229	; 0xe5
 8000edc:	2163      	movs	r1, #99	; 0x63
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f006 f9f6 	bl	80072d0 <LIS2MDL_Write_Reg>
			LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_CRTL_REG, &buff);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <mag_init+0x17c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	1dfa      	adds	r2, r7, #7
 8000eea:	2163      	movs	r1, #99	; 0x63
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 f9c5 	bl	800727c <LIS2MDL_Read_Reg>
			printf("\r\n0x%X", buff);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <mag_init+0x198>)
 8000ef8:	f006 fe0c 	bl	8007b14 <iprintf>
#else
			LIS2MDL_DeInit(mObj);
			if(mObj->mag_is_enabled == 1)
				LIS2MDL_MAG_Disable(mObj);
#endif
	}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000174 	.word	0x20000174
 8000f08:	200001b0 	.word	0x200001b0
 8000f0c:	08008b50 	.word	0x08008b50
 8000f10:	08008b5c 	.word	0x08008b5c
 8000f14:	08008b74 	.word	0x08008b74
 8000f18:	08008b80 	.word	0x08008b80
 8000f1c:	08008b98 	.word	0x08008b98
 8000f20:	08008bb8 	.word	0x08008bb8
 8000f24:	200001b4 	.word	0x200001b4

08000f28 <bsp_init>:

void bsp_init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	// i2c initialization setup
	i2c_mag_setup(); // mag setup
 8000f2c:	f7ff fef6 	bl	8000d1c <i2c_mag_setup>

	//initialize magnetometer.
	mag_init();
 8000f30:	f7ff ff2a 	bl	8000d88 <mag_init>

	//enable accelerometer/gyrometer interrupt
	HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8000f34:	2012      	movs	r0, #18
 8000f36:	f000 fb2e 	bl	8001596 <HAL_NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <bsp_process>:

void bsp_process(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
#if MAG_EN
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2101      	movs	r1, #1
 8000f48:	4808      	ldr	r0, [pc, #32]	; (8000f6c <bsp_process+0x2c>)
 8000f4a:	f000 fd25 	bl	8001998 <HAL_GPIO_WritePin>

	//magnetometer interrupt generation on near magnet and far magnet
	mag_int_gen();
 8000f4e:	f000 f849 	bl	8000fe4 <mag_int_gen>

#if INT_FLAG
	if(int_flag != 1)
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <bsp_process+0x30>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d001      	beq.n	8000f5e <bsp_process+0x1e>
	{
#endif
	//magnetometer process function
	mag_process();
 8000f5a:	f000 f80b 	bl	8000f74 <mag_process>

#if INT_FLAG
	}
#endif

	HAL_Delay(500);
 8000f5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f62:	f000 f9db 	bl	800131c <HAL_Delay>
#endif
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	42021000 	.word	0x42021000
 8000f70:	200001b8 	.word	0x200001b8

08000f74 <mag_process>:

void mag_process(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <mag_process+0x50>)
 8000f7e:	f000 fd0b 	bl	8001998 <HAL_GPIO_WritePin>
#if MAG_EN

	  //get magnetometer axes values.
	  LIS2MDL_MAG_GetAxes(mObj, &mag_axes);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <mag_process+0x54>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4911      	ldr	r1, [pc, #68]	; (8000fcc <mag_process+0x58>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 f8ed 	bl	8007168 <LIS2MDL_MAG_GetAxes>
	  printf("\n\n");
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <mag_process+0x5c>)
 8000f90:	f006 fe46 	bl	8007c20 <puts>

	  //print magnetometer axes values.
	  printf("Mag x : %ld\r\n",mag_axes.x);
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <mag_process+0x58>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <mag_process+0x60>)
 8000f9c:	f006 fdba 	bl	8007b14 <iprintf>
	  printf("Mag y : %ld\r\n",mag_axes.y);
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <mag_process+0x58>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <mag_process+0x64>)
 8000fa8:	f006 fdb4 	bl	8007b14 <iprintf>
	  printf("Mag z : %ld\r\n",mag_axes.z);
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <mag_process+0x58>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <mag_process+0x68>)
 8000fb4:	f006 fdae 	bl	8007b14 <iprintf>
#endif
	    printf("\r\n");
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <mag_process+0x6c>)
 8000fba:	f006 fe31 	bl	8007c20 <puts>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	42021000 	.word	0x42021000
 8000fc8:	20000174 	.word	0x20000174
 8000fcc:	200001a4 	.word	0x200001a4
 8000fd0:	08008bc0 	.word	0x08008bc0
 8000fd4:	08008bc4 	.word	0x08008bc4
 8000fd8:	08008bd4 	.word	0x08008bd4
 8000fdc:	08008be4 	.word	0x08008be4
 8000fe0:	08008bf4 	.word	0x08008bf4

08000fe4 <mag_int_gen>:

void mag_int_gen(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	uint8_t buff;

	if(int_status == 1)
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <mag_int_gen+0xd0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d15c      	bne.n	80010ac <mag_int_gen+0xc8>
	  {

		//turning led on
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4830      	ldr	r0, [pc, #192]	; (80010b8 <mag_int_gen+0xd4>)
 8000ff8:	f000 fcce 	bl	8001998 <HAL_GPIO_WritePin>


		printf("\r\n********************Int2 interrupt occured from MAG********************");
 8000ffc:	482f      	ldr	r0, [pc, #188]	; (80010bc <mag_int_gen+0xd8>)
 8000ffe:	f006 fd89 	bl	8007b14 <iprintf>
		LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_CRTL_REG, &buff);
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <mag_int_gen+0xdc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1dfa      	adds	r2, r7, #7
 8001008:	2163      	movs	r1, #99	; 0x63
 800100a:	4618      	mov	r0, r3
 800100c:	f006 f936 	bl	800727c <LIS2MDL_Read_Reg>
		//printf("\r\n0x%X", buff);

		//get magnetometer axes
		LIS2MDL_MAG_GetAxes(mObj, &mag_axes);
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <mag_int_gen+0xdc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	492b      	ldr	r1, [pc, #172]	; (80010c4 <mag_int_gen+0xe0>)
 8001016:	4618      	mov	r0, r3
 8001018:	f006 f8a6 	bl	8007168 <LIS2MDL_MAG_GetAxes>

		//comparing magnetometer axes with threshold
		if(buff != 0xe1 && (mag_axes.x >= threshold || mag_axes.y >= threshold || mag_axes.z >= threshold))
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2be1      	cmp	r3, #225	; 0xe1
 8001020:	d01f      	beq.n	8001062 <mag_int_gen+0x7e>
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <mag_int_gen+0xe0>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <mag_int_gen+0xe4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	da0b      	bge.n	8001046 <mag_int_gen+0x62>
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <mag_int_gen+0xe0>)
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <mag_int_gen+0xe4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	da05      	bge.n	8001046 <mag_int_gen+0x62>
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <mag_int_gen+0xe0>)
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <mag_int_gen+0xe4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	db0d      	blt.n	8001062 <mag_int_gen+0x7e>
		{
			printf("\r\nPower OFF");
 8001046:	4821      	ldr	r0, [pc, #132]	; (80010cc <mag_int_gen+0xe8>)
 8001048:	f006 fd64 	bl	8007b14 <iprintf>

  #if INT_FLAG
			int_flag = 1;
 800104c:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <mag_int_gen+0xec>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
  #endif
			 //interrupt pulsed with INT = 0(give interrupt when magnet is away from sensor)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, int_ctrl_reg_far);
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <mag_int_gen+0xdc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	22e1      	movs	r2, #225	; 0xe1
 8001058:	2163      	movs	r1, #99	; 0x63
 800105a:	4618      	mov	r0, r3
 800105c:	f006 f938 	bl	80072d0 <LIS2MDL_Write_Reg>
 8001060:	e021      	b.n	80010a6 <mag_int_gen+0xc2>
		}
		else if(buff != 0xe5 && (mag_axes.x < threshold && mag_axes.y < threshold && mag_axes.z < threshold))
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2be5      	cmp	r3, #229	; 0xe5
 8001066:	d01e      	beq.n	80010a6 <mag_int_gen+0xc2>
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <mag_int_gen+0xe0>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <mag_int_gen+0xe4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	da18      	bge.n	80010a6 <mag_int_gen+0xc2>
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <mag_int_gen+0xe0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <mag_int_gen+0xe4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	da12      	bge.n	80010a6 <mag_int_gen+0xc2>
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <mag_int_gen+0xe0>)
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <mag_int_gen+0xe4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	da0c      	bge.n	80010a6 <mag_int_gen+0xc2>
		{
			printf("\r\nPower ON");
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <mag_int_gen+0xf0>)
 800108e:	f006 fd41 	bl	8007b14 <iprintf>
  #if INT_FLAG
			int_flag = 0;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <mag_int_gen+0xec>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  #endif
			//interrupt pulsed when INT = 1(give interrupt when magnet is near sensor)
			LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, int_ctrl_reg_near);
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <mag_int_gen+0xdc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	22e5      	movs	r2, #229	; 0xe5
 800109e:	2163      	movs	r1, #99	; 0x63
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 f915 	bl	80072d0 <LIS2MDL_Write_Reg>
		}
		int_status = 0;
 80010a6:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <mag_int_gen+0xd0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
			  {
				  LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, buff & 0xFE);
			  }
		  }
#endif
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000170 	.word	0x20000170
 80010b8:	42021000 	.word	0x42021000
 80010bc:	08008bf8 	.word	0x08008bf8
 80010c0:	20000174 	.word	0x20000174
 80010c4:	200001a4 	.word	0x200001a4
 80010c8:	200001b4 	.word	0x200001b4
 80010cc:	08008c44 	.word	0x08008c44
 80010d0:	200001b8 	.word	0x200001b8
 80010d4:	08008c50 	.word	0x08008c50

080010d8 <i2c_read_8bit>:

int32_t i2c_read_8bit(void *handle, uint8_t Reg, uint8_t *pdata, uint16_t Length)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af02      	add	r7, sp, #8
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	72fb      	strb	r3, [r7, #11]
 80010e8:	4613      	mov	r3, r2
 80010ea:	813b      	strh	r3, [r7, #8]
	uint8_t err_code;
	err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddr, &Reg, 1, HAL_MAX_DELAY);
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <i2c_read_8bit+0x68>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b299      	uxth	r1, r3
 80010f2:	f107 020b 	add.w	r2, r7, #11
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <i2c_read_8bit+0x6c>)
 8001100:	f000 fd22 	bl	8001b48 <HAL_I2C_Master_Transmit>
 8001104:	4603      	mov	r3, r0
 8001106:	75fb      	strb	r3, [r7, #23]
	if(err_code != HAL_OK)
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <i2c_read_8bit+0x3a>
		return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e012      	b.n	8001138 <i2c_read_8bit+0x60>
	err_code = HAL_I2C_Master_Receive(&hi2c1, DevAddr, pdata, Length, HAL_MAX_DELAY);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <i2c_read_8bit+0x68>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b299      	uxth	r1, r3
 8001118:	893b      	ldrh	r3, [r7, #8]
 800111a:	f04f 32ff 	mov.w	r2, #4294967295
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4808      	ldr	r0, [pc, #32]	; (8001144 <i2c_read_8bit+0x6c>)
 8001124:	f000 fe04 	bl	8001d30 <HAL_I2C_Master_Receive>
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
	if(err_code != HAL_OK)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <i2c_read_8bit+0x5e>
		return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <i2c_read_8bit+0x60>
	return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000004 	.word	0x20000004
 8001144:	20000090 	.word	0x20000090

08001148 <i2c_write_8bit>:
int32_t i2c_write_8bit(void *handle, uint8_t Reg, uint8_t *pdata, uint16_t Length)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	461a      	mov	r2, r3
 8001154:	460b      	mov	r3, r1
 8001156:	72fb      	strb	r3, [r7, #11]
 8001158:	4613      	mov	r3, r2
 800115a:	813b      	strh	r3, [r7, #8]
	uint8_t err_code, buff[2];
	buff[0] = Reg;
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	753b      	strb	r3, [r7, #20]
	buff[1] = *pdata;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	757b      	strb	r3, [r7, #21]
	err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddr, buff, Length+1, HAL_MAX_DELAY);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <i2c_write_8bit+0x54>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b299      	uxth	r1, r3
 800116c:	893b      	ldrh	r3, [r7, #8]
 800116e:	3301      	adds	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	f107 0214 	add.w	r2, r7, #20
 8001176:	f04f 30ff 	mov.w	r0, #4294967295
 800117a:	9000      	str	r0, [sp, #0]
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <i2c_write_8bit+0x58>)
 800117e:	f000 fce3 	bl	8001b48 <HAL_I2C_Master_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	75fb      	strb	r3, [r7, #23]
	if(err_code != HAL_OK)
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <i2c_write_8bit+0x48>
		return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <i2c_write_8bit+0x4a>
	return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000004 	.word	0x20000004
 80011a0:	20000090 	.word	0x20000090

080011a4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
#if MAG_EN
	if(GPIO_Pin == INT2_Pin)
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	2b80      	cmp	r3, #128	; 0x80
 80011b2:	d114      	bne.n	80011de <HAL_GPIO_EXTI_Rising_Callback+0x3a>
	{
		uint8_t buff;
		int_status = 1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]

		//turn magnetometer interrupts off
		LIS2MDL_Read_Reg(mObj, LIS2MDL_INT_CRTL_REG, &buff);
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f107 020f 	add.w	r2, r7, #15
 80011c2:	2163      	movs	r1, #99	; 0x63
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 f859 	bl	800727c <LIS2MDL_Read_Reg>
		LIS2MDL_Write_Reg(mObj, LIS2MDL_INT_CRTL_REG, buff & 0xFE);
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	2163      	movs	r1, #99	; 0x63
 80011da:	f006 f879 	bl	80072d0 <LIS2MDL_Write_Reg>
	}
#endif
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000170 	.word	0x20000170
 80011ec:	20000174 	.word	0x20000174

080011f0 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011f8:	1d39      	adds	r1, r7, #4
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	2201      	movs	r2, #1
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <__io_putchar+0x20>)
 8001202:	f005 f9b3 	bl	800656c <HAL_UART_Transmit>

  return ch;
 8001206:	687b      	ldr	r3, [r7, #4]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000e0 	.word	0x200000e0

08001214 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_Init+0x4c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_Init+0x4c>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f991 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800122a:	f002 fb21 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800122e:	4602      	mov	r2, r0
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_Init+0x50>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	490b      	ldr	r1, [pc, #44]	; (8001268 <HAL_Init+0x54>)
 800123a:	5ccb      	ldrb	r3, [r1, r3]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_Init+0x58>)
 8001242:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001244:	200f      	movs	r0, #15
 8001246:	f000 f813 	bl	8001270 <HAL_InitTick>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e002      	b.n	800125a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fb32 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000
 8001264:	46020c00 	.word	0x46020c00
 8001268:	08008c5c 	.word	0x08008c5c
 800126c:	20000000 	.word	0x20000000

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_InitTick+0x60>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e021      	b.n	80012c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_InitTick+0x64>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_InitTick+0x60>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f997 	bl	80015ce <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f953 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x68>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	200001bc 	.word	0x200001bc

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200001bc 	.word	0x200001bc

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_Delay+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffde 	bl	8001304 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000000c 	.word	0x2000000c

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db12      	blt.n	800143c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	490a      	ldr	r1, [pc, #40]	; (8001448 <__NVIC_DisableIRQ+0x44>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	3320      	adds	r3, #32
 800142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001430:	f3bf 8f4f 	dsb	sy
}
 8001434:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001436:	f3bf 8f6f 	isb	sy
}
 800143a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff05 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff1c 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff90 	bl	80014a0 <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5f 	bl	800144c <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff0f 	bl	80013c8 <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff1f 	bl	8001404 <__NVIC_DisableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff96 	bl	8001508 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015fa:	e1ba      	b.n	8001972 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 81aa 	beq.w	800196c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_GPIO_Init+0x188>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d15d      	bne.n	80016dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001626:	2201      	movs	r2, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	4013      	ands	r3, r2
 8001634:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	4313      	orrs	r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001650:	4a48      	ldr	r2, [pc, #288]	; (8001774 <HAL_GPIO_Init+0x18c>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001658:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800165a:	4a46      	ldr	r2, [pc, #280]	; (8001774 <HAL_GPIO_Init+0x18c>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	3208      	adds	r2, #8
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	4013      	ands	r3, r2
 8001688:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220b      	movs	r2, #11
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	4313      	orrs	r3, r2
 800169c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69f9      	ldr	r1, [r7, #28]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2202      	movs	r2, #2
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e067      	b.n	80017ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x104>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	d145      	bne.n	8001778 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4013      	ands	r3, r2
 800170e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f003 020f 	and.w	r2, r3, #15
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	4313      	orrs	r3, r2
 8001728:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4013      	ands	r3, r2
 800174e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	4313      	orrs	r3, r2
 8001764:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e01e      	b.n	80017ac <HAL_GPIO_Init+0x1c4>
 800176e:	bf00      	nop
 8001770:	46020000 	.word	0x46020000
 8001774:	08008cb4 	.word	0x08008cb4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	4013      	ands	r3, r2
 800178e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d00b      	beq.n	80017cc <HAL_GPIO_Init+0x1e4>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b12      	cmp	r3, #18
 80017ca:	d130      	bne.n	800182e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001802:	2201      	movs	r2, #1
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	4013      	ands	r3, r2
 8001810:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 0201 	and.w	r2, r3, #1
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4313      	orrs	r3, r2
 8001826:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d017      	beq.n	8001866 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	4013      	ands	r3, r2
 800184c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4313      	orrs	r3, r2
 800185e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d07c      	beq.n	800196c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3318      	adds	r3, #24
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	4013      	ands	r3, r2
 8001894:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0a9a      	lsrs	r2, r3, #10
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <HAL_GPIO_Init+0x3ac>)
 800189c:	4013      	ands	r3, r2
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	00d2      	lsls	r2, r2, #3
 80018a6:	4093      	lsls	r3, r2
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018ae:	4938      	ldr	r1, [pc, #224]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3318      	adds	r3, #24
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80018bc:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80018e0:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800190a:	4a21      	ldr	r2, [pc, #132]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 8001912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001916:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	4013      	ands	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001936:	4a16      	ldr	r2, [pc, #88]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 8001940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001944:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4013      	ands	r3, r2
 800194e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_GPIO_Init+0x3a8>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	f47f ae3d 	bne.w	80015fc <HAL_GPIO_Init+0x14>
  }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	3724      	adds	r7, #36	; 0x24
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	46022000 	.word	0x46022000
 8001994:	002f7f7f 	.word	0x002f7f7f

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fbdc 	bl	80011a4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80019f8:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f807 	bl	8001a14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	46022000 	.word	0x46022000

08001a14 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e081      	b.n	8001b40 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d106      	bne.n	8001a56 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe fe49 	bl	80006e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2224      	movs	r2, #36	; 0x24
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	e006      	b.n	8001ab2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ab0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d104      	bne.n	8001ac4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69d9      	ldr	r1, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1a      	ldr	r2, [r3, #32]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	817b      	strh	r3, [r7, #10]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	f040 80da 	bne.w	8001d1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_Master_Transmit+0x30>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0d3      	b.n	8001d20 <HAL_I2C_Master_Transmit+0x1d8>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b80:	f7ff fbc0 	bl	8001304 <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2319      	movs	r3, #25
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f9e6 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0be      	b.n	8001d20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2221      	movs	r2, #33	; 0x21
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2210      	movs	r2, #16
 8001bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	893a      	ldrh	r2, [r7, #8]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d90e      	bls.n	8001bf2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	22ff      	movs	r2, #255	; 0xff
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	8979      	ldrh	r1, [r7, #10]
 8001be2:	4b51      	ldr	r3, [pc, #324]	; (8001d28 <HAL_I2C_Master_Transmit+0x1e0>)
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fbdc 	bl	80023a8 <I2C_TransferConfig>
 8001bf0:	e06c      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	8979      	ldrh	r1, [r7, #10]
 8001c04:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fbcb 	bl	80023a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c12:	e05b      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	6a39      	ldr	r1, [r7, #32]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f9e3 	bl	8001fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e07b      	b.n	8001d20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d034      	beq.n	8001ccc <HAL_I2C_Master_Transmit+0x184>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d130      	bne.n	8001ccc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2200      	movs	r2, #0
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f975 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e04d      	b.n	8001d20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2bff      	cmp	r3, #255	; 0xff
 8001c8c:	d90e      	bls.n	8001cac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	22ff      	movs	r2, #255	; 0xff
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	8979      	ldrh	r1, [r7, #10]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fb7f 	bl	80023a8 <I2C_TransferConfig>
 8001caa:	e00f      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	8979      	ldrh	r1, [r7, #10]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fb6e 	bl	80023a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d19e      	bne.n	8001c14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	6a39      	ldr	r1, [r7, #32]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f9c2 	bl	8002064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e01a      	b.n	8001d20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_I2C_Master_Transmit+0x1e4>)
 8001cfe:	400b      	ands	r3, r1
 8001d00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001d1e:	2302      	movs	r3, #2
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	80002000 	.word	0x80002000
 8001d2c:	fe00e800 	.word	0xfe00e800

08001d30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	817b      	strh	r3, [r7, #10]
 8001d40:	4613      	mov	r3, r2
 8001d42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	f040 80db 	bne.w	8001f08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2C_Master_Receive+0x30>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0d4      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1da>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d68:	f7ff facc 	bl	8001304 <HAL_GetTick>
 8001d6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2319      	movs	r3, #25
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f8f2 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0bf      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2222      	movs	r2, #34	; 0x22
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2210      	movs	r2, #16
 8001d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2bff      	cmp	r3, #255	; 0xff
 8001dba:	d90e      	bls.n	8001dda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	8979      	ldrh	r1, [r7, #10]
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <HAL_I2C_Master_Receive+0x1e4>)
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fae8 	bl	80023a8 <I2C_TransferConfig>
 8001dd8:	e06d      	b.n	8001eb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	8979      	ldrh	r1, [r7, #10]
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_I2C_Master_Receive+0x1e4>)
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fad7 	bl	80023a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001dfa:	e05c      	b.n	8001eb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	6a39      	ldr	r1, [r7, #32]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f96b 	bl	80020dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e07c      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d034      	beq.n	8001eb6 <HAL_I2C_Master_Receive+0x186>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d130      	bne.n	8001eb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f880 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e04d      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2bff      	cmp	r3, #255	; 0xff
 8001e76:	d90e      	bls.n	8001e96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	8979      	ldrh	r1, [r7, #10]
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fa8a 	bl	80023a8 <I2C_TransferConfig>
 8001e94:	e00f      	b.n	8001eb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	8979      	ldrh	r1, [r7, #10]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fa79 	bl	80023a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d19d      	bne.n	8001dfc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	6a39      	ldr	r1, [r7, #32]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f8cd 	bl	8002064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e01a      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_I2C_Master_Receive+0x1e8>)
 8001ee8:	400b      	ands	r3, r1
 8001eea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	80002400 	.word	0x80002400
 8001f18:	fe00e800 	.word	0xfe00e800

08001f1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d103      	bne.n	8001f3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d007      	beq.n	8001f58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	619a      	str	r2, [r3, #24]
  }
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f74:	e022      	b.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d01e      	beq.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7ff f9c1 	bl	8001304 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d113      	bne.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e00f      	b.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d0cd      	beq.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ff0:	e02c      	b.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f8ea 	bl	80021d0 <I2C_IsErrorOccurred>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e02a      	b.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d01e      	beq.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7ff f979 	bl	8001304 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d113      	bne.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e007      	b.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d1cb      	bne.n	8001ff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002070:	e028      	b.n	80020c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f8aa 	bl	80021d0 <I2C_IsErrorOccurred>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e026      	b.n	80020d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7ff f93d 	bl	8001304 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d113      	bne.n	80020c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e007      	b.n	80020d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d1cf      	bne.n	8002072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020e8:	e064      	b.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f86e 	bl	80021d0 <I2C_IsErrorOccurred>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e062      	b.n	80021c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b20      	cmp	r3, #32
 800210a:	d138      	bne.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d105      	bne.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e04e      	b.n	80021c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d107      	bne.n	8002144 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2210      	movs	r2, #16
 800213a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2204      	movs	r2, #4
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
 8002142:	e002      	b.n	800214a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2220      	movs	r2, #32
 8002150:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800215e:	400b      	ands	r3, r1
 8002160:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e022      	b.n	80021c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7ff f8c1 	bl	8001304 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10f      	bne.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e007      	b.n	80021c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d193      	bne.n	80020ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	fe00e800 	.word	0xfe00e800

080021d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d075      	beq.n	80022e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2210      	movs	r2, #16
 8002202:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002204:	e056      	b.n	80022b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d052      	beq.n	80022b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7ff f879 	bl	8001304 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_IsErrorOccurred+0x54>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d147      	bne.n	80022b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002236:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002246:	d12e      	bne.n	80022a6 <I2C_IsErrorOccurred+0xd6>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800224e:	d02a      	beq.n	80022a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b20      	cmp	r3, #32
 8002254:	d027      	beq.n	80022a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002264:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002266:	f7ff f84d 	bl	8001304 <HAL_GetTick>
 800226a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226c:	e01b      	b.n	80022a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800226e:	f7ff f849 	bl	8001304 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b19      	cmp	r3, #25
 800227a:	d914      	bls.n	80022a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d1dc      	bne.n	800226e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d003      	beq.n	80022ca <I2C_IsErrorOccurred+0xfa>
 80022c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d09d      	beq.n	8002206 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2220      	movs	r2, #32
 80022d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01c      	beq.n	8002398 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7ff fddc 	bl	8001f1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <I2C_IsErrorOccurred+0x1d4>)
 8002370:	400b      	ands	r3, r1
 8002372:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800239c:	4618      	mov	r0, r3
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	fe00e800 	.word	0xfe00e800

080023a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	817b      	strh	r3, [r7, #10]
 80023b6:	4613      	mov	r3, r2
 80023b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ba:	897b      	ldrh	r3, [r7, #10]
 80023bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023c0:	7a7b      	ldrb	r3, [r7, #9]
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	0d5b      	lsrs	r3, r3, #21
 80023e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <I2C_TransferConfig+0x60>)
 80023e8:	430b      	orrs	r3, r1
 80023ea:	43db      	mvns	r3, r3
 80023ec:	ea02 0103 	and.w	r1, r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	03ff63ff 	.word	0x03ff63ff

0800240c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b20      	cmp	r3, #32
 8002420:	d138      	bne.n	8002494 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800242c:	2302      	movs	r3, #2
 800242e:	e032      	b.n	8002496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800245e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d139      	bne.n	800252c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e033      	b.n	800252e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2224      	movs	r2, #36	; 0x24
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002544:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800254c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d101      	bne.n	800255a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e057      	b.n	800260a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d90a      	bls.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002574:	60d3      	str	r3, [r2, #12]
 8002576:	e007      	b.n	8002588 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002580:	4925      	ldr	r1, [pc, #148]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4313      	orrs	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	2232      	movs	r2, #50	; 0x32
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80025a6:	e002      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x84>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f3      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01b      	beq.n	80025fe <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2232      	movs	r2, #50	; 0x32
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	4a11      	ldr	r2, [pc, #68]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	3301      	adds	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80025e4:	e002      	b.n	80025ec <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_PWREx_ControlVoltageScaling+0xc2>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f3      	bne.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e000      	b.n	800260a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	46020800 	.word	0x46020800
 800261c:	20000000 	.word	0x20000000
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <HAL_PWREx_GetVoltageRange+0x18>)
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	46020800 	.word	0x46020800

08002640 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_PWREx_ConfigSupply+0x94>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <HAL_PWREx_ConfigSupply+0x98>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2232      	movs	r2, #50	; 0x32
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_PWREx_ConfigSupply+0x98>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d113      	bne.n	8002694 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_PWREx_ConfigSupply+0x9c>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_PWREx_ConfigSupply+0x9c>)
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002678:	e002      	b.n	8002680 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3b01      	subs	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_PWREx_ConfigSupply+0x9c>)
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d116      	bne.n	80026ba <HAL_PWREx_ConfigSupply+0x7a>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f3      	bne.n	800267a <HAL_PWREx_ConfigSupply+0x3a>
 8002692:	e012      	b.n	80026ba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_PWREx_ConfigSupply+0x9c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_PWREx_ConfigSupply+0x9c>)
 800269a:	f043 0302 	orr.w	r3, r3, #2
 800269e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80026a0:	e002      	b.n	80026a8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_PWREx_ConfigSupply+0x9c>)
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <HAL_PWREx_ConfigSupply+0x7a>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f3      	bne.n	80026a2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e000      	b.n	80026c6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000
 80026d8:	10624dd3 	.word	0x10624dd3
 80026dc:	46020800 	.word	0x46020800

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f000 bec3 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fa:	4b9c      	ldr	r3, [pc, #624]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002704:	4b99      	ldr	r3, [pc, #612]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8172 	beq.w	8002a00 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_RCC_OscConfig+0x52>
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	2b0c      	cmp	r3, #12
 8002726:	f040 80e4 	bne.w	80028f2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	2b01      	cmp	r3, #1
 800272e:	f040 80e0 	bne.w	80028f2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002732:	4b8e      	ldr	r3, [pc, #568]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <HAL_RCC_OscConfig+0x6c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f000 be9a 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002750:	4b86      	ldr	r3, [pc, #536]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_RCC_OscConfig+0x86>
 800275c:	4b83      	ldr	r3, [pc, #524]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002764:	e005      	b.n	8002772 <HAL_RCC_OscConfig+0x92>
 8002766:	4b81      	ldr	r3, [pc, #516]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002772:	4293      	cmp	r3, r2
 8002774:	d255      	bcs.n	8002822 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f9d3 	bl	8003b2c <RCC_SetFlashLatencyFromMSIRange>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f000 be77 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002792:	4b76      	ldr	r3, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4a75      	ldr	r2, [pc, #468]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002798:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800279c:	6093      	str	r3, [r2, #8]
 800279e:	4b73      	ldr	r3, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	4970      	ldr	r1, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80027b8:	d309      	bcc.n	80027ce <HAL_RCC_OscConfig+0xee>
 80027ba:	4b6c      	ldr	r3, [pc, #432]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 021f 	bic.w	r2, r3, #31
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4969      	ldr	r1, [pc, #420]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e07e      	b.n	80028cc <HAL_RCC_OscConfig+0x1ec>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da0a      	bge.n	80027ec <HAL_RCC_OscConfig+0x10c>
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	4961      	ldr	r1, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60cb      	str	r3, [r1, #12]
 80027ea:	e06f      	b.n	80028cc <HAL_RCC_OscConfig+0x1ec>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d30a      	bcc.n	800280c <HAL_RCC_OscConfig+0x12c>
 80027f6:	4b5d      	ldr	r3, [pc, #372]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	4959      	ldr	r1, [pc, #356]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
 800280a:	e05f      	b.n	80028cc <HAL_RCC_OscConfig+0x1ec>
 800280c:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	03db      	lsls	r3, r3, #15
 800281a:	4954      	ldr	r1, [pc, #336]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]
 8002820:	e054      	b.n	80028cc <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002822:	4b52      	ldr	r3, [pc, #328]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800282c:	6093      	str	r3, [r2, #8]
 800282e:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	494c      	ldr	r1, [pc, #304]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002848:	d309      	bcc.n	800285e <HAL_RCC_OscConfig+0x17e>
 800284a:	4b48      	ldr	r3, [pc, #288]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 021f 	bic.w	r2, r3, #31
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4945      	ldr	r1, [pc, #276]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e028      	b.n	80028b0 <HAL_RCC_OscConfig+0x1d0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	da0a      	bge.n	800287c <HAL_RCC_OscConfig+0x19c>
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	015b      	lsls	r3, r3, #5
 8002874:	493d      	ldr	r1, [pc, #244]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
 800287a:	e019      	b.n	80028b0 <HAL_RCC_OscConfig+0x1d0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d30a      	bcc.n	800289c <HAL_RCC_OscConfig+0x1bc>
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4935      	ldr	r1, [pc, #212]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	60cb      	str	r3, [r1, #12]
 800289a:	e009      	b.n	80028b0 <HAL_RCC_OscConfig+0x1d0>
 800289c:	4b33      	ldr	r3, [pc, #204]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	03db      	lsls	r3, r3, #15
 80028aa:	4930      	ldr	r1, [pc, #192]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 f936 	bl	8003b2c <RCC_SetFlashLatencyFromMSIRange>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f000 bdda 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80028cc:	f001 f8d8 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x290>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fccb 	bl	8001270 <HAL_InitTick>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80028e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 808a 	beq.w	80029fe <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 80028ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ee:	f000 bdc7 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d066      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002906:	f7fe fcfd 	bl	8001304 <HAL_GetTick>
 800290a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800290c:	e009      	b.n	8002922 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800290e:	f7fe fcf9 	bl	8001304 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	f000 bdaf 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ef      	beq.n	800290e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002938:	6093      	str	r3, [r2, #8]
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	4909      	ldr	r1, [pc, #36]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002954:	d30e      	bcc.n	8002974 <HAL_RCC_OscConfig+0x294>
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f023 021f 	bic.w	r2, r3, #31
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4902      	ldr	r1, [pc, #8]	; (800296c <HAL_RCC_OscConfig+0x28c>)
 8002964:	4313      	orrs	r3, r2
 8002966:	60cb      	str	r3, [r1, #12]
 8002968:	e04a      	b.n	8002a00 <HAL_RCC_OscConfig+0x320>
 800296a:	bf00      	nop
 800296c:	46020c00 	.word	0x46020c00
 8002970:	20000008 	.word	0x20000008
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2b00      	cmp	r3, #0
 800297a:	da0a      	bge.n	8002992 <HAL_RCC_OscConfig+0x2b2>
 800297c:	4b9b      	ldr	r3, [pc, #620]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	4998      	ldr	r1, [pc, #608]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
 8002990:	e036      	b.n	8002a00 <HAL_RCC_OscConfig+0x320>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299a:	d30a      	bcc.n	80029b2 <HAL_RCC_OscConfig+0x2d2>
 800299c:	4b93      	ldr	r3, [pc, #588]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	029b      	lsls	r3, r3, #10
 80029aa:	4990      	ldr	r1, [pc, #576]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60cb      	str	r3, [r1, #12]
 80029b0:	e026      	b.n	8002a00 <HAL_RCC_OscConfig+0x320>
 80029b2:	4b8e      	ldr	r3, [pc, #568]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	03db      	lsls	r3, r3, #15
 80029c0:	498a      	ldr	r1, [pc, #552]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
 80029c6:	e01b      	b.n	8002a00 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80029c8:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a87      	ldr	r2, [pc, #540]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80029d4:	f7fe fc96 	bl	8001304 <HAL_GetTick>
 80029d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80029da:	e009      	b.n	80029f0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029dc:	f7fe fc92 	bl	8001304 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	f000 bd48 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80029f0:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ef      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8094 	beq.w	8002b36 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_OscConfig+0x340>
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d110      	bne.n	8002a3c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8083 	beq.w	8002b34 <HAL_RCC_OscConfig+0x454>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d17e      	bne.n	8002b34 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f000 bd22 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x374>
 8002a46:	4b69      	ldr	r3, [pc, #420]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a68      	ldr	r2, [pc, #416]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e041      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3f8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x3a4>
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a62      	ldr	r2, [pc, #392]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b60      	ldr	r3, [pc, #384]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5f      	ldr	r2, [pc, #380]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b5d      	ldr	r3, [pc, #372]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a5c      	ldr	r2, [pc, #368]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e029      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3f8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002a8c:	d112      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3d4>
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a53      	ldr	r2, [pc, #332]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b51      	ldr	r3, [pc, #324]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a50      	ldr	r2, [pc, #320]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e011      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3f8>
 8002ab4:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a4c      	ldr	r2, [pc, #304]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a46      	ldr	r2, [pc, #280]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002ad2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d014      	beq.n	8002b0a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fc10 	bl	8001304 <HAL_GetTick>
 8002ae4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae6:	e009      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fc0c 	bl	8001304 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d902      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	f000 bcc2 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x408>
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fbfb 	bl	8001304 <HAL_GetTick>
 8002b0e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b10:	e009      	b.n	8002b26 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b12:	f7fe fbf7 	bl	8001304 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d902      	bls.n	8002b26 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	f000 bcad 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ef      	bne.n	8002b12 <HAL_RCC_OscConfig+0x432>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d066      	beq.n	8002c10 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_OscConfig+0x474>
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d117      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_RCC_OscConfig+0x48e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f000 bc89 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	041b      	lsls	r3, r3, #16
 8002b7c:	491b      	ldr	r1, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b82:	e045      	b.n	8002c10 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d024      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002b98:	f7fe fbb4 	bl	8001304 <HAL_GetTick>
 8002b9c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fbb0 	bl	8001304 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	f000 bc66 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	4907      	ldr	r1, [pc, #28]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	610b      	str	r3, [r1, #16]
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_RCC_OscConfig+0x50c>)
 8002bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002be2:	f7fe fb8f 	bl	8001304 <HAL_GetTick>
 8002be6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be8:	e00c      	b.n	8002c04 <HAL_RCC_OscConfig+0x524>
 8002bea:	bf00      	nop
 8002bec:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fb88 	bl	8001304 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	f000 bc3e 	b.w	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	4baf      	ldr	r3, [pc, #700]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ef      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80c7 	beq.w	8002dac <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c24:	4ba7      	ldr	r3, [pc, #668]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d111      	bne.n	8002c56 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	4ba4      	ldr	r3, [pc, #656]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c38:	4aa2      	ldr	r2, [pc, #648]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002c42:	4ba0      	ldr	r3, [pc, #640]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c56:	4b9c      	ldr	r3, [pc, #624]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002c62:	4b99      	ldr	r3, [pc, #612]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	4a98      	ldr	r2, [pc, #608]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fb49 	bl	8001304 <HAL_GetTick>
 8002c72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe fb45 	bl	8001304 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e3fb      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c88:	4b8f      	ldr	r3, [pc, #572]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d05f      	beq.n	8002d5c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002c9c:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d037      	beq.n	8002d22 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e3da      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01b      	beq.n	8002d0c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cd4:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cda:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002cdc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002ce4:	f7fe fb0e 	bl	8001304 <HAL_GetTick>
 8002ce8:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe fb0a 	bl	8001304 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e3c0      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002cfe:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ef      	bne.n	8002cec <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002d0c:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	496a      	ldr	r1, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d28:	4a66      	ldr	r2, [pc, #408]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002d32:	f7fe fae7 	bl	8001304 <HAL_GetTick>
 8002d36:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fae3 	bl	8001304 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e399      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d4c:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ef      	beq.n	8002d3a <HAL_RCC_OscConfig+0x65a>
 8002d5a:	e01b      	b.n	8002d94 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d62:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d64:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002d68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002d6c:	f7fe faca 	bl	8001304 <HAL_GetTick>
 8002d70:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d74:	f7fe fac6 	bl	8001304 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e37c      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d86:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ef      	bne.n	8002d74 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da2:	4a48      	ldr	r2, [pc, #288]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8112 	beq.w	8002fde <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc0:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d111      	bne.n	8002df2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd4:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002dfe:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fa7b 	bl	8001304 <HAL_GetTick>
 8002e0e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe fa77 	bl	8001304 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e32d      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <HAL_RCC_OscConfig+0x7e8>)
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01f      	beq.n	8002e7c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e5e:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e68:	e018      	b.n	8002e9c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e7a:	e00f      	b.n	8002e9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <HAL_RCC_OscConfig+0x7e4>)
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d058      	beq.n	8002f56 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fa2e 	bl	8001304 <HAL_GetTick>
 8002ea8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eaa:	e00f      	b.n	8002ecc <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7fe fa2a 	bl	8001304 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d906      	bls.n	8002ecc <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e2de      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
 8002ec2:	bf00      	nop
 8002ec4:	46020c00 	.word	0x46020c00
 8002ec8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ecc:	4b9c      	ldr	r3, [pc, #624]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0e8      	beq.n	8002eac <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ee6:	4b96      	ldr	r3, [pc, #600]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eec:	4a94      	ldr	r2, [pc, #592]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fa04 	bl	8001304 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e2b8      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f0e:	4b8c      	ldr	r3, [pc, #560]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ed      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x818>
 8002f1c:	e053      	b.n	8002fc6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f1e:	4b88      	ldr	r3, [pc, #544]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f24:	4a86      	ldr	r2, [pc, #536]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe f9e8 	bl	8001304 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e29c      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f46:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ed      	bne.n	8002f30 <HAL_RCC_OscConfig+0x850>
 8002f54:	e037      	b.n	8002fc6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002f56:	f7fe f9d5 	bl	8001304 <HAL_GetTick>
 8002f5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe f9d1 	bl	8001304 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e285      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f74:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ed      	bne.n	8002f5e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f82:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01a      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f90:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f96:	4a6a      	ldr	r2, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe f9af 	bl	8001304 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e263      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fb8:	4b61      	ldr	r3, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ed      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fc6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d036      	beq.n	8003058 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d019      	beq.n	8003026 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002ff2:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8002ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ffc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ffe:	f7fe f981 	bl	8001304 <HAL_GetTick>
 8003002:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003006:	f7fe f97d 	bl	8001304 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e233      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003018:	4b49      	ldr	r3, [pc, #292]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x926>
 8003024:	e018      	b.n	8003058 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a45      	ldr	r2, [pc, #276]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 800302c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003030:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003032:	f7fe f967 	bl	8001304 <HAL_GetTick>
 8003036:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303a:	f7fe f963 	bl	8001304 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e219      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800304c:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d036      	beq.n	80030d2 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	2b00      	cmp	r3, #0
 800306a:	d019      	beq.n	80030a0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800306c:	4b34      	ldr	r3, [pc, #208]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a33      	ldr	r2, [pc, #204]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8003072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003076:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003078:	f7fe f944 	bl	8001304 <HAL_GetTick>
 800307c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003080:	f7fe f940 	bl	8001304 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1f6      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x9a0>
 800309e:	e018      	b.n	80030d2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 80030a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030ac:	f7fe f92a 	bl	8001304 <HAL_GetTick>
 80030b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80030b4:	f7fe f926 	bl	8001304 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1dc      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d07f      	beq.n	80031de <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d062      	beq.n	80031ac <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f0:	6093      	str	r3, [r2, #8]
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4910      	ldr	r1, [pc, #64]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800310c:	d309      	bcc.n	8003122 <HAL_RCC_OscConfig+0xa42>
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 021f 	bic.w	r2, r3, #31
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4909      	ldr	r1, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 800311c:	4313      	orrs	r3, r2
 800311e:	60cb      	str	r3, [r1, #12]
 8003120:	e02a      	b.n	8003178 <HAL_RCC_OscConfig+0xa98>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	da0c      	bge.n	8003144 <HAL_RCC_OscConfig+0xa64>
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	4901      	ldr	r1, [pc, #4]	; (8003140 <HAL_RCC_OscConfig+0xa60>)
 800313a:	4313      	orrs	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
 800313e:	e01b      	b.n	8003178 <HAL_RCC_OscConfig+0xa98>
 8003140:	46020c00 	.word	0x46020c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d30a      	bcc.n	8003164 <HAL_RCC_OscConfig+0xa84>
 800314e:	4ba5      	ldr	r3, [pc, #660]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	029b      	lsls	r3, r3, #10
 800315c:	49a1      	ldr	r1, [pc, #644]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
 8003162:	e009      	b.n	8003178 <HAL_RCC_OscConfig+0xa98>
 8003164:	4b9f      	ldr	r3, [pc, #636]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	03db      	lsls	r3, r3, #15
 8003172:	499c      	ldr	r1, [pc, #624]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003174:	4313      	orrs	r3, r2
 8003176:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003178:	4b9a      	ldr	r3, [pc, #616]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a99      	ldr	r2, [pc, #612]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800317e:	f043 0310 	orr.w	r3, r3, #16
 8003182:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003184:	f7fe f8be 	bl	8001304 <HAL_GetTick>
 8003188:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800318c:	f7fe f8ba 	bl	8001304 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e170      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800319e:	4b91      	ldr	r3, [pc, #580]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xaac>
 80031aa:	e018      	b.n	80031de <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80031ac:	4b8d      	ldr	r3, [pc, #564]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a8c      	ldr	r2, [pc, #560]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80031b2:	f023 0310 	bic.w	r3, r3, #16
 80031b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031b8:	f7fe f8a4 	bl	8001304 <HAL_GetTick>
 80031bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80031c0:	f7fe f8a0 	bl	8001304 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e156      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80031d2:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 814b 	beq.w	800347e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ee:	4b7d      	ldr	r3, [pc, #500]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	f000 80fa 	beq.w	80033f0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	2b02      	cmp	r3, #2
 8003202:	f040 80cc 	bne.w	800339e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b77      	ldr	r3, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a76      	ldr	r2, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800320c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003210:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003212:	f7fe f877 	bl	8001304 <HAL_GetTick>
 8003216:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe f873 	bl	8001304 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e129      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800322c:	4b6d      	ldr	r3, [pc, #436]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d111      	bne.n	800326a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324c:	4a65      	ldr	r2, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_RCC_OscConfig+0xd08>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800327e:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0xd08>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a59      	ldr	r2, [pc, #356]	; (80033e8 <HAL_RCC_OscConfig+0xd08>)
 8003284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003288:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800328a:	4b56      	ldr	r3, [pc, #344]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003292:	f023 0303 	bic.w	r3, r3, #3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800329e:	3a01      	subs	r2, #1
 80032a0:	0212      	lsls	r2, r2, #8
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032a8:	430a      	orrs	r2, r1
 80032aa:	494e      	ldr	r1, [pc, #312]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	628b      	str	r3, [r1, #40]	; 0x28
 80032b0:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80032b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b4:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <HAL_RCC_OscConfig+0xd0c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032bc:	3a01      	subs	r2, #1
 80032be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032c6:	3a01      	subs	r2, #1
 80032c8:	0252      	lsls	r2, r2, #9
 80032ca:	b292      	uxth	r2, r2
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032d2:	3a01      	subs	r2, #1
 80032d4:	0412      	lsls	r2, r2, #16
 80032d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032e0:	3a01      	subs	r2, #1
 80032e2:	0612      	lsls	r2, r2, #24
 80032e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80032e8:	430a      	orrs	r2, r1
 80032ea:	493e      	ldr	r1, [pc, #248]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032f0:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	4a3b      	ldr	r2, [pc, #236]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80032f6:	f023 0310 	bic.w	r3, r3, #16
 80032fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80032fc:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003304:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800330c:	00d2      	lsls	r2, r2, #3
 800330e:	4935      	ldr	r1, [pc, #212]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003310:	4313      	orrs	r3, r2
 8003312:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003314:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	4a32      	ldr	r2, [pc, #200]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800331a:	f043 0310 	orr.w	r3, r3, #16
 800331e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003320:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	f023 020c 	bic.w	r2, r3, #12
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	492d      	ldr	r1, [pc, #180]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800332e:	4313      	orrs	r3, r2
 8003330:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_OscConfig+0xd08>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0xd08>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003346:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003356:	f023 0304 	bic.w	r3, r3, #4
 800335a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800336a:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003374:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003376:	f7fd ffc5 	bl	8001304 <HAL_GetTick>
 800337a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fd ffc1 	bl	8001304 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e077      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0xc9e>
 800339c:	e06f      	b.n	800347e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80033a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80033aa:	f7fd ffab 	bl	8001304 <HAL_GetTick>
 80033ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fd ffa7 	bl	8001304 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e05d      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_RCC_OscConfig+0xd04>)
 80033d6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	6293      	str	r3, [r2, #40]	; 0x28
 80033e0:	e04d      	b.n	800347e <HAL_RCC_OscConfig+0xd9e>
 80033e2:	bf00      	nop
 80033e4:	46020c00 	.word	0x46020c00
 80033e8:	46020800 	.word	0x46020800
 80033ec:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_OscConfig+0xda8>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_OscConfig+0xda8>)
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	2b01      	cmp	r3, #1
 8003402:	d03a      	beq.n	800347a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d133      	bne.n	800347a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d12a      	bne.n	800347a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	0b1b      	lsrs	r3, r3, #12
 8003428:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d122      	bne.n	800347a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d11a      	bne.n	800347a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	0a5b      	lsrs	r3, r3, #9
 8003448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d111      	bne.n	800347a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d108      	bne.n	800347a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	0e1b      	lsrs	r3, r3, #24
 800346c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3738      	adds	r7, #56	; 0x38
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	46020c00 	.word	0x46020c00

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e1d9      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b9b      	ldr	r3, [pc, #620]	; (8003710 <HAL_RCC_ClockConfig+0x284>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d910      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b98      	ldr	r3, [pc, #608]	; (8003710 <HAL_RCC_ClockConfig+0x284>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	4996      	ldr	r1, [pc, #600]	; (8003710 <HAL_RCC_ClockConfig+0x284>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b94      	ldr	r3, [pc, #592]	; (8003710 <HAL_RCC_ClockConfig+0x284>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e1c1      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	4b8c      	ldr	r3, [pc, #560]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d908      	bls.n	80034fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80034ec:	4b89      	ldr	r3, [pc, #548]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	4986      	ldr	r1, [pc, #536]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	4b81      	ldr	r3, [pc, #516]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003518:	429a      	cmp	r2, r3
 800351a:	d909      	bls.n	8003530 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800351c:	4b7d      	ldr	r3, [pc, #500]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	497a      	ldr	r1, [pc, #488]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 800352c:	4313      	orrs	r3, r2
 800352e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	4b74      	ldr	r3, [pc, #464]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003548:	429a      	cmp	r2, r3
 800354a:	d908      	bls.n	800355e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800354c:	4b71      	ldr	r3, [pc, #452]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	496e      	ldr	r1, [pc, #440]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 800355a:	4313      	orrs	r3, r2
 800355c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	4b69      	ldr	r3, [pc, #420]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	429a      	cmp	r2, r3
 8003578:	d908      	bls.n	800358c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800357a:	4b66      	ldr	r3, [pc, #408]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f023 020f 	bic.w	r2, r3, #15
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	4963      	ldr	r1, [pc, #396]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003588:	4313      	orrs	r3, r2
 800358a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80d2 	beq.w	800373e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d143      	bne.n	800362e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b5b      	ldr	r3, [pc, #364]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80035a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d110      	bne.n	80035d6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80035b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ba:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80035c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80035d6:	f7fd fe95 	bl	8001304 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80035dc:	4b4e      	ldr	r3, [pc, #312]	; (8003718 <HAL_RCC_ClockConfig+0x28c>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00f      	beq.n	8003608 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80035ea:	f7fd fe8b 	bl	8001304 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e12b      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_ClockConfig+0x28c>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003614:	4a3f      	ldr	r2, [pc, #252]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800361e:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d121      	bne.n	800366e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e112      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d115      	bne.n	800366e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e106      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0fa      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365e:	4b2d      	ldr	r3, [pc, #180]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0f2      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800366e:	4b29      	ldr	r3, [pc, #164]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4926      	ldr	r1, [pc, #152]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 800367c:	4313      	orrs	r3, r2
 800367e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003680:	f7fd fe40 	bl	8001304 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d112      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fd fe38 	bl	8001304 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e0d6      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d1ee      	bne.n	8003690 <HAL_RCC_ClockConfig+0x204>
 80036b2:	e044      	b.n	800373e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d112      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036be:	f7fd fe21 	bl	8001304 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0bf      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d1ee      	bne.n	80036be <HAL_RCC_ClockConfig+0x232>
 80036e0:	e02d      	b.n	800373e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d123      	bne.n	8003732 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fd fe0a 	bl	8001304 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0a8      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_RCC_ClockConfig+0x288>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_ClockConfig+0x260>
 800370e:	e016      	b.n	800373e <HAL_RCC_ClockConfig+0x2b2>
 8003710:	40022000 	.word	0x40022000
 8003714:	46020c00 	.word	0x46020c00
 8003718:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fd fdf2 	bl	8001304 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e090      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003732:	4b4a      	ldr	r3, [pc, #296]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	d1ee      	bne.n	800371c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	4b43      	ldr	r3, [pc, #268]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	429a      	cmp	r2, r3
 8003758:	d208      	bcs.n	800376c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800375a:	4b40      	ldr	r3, [pc, #256]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f023 020f 	bic.w	r2, r3, #15
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	493d      	ldr	r1, [pc, #244]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <HAL_RCC_ClockConfig+0x3d4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d210      	bcs.n	800379c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_ClockConfig+0x3d4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 020f 	bic.w	r2, r3, #15
 8003782:	4937      	ldr	r1, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x3d4>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <HAL_RCC_ClockConfig+0x3d4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e05b      	b.n	8003854 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d010      	beq.n	80037ca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d208      	bcs.n	80037ca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80037b8:	4b28      	ldr	r3, [pc, #160]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4925      	ldr	r1, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d209      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80037e8:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	4919      	ldr	r1, [pc, #100]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003814:	429a      	cmp	r2, r3
 8003816:	d208      	bcs.n	800382a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	490d      	ldr	r1, [pc, #52]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x3d0>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x3d8>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x3dc>)
 8003842:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x3e0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fd11 	bl	8001270 <HAL_InitTick>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]

  return status;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	46020c00 	.word	0x46020c00
 8003860:	40022000 	.word	0x40022000
 8003864:	08008c5c 	.word	0x08008c5c
 8003868:	20000000 	.word	0x20000000
 800386c:	20000008 	.word	0x20000008

08003870 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b08b      	sub	sp, #44	; 0x2c
 8003874:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387e:	4b7b      	ldr	r3, [pc, #492]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003888:	4b78      	ldr	r3, [pc, #480]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d121      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d11e      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80038a4:	4b71      	ldr	r3, [pc, #452]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80038b0:	4b6e      	ldr	r3, [pc, #440]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80038b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038b6:	0b1b      	lsrs	r3, r3, #12
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	e005      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	0f1b      	lsrs	r3, r3, #28
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038cc:	4a68      	ldr	r2, [pc, #416]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d110      	bne.n	80038fe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038e0:	e00d      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e2:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ee:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	e004      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038fa:	4b5e      	ldr	r3, [pc, #376]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80038fc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	f040 80ac 	bne.w	8003a5e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003906:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003910:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	0a1b      	lsrs	r3, r3, #8
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3301      	adds	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800391e:	4b53      	ldr	r3, [pc, #332]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800392a:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8086 	beq.w	8003a5a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d003      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0xec>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d022      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x130>
 800395a:	e043      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x208>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b3f      	ldr	r3, [pc, #252]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800397e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003982:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003a7c <HAL_RCC_GetSysClockFreq+0x20c>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800399e:	e046      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x208>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80039c6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003a7c <HAL_RCC_GetSysClockFreq+0x20c>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80039e2:	e024      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a10:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003a7c <HAL_RCC_GetSysClockFreq+0x20c>
 8003a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a28:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003a2c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	0e1b      	lsrs	r3, r3, #24
 8003a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a38:	3301      	adds	r3, #1
 8003a3a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a52:	ee17 3a90 	vmov	r3, s15
 8003a56:	623b      	str	r3, [r7, #32]
 8003a58:	e001      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	372c      	adds	r7, #44	; 0x2c
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	46020c00 	.word	0x46020c00
 8003a70:	08008c74 	.word	0x08008c74
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	4b742400 	.word	0x4b742400
 8003a7c:	46000000 	.word	0x46000000

08003a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003a84:	f7ff fef4 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x28>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	4906      	ldr	r1, [pc, #24]	; (8003aac <HAL_RCC_GetHCLKFreq+0x2c>)
 8003a94:	5ccb      	ldrb	r3, [r1, r3]
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003a9c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	46020c00 	.word	0x46020c00
 8003aac:	08008c5c 	.word	0x08008c5c
 8003ab0:	20000000 	.word	0x20000000

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003ab8:	f7ff ffe2 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	46020c00 	.word	0x46020c00
 8003ad8:	08008c6c 	.word	0x08008c6c

08003adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003ae0:	f7ff ffce 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	46020c00 	.word	0x46020c00
 8003b00:	08008c6c 	.word	0x08008c6c

08003b04 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003b08:	f7ff ffba 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	46020c00 	.word	0x46020c00
 8003b28:	08008c6c 	.word	0x08008c6c

08003b2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b34:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b42:	f7fe fd6f 	bl	8002624 <HAL_PWREx_GetVoltageRange>
 8003b46:	6178      	str	r0, [r7, #20]
 8003b48:	e019      	b.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b50:	4a37      	ldr	r2, [pc, #220]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003b5a:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b68:	f7fe fd5c 	bl	8002624 <HAL_PWREx_GetVoltageRange>
 8003b6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b74:	4a2e      	ldr	r2, [pc, #184]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b76:	f023 0304 	bic.w	r3, r3, #4
 8003b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b84:	d003      	beq.n	8003b8e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8c:	d109      	bne.n	8003ba2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b94:	d202      	bcs.n	8003b9c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003b96:	2301      	movs	r3, #1
 8003b98:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003b9a:	e033      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003ba0:	e030      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba8:	d208      	bcs.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d102      	bne.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e025      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e035      	b.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc2:	d90f      	bls.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bd0:	d902      	bls.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	e015      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003bd8:	2301      	movs	r3, #1
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e012      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e00f      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bea:	d109      	bne.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d102      	bne.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e004      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e001      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003c00:	2301      	movs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 020f 	bic.w	r2, r3, #15
 8003c0c:	4909      	ldr	r1, [pc, #36]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d001      	beq.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	46020c00 	.word	0x46020c00
 8003c34:	40022000 	.word	0x40022000

08003c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b0ba      	sub	sp, #232	; 0xe8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f002 0401 	and.w	r4, r2, #1
 8003c5c:	2500      	movs	r5, #0
 8003c5e:	ea54 0305 	orrs.w	r3, r4, r5
 8003c62:	d00b      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003c64:	4bcb      	ldr	r3, [pc, #812]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c6a:	f023 0103 	bic.w	r1, r3, #3
 8003c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	4ac7      	ldr	r2, [pc, #796]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c76:	430b      	orrs	r3, r1
 8003c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f002 0802 	and.w	r8, r2, #2
 8003c88:	f04f 0900 	mov.w	r9, #0
 8003c8c:	ea58 0309 	orrs.w	r3, r8, r9
 8003c90:	d00b      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003c92:	4bc0      	ldr	r3, [pc, #768]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c98:	f023 010c 	bic.w	r1, r3, #12
 8003c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	4abc      	ldr	r2, [pc, #752]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f002 0a04 	and.w	sl, r2, #4
 8003cb6:	f04f 0b00 	mov.w	fp, #0
 8003cba:	ea5a 030b 	orrs.w	r3, sl, fp
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003cc0:	4bb4      	ldr	r3, [pc, #720]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	4ab0      	ldr	r2, [pc, #704]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 0308 	and.w	r3, r2, #8
 8003ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003cf8:	4ba6      	ldr	r3, [pc, #664]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	4aa2      	ldr	r2, [pc, #648]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f002 0310 	and.w	r3, r2, #16
 8003d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003d30:	4b98      	ldr	r3, [pc, #608]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d40:	4a94      	ldr	r2, [pc, #592]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f002 0320 	and.w	r3, r2, #32
 8003d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d62:	460b      	mov	r3, r1
 8003d64:	4313      	orrs	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003d68:	4b8a      	ldr	r3, [pc, #552]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d6e:	f023 0107 	bic.w	r1, r3, #7
 8003d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d78:	4a86      	ldr	r2, [pc, #536]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003da0:	4b7c      	ldr	r3, [pc, #496]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db0:	4a78      	ldr	r2, [pc, #480]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003dd8:	4b6e      	ldr	r3, [pc, #440]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de8:	4a6a      	ldr	r2, [pc, #424]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e06:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003e10:	4b60      	ldr	r3, [pc, #384]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a5c      	ldr	r2, [pc, #368]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003e42:	460b      	mov	r3, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003e48:	4b52      	ldr	r3, [pc, #328]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e4e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e58:	4a4e      	ldr	r2, [pc, #312]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003e80:	4b44      	ldr	r3, [pc, #272]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e86:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e90:	4a40      	ldr	r2, [pc, #256]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003eae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ebe:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec8:	4a32      	ldr	r2, [pc, #200]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ee6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d00c      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003ef0:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f02:	4a24      	ldr	r2, [pc, #144]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003f16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f18:	2300      	movs	r3, #0
 8003f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f1c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003f20:	460b      	mov	r3, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	d04f      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d02d      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d827      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f36:	2b60      	cmp	r3, #96	; 0x60
 8003f38:	d02e      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003f3a:	2b60      	cmp	r3, #96	; 0x60
 8003f3c:	d823      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d006      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d81f      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d011      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003f4e:	e01a      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f5c:	e01d      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f62:	3308      	adds	r3, #8
 8003f64:	4618      	mov	r0, r3
 8003f66:	f002 f981 	bl	800626c <RCCEx_PLL2_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f70:	e013      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f76:	332c      	adds	r3, #44	; 0x2c
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 fa0f 	bl	800639c <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f84:	e009      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003f8c:	e005      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e003      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f92:	bf00      	nop
 8003f94:	46020c00 	.word	0x46020c00
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003fa2:	4bb6      	ldr	r3, [pc, #728]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fa8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003fac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	4ab1      	ldr	r2, [pc, #708]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003fc2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	677b      	str	r3, [r7, #116]	; 0x74
 8003fd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	d053      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fee:	d033      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff4:	d82c      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ffa:	d02f      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004000:	d826      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d820      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004016:	d011      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004018:	e01a      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800401a:	4b98      	ldr	r3, [pc, #608]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	4a97      	ldr	r2, [pc, #604]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004026:	e01a      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800402c:	3308      	adds	r3, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f002 f91c 	bl	800626c <RCCEx_PLL2_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800403a:	e010      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800403c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004040:	332c      	adds	r3, #44	; 0x2c
 8004042:	4618      	mov	r0, r3
 8004044:	f002 f9aa 	bl	800639c <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800404e:	e006      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004056:	e002      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10d      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004066:	4b85      	ldr	r3, [pc, #532]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004068:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800406c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004078:	4a80      	ldr	r2, [pc, #512]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800407a:	430b      	orrs	r3, r1
 800407c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004086:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800408a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004096:	66bb      	str	r3, [r7, #104]	; 0x68
 8004098:	2300      	movs	r3, #0
 800409a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800409c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d046      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80040a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040b2:	d028      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80040b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040b8:	d821      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80040ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040be:	d022      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80040c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c4:	d81b      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80040c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ca:	d01c      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80040cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d0:	d815      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d6:	d008      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040dc:	d80f      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e6:	d00e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80040e8:	e009      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ee:	3308      	adds	r3, #8
 80040f0:	4618      	mov	r0, r3
 80040f2:	f002 f8bb 	bl	800626c <RCCEx_PLL2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004108:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10d      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004110:	4b5a      	ldr	r3, [pc, #360]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004116:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800411a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800411e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004122:	4a56      	ldr	r2, [pc, #344]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004124:	430b      	orrs	r3, r1
 8004126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800412a:	e003      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004130:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
 8004142:	2300      	movs	r3, #0
 8004144:	667b      	str	r3, [r7, #100]	; 0x64
 8004146:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d03f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	2b04      	cmp	r3, #4
 800415a:	d81e      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	080041a3 	.word	0x080041a3
 8004168:	08004179 	.word	0x08004179
 800416c:	08004187 	.word	0x08004187
 8004170:	080041a3 	.word	0x080041a3
 8004174:	080041a3 	.word	0x080041a3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004178:	4b40      	ldr	r3, [pc, #256]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	4a3f      	ldr	r2, [pc, #252]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004184:	e00e      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800418a:	332c      	adds	r3, #44	; 0x2c
 800418c:	4618      	mov	r0, r3
 800418e:	f002 f905 	bl	800639c <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80041a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80041ac:	4b33      	ldr	r3, [pc, #204]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80041ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041b2:	f023 0107 	bic.w	r1, r3, #7
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	4a2f      	ldr	r2, [pc, #188]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80041cc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80041d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80041dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80041de:	2300      	movs	r3, #0
 80041e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80041e6:	460b      	mov	r3, r1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	d04d      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80041ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f8:	d028      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80041fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041fe:	d821      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004200:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004204:	d024      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004206:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800420a:	d81b      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800420c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004210:	d00e      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004216:	d815      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01b      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004220:	d110      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800422e:	e012      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004234:	332c      	adds	r3, #44	; 0x2c
 8004236:	4618      	mov	r0, r3
 8004238:	f002 f8b0 	bl	800639c <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004242:	e008      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800424a:	e004      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004254:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004256:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d110      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004264:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800426c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004270:	4a02      	ldr	r2, [pc, #8]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004272:	430b      	orrs	r3, r1
 8004274:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800427a:	bf00      	nop
 800427c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004284:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004294:	653b      	str	r3, [r7, #80]	; 0x50
 8004296:	2300      	movs	r3, #0
 8004298:	657b      	str	r3, [r7, #84]	; 0x54
 800429a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f000 80b5 	beq.w	8004410 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ac:	4b9d      	ldr	r3, [pc, #628]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d113      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	4b9a      	ldr	r3, [pc, #616]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80042bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c0:	4a98      	ldr	r2, [pc, #608]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80042ca:	4b96      	ldr	r3, [pc, #600]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80042cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80042e2:	4b91      	ldr	r3, [pc, #580]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	4a90      	ldr	r2, [pc, #576]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042ee:	f7fd f809 	bl	8001304 <HAL_GetTick>
 80042f2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042f6:	e00b      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fd f804 	bl	8001304 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d903      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800430e:	e005      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004310:	4b85      	ldr	r3, [pc, #532]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ed      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800431c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d165      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004324:	4b7f      	ldr	r3, [pc, #508]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d023      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800433a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004346:	4293      	cmp	r3, r2
 8004348:	d01b      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800434a:	4b76      	ldr	r3, [pc, #472]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800434c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004358:	4b72      	ldr	r3, [pc, #456]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800435a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800435e:	4a71      	ldr	r2, [pc, #452]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004368:	4b6e      	ldr	r3, [pc, #440]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800436a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800436e:	4a6d      	ldr	r2, [pc, #436]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004374:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004378:	4a6a      	ldr	r2, [pc, #424]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fc ffb9 	bl	8001304 <HAL_GetTick>
 8004392:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004396:	e00d      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fc ffb4 	bl	8001304 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d903      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80043b2:	e006      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b4:	4b5b      	ldr	r3, [pc, #364]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80043b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ea      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80043c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80043ca:	4b56      	ldr	r3, [pc, #344]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80043cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043dc:	4a51      	ldr	r2, [pc, #324]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043e4:	e008      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80043ea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80043ee:	e003      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80043f4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043f8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004400:	4b48      	ldr	r3, [pc, #288]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004406:	4a47      	ldr	r2, [pc, #284]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48
 800441e:	2300      	movs	r3, #0
 8004420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004422:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d042      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800442c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004434:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004438:	d022      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800443a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800443e:	d81b      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004444:	d011      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8004446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800444a:	d815      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d019      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004454:	d110      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445a:	3308      	adds	r3, #8
 800445c:	4618      	mov	r0, r3
 800445e:	f001 ff05 	bl	800626c <RCCEx_PLL2_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004468:	e00d      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004476:	e006      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800447e:	e002      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004480:	bf00      	nop
 8004482:	e000      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004484:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004486:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004494:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800449c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80044a2:	430b      	orrs	r3, r1
 80044a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80044ae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80044be:	643b      	str	r3, [r7, #64]	; 0x40
 80044c0:	2300      	movs	r3, #0
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
 80044c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d032      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80044ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044da:	d00b      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e0:	d804      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	d007      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80044fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80044fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d112      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004508:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800450c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004518:	4a02      	ldr	r2, [pc, #8]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800451a:	430b      	orrs	r3, r1
 800451c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004522:	bf00      	nop
 8004524:	46020c00 	.word	0x46020c00
 8004528:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004530:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
 8004542:	2300      	movs	r3, #0
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004546:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d00c      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004550:	4b98      	ldr	r3, [pc, #608]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004552:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004556:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800455a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800455e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004562:	4a94      	ldr	r2, [pc, #592]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004564:	430b      	orrs	r3, r1
 8004566:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800456a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
 8004578:	2300      	movs	r3, #0
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
 800457c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d019      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800458a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800458e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004594:	4b87      	ldr	r3, [pc, #540]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	4a86      	ldr	r2, [pc, #536]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800459a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80045a0:	4b84      	ldr	r3, [pc, #528]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80045a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045a6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80045aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045b2:	4a80      	ldr	r2, [pc, #512]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80045ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c8:	2300      	movs	r3, #0
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d00c      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80045d6:	4b77      	ldr	r3, [pc, #476]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80045d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045e8:	4972      	ldr	r1, [pc, #456]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80045f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004606:	460b      	mov	r3, r1
 8004608:	4313      	orrs	r3, r2
 800460a:	d00c      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800460c:	4b69      	ldr	r3, [pc, #420]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800460e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004612:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800461a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800461e:	4965      	ldr	r1, [pc, #404]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800463c:	460b      	mov	r3, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	d00c      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004642:	4b5c      	ldr	r3, [pc, #368]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004648:	f023 0218 	bic.w	r2, r3, #24
 800464c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004650:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004654:	4957      	ldr	r1, [pc, #348]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800465c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004672:	460b      	mov	r3, r1
 8004674:	4313      	orrs	r3, r2
 8004676:	d032      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800467c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004684:	d105      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004686:	4b4b      	ldr	r3, [pc, #300]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	4a4a      	ldr	r2, [pc, #296]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800468c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004690:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800469a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800469e:	d108      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046a4:	3308      	adds	r3, #8
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fde0 	bl	800626c <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80046b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80046ba:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80046bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80046c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046cc:	4939      	ldr	r1, [pc, #228]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046da:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80046de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046f4:	460b      	mov	r3, r1
 80046f6:	4313      	orrs	r3, r2
 80046f8:	d03a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80046fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004706:	d00e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470c:	d815      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d017      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004716:	d110      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004718:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800471e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004722:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004724:	e00e      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800472a:	3308      	adds	r3, #8
 800472c:	4618      	mov	r0, r3
 800472e:	f001 fd9d 	bl	800626c <RCCEx_PLL2_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004738:	e004      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004740:	e000      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004742:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004744:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800474e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004752:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475e:	4915      	ldr	r1, [pc, #84]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004766:	e003      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800476c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d00c      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800478e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004792:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800479a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800479e:	4905      	ldr	r1, [pc, #20]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80047a6:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	37e8      	adds	r7, #232	; 0xe8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b4:	46020c00 	.word	0x46020c00

080047b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80047c0:	4bac      	ldr	r3, [pc, #688]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80047ca:	4baa      	ldr	r3, [pc, #680]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80047d4:	4ba7      	ldr	r3, [pc, #668]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	3301      	adds	r3, #1
 80047e0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80047e2:	4ba4      	ldr	r3, [pc, #656]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80047ec:	4ba1      	ldr	r3, [pc, #644]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004804:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8123 	beq.w	8004a56 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d062      	beq.n	80048dc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b03      	cmp	r3, #3
 800481a:	f200 8081 	bhi.w	8004920 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d024      	beq.n	800486e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d17a      	bne.n	8004920 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004834:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483c:	4b8d      	ldr	r3, [pc, #564]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800484c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004850:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8004a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004854:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004858:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800485c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004860:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486c:	e08f      	b.n	800498e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800486e:	4b81      	ldr	r3, [pc, #516]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800487a:	4b7e      	ldr	r3, [pc, #504]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0f1b      	lsrs	r3, r3, #28
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8004886:	4b7b      	ldr	r3, [pc, #492]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	0f1b      	lsrs	r3, r3, #28
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	4a7a      	ldr	r2, [pc, #488]	; (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80048be:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048da:	e058      	b.n	800498e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b61      	ldr	r3, [pc, #388]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80048f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80048fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004902:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800490e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491e:	e036      	b.n	800498e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004920:	4b54      	ldr	r3, [pc, #336]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800492c:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	0f1b      	lsrs	r3, r3, #28
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	e006      	b.n	8004946 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8004938:	4b4e      	ldr	r3, [pc, #312]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800493a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	0f1b      	lsrs	r3, r3, #28
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	4a4e      	ldr	r2, [pc, #312]	; (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004970:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004980:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004988:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800498e:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d017      	beq.n	80049ca <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800499a:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	0a5b      	lsrs	r3, r3, #9
 80049a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80049ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 2a90 	vmov	r2, s15
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e002      	b.n	80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80049d0:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d017      	beq.n	8004a0c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80049ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a02:	ee17 2a90 	vmov	r2, s15
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	e002      	b.n	8004a12 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004a12:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	0e1b      	lsrs	r3, r3, #24
 8004a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a34:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a44:	ee17 2a90 	vmov	r2, s15
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004a4c:	e00c      	b.n	8004a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
}
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	3724      	adds	r7, #36	; 0x24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	46020c00 	.word	0x46020c00
 8004a78:	4b742400 	.word	0x4b742400
 8004a7c:	46000000 	.word	0x46000000
 8004a80:	08008c74 	.word	0x08008c74

08004a84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	; 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004a8c:	4bac      	ldr	r3, [pc, #688]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004a96:	4baa      	ldr	r3, [pc, #680]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004aa0:	4ba7      	ldr	r3, [pc, #668]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	3301      	adds	r3, #1
 8004aac:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004aae:	4ba4      	ldr	r3, [pc, #656]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004ab8:	4ba1      	ldr	r3, [pc, #644]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	08db      	lsrs	r3, r3, #3
 8004abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8123 	beq.w	8004d22 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d062      	beq.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	f200 8081 	bhi.w	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d024      	beq.n	8004b3a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d17a      	bne.n	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b00:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8004b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b08:	4b8d      	ldr	r3, [pc, #564]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b18:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b1c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b38:	e08f      	b.n	8004c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004b3a:	4b81      	ldr	r3, [pc, #516]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8004b46:	4b7e      	ldr	r3, [pc, #504]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0f1b      	lsrs	r3, r3, #28
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	e006      	b.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8004b52:	4b7b      	ldr	r3, [pc, #492]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	0f1b      	lsrs	r3, r3, #28
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	4a7a      	ldr	r2, [pc, #488]	; (8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b8a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba6:	e058      	b.n	8004c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b61      	ldr	r3, [pc, #388]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bce:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bea:	e036      	b.n	8004c5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004bec:	4b54      	ldr	r3, [pc, #336]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8004bf8:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	0f1b      	lsrs	r3, r3, #28
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	e006      	b.n	8004c12 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8004c04:	4b4e      	ldr	r3, [pc, #312]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	0f1b      	lsrs	r3, r3, #28
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	4a4e      	ldr	r2, [pc, #312]	; (8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c3c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c58:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d017      	beq.n	8004c96 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c66:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	0a5b      	lsrs	r3, r3, #9
 8004c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8c:	ee17 2a90 	vmov	r2, s15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004c9c:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ca8:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cce:	ee17 2a90 	vmov	r2, s15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	e002      	b.n	8004cde <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004cde:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d017      	beq.n	8004d1a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	0e1b      	lsrs	r3, r3, #24
 8004cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d00:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d10:	ee17 2a90 	vmov	r2, s15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d18:	e00c      	b.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	3724      	adds	r7, #36	; 0x24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	46020c00 	.word	0x46020c00
 8004d44:	4b742400 	.word	0x4b742400
 8004d48:	46000000 	.word	0x46000000
 8004d4c:	08008c74 	.word	0x08008c74

08004d50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b089      	sub	sp, #36	; 0x24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004d58:	4bac      	ldr	r3, [pc, #688]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004d62:	4baa      	ldr	r3, [pc, #680]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004d6c:	4ba7      	ldr	r3, [pc, #668]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	3301      	adds	r3, #1
 8004d78:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004d7a:	4ba4      	ldr	r3, [pc, #656]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004d84:	4ba1      	ldr	r3, [pc, #644]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8123 	beq.w	8004fee <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d062      	beq.n	8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	f200 8081 	bhi.w	8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d024      	beq.n	8004e06 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d17a      	bne.n	8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dcc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005010 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8004dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd4:	4b8d      	ldr	r3, [pc, #564]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004de8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e00:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004e04:	e08f      	b.n	8004f26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004e06:	4b81      	ldr	r3, [pc, #516]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8004e12:	4b7e      	ldr	r3, [pc, #504]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	0f1b      	lsrs	r3, r3, #28
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	e006      	b.n	8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8004e1e:	4b7b      	ldr	r3, [pc, #492]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	0f1b      	lsrs	r3, r3, #28
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	4a7a      	ldr	r2, [pc, #488]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e56:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e72:	e058      	b.n	8004f26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005010 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b61      	ldr	r3, [pc, #388]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e9a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb6:	e036      	b.n	8004f26 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004eb8:	4b54      	ldr	r3, [pc, #336]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8004ec4:	4b51      	ldr	r3, [pc, #324]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	0f1b      	lsrs	r3, r3, #28
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	e006      	b.n	8004ede <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8004ed0:	4b4e      	ldr	r3, [pc, #312]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	0f1b      	lsrs	r3, r3, #28
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	4a4e      	ldr	r2, [pc, #312]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	ee07 3a90 	vmov	s15, r3
 8004f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f08:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f24:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d017      	beq.n	8004f62 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f32:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	0a5b      	lsrs	r3, r3, #9
 8004f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f48:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f58:	ee17 2a90 	vmov	r2, s15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e002      	b.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d017      	beq.n	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9a:	ee17 2a90 	vmov	r2, s15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e002      	b.n	8004faa <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d017      	beq.n	8004fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	0e1b      	lsrs	r3, r3, #24
 8004fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004fc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fcc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004fd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fdc:	ee17 2a90 	vmov	r2, s15
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004fe4:	e00c      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	e008      	b.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
}
 8005000:	bf00      	nop
 8005002:	3724      	adds	r7, #36	; 0x24
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	46020c00 	.word	0x46020c00
 8005010:	4b742400 	.word	0x4b742400
 8005014:	46000000 	.word	0x46000000
 8005018:	08008c74 	.word	0x08008c74

0800501c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	; 0x38
 8005020:	af00      	add	r7, sp, #0
 8005022:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800502a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800502e:	430b      	orrs	r3, r1
 8005030:	d145      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005032:	4ba7      	ldr	r3, [pc, #668]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800503e:	4ba4      	ldr	r3, [pc, #656]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d108      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005052:	d104      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
 800505a:	f001 b8fc 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800505e:	4b9c      	ldr	r3, [pc, #624]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800506c:	d114      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005074:	d110      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005076:	4b96      	ldr	r3, [pc, #600]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800507c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005084:	d103      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005086:	23fa      	movs	r3, #250	; 0xfa
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800508a:	f001 b8e4 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800508e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005094:	f001 b8df 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005098:	4b8d      	ldr	r3, [pc, #564]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a4:	d107      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ac:	d103      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80050ae:	4b89      	ldr	r3, [pc, #548]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
 80050b2:	f001 b8d0 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	f001 b8cc 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80050be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80050c6:	430b      	orrs	r3, r1
 80050c8:	d151      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80050ca:	4b81      	ldr	r3, [pc, #516]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80050cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80050d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d035      	beq.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d841      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b60      	cmp	r3, #96	; 0x60
 80050e6:	d02a      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	2b60      	cmp	r3, #96	; 0x60
 80050ec:	d83b      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d009      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d835      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00c      	beq.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	2b20      	cmp	r3, #32
 8005104:	d012      	beq.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005106:	e02e      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fb53 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005116:	f001 b89e 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800511a:	f107 0318 	add.w	r3, r7, #24
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fcb0 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005128:	f001 b895 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800512c:	f107 030c 	add.w	r3, r7, #12
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fe0d 	bl	8004d50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800513a:	f001 b88c 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800513e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005144:	f001 b887 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005148:	4b61      	ldr	r3, [pc, #388]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005154:	d103      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005156:	4b60      	ldr	r3, [pc, #384]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800515a:	f001 b87c 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005162:	f001 b878 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800516a:	f001 b874 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800516e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005172:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005176:	430b      	orrs	r3, r1
 8005178:	d158      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800517a:	4b55      	ldr	r3, [pc, #340]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800517c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005184:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d03b      	beq.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005194:	d846      	bhi.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519c:	d02e      	beq.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a4:	d83e      	bhi.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b4:	d836      	bhi.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	d012      	beq.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80051c4:	e02e      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff faf4 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051d4:	f001 b83f 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d8:	f107 0318 	add.w	r3, r7, #24
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fc51 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051e6:	f001 b836 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051ea:	f107 030c 	add.w	r3, r7, #12
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fdae 	bl	8004d50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051f8:	f001 b82d 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80051fc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005202:	f001 b828 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005206:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005212:	d103      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005214:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005218:	f001 b81d 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005220:	f001 b819 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005228:	f001 b815 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800522c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005230:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005234:	430b      	orrs	r3, r1
 8005236:	d126      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800523a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800523e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005242:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005244:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d106      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
 800525c:	f000 bffb 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005260:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d107      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005274:	d103      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	f000 bfec 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	f000 bfe8 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800528e:	430b      	orrs	r3, r1
 8005290:	d164      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005292:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005298:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800529c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052a4:	d03d      	beq.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052ac:	d852      	bhi.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b4:	d014      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052bc:	d84a      	bhi.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01f      	beq.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ca:	d012      	beq.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80052cc:	e042      	b.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80052ce:	bf00      	nop
 80052d0:	46020c00 	.word	0x46020c00
 80052d4:	0007a120 	.word	0x0007a120
 80052d8:	00f42400 	.word	0x00f42400
 80052dc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fa67 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ee:	f000 bfb2 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052f2:	f107 0318 	add.w	r3, r7, #24
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fbc4 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005300:	f000 bfa9 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005304:	4bab      	ldr	r3, [pc, #684]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800530c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005310:	d103      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005312:	4ba9      	ldr	r3, [pc, #676]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005316:	f000 bf9e 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800531e:	f000 bf9a 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005322:	4ba4      	ldr	r3, [pc, #656]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800532e:	4ba1      	ldr	r3, [pc, #644]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0e1b      	lsrs	r3, r3, #24
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800533a:	4b9e      	ldr	r3, [pc, #632]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800533c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005340:	041b      	lsls	r3, r3, #16
 8005342:	0e1b      	lsrs	r3, r3, #24
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	4a9c      	ldr	r2, [pc, #624]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005350:	f000 bf81 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005358:	f000 bf7d 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800535c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005360:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005364:	430b      	orrs	r3, r1
 8005366:	d175      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005368:	4b92      	ldr	r3, [pc, #584]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800536a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800536e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005372:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	2b00      	cmp	r3, #0
 8005378:	d15b      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800537a:	4b8e      	ldr	r3, [pc, #568]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800537c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005380:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005384:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800538c:	d034      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005394:	d849      	bhi.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800539c:	d00b      	beq.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a4:	d841      	bhi.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d016      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b2:	d009      	beq.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80053b4:	e039      	b.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff f9fc 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80053c4:	f000 bf47 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c8:	f107 0318 	add.w	r3, r7, #24
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fb59 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80053d6:	f000 bf3e 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80053da:	4b76      	ldr	r3, [pc, #472]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e6:	d103      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80053e8:	4b73      	ldr	r3, [pc, #460]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80053ec:	f000 bf33 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80053f4:	f000 bf2f 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053f8:	4b6e      	ldr	r3, [pc, #440]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8005404:	4b6b      	ldr	r3, [pc, #428]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	e006      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005410:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	0e1b      	lsrs	r3, r3, #24
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	4a67      	ldr	r2, [pc, #412]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005426:	f000 bf16 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800542e:	f000 bf12 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005438:	d108      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800543a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff f9ba 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
 8005448:	f000 bf05 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
 8005450:	f000 bf01 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005458:	1e51      	subs	r1, r2, #1
 800545a:	430b      	orrs	r3, r1
 800545c:	d136      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800545e:	4b55      	ldr	r3, [pc, #340]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005470:	f7fe fb34 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8005474:	6378      	str	r0, [r7, #52]	; 0x34
 8005476:	f000 beee 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2b01      	cmp	r3, #1
 800547e:	d104      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005480:	f7fe f9f6 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005484:	6378      	str	r0, [r7, #52]	; 0x34
 8005486:	f000 bee6 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800548a:	4b4a      	ldr	r3, [pc, #296]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005496:	d106      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	2b02      	cmp	r3, #2
 800549c:	d103      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800549e:	4b48      	ldr	r3, [pc, #288]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
 80054a2:	f000 bed8 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80054a6:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80054a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d107      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d104      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80054ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
 80054c0:	f000 bec9 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
 80054c8:	f000 bec5 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80054cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d0:	1e91      	subs	r1, r2, #2
 80054d2:	430b      	orrs	r3, r1
 80054d4:	d136      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80054d6:	4b37      	ldr	r3, [pc, #220]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80054d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054dc:	f003 030c 	and.w	r3, r3, #12
 80054e0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fe fae4 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 80054ec:	6378      	str	r0, [r7, #52]	; 0x34
 80054ee:	f000 beb2 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d104      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054f8:	f7fe f9ba 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80054fc:	6378      	str	r0, [r7, #52]	; 0x34
 80054fe:	f000 beaa 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550e:	d106      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	2b08      	cmp	r3, #8
 8005514:	d103      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8005516:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	f000 be9c 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800551e:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b02      	cmp	r3, #2
 800552a:	d107      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	2b0c      	cmp	r3, #12
 8005530:	d104      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8005532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
 8005538:	f000 be8d 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
 8005540:	f000 be89 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005548:	1f11      	subs	r1, r2, #4
 800554a:	430b      	orrs	r3, r1
 800554c:	d13e      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800554e:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005554:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005558:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fe faa8 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005564:	6378      	str	r0, [r7, #52]	; 0x34
 8005566:	f000 be76 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b10      	cmp	r3, #16
 800556e:	d104      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005570:	f7fe f97e 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005574:	6378      	str	r0, [r7, #52]	; 0x34
 8005576:	f000 be6e 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005586:	d106      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	2b20      	cmp	r3, #32
 800558c:	d103      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	f000 be60 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005596:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d10f      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	2b30      	cmp	r3, #48	; 0x30
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80055aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
 80055b0:	f000 be51 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80055b4:	46020c00 	.word	0x46020c00
 80055b8:	02dc6c00 	.word	0x02dc6c00
 80055bc:	08008c74 	.word	0x08008c74
 80055c0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	f000 be45 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80055cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d0:	f1a2 0108 	sub.w	r1, r2, #8
 80055d4:	430b      	orrs	r3, r1
 80055d6:	d136      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80055d8:	4b9f      	ldr	r3, [pc, #636]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80055da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80055ea:	f7fe fa63 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 80055ee:	6378      	str	r0, [r7, #52]	; 0x34
 80055f0:	f000 be31 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d104      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80055fa:	f7fe f939 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80055fe:	6378      	str	r0, [r7, #52]	; 0x34
 8005600:	f000 be29 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005604:	4b94      	ldr	r3, [pc, #592]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005610:	d106      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d103      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8005618:	4b90      	ldr	r3, [pc, #576]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
 800561c:	f000 be1b 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005620:	4b8d      	ldr	r3, [pc, #564]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b02      	cmp	r3, #2
 800562c:	d107      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	2bc0      	cmp	r3, #192	; 0xc0
 8005632:	d104      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8005634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
 800563a:	f000 be0c 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
 8005642:	f000 be08 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800564a:	f1a2 0110 	sub.w	r1, r2, #16
 800564e:	430b      	orrs	r3, r1
 8005650:	d139      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005652:	4b81      	ldr	r3, [pc, #516]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005664:	f7fe fa26 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005668:	6378      	str	r0, [r7, #52]	; 0x34
 800566a:	f000 bdf4 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005674:	d104      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005676:	f7fe f8fb 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800567a:	6378      	str	r0, [r7, #52]	; 0x34
 800567c:	f000 bdeb 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005680:	4b75      	ldr	r3, [pc, #468]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568c:	d107      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005694:	d103      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8005696:	4b71      	ldr	r3, [pc, #452]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
 800569a:	f000 bddc 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800569e:	4b6e      	ldr	r3, [pc, #440]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80056a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d108      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b2:	d104      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80056b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	f000 bdcc 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	f000 bdc8 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80056c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ca:	f1a2 0120 	sub.w	r1, r2, #32
 80056ce:	430b      	orrs	r3, r1
 80056d0:	d158      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80056d2:	4b61      	ldr	r3, [pc, #388]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80056d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80056e4:	f7fe fa0e 	bl	8003b04 <HAL_RCC_GetPCLK3Freq>
 80056e8:	6378      	str	r0, [r7, #52]	; 0x34
 80056ea:	f000 bdb4 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d104      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056f4:	f7fe f8bc 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80056f8:	6378      	str	r0, [r7, #52]	; 0x34
 80056fa:	f000 bdac 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80056fe:	4b56      	ldr	r3, [pc, #344]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d106      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	2b02      	cmp	r3, #2
 8005710:	d103      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8005712:	4b52      	ldr	r3, [pc, #328]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
 8005716:	f000 bd9e 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800571a:	4b4f      	ldr	r3, [pc, #316]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800571c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b02      	cmp	r3, #2
 8005726:	d107      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	2b03      	cmp	r3, #3
 800572c:	d104      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
 8005734:	f000 bd8f 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005738:	4b47      	ldr	r3, [pc, #284]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b20      	cmp	r3, #32
 8005742:	d11b      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2b04      	cmp	r3, #4
 8005748:	d118      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800574a:	4b43      	ldr	r3, [pc, #268]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005756:	4b40      	ldr	r3, [pc, #256]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0e1b      	lsrs	r3, r3, #24
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005762:	4b3d      	ldr	r3, [pc, #244]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	0e1b      	lsrs	r3, r3, #24
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	4a3b      	ldr	r2, [pc, #236]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	f000 bd6d 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	f000 bd69 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005788:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800578c:	430b      	orrs	r3, r1
 800578e:	d169      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005790:	4b31      	ldr	r3, [pc, #196]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005792:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005796:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800579a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d104      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80057a4:	f7fe f864 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80057a8:	6378      	str	r0, [r7, #52]	; 0x34
 80057aa:	f000 bd54 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b4:	d108      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b6:	f107 0318 	add.w	r3, r7, #24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff f962 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
 80057c4:	f000 bd47 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80057ce:	f7fe f957 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 80057d2:	6378      	str	r0, [r7, #52]	; 0x34
 80057d4:	f000 bd3f 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80057de:	d118      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80057e0:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80057ec:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	0f1b      	lsrs	r3, r3, #28
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	e006      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80057fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	0f1b      	lsrs	r3, r3, #28
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	4a16      	ldr	r2, [pc, #88]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	f000 bd22 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005812:	4b11      	ldr	r3, [pc, #68]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800581e:	d107      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005826:	d103      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
 800582c:	f000 bd13 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005830:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583c:	d107      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005844:	d103      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
 800584a:	f000 bd04 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
 8005852:	f000 bd00 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005856:	bf00      	nop
 8005858:	46020c00 	.word	0x46020c00
 800585c:	00f42400 	.word	0x00f42400
 8005860:	08008c74 	.word	0x08008c74
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005868:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800586c:	430b      	orrs	r3, r1
 800586e:	d14e      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005870:	4ba8      	ldr	r3, [pc, #672]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	2b04      	cmp	r3, #4
 8005880:	d841      	bhi.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058c1 	.word	0x080058c1
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058af 	.word	0x080058af
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058d5 	.word	0x080058d5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800589c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe ff89 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058aa:	f000 bcd4 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ae:	f107 030c 	add.w	r3, r7, #12
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fa4c 	bl	8004d50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058bc:	f000 bccb 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80058c0:	f7fe f8de 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 80058c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80058c6:	f000 bcc6 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80058ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058d0:	f000 bcc1 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058d4:	4b8f      	ldr	r3, [pc, #572]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80058e0:	4b8c      	ldr	r3, [pc, #560]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	0e1b      	lsrs	r3, r3, #24
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	e006      	b.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80058ec:	4b89      	ldr	r3, [pc, #548]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	0e1b      	lsrs	r3, r3, #24
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	4a87      	ldr	r2, [pc, #540]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80058fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005902:	f000 bca8 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800590a:	f000 bca4 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800590e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005912:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005916:	430b      	orrs	r3, r1
 8005918:	d15d      	bne.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800591a:	4b7e      	ldr	r3, [pc, #504]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800591c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005920:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005924:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800592c:	d036      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005934:	d84b      	bhi.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800593c:	d029      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005944:	d843      	bhi.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800594c:	d013      	beq.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005954:	d83b      	bhi.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005962:	d134      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe ff25 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005972:	f000 bc70 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005976:	f107 030c 	add.w	r3, r7, #12
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff f9e8 	bl	8004d50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005984:	f000 bc67 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005988:	f7fe f87a 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 800598c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800598e:	f000 bc62 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005992:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005998:	f000 bc5d 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800599c:	4b5d      	ldr	r3, [pc, #372]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80059a8:	4b5a      	ldr	r3, [pc, #360]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	0e1b      	lsrs	r3, r3, #24
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	e006      	b.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80059b4:	4b57      	ldr	r3, [pc, #348]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80059b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	0e1b      	lsrs	r3, r3, #24
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	4a55      	ldr	r2, [pc, #340]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80059c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059ca:	f000 bc44 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059d2:	f000 bc40 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80059d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059da:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80059de:	430b      	orrs	r3, r1
 80059e0:	d14a      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80059e2:	4b4c      	ldr	r3, [pc, #304]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80059e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe f85e 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 80059f8:	6378      	str	r0, [r7, #52]	; 0x34
 80059fa:	f000 bc2c 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a04:	d104      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a06:	f7fd ff33 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005a0a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a0c:	f000 bc23 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005a10:	4b40      	ldr	r3, [pc, #256]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a24:	d103      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8005a26:	4b3d      	ldr	r3, [pc, #244]	; (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2a:	f000 bc14 	b.w	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005a2e:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d11b      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a40:	d117      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a42:	4b34      	ldr	r3, [pc, #208]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	0e1b      	lsrs	r3, r3, #24
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005a5a:	4b2e      	ldr	r3, [pc, #184]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	0e1b      	lsrs	r3, r3, #24
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	4a2b      	ldr	r2, [pc, #172]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a70:	e3f1      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	e3ee      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005a80:	430b      	orrs	r3, r1
 8005a82:	d14d      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005a84:	4b23      	ldr	r3, [pc, #140]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a8e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a96:	f7fe f80d 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005a9a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a9c:	e3db      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa4:	d103      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005aa6:	f7fd fee3 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005aaa:	6378      	str	r0, [r7, #52]	; 0x34
 8005aac:	e3d3      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005aae:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aba:	d106      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac2:	d102      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac8:	e3c5      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005aca:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d11b      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005adc:	d117      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0e1b      	lsrs	r3, r3, #24
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005af6:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	0e1b      	lsrs	r3, r3, #24
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0c:	e3a3      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
 8005b12:	e3a0      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005b14:	46020c00 	.word	0x46020c00
 8005b18:	08008c74 	.word	0x08008c74
 8005b1c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b24:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	d148      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b2c:	4b9d      	ldr	r3, [pc, #628]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b3c:	d024      	beq.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	2bc0      	cmp	r3, #192	; 0xc0
 8005b42:	d839      	bhi.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d00d      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b80      	cmp	r3, #128	; 0x80
 8005b4e:	d833      	bhi.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d011      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005b5c:	e02c      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005b5e:	f7fd ffd1 	bl	8003b04 <HAL_RCC_GetPCLK3Freq>
 8005b62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b64:	e377      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b66:	4b8f      	ldr	r3, [pc, #572]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b72:	d102      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8005b74:	4b8c      	ldr	r3, [pc, #560]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b78:	e36d      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b7e:	e36a      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005b80:	f7fd fe76 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005b84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b86:	e366      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8005b88:	4b86      	ldr	r3, [pc, #536]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8005b94:	4b83      	ldr	r3, [pc, #524]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	0f1b      	lsrs	r3, r3, #28
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	e006      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8005ba0:	4b80      	ldr	r3, [pc, #512]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	0f1b      	lsrs	r3, r3, #28
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	4a7f      	ldr	r2, [pc, #508]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bb6:	e34e      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bbc:	e34b      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	d147      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005bca:	4b76      	ldr	r3, [pc, #472]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fd ff6a 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005be0:	6378      	str	r0, [r7, #52]	; 0x34
 8005be2:	e338      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bea:	d103      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005bec:	f7fd fe40 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005bf0:	6378      	str	r0, [r7, #52]	; 0x34
 8005bf2:	e330      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005bf4:	4b6b      	ldr	r3, [pc, #428]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c00:	d106      	bne.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c08:	d102      	bne.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8005c0a:	4b67      	ldr	r3, [pc, #412]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0e:	e322      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005c10:	4b64      	ldr	r3, [pc, #400]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d11b      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c22:	d117      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c24:	4b5f      	ldr	r3, [pc, #380]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8005c30:	4b5c      	ldr	r3, [pc, #368]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	0e1b      	lsrs	r3, r3, #24
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	e006      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8005c3c:	4b59      	ldr	r3, [pc, #356]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	0e1b      	lsrs	r3, r3, #24
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	4a58      	ldr	r2, [pc, #352]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
 8005c52:	e300      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
 8005c58:	e2fd      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005c62:	430b      	orrs	r3, r1
 8005c64:	d15b      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005c66:	4b4f      	ldr	r3, [pc, #316]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c70:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d117      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c78:	4b4a      	ldr	r3, [pc, #296]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8005c84:	4b47      	ldr	r3, [pc, #284]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	0e1b      	lsrs	r3, r3, #24
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	e006      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8005c90:	4b44      	ldr	r3, [pc, #272]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005c92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	0e1b      	lsrs	r3, r3, #24
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	4a43      	ldr	r2, [pc, #268]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca6:	e2d6      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005ca8:	4b3e      	ldr	r3, [pc, #248]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb6:	d112      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbe:	d10e      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005cc0:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cce:	d102      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8005cd0:	23fa      	movs	r3, #250	; 0xfa
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005cd4:	e2bf      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005cd6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005cdc:	e2bb      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005cde:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cea:	d106      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf2:	d102      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8005cf4:	4b2c      	ldr	r3, [pc, #176]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf8:	e2ad      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d107      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0e:	d103      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8005d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
 8005d16:	e29e      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1c:	e29b      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d22:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005d26:	430b      	orrs	r3, r1
 8005d28:	d162      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005d2a:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d34:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d117      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0e1b      	lsrs	r3, r3, #24
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	e006      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d5a:	041b      	lsls	r3, r3, #16
 8005d5c:	0e1b      	lsrs	r3, r3, #24
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	4a12      	ldr	r2, [pc, #72]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6a:	e274      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d7a:	d119      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d82:	d115      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d92:	d102      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8005d94:	23fa      	movs	r3, #250	; 0xfa
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d98:	e25d      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005d9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005da0:	e259      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005da2:	bf00      	nop
 8005da4:	46020c00 	.word	0x46020c00
 8005da8:	00f42400 	.word	0x00f42400
 8005dac:	08008c74 	.word	0x08008c74
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005db0:	4b9d      	ldr	r3, [pc, #628]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbc:	d106      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc4:	d102      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8005dc6:	4b99      	ldr	r3, [pc, #612]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dca:	e244      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005dcc:	4b96      	ldr	r3, [pc, #600]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d107      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de0:	d103      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8005de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
 8005de8:	e235      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	637b      	str	r3, [r7, #52]	; 0x34
 8005dee:	e232      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	d147      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005dfc:	4b8a      	ldr	r3, [pc, #552]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e02:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f7fd fe51 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005e12:	6378      	str	r0, [r7, #52]	; 0x34
 8005e14:	e21f      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005e16:	4b84      	ldr	r3, [pc, #528]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e24:	d112      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e2c:	d10e      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e2e:	4b7e      	ldr	r3, [pc, #504]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3c:	d102      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8005e3e:	23fa      	movs	r3, #250	; 0xfa
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e42:	e208      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005e44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e4a:	e204      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005e4c:	4b76      	ldr	r3, [pc, #472]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e58:	d106      	bne.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e60:	d102      	bne.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8005e62:	4b72      	ldr	r3, [pc, #456]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
 8005e66:	e1f6      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005e68:	4b6f      	ldr	r3, [pc, #444]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d107      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e7c:	d103      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
 8005e84:	e1e7      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8a:	e1e4      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e90:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005e94:	430b      	orrs	r3, r1
 8005e96:	d12d      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005e98:	4b63      	ldr	r3, [pc, #396]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e9e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005ea4:	4b60      	ldr	r3, [pc, #384]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb0:	d105      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8005eb8:	4b5c      	ldr	r3, [pc, #368]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005eba:	637b      	str	r3, [r7, #52]	; 0x34
 8005ebc:	e1cb      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe fc74 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed4:	e1bf      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005edc:	d107      	bne.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ede:	f107 0318 	add.w	r3, r7, #24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe fdce 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
 8005eec:	e1b3      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef2:	e1b0      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005efc:	430b      	orrs	r3, r1
 8005efe:	d14d      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005f00:	4b49      	ldr	r3, [pc, #292]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f12:	d028      	beq.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f1a:	d83c      	bhi.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f22:	d013      	beq.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2a:	d834      	bhi.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f38:	d004      	beq.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005f3a:	e02c      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7fd fdce 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8005f40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f42:	e188      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005f44:	f7fd fc94 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005f48:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f4a:	e184      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f4c:	4b36      	ldr	r3, [pc, #216]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f58:	d102      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8005f5a:	4b34      	ldr	r3, [pc, #208]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f5e:	e17a      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f64:	e177      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f66:	4b30      	ldr	r3, [pc, #192]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005f72:	4b2d      	ldr	r3, [pc, #180]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8005f7e:	4b2a      	ldr	r3, [pc, #168]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	0e1b      	lsrs	r3, r3, #24
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	4a28      	ldr	r2, [pc, #160]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8005f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f94:	e15f      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f9a:	e15c      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	d154      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fb2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fba:	d028      	beq.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fc2:	d843      	bhi.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fca:	d013      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fd2:	d83b      	bhi.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8005fe2:	e033      	b.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fd fd66 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fea:	e134      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005fec:	f7fd fc40 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005ff0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ff2:	e130      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006000:	d102      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006006:	e126      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800600c:	e123      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800600e:	4b06      	ldr	r3, [pc, #24]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0e1b      	lsrs	r3, r3, #24
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	e00d      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006026:	bf00      	nop
 8006028:	46020c00 	.word	0x46020c00
 800602c:	00f42400 	.word	0x00f42400
 8006030:	08008c74 	.word	0x08008c74
 8006034:	4b8a      	ldr	r3, [pc, #552]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	0e1b      	lsrs	r3, r3, #24
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	4a88      	ldr	r2, [pc, #544]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800604a:	e104      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006050:	e101      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006056:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800605a:	430b      	orrs	r3, r1
 800605c:	d16e      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800605e:	4b80      	ldr	r3, [pc, #512]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006064:	f003 0318 	and.w	r3, r3, #24
 8006068:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	2b18      	cmp	r3, #24
 800606e:	d862      	bhi.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060dd 	.word	0x080060dd
 800607c:	08006137 	.word	0x08006137
 8006080:	08006137 	.word	0x08006137
 8006084:	08006137 	.word	0x08006137
 8006088:	08006137 	.word	0x08006137
 800608c:	08006137 	.word	0x08006137
 8006090:	08006137 	.word	0x08006137
 8006094:	08006137 	.word	0x08006137
 8006098:	080060e5 	.word	0x080060e5
 800609c:	08006137 	.word	0x08006137
 80060a0:	08006137 	.word	0x08006137
 80060a4:	08006137 	.word	0x08006137
 80060a8:	08006137 	.word	0x08006137
 80060ac:	08006137 	.word	0x08006137
 80060b0:	08006137 	.word	0x08006137
 80060b4:	08006137 	.word	0x08006137
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	08006137 	.word	0x08006137
 80060c0:	08006137 	.word	0x08006137
 80060c4:	08006137 	.word	0x08006137
 80060c8:	08006137 	.word	0x08006137
 80060cc:	08006137 	.word	0x08006137
 80060d0:	08006137 	.word	0x08006137
 80060d4:	08006137 	.word	0x08006137
 80060d8:	08006107 	.word	0x08006107
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80060dc:	f7fd fd12 	bl	8003b04 <HAL_RCC_GetPCLK3Freq>
 80060e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80060e2:	e0b8      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80060e4:	f7fd fbc4 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80060e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80060ea:	e0b4      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060ec:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f8:	d102      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80060fa:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060fe:	e0aa      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006104:	e0a7      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006106:	4b56      	ldr	r3, [pc, #344]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8006112:	4b53      	ldr	r3, [pc, #332]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	0e1b      	lsrs	r3, r3, #24
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	e006      	b.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800611e:	4b50      	ldr	r3, [pc, #320]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	0e1b      	lsrs	r3, r3, #24
 8006128:	f003 030f 	and.w	r3, r3, #15
 800612c:	4a4d      	ldr	r2, [pc, #308]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800612e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006134:	e08f      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800613a:	e08c      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800613c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006140:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006144:	430b      	orrs	r3, r1
 8006146:	d14c      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006148:	4b45      	ldr	r3, [pc, #276]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800614a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800614e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006152:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800615a:	d013      	beq.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006162:	d83b      	bhi.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800616a:	d013      	beq.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006172:	d833      	bhi.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	2b00      	cmp	r3, #0
 8006178:	d014      	beq.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006180:	d014      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006182:	e02b      	b.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006184:	f107 0318 	add.w	r3, r7, #24
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe fc7b 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006192:	e060      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fb0d 	bl	80047b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a2:	e058      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80061a4:	f7fd fb64 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80061a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80061aa:	e054      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061ac:	4b2c      	ldr	r3, [pc, #176]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80061b8:	4b29      	ldr	r3, [pc, #164]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	0e1b      	lsrs	r3, r3, #24
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	e006      	b.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80061c4:	4b26      	ldr	r3, [pc, #152]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80061c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	0e1b      	lsrs	r3, r3, #24
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	4a24      	ldr	r2, [pc, #144]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80061d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061da:	e03c      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061e0:	e039      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80061e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80061ea:	430b      	orrs	r3, r1
 80061ec:	d131      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80061ee:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80061f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80061fa:	4b19      	ldr	r3, [pc, #100]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80061fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b02      	cmp	r3, #2
 8006206:	d106      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
 8006214:	e01f      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006216:	4b12      	ldr	r3, [pc, #72]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800621c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006224:	d112      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622c:	d10e      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623c:	d102      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800623e:	23fa      	movs	r3, #250	; 0xfa
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006242:	e008      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006244:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
 8006250:	e001      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006258:	4618      	mov	r0, r3
 800625a:	3738      	adds	r7, #56	; 0x38
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	46020c00 	.word	0x46020c00
 8006264:	08008c74 	.word	0x08008c74
 8006268:	00f42400 	.word	0x00f42400

0800626c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006274:	4b47      	ldr	r3, [pc, #284]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a46      	ldr	r2, [pc, #280]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 800627a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800627e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006280:	f7fb f840 	bl	8001304 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006286:	e008      	b.n	800629a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006288:	f7fb f83c 	bl	8001304 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e077      	b.n	800638a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800629a:	4b3e      	ldr	r3, [pc, #248]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80062a6:	4b3b      	ldr	r3, [pc, #236]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062ae:	f023 0303 	bic.w	r3, r3, #3
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6811      	ldr	r1, [r2, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6852      	ldr	r2, [r2, #4]
 80062ba:	3a01      	subs	r2, #1
 80062bc:	0212      	lsls	r2, r2, #8
 80062be:	430a      	orrs	r2, r1
 80062c0:	4934      	ldr	r1, [pc, #208]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80062c6:	4b33      	ldr	r3, [pc, #204]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 80062c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ca:	4b33      	ldr	r3, [pc, #204]	; (8006398 <RCCEx_PLL2_Config+0x12c>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6892      	ldr	r2, [r2, #8]
 80062d2:	3a01      	subs	r2, #1
 80062d4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68d2      	ldr	r2, [r2, #12]
 80062dc:	3a01      	subs	r2, #1
 80062de:	0252      	lsls	r2, r2, #9
 80062e0:	b292      	uxth	r2, r2
 80062e2:	4311      	orrs	r1, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6912      	ldr	r2, [r2, #16]
 80062e8:	3a01      	subs	r2, #1
 80062ea:	0412      	lsls	r2, r2, #16
 80062ec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80062f0:	4311      	orrs	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6952      	ldr	r2, [r2, #20]
 80062f6:	3a01      	subs	r2, #1
 80062f8:	0612      	lsls	r2, r2, #24
 80062fa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80062fe:	430a      	orrs	r2, r1
 8006300:	4924      	ldr	r1, [pc, #144]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006302:	4313      	orrs	r3, r2
 8006304:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006306:	4b23      	ldr	r3, [pc, #140]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	f023 020c 	bic.w	r2, r3, #12
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	4920      	ldr	r1, [pc, #128]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006314:	4313      	orrs	r3, r2
 8006316:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 800631a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	491c      	ldr	r1, [pc, #112]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006322:	4313      	orrs	r3, r2
 8006324:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006326:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	4a1a      	ldr	r2, [pc, #104]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 800632c:	f023 0310 	bic.w	r3, r3, #16
 8006330:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006332:	4b18      	ldr	r3, [pc, #96]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800633a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	69d2      	ldr	r2, [r2, #28]
 8006342:	00d2      	lsls	r2, r2, #3
 8006344:	4913      	ldr	r1, [pc, #76]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006346:	4313      	orrs	r3, r2
 8006348:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800634a:	4b12      	ldr	r3, [pc, #72]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	4a11      	ldr	r2, [pc, #68]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006350:	f043 0310 	orr.w	r3, r3, #16
 8006354:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 800635c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006360:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006362:	f7fa ffcf 	bl	8001304 <HAL_GetTick>
 8006366:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006368:	e008      	b.n	800637c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800636a:	f7fa ffcb 	bl	8001304 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e006      	b.n	800638a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800637c:	4b05      	ldr	r3, [pc, #20]	; (8006394 <RCCEx_PLL2_Config+0x128>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f0      	beq.n	800636a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006388:	2300      	movs	r3, #0

}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	46020c00 	.word	0x46020c00
 8006398:	80800000 	.word	0x80800000

0800639c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80063a4:	4b47      	ldr	r3, [pc, #284]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a46      	ldr	r2, [pc, #280]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 80063aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063b0:	f7fa ffa8 	bl	8001304 <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063b6:	e008      	b.n	80063ca <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063b8:	f7fa ffa4 	bl	8001304 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e077      	b.n	80064ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063ca:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80063d6:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6852      	ldr	r2, [r2, #4]
 80063ea:	3a01      	subs	r2, #1
 80063ec:	0212      	lsls	r2, r2, #8
 80063ee:	430a      	orrs	r2, r1
 80063f0:	4934      	ldr	r1, [pc, #208]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	630b      	str	r3, [r1, #48]	; 0x30
 80063f6:	4b33      	ldr	r3, [pc, #204]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 80063f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063fa:	4b33      	ldr	r3, [pc, #204]	; (80064c8 <RCCEx_PLL3_Config+0x12c>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6892      	ldr	r2, [r2, #8]
 8006402:	3a01      	subs	r2, #1
 8006404:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	68d2      	ldr	r2, [r2, #12]
 800640c:	3a01      	subs	r2, #1
 800640e:	0252      	lsls	r2, r2, #9
 8006410:	b292      	uxth	r2, r2
 8006412:	4311      	orrs	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6912      	ldr	r2, [r2, #16]
 8006418:	3a01      	subs	r2, #1
 800641a:	0412      	lsls	r2, r2, #16
 800641c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006420:	4311      	orrs	r1, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6952      	ldr	r2, [r2, #20]
 8006426:	3a01      	subs	r2, #1
 8006428:	0612      	lsls	r2, r2, #24
 800642a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800642e:	430a      	orrs	r2, r1
 8006430:	4924      	ldr	r1, [pc, #144]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006432:	4313      	orrs	r3, r2
 8006434:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006436:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	f023 020c 	bic.w	r2, r3, #12
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	4920      	ldr	r1, [pc, #128]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006444:	4313      	orrs	r3, r2
 8006446:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 800644a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	491c      	ldr	r1, [pc, #112]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006452:	4313      	orrs	r3, r2
 8006454:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006456:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 800645c:	f023 0310 	bic.w	r3, r3, #16
 8006460:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006462:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800646a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	69d2      	ldr	r2, [r2, #28]
 8006472:	00d2      	lsls	r2, r2, #3
 8006474:	4913      	ldr	r1, [pc, #76]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006476:	4313      	orrs	r3, r2
 8006478:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006480:	f043 0310 	orr.w	r3, r3, #16
 8006484:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 800648c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006490:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006492:	f7fa ff37 	bl	8001304 <HAL_GetTick>
 8006496:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006498:	e008      	b.n	80064ac <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800649a:	f7fa ff33 	bl	8001304 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e006      	b.n	80064ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <RCCEx_PLL3_Config+0x128>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f0      	beq.n	800649a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	46020c00 	.word	0x46020c00
 80064c8:	80800000 	.word	0x80800000

080064cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e042      	b.n	8006564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fa fb55 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	; 0x24
 80064fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8d2 	bl	80066b8 <UART_SetConfig>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e022      	b.n	8006564 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa68 	bl	80069fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800653a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800654a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 faef 	bl	8006b40 <UART_CheckIdleState>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006582:	2b20      	cmp	r3, #32
 8006584:	f040 8092 	bne.w	80066ac <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Transmit+0x28>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e08a      	b.n	80066ae <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_UART_Transmit+0x3a>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e083      	b.n	80066ae <HAL_UART_Transmit+0x142>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b8:	2b80      	cmp	r3, #128	; 0x80
 80065ba:	d107      	bne.n	80065cc <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ca:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2221      	movs	r2, #33	; 0x21
 80065d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065dc:	f7fa fe92 	bl	8001304 <HAL_GetTick>
 80065e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	88fa      	ldrh	r2, [r7, #6]
 80065e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	88fa      	ldrh	r2, [r7, #6]
 80065ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fa:	d108      	bne.n	800660e <HAL_UART_Transmit+0xa2>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e003      	b.n	8006616 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800661e:	e02c      	b.n	800667a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2200      	movs	r2, #0
 8006628:	2180      	movs	r1, #128	; 0x80
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 fad3 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e039      	b.n	80066ae <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800664e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	3302      	adds	r3, #2
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e007      	b.n	8006668 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3301      	adds	r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cc      	bne.n	8006620 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	2140      	movs	r1, #64	; 0x40
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 faa0 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e006      	b.n	80066ae <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	e000      	b.n	80066ae <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 80066ac:	2302      	movs	r3, #2
  }
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066bc:	b094      	sub	sp, #80	; 0x50
 80066be:	af00      	add	r7, sp, #0
 80066c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b7e      	ldr	r3, [pc, #504]	; (80068c8 <UART_SetConfig+0x210>)
 80066ce:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	431a      	orrs	r2, r3
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	431a      	orrs	r2, r3
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4977      	ldr	r1, [pc, #476]	; (80068cc <UART_SetConfig+0x214>)
 80066f0:	4019      	ands	r1, r3
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	68d9      	ldr	r1, [r3, #12]
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	ea40 0301 	orr.w	r3, r0, r1
 8006712:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b6a      	ldr	r3, [pc, #424]	; (80068c8 <UART_SetConfig+0x210>)
 8006720:	429a      	cmp	r2, r3
 8006722:	d009      	beq.n	8006738 <UART_SetConfig+0x80>
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b69      	ldr	r3, [pc, #420]	; (80068d0 <UART_SetConfig+0x218>)
 800672a:	429a      	cmp	r2, r3
 800672c:	d004      	beq.n	8006738 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006734:	4313      	orrs	r3, r2
 8006736:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006742:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	430b      	orrs	r3, r1
 800674e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	f023 000f 	bic.w	r0, r3, #15
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	ea40 0301 	orr.w	r3, r0, r1
 8006766:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	4b59      	ldr	r3, [pc, #356]	; (80068d4 <UART_SetConfig+0x21c>)
 800676e:	429a      	cmp	r2, r3
 8006770:	d102      	bne.n	8006778 <UART_SetConfig+0xc0>
 8006772:	2301      	movs	r3, #1
 8006774:	64bb      	str	r3, [r7, #72]	; 0x48
 8006776:	e029      	b.n	80067cc <UART_SetConfig+0x114>
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b56      	ldr	r3, [pc, #344]	; (80068d8 <UART_SetConfig+0x220>)
 800677e:	429a      	cmp	r2, r3
 8006780:	d102      	bne.n	8006788 <UART_SetConfig+0xd0>
 8006782:	2302      	movs	r3, #2
 8006784:	64bb      	str	r3, [r7, #72]	; 0x48
 8006786:	e021      	b.n	80067cc <UART_SetConfig+0x114>
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b53      	ldr	r3, [pc, #332]	; (80068dc <UART_SetConfig+0x224>)
 800678e:	429a      	cmp	r2, r3
 8006790:	d102      	bne.n	8006798 <UART_SetConfig+0xe0>
 8006792:	2304      	movs	r3, #4
 8006794:	64bb      	str	r3, [r7, #72]	; 0x48
 8006796:	e019      	b.n	80067cc <UART_SetConfig+0x114>
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b50      	ldr	r3, [pc, #320]	; (80068e0 <UART_SetConfig+0x228>)
 800679e:	429a      	cmp	r2, r3
 80067a0:	d102      	bne.n	80067a8 <UART_SetConfig+0xf0>
 80067a2:	2308      	movs	r3, #8
 80067a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a6:	e011      	b.n	80067cc <UART_SetConfig+0x114>
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b4d      	ldr	r3, [pc, #308]	; (80068e4 <UART_SetConfig+0x22c>)
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d102      	bne.n	80067b8 <UART_SetConfig+0x100>
 80067b2:	2310      	movs	r3, #16
 80067b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b6:	e009      	b.n	80067cc <UART_SetConfig+0x114>
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	4b42      	ldr	r3, [pc, #264]	; (80068c8 <UART_SetConfig+0x210>)
 80067be:	429a      	cmp	r2, r3
 80067c0:	d102      	bne.n	80067c8 <UART_SetConfig+0x110>
 80067c2:	2320      	movs	r3, #32
 80067c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c6:	e001      	b.n	80067cc <UART_SetConfig+0x114>
 80067c8:	2300      	movs	r3, #0
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4b3d      	ldr	r3, [pc, #244]	; (80068c8 <UART_SetConfig+0x210>)
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d005      	beq.n	80067e2 <UART_SetConfig+0x12a>
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b3d      	ldr	r3, [pc, #244]	; (80068d0 <UART_SetConfig+0x218>)
 80067dc:	429a      	cmp	r2, r3
 80067de:	f040 8085 	bne.w	80068ec <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80067e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e4:	2200      	movs	r2, #0
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	627a      	str	r2, [r7, #36]	; 0x24
 80067ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80067ee:	f7fe fc15 	bl	800501c <HAL_RCCEx_GetPeriphCLKFreq>
 80067f2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80067f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 80e8 	beq.w	80069cc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	4a39      	ldr	r2, [pc, #228]	; (80068e8 <UART_SetConfig+0x230>)
 8006802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006806:	461a      	mov	r2, r3
 8006808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680a:	fbb3 f3f2 	udiv	r3, r3, r2
 800680e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	4413      	add	r3, r2
 800681a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800681c:	429a      	cmp	r2, r3
 800681e:	d305      	bcc.n	800682c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006828:	429a      	cmp	r2, r3
 800682a:	d903      	bls.n	8006834 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006832:	e048      	b.n	80068c6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006836:	2200      	movs	r2, #0
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	61fa      	str	r2, [r7, #28]
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	4a29      	ldr	r2, [pc, #164]	; (80068e8 <UART_SetConfig+0x230>)
 8006842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006846:	b29b      	uxth	r3, r3
 8006848:	2200      	movs	r2, #0
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	617a      	str	r2, [r7, #20]
 800684e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006852:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006856:	f7f9 fd0d 	bl	8000274 <__aeabi_uldivmod>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	020b      	lsls	r3, r1, #8
 800686c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006870:	0202      	lsls	r2, r0, #8
 8006872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006874:	6849      	ldr	r1, [r1, #4]
 8006876:	0849      	lsrs	r1, r1, #1
 8006878:	2000      	movs	r0, #0
 800687a:	460c      	mov	r4, r1
 800687c:	4605      	mov	r5, r0
 800687e:	eb12 0804 	adds.w	r8, r2, r4
 8006882:	eb43 0905 	adc.w	r9, r3, r5
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	60fa      	str	r2, [r7, #12]
 8006890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006894:	4640      	mov	r0, r8
 8006896:	4649      	mov	r1, r9
 8006898:	f7f9 fcec 	bl	8000274 <__aeabi_uldivmod>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4613      	mov	r3, r2
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068aa:	d308      	bcc.n	80068be <UART_SetConfig+0x206>
 80068ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b2:	d204      	bcs.n	80068be <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068ba:	60da      	str	r2, [r3, #12]
 80068bc:	e003      	b.n	80068c6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80068c4:	e082      	b.n	80069cc <UART_SetConfig+0x314>
 80068c6:	e081      	b.n	80069cc <UART_SetConfig+0x314>
 80068c8:	46002400 	.word	0x46002400
 80068cc:	cfff69f3 	.word	0xcfff69f3
 80068d0:	56002400 	.word	0x56002400
 80068d4:	40013800 	.word	0x40013800
 80068d8:	40004400 	.word	0x40004400
 80068dc:	40004800 	.word	0x40004800
 80068e0:	40004c00 	.word	0x40004c00
 80068e4:	40005000 	.word	0x40005000
 80068e8:	08008d34 	.word	0x08008d34
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f4:	d13c      	bne.n	8006970 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80068f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f8:	2200      	movs	r2, #0
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006902:	f7fe fb8b 	bl	800501c <HAL_RCCEx_GetPeriphCLKFreq>
 8006906:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d05e      	beq.n	80069cc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	4a39      	ldr	r2, [pc, #228]	; (80069f8 <UART_SetConfig+0x340>)
 8006914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006918:	461a      	mov	r2, r3
 800691a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006920:	005a      	lsls	r2, r3, #1
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	085b      	lsrs	r3, r3, #1
 8006928:	441a      	add	r2, r3
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	2b0f      	cmp	r3, #15
 8006938:	d916      	bls.n	8006968 <UART_SetConfig+0x2b0>
 800693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d212      	bcs.n	8006968 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006944:	b29b      	uxth	r3, r3
 8006946:	f023 030f 	bic.w	r3, r3, #15
 800694a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800694c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	b29b      	uxth	r3, r3
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	b29a      	uxth	r2, r3
 8006958:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800695a:	4313      	orrs	r3, r2
 800695c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	e031      	b.n	80069cc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800696e:	e02d      	b.n	80069cc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006972:	2200      	movs	r2, #0
 8006974:	469a      	mov	sl, r3
 8006976:	4693      	mov	fp, r2
 8006978:	4650      	mov	r0, sl
 800697a:	4659      	mov	r1, fp
 800697c:	f7fe fb4e 	bl	800501c <HAL_RCCEx_GetPeriphCLKFreq>
 8006980:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d021      	beq.n	80069cc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <UART_SetConfig+0x340>)
 800698e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006992:	461a      	mov	r2, r3
 8006994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006996:	fbb3 f2f2 	udiv	r2, r3, r2
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	441a      	add	r2, r3
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	2b0f      	cmp	r3, #15
 80069b0:	d909      	bls.n	80069c6 <UART_SetConfig+0x30e>
 80069b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d205      	bcs.n	80069c6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60da      	str	r2, [r3, #12]
 80069c4:	e002      	b.n	80069cc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	2201      	movs	r2, #1
 80069d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	2201      	movs	r2, #1
 80069d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	2200      	movs	r2, #0
 80069e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	2200      	movs	r2, #0
 80069e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3750      	adds	r7, #80	; 0x50
 80069f0:	46bd      	mov	sp, r7
 80069f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069f6:	bf00      	nop
 80069f8:	08008d34 	.word	0x08008d34

080069fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afa:	d10a      	bne.n	8006b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b50:	f7fa fbd8 	bl	8001304 <HAL_GetTick>
 8006b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d10e      	bne.n	8006b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f82f 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e025      	b.n	8006bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d10e      	bne.n	8006bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f819 	bl	8006bd6 <UART_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e00f      	b.n	8006bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b09c      	sub	sp, #112	; 0x70
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	4613      	mov	r3, r2
 8006be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be6:	e0a9      	b.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	f000 80a5 	beq.w	8006d3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf2:	f7fa fb87 	bl	8001304 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d302      	bcc.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d140      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e6      	bne.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	663b      	str	r3, [r7, #96]	; 0x60
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e5      	bne.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e069      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d051      	beq.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca6:	d149      	bne.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e6      	bne.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3308      	adds	r3, #8
 8006d02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d04:	623a      	str	r2, [r7, #32]
 8006d06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	69f9      	ldr	r1, [r7, #28]
 8006d0a:	6a3a      	ldr	r2, [r7, #32]
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e5      	bne.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e010      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69da      	ldr	r2, [r3, #28]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4013      	ands	r3, r2
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	bf0c      	ite	eq
 8006d4c:	2301      	moveq	r3, #1
 8006d4e:	2300      	movne	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	f43f af46 	beq.w	8006be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3770      	adds	r7, #112	; 0x70
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_UARTEx_DisableFifoMode+0x16>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e027      	b.n	8006dcc <HAL_UARTEx_DisableFifoMode+0x66>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0201 	bic.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e02d      	b.n	8006e4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2224      	movs	r2, #36	; 0x24
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f84f 	bl	8006ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e02d      	b.n	8006ec8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	; 0x24
 8006e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f811 	bl	8006ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d108      	bne.n	8006ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ef0:	e031      	b.n	8006f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	0e5b      	lsrs	r3, r3, #25
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	0f5b      	lsrs	r3, r3, #29
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	7b3a      	ldrb	r2, [r7, #12]
 8006f1e:	4911      	ldr	r1, [pc, #68]	; (8006f64 <UARTEx_SetNbDataToProcess+0x94>)
 8006f20:	5c8a      	ldrb	r2, [r1, r2]
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f26:	7b3a      	ldrb	r2, [r7, #12]
 8006f28:	490f      	ldr	r1, [pc, #60]	; (8006f68 <UARTEx_SetNbDataToProcess+0x98>)
 8006f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	7b7a      	ldrb	r2, [r7, #13]
 8006f3c:	4909      	ldr	r1, [pc, #36]	; (8006f64 <UARTEx_SetNbDataToProcess+0x94>)
 8006f3e:	5c8a      	ldrb	r2, [r1, r2]
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f44:	7b7a      	ldrb	r2, [r7, #13]
 8006f46:	4908      	ldr	r1, [pc, #32]	; (8006f68 <UARTEx_SetNbDataToProcess+0x98>)
 8006f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	08008d4c 	.word	0x08008d4c
 8006f68:	08008d54 	.word	0x08008d54

08006f6c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d144      	bne.n	8007006 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8006f7c:	f107 0208 	add.w	r2, r7, #8
 8006f80:	2301      	movs	r3, #1
 8006f82:	2162      	movs	r1, #98	; 0x62
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f9e6 	bl	8007356 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	e06c      	b.n	8007070 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8006f96:	f107 020c 	add.w	r2, r7, #12
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	2160      	movs	r1, #96	; 0x60
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f9d9 	bl	8007356 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	e05f      	b.n	8007070 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8006fb0:	7a3b      	ldrb	r3, [r7, #8]
 8006fb2:	f043 0310 	orr.w	r3, r3, #16
 8006fb6:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8006fb8:	7a3b      	ldrb	r3, [r7, #8]
 8006fba:	f36f 0341 	bfc	r3, #1, #1
 8006fbe:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8006fc0:	7b3b      	ldrb	r3, [r7, #12]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f362 0301 	bfi	r3, r2, #0, #2
 8006fc8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8006fca:	7b3b      	ldrb	r3, [r7, #12]
 8006fcc:	f043 030c 	orr.w	r3, r3, #12
 8006fd0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8006fd2:	f107 0208 	add.w	r2, r7, #8
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	2162      	movs	r1, #98	; 0x62
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fafa 	bl	80075d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fea:	e041      	b.n	8007070 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8006fec:	f107 020c 	add.w	r2, r7, #12
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	2160      	movs	r1, #96	; 0x60
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 faed 	bl	80075d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d032      	beq.n	8007066 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8007000:	f04f 33ff 	mov.w	r3, #4294967295
 8007004:	e034      	b.n	8007070 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	331c      	adds	r3, #28
 800700a:	2101      	movs	r1, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fca6 	bl	800795e <lis2mdl_block_data_update_set>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8007018:	f04f 33ff 	mov.w	r3, #4294967295
 800701c:	e028      	b.n	8007070 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	331c      	adds	r3, #28
 8007022:	2102      	movs	r1, #2
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fc28 	bl	800787a <lis2mdl_operating_mode_set>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8007030:	f04f 33ff 	mov.w	r3, #4294967295
 8007034:	e01c      	b.n	8007070 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_10Hz) != LIS2MDL_OK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	331c      	adds	r3, #28
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fc42 	bl	80078c6 <lis2mdl_data_rate_set>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8007048:	f04f 33ff 	mov.w	r3, #4294967295
 800704c:	e010      	b.n	8007070 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	331c      	adds	r3, #28
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fd04 	bl	8007a62 <lis2mdl_self_test_set>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	e004      	b.n	8007070 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d10b      	bne.n	80070a2 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800708a:	2301      	movs	r3, #1
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	214f      	movs	r1, #79	; 0x4f
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f960 	bl	8007356 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00e      	beq.n	80070ba <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	e00c      	b.n	80070bc <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	331c      	adds	r3, #28
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fcc9 	bl	8007a40 <lis2mdl_device_id_get>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80070b4:	f04f 33ff 	mov.w	r3, #4294967295
 80070b8:	e000      	b.n	80070bc <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e032      	b.n	8007140 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d11d      	bne.n	800711e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80070e2:	f107 020c 	add.w	r2, r7, #12
 80070e6:	2301      	movs	r3, #1
 80070e8:	2160      	movs	r1, #96	; 0x60
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f933 	bl	8007356 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80070f6:	f04f 33ff 	mov.w	r3, #4294967295
 80070fa:	e021      	b.n	8007140 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80070fc:	7b3b      	ldrb	r3, [r7, #12]
 80070fe:	f36f 0301 	bfc	r3, #0, #2
 8007102:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8007104:	f107 020c 	add.w	r2, r7, #12
 8007108:	2301      	movs	r3, #1
 800710a:	2160      	movs	r1, #96	; 0x60
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa61 	bl	80075d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00e      	beq.n	8007136 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8007118:	f04f 33ff 	mov.w	r3, #4294967295
 800711c:	e010      	b.n	8007140 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	331c      	adds	r3, #28
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fba8 	bl	800787a <lis2mdl_operating_mode_set>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8007130:	f04f 33ff 	mov.w	r3, #4294967295
 8007134:	e004      	b.n	8007140 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8007158:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d137      	bne.n	80071ea <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800717a:	f107 0218 	add.w	r2, r7, #24
 800717e:	2306      	movs	r3, #6
 8007180:	2168      	movs	r1, #104	; 0x68
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f8e7 	bl	8007356 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800718e:	f04f 33ff 	mov.w	r3, #4294967295
 8007192:	e06f      	b.n	8007274 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8007194:	7e7b      	ldrb	r3, [r7, #25]
 8007196:	b21b      	sxth	r3, r3
 8007198:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800719a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	7e3b      	ldrb	r3, [r7, #24]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	4413      	add	r3, r2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	b21b      	sxth	r3, r3
 80071ae:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80071b0:	7efb      	ldrb	r3, [r7, #27]
 80071b2:	b21b      	sxth	r3, r3
 80071b4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80071b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	b29a      	uxth	r2, r3
 80071c0:	7ebb      	ldrb	r3, [r7, #26]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4413      	add	r3, r2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	b21b      	sxth	r3, r3
 80071ca:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80071cc:	7f7b      	ldrb	r3, [r7, #29]
 80071ce:	b21b      	sxth	r3, r3
 80071d0:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80071d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	b29a      	uxth	r2, r3
 80071dc:	7f3b      	ldrb	r3, [r7, #28]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	4413      	add	r3, r2
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	b21b      	sxth	r3, r3
 80071e6:	82bb      	strh	r3, [r7, #20]
 80071e8:	e00d      	b.n	8007206 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	331c      	adds	r3, #28
 80071ee:	f107 0210 	add.w	r2, r7, #16
 80071f2:	4611      	mov	r1, r2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fbd8 	bl	80079aa <lis2mdl_magnetic_raw_get>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295
 8007204:	e036      	b.n	8007274 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff ff9b 	bl	8007148 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007212:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800721e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800722a:	ee17 2a90 	vmov	r2, s15
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800723e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800724a:	ee17 2a90 	vmov	r2, s15
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007252:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800725e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800726a:	ee17 2a90 	vmov	r2, s15
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <LIS2MDL_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Read_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	460b      	mov	r3, r1
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	72fb      	strb	r3, [r7, #11]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b03      	cmp	r3, #3
 8007290:	d10b      	bne.n	80072aa <LIS2MDL_Read_Reg+0x2e>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, Reg, Data, 1) != LIS2MDL_OK)
 8007292:	7af9      	ldrb	r1, [r7, #11]
 8007294:	2301      	movs	r3, #1
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f85c 	bl	8007356 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d010      	beq.n	80072c6 <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	e00e      	b.n	80072c8 <LIS2MDL_Read_Reg+0x4c>
    }
  }
  else
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), Reg, Data, 1) != LIS2MDL_OK)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f103 001c 	add.w	r0, r3, #28
 80072b0:	7af9      	ldrb	r1, [r7, #11]
 80072b2:	2301      	movs	r3, #1
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	f000 fab0 	bl	800781a <lis2mdl_read_reg>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <LIS2MDL_Read_Reg+0x4a>
    {
      return LIS2MDL_ERROR;
 80072c0:	f04f 33ff 	mov.w	r3, #4294967295
 80072c4:	e000      	b.n	80072c8 <LIS2MDL_Read_Reg+0x4c>
    }
  }

  return LIS2MDL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
 80072dc:	4613      	mov	r3, r2
 80072de:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d10b      	bne.n	8007300 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80072e8:	1cba      	adds	r2, r7, #2
 80072ea:	78f9      	ldrb	r1, [r7, #3]
 80072ec:	2301      	movs	r3, #1
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f970 	bl	80075d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295
 80072fe:	e00e      	b.n	800731e <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f103 001c 	add.w	r0, r3, #28
 8007306:	1cba      	adds	r2, r7, #2
 8007308:	78f9      	ldrb	r1, [r7, #3]
 800730a:	2301      	movs	r3, #1
 800730c:	f000 fa9d 	bl	800784a <lis2mdl_write_reg>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	e000      	b.n	800731e <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <LIS2MDL_MAG_Set_Power_Mode>:
  * @param  pObj the device pObj
  * @param  PowerMode Value of the power mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Set_Power_Mode(LIS2MDL_Object_t *pObj, uint8_t PowerMode)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	70fb      	strb	r3, [r7, #3]
  if (lis2mdl_power_mode_set(&(pObj->Ctx), (lis2mdl_lp_t)PowerMode) != LIS2MDL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	331c      	adds	r3, #28
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fae9 	bl	8007912 <lis2mdl_power_mode_set>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <LIS2MDL_MAG_Set_Power_Mode+0x26>
  {
    return LIS2MDL_ERROR;
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
 800734a:	e000      	b.n	800734e <LIS2MDL_MAG_Set_Power_Mode+0x28>
  }

  return LIS2MDL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b08c      	sub	sp, #48	; 0x30
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	461a      	mov	r2, r3
 8007362:	460b      	mov	r3, r1
 8007364:	72fb      	strb	r3, [r7, #11]
 8007366:	4613      	mov	r3, r2
 8007368:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 800737c:	233d      	movs	r3, #61	; 0x3d
 800737e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8007380:	2315      	movs	r3, #21
 8007382:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8007386:	2316      	movs	r3, #22
 8007388:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800738c:	2317      	movs	r3, #23
 800738e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8007392:	2314      	movs	r3, #20
 8007394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8007398:	2344      	movs	r3, #68	; 0x44
 800739a:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 800739c:	2302      	movs	r3, #2
 800739e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80073a2:	2339      	movs	r3, #57	; 0x39
 80073a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80073ae:	2329      	movs	r3, #41	; 0x29
 80073b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80073b4:	231e      	movs	r3, #30
 80073b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 80073c0:	893b      	ldrh	r3, [r7, #8]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80073c6:	2310      	movs	r3, #16
 80073c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80073d2:	2340      	movs	r3, #64	; 0x40
 80073d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f103 001c 	add.w	r0, r3, #28
 80073de:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80073e2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80073e6:	2301      	movs	r3, #1
 80073e8:	f000 fa2f 	bl	800784a <lis2mdl_write_reg>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	e0e9      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f103 001c 	add.w	r0, r3, #28
 80073fe:	f107 021f 	add.w	r2, r7, #31
 8007402:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8007406:	2301      	movs	r3, #1
 8007408:	f000 fa1f 	bl	800784a <lis2mdl_write_reg>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	e0d9      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f103 001c 	add.w	r0, r3, #28
 800741e:	f107 020b 	add.w	r2, r7, #11
 8007422:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8007426:	2301      	movs	r3, #1
 8007428:	f000 fa0f 	bl	800784a <lis2mdl_write_reg>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8007432:	f04f 33ff 	mov.w	r3, #4294967295
 8007436:	e0c9      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f103 001c 	add.w	r0, r3, #28
 800743e:	f107 021d 	add.w	r2, r7, #29
 8007442:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8007446:	2301      	movs	r3, #1
 8007448:	f000 f9ff 	bl	800784a <lis2mdl_write_reg>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8007452:	f04f 33ff 	mov.w	r3, #4294967295
 8007456:	e0b9      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f103 001c 	add.w	r0, r3, #28
 800745e:	f107 021e 	add.w	r2, r7, #30
 8007462:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8007466:	2301      	movs	r3, #1
 8007468:	f000 f9ef 	bl	800784a <lis2mdl_write_reg>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295
 8007476:	e0a9      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f103 001c 	add.w	r0, r3, #28
 800747e:	f107 0220 	add.w	r2, r7, #32
 8007482:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8007486:	2301      	movs	r3, #1
 8007488:	f000 f9df 	bl	800784a <lis2mdl_write_reg>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8007492:	f04f 33ff 	mov.w	r3, #4294967295
 8007496:	e099      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f103 001c 	add.w	r0, r3, #28
 800749e:	f107 021c 	add.w	r2, r7, #28
 80074a2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80074a6:	2301      	movs	r3, #1
 80074a8:	f000 f9b7 	bl	800781a <lis2mdl_read_reg>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295
 80074b6:	e089      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80074b8:	7f3b      	ldrb	r3, [r7, #28]
 80074ba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80074be:	429a      	cmp	r2, r3
 80074c0:	d102      	bne.n	80074c8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80074c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80074c6:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f103 001c 	add.w	r0, r3, #28
 80074ce:	f107 021c 	add.w	r2, r7, #28
 80074d2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80074d6:	2301      	movs	r3, #1
 80074d8:	f000 f9b7 	bl	800784a <lis2mdl_write_reg>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295
 80074e6:	e071      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f103 001c 	add.w	r0, r3, #28
 80074ee:	f107 0214 	add.w	r2, r7, #20
 80074f2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80074f6:	2306      	movs	r3, #6
 80074f8:	f000 f98f 	bl	800781a <lis2mdl_read_reg>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8007502:	f04f 33ff 	mov.w	r3, #4294967295
 8007506:	e061      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f103 001c 	add.w	r0, r3, #28
 800750e:	f107 021b 	add.w	r2, r7, #27
 8007512:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007516:	2301      	movs	r3, #1
 8007518:	f000 f97f 	bl	800781a <lis2mdl_read_reg>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8007522:	f04f 33ff 	mov.w	r3, #4294967295
 8007526:	e051      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8007528:	7efa      	ldrb	r2, [r7, #27]
 800752a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800752e:	4013      	ands	r3, r2
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007536:	429a      	cmp	r2, r3
 8007538:	d1e6      	bne.n	8007508 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f103 001c 	add.w	r0, r3, #28
 8007540:	f107 021b 	add.w	r2, r7, #27
 8007544:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8007548:	2301      	movs	r3, #1
 800754a:	f000 f966 	bl	800781a <lis2mdl_read_reg>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8007554:	f04f 33ff 	mov.w	r3, #4294967295
 8007558:	e038      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 800755a:	7efa      	ldrb	r2, [r7, #27]
 800755c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007560:	4013      	ands	r3, r2
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007568:	429a      	cmp	r2, r3
 800756a:	d1e6      	bne.n	800753a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f103 001c 	add.w	r0, r3, #28
 8007572:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8007576:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800757a:	2301      	movs	r3, #1
 800757c:	f000 f965 	bl	800784a <lis2mdl_write_reg>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
 800758a:	e01f      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f103 001c 	add.w	r0, r3, #28
 8007592:	893b      	ldrh	r3, [r7, #8]
 8007594:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	f000 f93e 	bl	800781a <lis2mdl_read_reg>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80075a4:	f04f 33ff 	mov.w	r3, #4294967295
 80075a8:	e010      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f103 001c 	add.w	r0, r3, #28
 80075b0:	f107 0220 	add.w	r2, r7, #32
 80075b4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80075b8:	2301      	movs	r3, #1
 80075ba:	f000 f946 	bl	800784a <lis2mdl_write_reg>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
 80075c8:	e000      	b.n	80075cc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3730      	adds	r7, #48	; 0x30
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08c      	sub	sp, #48	; 0x30
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	461a      	mov	r2, r3
 80075e0:	460b      	mov	r3, r1
 80075e2:	72fb      	strb	r3, [r7, #11]
 80075e4:	4613      	mov	r3, r2
 80075e6:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t shub_reg_access_en = 0x40U;
 80075ee:	2340      	movs	r3, #64	; 0x40
 80075f0:	777b      	strb	r3, [r7, #29]
  uint8_t shub_reg_access_dis = 0x00U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	773b      	strb	r3, [r7, #28]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80075f6:	233c      	movs	r3, #60	; 0x3c
 80075f8:	76fb      	strb	r3, [r7, #27]
  uint8_t slv0_add = 0x15U;
 80075fa:	2315      	movs	r3, #21
 80075fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t slv0_subadd = 0x16U;
 8007600:	2316      	movs	r3, #22
 8007602:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t slave0_config = 0x17U;
 8007606:	2317      	movs	r3, #23
 8007608:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t shub_odr_104 = 0x00U;
 800760c:	2300      	movs	r3, #0
 800760e:	76bb      	strb	r3, [r7, #26]
  uint8_t master_config = 0x14U;
 8007610:	2314      	movs	r3, #20
 8007612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t write_once_i2c_en = 0x44U;
 8007616:	2344      	movs	r3, #68	; 0x44
 8007618:	767b      	strb	r3, [r7, #25]
  uint8_t status_master_mainpage = 0x39U;
 800761a:	2339      	movs	r3, #57	; 0x39
 800761c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t wr_once_done = 0x80U;
 8007620:	2380      	movs	r3, #128	; 0x80
 8007622:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8007626:	2329      	movs	r3, #41	; 0x29
 8007628:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800762c:	231e      	movs	r3, #30
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t xlda = 0x01U;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8007638:	2310      	movs	r3, #16
 800763a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800763e:	2300      	movs	r3, #0
 8007640:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8007644:	2340      	movs	r3, #64	; 0x40
 8007646:	77fb      	strb	r3, [r7, #31]
  //uint8_t datawrite_slv0 = 0x0EU;
  uint8_t datawrite_slv0 = 0x21;
 8007648:	2321      	movs	r3, #33	; 0x21
 800764a:	77bb      	strb	r3, [r7, #30]
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f103 001c 	add.w	r0, r3, #28
 8007652:	f107 021d 	add.w	r2, r7, #29
 8007656:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800765a:	2301      	movs	r3, #1
 800765c:	f000 f8f5 	bl	800784a <lis2mdl_write_reg>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x98>
  {
    return LIS2MDL_ERROR;
 8007666:	f04f 33ff 	mov.w	r3, #4294967295
 800766a:	e0d2      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f103 001c 	add.w	r0, r3, #28
 8007672:	f107 021b 	add.w	r2, r7, #27
 8007676:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800767a:	2301      	movs	r3, #1
 800767c:	f000 f8e5 	bl	800784a <lis2mdl_write_reg>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xb8>
  {
    return LIS2MDL_ERROR;
 8007686:	f04f 33ff 	mov.w	r3, #4294967295
 800768a:	e0c2      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f103 001c 	add.w	r0, r3, #28
 8007692:	f107 020b 	add.w	r2, r7, #11
 8007696:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800769a:	2301      	movs	r3, #1
 800769c:	f000 f8d5 	bl	800784a <lis2mdl_write_reg>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xd8>
  {
    return LIS2MDL_ERROR;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295
 80076aa:	e0b2      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f103 001c 	add.w	r0, r3, #28
 80076b2:	f107 021a 	add.w	r2, r7, #26
 80076b6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80076ba:	2301      	movs	r3, #1
 80076bc:	f000 f8c5 	bl	800784a <lis2mdl_write_reg>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xf8>
  {
    return LIS2MDL_ERROR;
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ca:	e0a2      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f103 001c 	add.w	r0, r3, #28
 80076d2:	7fb9      	ldrb	r1, [r7, #30]
 80076d4:	2301      	movs	r3, #1
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	f000 f8b7 	bl	800784a <lis2mdl_write_reg>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x114>
  {
    return LIS2MDL_ERROR;
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295
 80076e6:	e094      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f103 001c 	add.w	r0, r3, #28
 80076ee:	f107 0219 	add.w	r2, r7, #25
 80076f2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80076f6:	2301      	movs	r3, #1
 80076f8:	f000 f8a7 	bl	800784a <lis2mdl_write_reg>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x134>
  {
    return LIS2MDL_ERROR;
 8007702:	f04f 33ff 	mov.w	r3, #4294967295
 8007706:	e084      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f103 001c 	add.w	r0, r3, #28
 800770e:	f107 021c 	add.w	r2, r7, #28
 8007712:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8007716:	2301      	movs	r3, #1
 8007718:	f000 f897 	bl	800784a <lis2mdl_write_reg>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x154>
  {
    return LIS2MDL_ERROR;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	e074      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f103 001c 	add.w	r0, r3, #28
 800772e:	f107 0218 	add.w	r2, r7, #24
 8007732:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8007736:	2301      	movs	r3, #1
 8007738:	f000 f86f 	bl	800781a <lis2mdl_read_reg>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x174>
  {
    return LIS2MDL_ERROR;
 8007742:	f04f 33ff 	mov.w	r3, #4294967295
 8007746:	e064      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8007748:	7e3b      	ldrb	r3, [r7, #24]
 800774a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800774e:	429a      	cmp	r2, r3
 8007750:	d101      	bne.n	8007756 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x182>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8007752:	7ffb      	ldrb	r3, [r7, #31]
 8007754:	763b      	strb	r3, [r7, #24]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f103 001c 	add.w	r0, r3, #28
 800775c:	f107 0218 	add.w	r2, r7, #24
 8007760:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8007764:	2301      	movs	r3, #1
 8007766:	f000 f870 	bl	800784a <lis2mdl_write_reg>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1a2>
  {
    return LIS2MDL_ERROR;
 8007770:	f04f 33ff 	mov.w	r3, #4294967295
 8007774:	e04d      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f103 001c 	add.w	r0, r3, #28
 800777c:	f107 0210 	add.w	r2, r7, #16
 8007780:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8007784:	2306      	movs	r3, #6
 8007786:	f000 f848 	bl	800781a <lis2mdl_read_reg>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1c2>
  {
    return LIS2MDL_ERROR;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	e03d      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f103 001c 	add.w	r0, r3, #28
 800779c:	f107 0217 	add.w	r2, r7, #23
 80077a0:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80077a4:	2301      	movs	r3, #1
 80077a6:	f000 f838 	bl	800781a <lis2mdl_read_reg>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1e2>
    {
      return LIS2MDL_ERROR;
 80077b0:	f04f 33ff 	mov.w	r3, #4294967295
 80077b4:	e02d      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
    }
  } while ((data & xlda) != xlda);
 80077b6:	7dfa      	ldrb	r2, [r7, #23]
 80077b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077bc:	4013      	ands	r3, r2
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d1e6      	bne.n	8007796 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1c2>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  for(int i=0; i < 50000; i++);
 80077c8:	2300      	movs	r3, #0
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077cc:	e002      	b.n	80077d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	3301      	adds	r3, #1
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80077da:	4293      	cmp	r3, r2
 80077dc:	ddf7      	ble.n	80077ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1fa>
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f103 001c 	add.w	r0, r3, #28
 80077e4:	f107 0217 	add.w	r2, r7, #23
 80077e8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80077ec:	2301      	movs	r3, #1
 80077ee:	f000 f814 	bl	800781a <lis2mdl_read_reg>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x22a>
    {
      return LIS2MDL_ERROR;
 80077f8:	f04f 33ff 	mov.w	r3, #4294967295
 80077fc:	e009      	b.n	8007812 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x23e>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80077fe:	7dfa      	ldrb	r2, [r7, #23]
 8007800:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007804:	4013      	ands	r3, r2
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800780c:	429a      	cmp	r2, r3
 800780e:	d1e6      	bne.n	80077de <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x20a>

  return LIS2MDL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3730      	adds	r7, #48	; 0x30
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800781a:	b590      	push	{r4, r7, lr}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	461a      	mov	r2, r3
 8007826:	460b      	mov	r3, r1
 8007828:	72fb      	strb	r3, [r7, #11]
 800782a:	4613      	mov	r3, r2
 800782c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685c      	ldr	r4, [r3, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6898      	ldr	r0, [r3, #8]
 8007836:	893b      	ldrh	r3, [r7, #8]
 8007838:	7af9      	ldrb	r1, [r7, #11]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	47a0      	blx	r4
 800783e:	6178      	str	r0, [r7, #20]

  return ret;
 8007840:	697b      	ldr	r3, [r7, #20]
}
 8007842:	4618      	mov	r0, r3
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd90      	pop	{r4, r7, pc}

0800784a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800784a:	b590      	push	{r4, r7, lr}
 800784c:	b087      	sub	sp, #28
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	461a      	mov	r2, r3
 8007856:	460b      	mov	r3, r1
 8007858:	72fb      	strb	r3, [r7, #11]
 800785a:	4613      	mov	r3, r2
 800785c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681c      	ldr	r4, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6898      	ldr	r0, [r3, #8]
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	7af9      	ldrb	r1, [r7, #11]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	47a0      	blx	r4
 800786e:	6178      	str	r0, [r7, #20]

  return ret;
 8007870:	697b      	ldr	r3, [r7, #20]
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	bd90      	pop	{r4, r7, pc}

0800787a <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8007886:	f107 0208 	add.w	r2, r7, #8
 800788a:	2301      	movs	r3, #1
 800788c:	2160      	movs	r1, #96	; 0x60
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ffc3 	bl	800781a <lis2mdl_read_reg>
 8007894:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10f      	bne.n	80078bc <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	7a3b      	ldrb	r3, [r7, #8]
 80078a6:	f362 0301 	bfi	r3, r2, #0, #2
 80078aa:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80078ac:	f107 0208 	add.w	r2, r7, #8
 80078b0:	2301      	movs	r3, #1
 80078b2:	2160      	movs	r1, #96	; 0x60
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff ffc8 	bl	800784a <lis2mdl_write_reg>
 80078ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80078d2:	f107 0208 	add.w	r2, r7, #8
 80078d6:	2301      	movs	r3, #1
 80078d8:	2160      	movs	r1, #96	; 0x60
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff ff9d 	bl	800781a <lis2mdl_read_reg>
 80078e0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10f      	bne.n	8007908 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	7a3b      	ldrb	r3, [r7, #8]
 80078f2:	f362 0383 	bfi	r3, r2, #2, #2
 80078f6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80078f8:	f107 0208 	add.w	r2, r7, #8
 80078fc:	2301      	movs	r3, #1
 80078fe:	2160      	movs	r1, #96	; 0x60
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ffa2 	bl	800784a <lis2mdl_write_reg>
 8007906:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007908:	68fb      	ldr	r3, [r7, #12]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <lis2mdl_power_mode_set>:
  * @param  val   change the values of lp in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_power_mode_set(stmdev_ctx_t *ctx, lis2mdl_lp_t val)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800791e:	f107 0208 	add.w	r2, r7, #8
 8007922:	2301      	movs	r3, #1
 8007924:	2160      	movs	r1, #96	; 0x60
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff ff77 	bl	800781a <lis2mdl_read_reg>
 800792c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10f      	bne.n	8007954 <lis2mdl_power_mode_set+0x42>
  {
    reg.lp = (uint8_t)val;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	7a3b      	ldrb	r3, [r7, #8]
 800793e:	f362 1304 	bfi	r3, r2, #4, #1
 8007942:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8007944:	f107 0208 	add.w	r2, r7, #8
 8007948:	2301      	movs	r3, #1
 800794a:	2160      	movs	r1, #96	; 0x60
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ff7c 	bl	800784a <lis2mdl_write_reg>
 8007952:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007954:	68fb      	ldr	r3, [r7, #12]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	2301      	movs	r3, #1
 8007970:	2162      	movs	r1, #98	; 0x62
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff ff51 	bl	800781a <lis2mdl_read_reg>
 8007978:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10f      	bne.n	80079a0 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	7a3b      	ldrb	r3, [r7, #8]
 800798a:	f362 1304 	bfi	r3, r2, #4, #1
 800798e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007990:	f107 0208 	add.w	r2, r7, #8
 8007994:	2301      	movs	r3, #1
 8007996:	2162      	movs	r1, #98	; 0x62
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff ff56 	bl	800784a <lis2mdl_write_reg>
 800799e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80079b4:	f107 020c 	add.w	r2, r7, #12
 80079b8:	2306      	movs	r3, #6
 80079ba:	2168      	movs	r1, #104	; 0x68
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff2c 	bl	800781a <lis2mdl_read_reg>
 80079c2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80079c4:	7b7b      	ldrb	r3, [r7, #13]
 80079c6:	b21a      	sxth	r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	7b3b      	ldrb	r3, [r7, #12]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	4413      	add	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	b21a      	sxth	r2, r3
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80079e6:	7bfa      	ldrb	r2, [r7, #15]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	3302      	adds	r3, #2
 80079ec:	b212      	sxth	r2, r2
 80079ee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	3302      	adds	r3, #2
 80079f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	4413      	add	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	3302      	adds	r3, #2
 8007a0a:	b212      	sxth	r2, r2
 8007a0c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007a0e:	7c7a      	ldrb	r2, [r7, #17]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	3304      	adds	r3, #4
 8007a14:	b212      	sxth	r2, r2
 8007a16:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	7c3b      	ldrb	r3, [r7, #16]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	3304      	adds	r3, #4
 8007a32:	b212      	sxth	r2, r2
 8007a34:	801a      	strh	r2, [r3, #0]

  return ret;
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	214f      	movs	r1, #79	; 0x4f
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff fee2 	bl	800781a <lis2mdl_read_reg>
 8007a56:	60f8      	str	r0, [r7, #12]

  return ret;
 8007a58:	68fb      	ldr	r3, [r7, #12]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007a6e:	f107 0208 	add.w	r2, r7, #8
 8007a72:	2301      	movs	r3, #1
 8007a74:	2162      	movs	r1, #98	; 0x62
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fecf 	bl	800781a <lis2mdl_read_reg>
 8007a7c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10f      	bne.n	8007aa4 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	7a3b      	ldrb	r3, [r7, #8]
 8007a8e:	f362 0341 	bfi	r3, r2, #1, #1
 8007a92:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8007a94:	f107 0208 	add.w	r2, r7, #8
 8007a98:	2301      	movs	r3, #1
 8007a9a:	2162      	movs	r1, #98	; 0x62
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fed4 	bl	800784a <lis2mdl_write_reg>
 8007aa2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <__errno>:
 8007ab0:	4b01      	ldr	r3, [pc, #4]	; (8007ab8 <__errno+0x8>)
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20000010 	.word	0x20000010

08007abc <__libc_init_array>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4d0d      	ldr	r5, [pc, #52]	; (8007af4 <__libc_init_array+0x38>)
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	4c0d      	ldr	r4, [pc, #52]	; (8007af8 <__libc_init_array+0x3c>)
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	42a6      	cmp	r6, r4
 8007aca:	d109      	bne.n	8007ae0 <__libc_init_array+0x24>
 8007acc:	4d0b      	ldr	r5, [pc, #44]	; (8007afc <__libc_init_array+0x40>)
 8007ace:	2600      	movs	r6, #0
 8007ad0:	4c0b      	ldr	r4, [pc, #44]	; (8007b00 <__libc_init_array+0x44>)
 8007ad2:	f001 f831 	bl	8008b38 <_init>
 8007ad6:	1b64      	subs	r4, r4, r5
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	42a6      	cmp	r6, r4
 8007adc:	d105      	bne.n	8007aea <__libc_init_array+0x2e>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	4798      	blx	r3
 8007ae8:	e7ee      	b.n	8007ac8 <__libc_init_array+0xc>
 8007aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aee:	3601      	adds	r6, #1
 8007af0:	4798      	blx	r3
 8007af2:	e7f2      	b.n	8007ada <__libc_init_array+0x1e>
 8007af4:	08008dfc 	.word	0x08008dfc
 8007af8:	08008dfc 	.word	0x08008dfc
 8007afc:	08008dfc 	.word	0x08008dfc
 8007b00:	08008e00 	.word	0x08008e00

08007b04 <memset>:
 8007b04:	4402      	add	r2, r0
 8007b06:	4603      	mov	r3, r0
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d100      	bne.n	8007b0e <memset+0xa>
 8007b0c:	4770      	bx	lr
 8007b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b12:	e7f9      	b.n	8007b08 <memset+0x4>

08007b14 <iprintf>:
 8007b14:	b40f      	push	{r0, r1, r2, r3}
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <iprintf+0x2c>)
 8007b18:	b513      	push	{r0, r1, r4, lr}
 8007b1a:	681c      	ldr	r4, [r3, #0]
 8007b1c:	b124      	cbz	r4, 8007b28 <iprintf+0x14>
 8007b1e:	69a3      	ldr	r3, [r4, #24]
 8007b20:	b913      	cbnz	r3, 8007b28 <iprintf+0x14>
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fa5c 	bl	8007fe0 <__sinit>
 8007b28:	ab05      	add	r3, sp, #20
 8007b2a:	9a04      	ldr	r2, [sp, #16]
 8007b2c:	68a1      	ldr	r1, [r4, #8]
 8007b2e:	4620      	mov	r0, r4
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	f000 fc65 	bl	8008400 <_vfiprintf_r>
 8007b36:	b002      	add	sp, #8
 8007b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b3c:	b004      	add	sp, #16
 8007b3e:	4770      	bx	lr
 8007b40:	20000010 	.word	0x20000010

08007b44 <_puts_r>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	460e      	mov	r6, r1
 8007b48:	4605      	mov	r5, r0
 8007b4a:	b118      	cbz	r0, 8007b54 <_puts_r+0x10>
 8007b4c:	6983      	ldr	r3, [r0, #24]
 8007b4e:	b90b      	cbnz	r3, 8007b54 <_puts_r+0x10>
 8007b50:	f000 fa46 	bl	8007fe0 <__sinit>
 8007b54:	69ab      	ldr	r3, [r5, #24]
 8007b56:	68ac      	ldr	r4, [r5, #8]
 8007b58:	b913      	cbnz	r3, 8007b60 <_puts_r+0x1c>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 fa40 	bl	8007fe0 <__sinit>
 8007b60:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <_puts_r+0xd0>)
 8007b62:	429c      	cmp	r4, r3
 8007b64:	d120      	bne.n	8007ba8 <_puts_r+0x64>
 8007b66:	686c      	ldr	r4, [r5, #4]
 8007b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b6a:	07db      	lsls	r3, r3, #31
 8007b6c:	d405      	bmi.n	8007b7a <_puts_r+0x36>
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	0598      	lsls	r0, r3, #22
 8007b72:	d402      	bmi.n	8007b7a <_puts_r+0x36>
 8007b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b76:	f000 fad1 	bl	800811c <__retarget_lock_acquire_recursive>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	0719      	lsls	r1, r3, #28
 8007b7e:	d51d      	bpl.n	8007bbc <_puts_r+0x78>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	b1db      	cbz	r3, 8007bbc <_puts_r+0x78>
 8007b84:	3e01      	subs	r6, #1
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	60a3      	str	r3, [r4, #8]
 8007b90:	bb39      	cbnz	r1, 8007be2 <_puts_r+0x9e>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da38      	bge.n	8007c08 <_puts_r+0xc4>
 8007b96:	4622      	mov	r2, r4
 8007b98:	210a      	movs	r1, #10
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f848 	bl	8007c30 <__swbuf_r>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d011      	beq.n	8007bc8 <_puts_r+0x84>
 8007ba4:	250a      	movs	r5, #10
 8007ba6:	e011      	b.n	8007bcc <_puts_r+0x88>
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <_puts_r+0xd4>)
 8007baa:	429c      	cmp	r4, r3
 8007bac:	d101      	bne.n	8007bb2 <_puts_r+0x6e>
 8007bae:	68ac      	ldr	r4, [r5, #8]
 8007bb0:	e7da      	b.n	8007b68 <_puts_r+0x24>
 8007bb2:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <_puts_r+0xd8>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	bf08      	it	eq
 8007bb8:	68ec      	ldreq	r4, [r5, #12]
 8007bba:	e7d5      	b.n	8007b68 <_puts_r+0x24>
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 f888 	bl	8007cd4 <__swsetup_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d0dd      	beq.n	8007b84 <_puts_r+0x40>
 8007bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8007bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bce:	07da      	lsls	r2, r3, #31
 8007bd0:	d405      	bmi.n	8007bde <_puts_r+0x9a>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	059b      	lsls	r3, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_puts_r+0x9a>
 8007bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bda:	f000 faa0 	bl	800811e <__retarget_lock_release_recursive>
 8007bde:	4628      	mov	r0, r5
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da04      	bge.n	8007bf0 <_puts_r+0xac>
 8007be6:	69a2      	ldr	r2, [r4, #24]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	dc06      	bgt.n	8007bfa <_puts_r+0xb6>
 8007bec:	290a      	cmp	r1, #10
 8007bee:	d004      	beq.n	8007bfa <_puts_r+0xb6>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	6022      	str	r2, [r4, #0]
 8007bf6:	7019      	strb	r1, [r3, #0]
 8007bf8:	e7c5      	b.n	8007b86 <_puts_r+0x42>
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 f817 	bl	8007c30 <__swbuf_r>
 8007c02:	3001      	adds	r0, #1
 8007c04:	d1bf      	bne.n	8007b86 <_puts_r+0x42>
 8007c06:	e7df      	b.n	8007bc8 <_puts_r+0x84>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	250a      	movs	r5, #10
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	6022      	str	r2, [r4, #0]
 8007c10:	701d      	strb	r5, [r3, #0]
 8007c12:	e7db      	b.n	8007bcc <_puts_r+0x88>
 8007c14:	08008d80 	.word	0x08008d80
 8007c18:	08008da0 	.word	0x08008da0
 8007c1c:	08008d60 	.word	0x08008d60

08007c20 <puts>:
 8007c20:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <puts+0xc>)
 8007c22:	4601      	mov	r1, r0
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	f7ff bf8d 	b.w	8007b44 <_puts_r>
 8007c2a:	bf00      	nop
 8007c2c:	20000010 	.word	0x20000010

08007c30 <__swbuf_r>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	460e      	mov	r6, r1
 8007c34:	4614      	mov	r4, r2
 8007c36:	4605      	mov	r5, r0
 8007c38:	b118      	cbz	r0, 8007c42 <__swbuf_r+0x12>
 8007c3a:	6983      	ldr	r3, [r0, #24]
 8007c3c:	b90b      	cbnz	r3, 8007c42 <__swbuf_r+0x12>
 8007c3e:	f000 f9cf 	bl	8007fe0 <__sinit>
 8007c42:	4b21      	ldr	r3, [pc, #132]	; (8007cc8 <__swbuf_r+0x98>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d12b      	bne.n	8007ca0 <__swbuf_r+0x70>
 8007c48:	686c      	ldr	r4, [r5, #4]
 8007c4a:	69a3      	ldr	r3, [r4, #24]
 8007c4c:	60a3      	str	r3, [r4, #8]
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	071a      	lsls	r2, r3, #28
 8007c52:	d52f      	bpl.n	8007cb4 <__swbuf_r+0x84>
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	b36b      	cbz	r3, 8007cb4 <__swbuf_r+0x84>
 8007c58:	6923      	ldr	r3, [r4, #16]
 8007c5a:	b2f6      	uxtb	r6, r6
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	4637      	mov	r7, r6
 8007c60:	1ac0      	subs	r0, r0, r3
 8007c62:	6963      	ldr	r3, [r4, #20]
 8007c64:	4283      	cmp	r3, r0
 8007c66:	dc04      	bgt.n	8007c72 <__swbuf_r+0x42>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f000 f924 	bl	8007eb8 <_fflush_r>
 8007c70:	bb30      	cbnz	r0, 8007cc0 <__swbuf_r+0x90>
 8007c72:	68a3      	ldr	r3, [r4, #8]
 8007c74:	3001      	adds	r0, #1
 8007c76:	3b01      	subs	r3, #1
 8007c78:	60a3      	str	r3, [r4, #8]
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	6022      	str	r2, [r4, #0]
 8007c80:	701e      	strb	r6, [r3, #0]
 8007c82:	6963      	ldr	r3, [r4, #20]
 8007c84:	4283      	cmp	r3, r0
 8007c86:	d004      	beq.n	8007c92 <__swbuf_r+0x62>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	07db      	lsls	r3, r3, #31
 8007c8c:	d506      	bpl.n	8007c9c <__swbuf_r+0x6c>
 8007c8e:	2e0a      	cmp	r6, #10
 8007c90:	d104      	bne.n	8007c9c <__swbuf_r+0x6c>
 8007c92:	4621      	mov	r1, r4
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 f90f 	bl	8007eb8 <_fflush_r>
 8007c9a:	b988      	cbnz	r0, 8007cc0 <__swbuf_r+0x90>
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <__swbuf_r+0x9c>)
 8007ca2:	429c      	cmp	r4, r3
 8007ca4:	d101      	bne.n	8007caa <__swbuf_r+0x7a>
 8007ca6:	68ac      	ldr	r4, [r5, #8]
 8007ca8:	e7cf      	b.n	8007c4a <__swbuf_r+0x1a>
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <__swbuf_r+0xa0>)
 8007cac:	429c      	cmp	r4, r3
 8007cae:	bf08      	it	eq
 8007cb0:	68ec      	ldreq	r4, [r5, #12]
 8007cb2:	e7ca      	b.n	8007c4a <__swbuf_r+0x1a>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 f80c 	bl	8007cd4 <__swsetup_r>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d0cb      	beq.n	8007c58 <__swbuf_r+0x28>
 8007cc0:	f04f 37ff 	mov.w	r7, #4294967295
 8007cc4:	e7ea      	b.n	8007c9c <__swbuf_r+0x6c>
 8007cc6:	bf00      	nop
 8007cc8:	08008d80 	.word	0x08008d80
 8007ccc:	08008da0 	.word	0x08008da0
 8007cd0:	08008d60 	.word	0x08008d60

08007cd4 <__swsetup_r>:
 8007cd4:	4b32      	ldr	r3, [pc, #200]	; (8007da0 <__swsetup_r+0xcc>)
 8007cd6:	b570      	push	{r4, r5, r6, lr}
 8007cd8:	681d      	ldr	r5, [r3, #0]
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	b125      	cbz	r5, 8007cea <__swsetup_r+0x16>
 8007ce0:	69ab      	ldr	r3, [r5, #24]
 8007ce2:	b913      	cbnz	r3, 8007cea <__swsetup_r+0x16>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 f97b 	bl	8007fe0 <__sinit>
 8007cea:	4b2e      	ldr	r3, [pc, #184]	; (8007da4 <__swsetup_r+0xd0>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d10f      	bne.n	8007d10 <__swsetup_r+0x3c>
 8007cf0:	686c      	ldr	r4, [r5, #4]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cf8:	0719      	lsls	r1, r3, #28
 8007cfa:	d42c      	bmi.n	8007d56 <__swsetup_r+0x82>
 8007cfc:	06dd      	lsls	r5, r3, #27
 8007cfe:	d411      	bmi.n	8007d24 <__swsetup_r+0x50>
 8007d00:	2309      	movs	r3, #9
 8007d02:	6033      	str	r3, [r6, #0]
 8007d04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	e03e      	b.n	8007d8e <__swsetup_r+0xba>
 8007d10:	4b25      	ldr	r3, [pc, #148]	; (8007da8 <__swsetup_r+0xd4>)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d101      	bne.n	8007d1a <__swsetup_r+0x46>
 8007d16:	68ac      	ldr	r4, [r5, #8]
 8007d18:	e7eb      	b.n	8007cf2 <__swsetup_r+0x1e>
 8007d1a:	4b24      	ldr	r3, [pc, #144]	; (8007dac <__swsetup_r+0xd8>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	bf08      	it	eq
 8007d20:	68ec      	ldreq	r4, [r5, #12]
 8007d22:	e7e6      	b.n	8007cf2 <__swsetup_r+0x1e>
 8007d24:	0758      	lsls	r0, r3, #29
 8007d26:	d512      	bpl.n	8007d4e <__swsetup_r+0x7a>
 8007d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d2a:	b141      	cbz	r1, 8007d3e <__swsetup_r+0x6a>
 8007d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d30:	4299      	cmp	r1, r3
 8007d32:	d002      	beq.n	8007d3a <__swsetup_r+0x66>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f000 fa59 	bl	80081ec <_free_r>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	2300      	movs	r3, #0
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f043 0308 	orr.w	r3, r3, #8
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	b94b      	cbnz	r3, 8007d6e <__swsetup_r+0x9a>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d64:	d003      	beq.n	8007d6e <__swsetup_r+0x9a>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f000 f9ff 	bl	800816c <__smakebuf_r>
 8007d6e:	89a0      	ldrh	r0, [r4, #12]
 8007d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d74:	f010 0301 	ands.w	r3, r0, #1
 8007d78:	d00a      	beq.n	8007d90 <__swsetup_r+0xbc>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60a3      	str	r3, [r4, #8]
 8007d7e:	6963      	ldr	r3, [r4, #20]
 8007d80:	425b      	negs	r3, r3
 8007d82:	61a3      	str	r3, [r4, #24]
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	b943      	cbnz	r3, 8007d9a <__swsetup_r+0xc6>
 8007d88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d8c:	d1ba      	bne.n	8007d04 <__swsetup_r+0x30>
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	0781      	lsls	r1, r0, #30
 8007d92:	bf58      	it	pl
 8007d94:	6963      	ldrpl	r3, [r4, #20]
 8007d96:	60a3      	str	r3, [r4, #8]
 8007d98:	e7f4      	b.n	8007d84 <__swsetup_r+0xb0>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e7f7      	b.n	8007d8e <__swsetup_r+0xba>
 8007d9e:	bf00      	nop
 8007da0:	20000010 	.word	0x20000010
 8007da4:	08008d80 	.word	0x08008d80
 8007da8:	08008da0 	.word	0x08008da0
 8007dac:	08008d60 	.word	0x08008d60

08007db0 <__sflush_r>:
 8007db0:	898a      	ldrh	r2, [r1, #12]
 8007db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db6:	4605      	mov	r5, r0
 8007db8:	0710      	lsls	r0, r2, #28
 8007dba:	460c      	mov	r4, r1
 8007dbc:	d458      	bmi.n	8007e70 <__sflush_r+0xc0>
 8007dbe:	684b      	ldr	r3, [r1, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dc05      	bgt.n	8007dd0 <__sflush_r+0x20>
 8007dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dc02      	bgt.n	8007dd0 <__sflush_r+0x20>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dd2:	2e00      	cmp	r6, #0
 8007dd4:	d0f9      	beq.n	8007dca <__sflush_r+0x1a>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ddc:	682f      	ldr	r7, [r5, #0]
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	d032      	beq.n	8007e48 <__sflush_r+0x98>
 8007de2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	075a      	lsls	r2, r3, #29
 8007de8:	d505      	bpl.n	8007df6 <__sflush_r+0x46>
 8007dea:	6863      	ldr	r3, [r4, #4]
 8007dec:	1ac0      	subs	r0, r0, r3
 8007dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007df0:	b10b      	cbz	r3, 8007df6 <__sflush_r+0x46>
 8007df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007df4:	1ac0      	subs	r0, r0, r3
 8007df6:	2300      	movs	r3, #0
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	6a21      	ldr	r1, [r4, #32]
 8007e00:	47b0      	blx	r6
 8007e02:	1c43      	adds	r3, r0, #1
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	d106      	bne.n	8007e16 <__sflush_r+0x66>
 8007e08:	6829      	ldr	r1, [r5, #0]
 8007e0a:	291d      	cmp	r1, #29
 8007e0c:	d82c      	bhi.n	8007e68 <__sflush_r+0xb8>
 8007e0e:	4a29      	ldr	r2, [pc, #164]	; (8007eb4 <__sflush_r+0x104>)
 8007e10:	40ca      	lsrs	r2, r1
 8007e12:	07d6      	lsls	r6, r2, #31
 8007e14:	d528      	bpl.n	8007e68 <__sflush_r+0xb8>
 8007e16:	2200      	movs	r2, #0
 8007e18:	04d9      	lsls	r1, r3, #19
 8007e1a:	6062      	str	r2, [r4, #4]
 8007e1c:	6922      	ldr	r2, [r4, #16]
 8007e1e:	6022      	str	r2, [r4, #0]
 8007e20:	d504      	bpl.n	8007e2c <__sflush_r+0x7c>
 8007e22:	1c42      	adds	r2, r0, #1
 8007e24:	d101      	bne.n	8007e2a <__sflush_r+0x7a>
 8007e26:	682b      	ldr	r3, [r5, #0]
 8007e28:	b903      	cbnz	r3, 8007e2c <__sflush_r+0x7c>
 8007e2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e2e:	602f      	str	r7, [r5, #0]
 8007e30:	2900      	cmp	r1, #0
 8007e32:	d0ca      	beq.n	8007dca <__sflush_r+0x1a>
 8007e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <__sflush_r+0x92>
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 f9d5 	bl	80081ec <_free_r>
 8007e42:	2000      	movs	r0, #0
 8007e44:	6360      	str	r0, [r4, #52]	; 0x34
 8007e46:	e7c1      	b.n	8007dcc <__sflush_r+0x1c>
 8007e48:	6a21      	ldr	r1, [r4, #32]
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b0      	blx	r6
 8007e50:	1c41      	adds	r1, r0, #1
 8007e52:	d1c7      	bne.n	8007de4 <__sflush_r+0x34>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0c4      	beq.n	8007de4 <__sflush_r+0x34>
 8007e5a:	2b1d      	cmp	r3, #29
 8007e5c:	d001      	beq.n	8007e62 <__sflush_r+0xb2>
 8007e5e:	2b16      	cmp	r3, #22
 8007e60:	d101      	bne.n	8007e66 <__sflush_r+0xb6>
 8007e62:	602f      	str	r7, [r5, #0]
 8007e64:	e7b1      	b.n	8007dca <__sflush_r+0x1a>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	e7ad      	b.n	8007dcc <__sflush_r+0x1c>
 8007e70:	690f      	ldr	r7, [r1, #16]
 8007e72:	2f00      	cmp	r7, #0
 8007e74:	d0a9      	beq.n	8007dca <__sflush_r+0x1a>
 8007e76:	0793      	lsls	r3, r2, #30
 8007e78:	680e      	ldr	r6, [r1, #0]
 8007e7a:	600f      	str	r7, [r1, #0]
 8007e7c:	bf0c      	ite	eq
 8007e7e:	694b      	ldreq	r3, [r1, #20]
 8007e80:	2300      	movne	r3, #0
 8007e82:	eba6 0807 	sub.w	r8, r6, r7
 8007e86:	608b      	str	r3, [r1, #8]
 8007e88:	f1b8 0f00 	cmp.w	r8, #0
 8007e8c:	dd9d      	ble.n	8007dca <__sflush_r+0x1a>
 8007e8e:	4643      	mov	r3, r8
 8007e90:	463a      	mov	r2, r7
 8007e92:	6a21      	ldr	r1, [r4, #32]
 8007e94:	4628      	mov	r0, r5
 8007e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e98:	47b0      	blx	r6
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	dc06      	bgt.n	8007eac <__sflush_r+0xfc>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	e78f      	b.n	8007dcc <__sflush_r+0x1c>
 8007eac:	4407      	add	r7, r0
 8007eae:	eba8 0800 	sub.w	r8, r8, r0
 8007eb2:	e7e9      	b.n	8007e88 <__sflush_r+0xd8>
 8007eb4:	20400001 	.word	0x20400001

08007eb8 <_fflush_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	690b      	ldr	r3, [r1, #16]
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	b913      	cbnz	r3, 8007ec8 <_fflush_r+0x10>
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	b118      	cbz	r0, 8007ed2 <_fflush_r+0x1a>
 8007eca:	6983      	ldr	r3, [r0, #24]
 8007ecc:	b90b      	cbnz	r3, 8007ed2 <_fflush_r+0x1a>
 8007ece:	f000 f887 	bl	8007fe0 <__sinit>
 8007ed2:	4b14      	ldr	r3, [pc, #80]	; (8007f24 <_fflush_r+0x6c>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	d11b      	bne.n	8007f10 <_fflush_r+0x58>
 8007ed8:	686c      	ldr	r4, [r5, #4]
 8007eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0ef      	beq.n	8007ec2 <_fflush_r+0xa>
 8007ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ee4:	07d0      	lsls	r0, r2, #31
 8007ee6:	d404      	bmi.n	8007ef2 <_fflush_r+0x3a>
 8007ee8:	0599      	lsls	r1, r3, #22
 8007eea:	d402      	bmi.n	8007ef2 <_fflush_r+0x3a>
 8007eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eee:	f000 f915 	bl	800811c <__retarget_lock_acquire_recursive>
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f7ff ff5b 	bl	8007db0 <__sflush_r>
 8007efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007efc:	4605      	mov	r5, r0
 8007efe:	07da      	lsls	r2, r3, #31
 8007f00:	d4e0      	bmi.n	8007ec4 <_fflush_r+0xc>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	059b      	lsls	r3, r3, #22
 8007f06:	d4dd      	bmi.n	8007ec4 <_fflush_r+0xc>
 8007f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f0a:	f000 f908 	bl	800811e <__retarget_lock_release_recursive>
 8007f0e:	e7d9      	b.n	8007ec4 <_fflush_r+0xc>
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <_fflush_r+0x70>)
 8007f12:	429c      	cmp	r4, r3
 8007f14:	d101      	bne.n	8007f1a <_fflush_r+0x62>
 8007f16:	68ac      	ldr	r4, [r5, #8]
 8007f18:	e7df      	b.n	8007eda <_fflush_r+0x22>
 8007f1a:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <_fflush_r+0x74>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	bf08      	it	eq
 8007f20:	68ec      	ldreq	r4, [r5, #12]
 8007f22:	e7da      	b.n	8007eda <_fflush_r+0x22>
 8007f24:	08008d80 	.word	0x08008d80
 8007f28:	08008da0 	.word	0x08008da0
 8007f2c:	08008d60 	.word	0x08008d60

08007f30 <std>:
 8007f30:	2300      	movs	r3, #0
 8007f32:	b510      	push	{r4, lr}
 8007f34:	4604      	mov	r4, r0
 8007f36:	6083      	str	r3, [r0, #8]
 8007f38:	8181      	strh	r1, [r0, #12]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6643      	str	r3, [r0, #100]	; 0x64
 8007f3e:	81c2      	strh	r2, [r0, #14]
 8007f40:	2208      	movs	r2, #8
 8007f42:	6183      	str	r3, [r0, #24]
 8007f44:	e9c0 3300 	strd	r3, r3, [r0]
 8007f48:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f4c:	305c      	adds	r0, #92	; 0x5c
 8007f4e:	f7ff fdd9 	bl	8007b04 <memset>
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <std+0x38>)
 8007f54:	6224      	str	r4, [r4, #32]
 8007f56:	6263      	str	r3, [r4, #36]	; 0x24
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <std+0x3c>)
 8007f5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f5c:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <std+0x40>)
 8007f5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <std+0x44>)
 8007f62:	6323      	str	r3, [r4, #48]	; 0x30
 8007f64:	bd10      	pop	{r4, pc}
 8007f66:	bf00      	nop
 8007f68:	080089ad 	.word	0x080089ad
 8007f6c:	080089cf 	.word	0x080089cf
 8007f70:	08008a07 	.word	0x08008a07
 8007f74:	08008a2b 	.word	0x08008a2b

08007f78 <_cleanup_r>:
 8007f78:	4901      	ldr	r1, [pc, #4]	; (8007f80 <_cleanup_r+0x8>)
 8007f7a:	f000 b8af 	b.w	80080dc <_fwalk_reent>
 8007f7e:	bf00      	nop
 8007f80:	08007eb9 	.word	0x08007eb9

08007f84 <__sfmoreglue>:
 8007f84:	b570      	push	{r4, r5, r6, lr}
 8007f86:	2268      	movs	r2, #104	; 0x68
 8007f88:	1e4d      	subs	r5, r1, #1
 8007f8a:	460e      	mov	r6, r1
 8007f8c:	4355      	muls	r5, r2
 8007f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f92:	f000 f997 	bl	80082c4 <_malloc_r>
 8007f96:	4604      	mov	r4, r0
 8007f98:	b140      	cbz	r0, 8007fac <__sfmoreglue+0x28>
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fa0:	e9c0 1600 	strd	r1, r6, [r0]
 8007fa4:	300c      	adds	r0, #12
 8007fa6:	60a0      	str	r0, [r4, #8]
 8007fa8:	f7ff fdac 	bl	8007b04 <memset>
 8007fac:	4620      	mov	r0, r4
 8007fae:	bd70      	pop	{r4, r5, r6, pc}

08007fb0 <__sfp_lock_acquire>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	; (8007fb8 <__sfp_lock_acquire+0x8>)
 8007fb2:	f000 b8b3 	b.w	800811c <__retarget_lock_acquire_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	200001c1 	.word	0x200001c1

08007fbc <__sfp_lock_release>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	; (8007fc4 <__sfp_lock_release+0x8>)
 8007fbe:	f000 b8ae 	b.w	800811e <__retarget_lock_release_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	200001c1 	.word	0x200001c1

08007fc8 <__sinit_lock_acquire>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__sinit_lock_acquire+0x8>)
 8007fca:	f000 b8a7 	b.w	800811c <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	200001c2 	.word	0x200001c2

08007fd4 <__sinit_lock_release>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__sinit_lock_release+0x8>)
 8007fd6:	f000 b8a2 	b.w	800811e <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	200001c2 	.word	0x200001c2

08007fe0 <__sinit>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	f7ff fff0 	bl	8007fc8 <__sinit_lock_acquire>
 8007fe8:	69a3      	ldr	r3, [r4, #24]
 8007fea:	b11b      	cbz	r3, 8007ff4 <__sinit+0x14>
 8007fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff0:	f7ff bff0 	b.w	8007fd4 <__sinit_lock_release>
 8007ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4b12      	ldr	r3, [pc, #72]	; (8008048 <__sinit+0x68>)
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <__sinit+0x6c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	62a2      	str	r2, [r4, #40]	; 0x28
 8008004:	42a3      	cmp	r3, r4
 8008006:	bf04      	itt	eq
 8008008:	2301      	moveq	r3, #1
 800800a:	61a3      	streq	r3, [r4, #24]
 800800c:	f000 f820 	bl	8008050 <__sfp>
 8008010:	6060      	str	r0, [r4, #4]
 8008012:	4620      	mov	r0, r4
 8008014:	f000 f81c 	bl	8008050 <__sfp>
 8008018:	60a0      	str	r0, [r4, #8]
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f818 	bl	8008050 <__sfp>
 8008020:	2200      	movs	r2, #0
 8008022:	2104      	movs	r1, #4
 8008024:	60e0      	str	r0, [r4, #12]
 8008026:	6860      	ldr	r0, [r4, #4]
 8008028:	f7ff ff82 	bl	8007f30 <std>
 800802c:	2201      	movs	r2, #1
 800802e:	2109      	movs	r1, #9
 8008030:	68a0      	ldr	r0, [r4, #8]
 8008032:	f7ff ff7d 	bl	8007f30 <std>
 8008036:	2202      	movs	r2, #2
 8008038:	2112      	movs	r1, #18
 800803a:	68e0      	ldr	r0, [r4, #12]
 800803c:	f7ff ff78 	bl	8007f30 <std>
 8008040:	2301      	movs	r3, #1
 8008042:	61a3      	str	r3, [r4, #24]
 8008044:	e7d2      	b.n	8007fec <__sinit+0xc>
 8008046:	bf00      	nop
 8008048:	08008d5c 	.word	0x08008d5c
 800804c:	08007f79 	.word	0x08007f79

08008050 <__sfp>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	4607      	mov	r7, r0
 8008054:	f7ff ffac 	bl	8007fb0 <__sfp_lock_acquire>
 8008058:	4b1e      	ldr	r3, [pc, #120]	; (80080d4 <__sfp+0x84>)
 800805a:	681e      	ldr	r6, [r3, #0]
 800805c:	69b3      	ldr	r3, [r6, #24]
 800805e:	b913      	cbnz	r3, 8008066 <__sfp+0x16>
 8008060:	4630      	mov	r0, r6
 8008062:	f7ff ffbd 	bl	8007fe0 <__sinit>
 8008066:	3648      	adds	r6, #72	; 0x48
 8008068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800806c:	3b01      	subs	r3, #1
 800806e:	d503      	bpl.n	8008078 <__sfp+0x28>
 8008070:	6833      	ldr	r3, [r6, #0]
 8008072:	b30b      	cbz	r3, 80080b8 <__sfp+0x68>
 8008074:	6836      	ldr	r6, [r6, #0]
 8008076:	e7f7      	b.n	8008068 <__sfp+0x18>
 8008078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800807c:	b9d5      	cbnz	r5, 80080b4 <__sfp+0x64>
 800807e:	4b16      	ldr	r3, [pc, #88]	; (80080d8 <__sfp+0x88>)
 8008080:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008084:	6665      	str	r5, [r4, #100]	; 0x64
 8008086:	60e3      	str	r3, [r4, #12]
 8008088:	f000 f847 	bl	800811a <__retarget_lock_init_recursive>
 800808c:	f7ff ff96 	bl	8007fbc <__sfp_lock_release>
 8008090:	2208      	movs	r2, #8
 8008092:	4629      	mov	r1, r5
 8008094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008098:	6025      	str	r5, [r4, #0]
 800809a:	61a5      	str	r5, [r4, #24]
 800809c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080a4:	f7ff fd2e 	bl	8007b04 <memset>
 80080a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080b0:	4620      	mov	r0, r4
 80080b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080b4:	3468      	adds	r4, #104	; 0x68
 80080b6:	e7d9      	b.n	800806c <__sfp+0x1c>
 80080b8:	2104      	movs	r1, #4
 80080ba:	4638      	mov	r0, r7
 80080bc:	f7ff ff62 	bl	8007f84 <__sfmoreglue>
 80080c0:	4604      	mov	r4, r0
 80080c2:	6030      	str	r0, [r6, #0]
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d1d5      	bne.n	8008074 <__sfp+0x24>
 80080c8:	f7ff ff78 	bl	8007fbc <__sfp_lock_release>
 80080cc:	230c      	movs	r3, #12
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	e7ee      	b.n	80080b0 <__sfp+0x60>
 80080d2:	bf00      	nop
 80080d4:	08008d5c 	.word	0x08008d5c
 80080d8:	ffff0001 	.word	0xffff0001

080080dc <_fwalk_reent>:
 80080dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e0:	4606      	mov	r6, r0
 80080e2:	4688      	mov	r8, r1
 80080e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080e8:	2700      	movs	r7, #0
 80080ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080ee:	f1b9 0901 	subs.w	r9, r9, #1
 80080f2:	d505      	bpl.n	8008100 <_fwalk_reent+0x24>
 80080f4:	6824      	ldr	r4, [r4, #0]
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	d1f7      	bne.n	80080ea <_fwalk_reent+0xe>
 80080fa:	4638      	mov	r0, r7
 80080fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008100:	89ab      	ldrh	r3, [r5, #12]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d907      	bls.n	8008116 <_fwalk_reent+0x3a>
 8008106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800810a:	3301      	adds	r3, #1
 800810c:	d003      	beq.n	8008116 <_fwalk_reent+0x3a>
 800810e:	4629      	mov	r1, r5
 8008110:	4630      	mov	r0, r6
 8008112:	47c0      	blx	r8
 8008114:	4307      	orrs	r7, r0
 8008116:	3568      	adds	r5, #104	; 0x68
 8008118:	e7e9      	b.n	80080ee <_fwalk_reent+0x12>

0800811a <__retarget_lock_init_recursive>:
 800811a:	4770      	bx	lr

0800811c <__retarget_lock_acquire_recursive>:
 800811c:	4770      	bx	lr

0800811e <__retarget_lock_release_recursive>:
 800811e:	4770      	bx	lr

08008120 <__swhatbuf_r>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	460e      	mov	r6, r1
 8008124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008128:	b096      	sub	sp, #88	; 0x58
 800812a:	4614      	mov	r4, r2
 800812c:	2900      	cmp	r1, #0
 800812e:	461d      	mov	r5, r3
 8008130:	da08      	bge.n	8008144 <__swhatbuf_r+0x24>
 8008132:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	061a      	lsls	r2, r3, #24
 800813c:	d410      	bmi.n	8008160 <__swhatbuf_r+0x40>
 800813e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008142:	e00e      	b.n	8008162 <__swhatbuf_r+0x42>
 8008144:	466a      	mov	r2, sp
 8008146:	f000 fc97 	bl	8008a78 <_fstat_r>
 800814a:	2800      	cmp	r0, #0
 800814c:	dbf1      	blt.n	8008132 <__swhatbuf_r+0x12>
 800814e:	9a01      	ldr	r2, [sp, #4]
 8008150:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008154:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008158:	425a      	negs	r2, r3
 800815a:	415a      	adcs	r2, r3
 800815c:	602a      	str	r2, [r5, #0]
 800815e:	e7ee      	b.n	800813e <__swhatbuf_r+0x1e>
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	2000      	movs	r0, #0
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	b016      	add	sp, #88	; 0x58
 8008168:	bd70      	pop	{r4, r5, r6, pc}
	...

0800816c <__smakebuf_r>:
 800816c:	898b      	ldrh	r3, [r1, #12]
 800816e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008170:	079d      	lsls	r5, r3, #30
 8008172:	4606      	mov	r6, r0
 8008174:	460c      	mov	r4, r1
 8008176:	d507      	bpl.n	8008188 <__smakebuf_r+0x1c>
 8008178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	2301      	movs	r3, #1
 8008182:	6163      	str	r3, [r4, #20]
 8008184:	b002      	add	sp, #8
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	ab01      	add	r3, sp, #4
 800818a:	466a      	mov	r2, sp
 800818c:	f7ff ffc8 	bl	8008120 <__swhatbuf_r>
 8008190:	9900      	ldr	r1, [sp, #0]
 8008192:	4605      	mov	r5, r0
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f895 	bl	80082c4 <_malloc_r>
 800819a:	b948      	cbnz	r0, 80081b0 <__smakebuf_r+0x44>
 800819c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a0:	059a      	lsls	r2, r3, #22
 80081a2:	d4ef      	bmi.n	8008184 <__smakebuf_r+0x18>
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	f043 0302 	orr.w	r3, r3, #2
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	e7e3      	b.n	8008178 <__smakebuf_r+0xc>
 80081b0:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <__smakebuf_r+0x7c>)
 80081b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	6020      	str	r0, [r4, #0]
 80081b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081bc:	6120      	str	r0, [r4, #16]
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	6163      	str	r3, [r4, #20]
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	b15b      	cbz	r3, 80081e0 <__smakebuf_r+0x74>
 80081c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081cc:	4630      	mov	r0, r6
 80081ce:	f000 fc65 	bl	8008a9c <_isatty_r>
 80081d2:	b128      	cbz	r0, 80081e0 <__smakebuf_r+0x74>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	89a0      	ldrh	r0, [r4, #12]
 80081e2:	4305      	orrs	r5, r0
 80081e4:	81a5      	strh	r5, [r4, #12]
 80081e6:	e7cd      	b.n	8008184 <__smakebuf_r+0x18>
 80081e8:	08007f79 	.word	0x08007f79

080081ec <_free_r>:
 80081ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ee:	2900      	cmp	r1, #0
 80081f0:	d043      	beq.n	800827a <_free_r+0x8e>
 80081f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f6:	1f0c      	subs	r4, r1, #4
 80081f8:	9001      	str	r0, [sp, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfb8      	it	lt
 80081fe:	18e4      	addlt	r4, r4, r3
 8008200:	f000 fc7c 	bl	8008afc <__malloc_lock>
 8008204:	4a1e      	ldr	r2, [pc, #120]	; (8008280 <_free_r+0x94>)
 8008206:	9801      	ldr	r0, [sp, #4]
 8008208:	6813      	ldr	r3, [r2, #0]
 800820a:	b933      	cbnz	r3, 800821a <_free_r+0x2e>
 800820c:	6063      	str	r3, [r4, #4]
 800820e:	6014      	str	r4, [r2, #0]
 8008210:	b003      	add	sp, #12
 8008212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008216:	f000 bc77 	b.w	8008b08 <__malloc_unlock>
 800821a:	42a3      	cmp	r3, r4
 800821c:	d908      	bls.n	8008230 <_free_r+0x44>
 800821e:	6825      	ldr	r5, [r4, #0]
 8008220:	1961      	adds	r1, r4, r5
 8008222:	428b      	cmp	r3, r1
 8008224:	bf01      	itttt	eq
 8008226:	6819      	ldreq	r1, [r3, #0]
 8008228:	685b      	ldreq	r3, [r3, #4]
 800822a:	1949      	addeq	r1, r1, r5
 800822c:	6021      	streq	r1, [r4, #0]
 800822e:	e7ed      	b.n	800820c <_free_r+0x20>
 8008230:	461a      	mov	r2, r3
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	b10b      	cbz	r3, 800823a <_free_r+0x4e>
 8008236:	42a3      	cmp	r3, r4
 8008238:	d9fa      	bls.n	8008230 <_free_r+0x44>
 800823a:	6811      	ldr	r1, [r2, #0]
 800823c:	1855      	adds	r5, r2, r1
 800823e:	42a5      	cmp	r5, r4
 8008240:	d10b      	bne.n	800825a <_free_r+0x6e>
 8008242:	6824      	ldr	r4, [r4, #0]
 8008244:	4421      	add	r1, r4
 8008246:	1854      	adds	r4, r2, r1
 8008248:	6011      	str	r1, [r2, #0]
 800824a:	42a3      	cmp	r3, r4
 800824c:	d1e0      	bne.n	8008210 <_free_r+0x24>
 800824e:	681c      	ldr	r4, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	4421      	add	r1, r4
 8008254:	6053      	str	r3, [r2, #4]
 8008256:	6011      	str	r1, [r2, #0]
 8008258:	e7da      	b.n	8008210 <_free_r+0x24>
 800825a:	d902      	bls.n	8008262 <_free_r+0x76>
 800825c:	230c      	movs	r3, #12
 800825e:	6003      	str	r3, [r0, #0]
 8008260:	e7d6      	b.n	8008210 <_free_r+0x24>
 8008262:	6825      	ldr	r5, [r4, #0]
 8008264:	1961      	adds	r1, r4, r5
 8008266:	428b      	cmp	r3, r1
 8008268:	bf02      	ittt	eq
 800826a:	6819      	ldreq	r1, [r3, #0]
 800826c:	685b      	ldreq	r3, [r3, #4]
 800826e:	1949      	addeq	r1, r1, r5
 8008270:	6063      	str	r3, [r4, #4]
 8008272:	bf08      	it	eq
 8008274:	6021      	streq	r1, [r4, #0]
 8008276:	6054      	str	r4, [r2, #4]
 8008278:	e7ca      	b.n	8008210 <_free_r+0x24>
 800827a:	b003      	add	sp, #12
 800827c:	bd30      	pop	{r4, r5, pc}
 800827e:	bf00      	nop
 8008280:	200001c4 	.word	0x200001c4

08008284 <sbrk_aligned>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	4e0e      	ldr	r6, [pc, #56]	; (80082c0 <sbrk_aligned+0x3c>)
 8008288:	460c      	mov	r4, r1
 800828a:	4605      	mov	r5, r0
 800828c:	6831      	ldr	r1, [r6, #0]
 800828e:	b911      	cbnz	r1, 8008296 <sbrk_aligned+0x12>
 8008290:	f000 fb7c 	bl	800898c <_sbrk_r>
 8008294:	6030      	str	r0, [r6, #0]
 8008296:	4621      	mov	r1, r4
 8008298:	4628      	mov	r0, r5
 800829a:	f000 fb77 	bl	800898c <_sbrk_r>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d00a      	beq.n	80082b8 <sbrk_aligned+0x34>
 80082a2:	1cc4      	adds	r4, r0, #3
 80082a4:	f024 0403 	bic.w	r4, r4, #3
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d007      	beq.n	80082bc <sbrk_aligned+0x38>
 80082ac:	1a21      	subs	r1, r4, r0
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 fb6c 	bl	800898c <_sbrk_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	d101      	bne.n	80082bc <sbrk_aligned+0x38>
 80082b8:	f04f 34ff 	mov.w	r4, #4294967295
 80082bc:	4620      	mov	r0, r4
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	200001c8 	.word	0x200001c8

080082c4 <_malloc_r>:
 80082c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c8:	1ccd      	adds	r5, r1, #3
 80082ca:	4607      	mov	r7, r0
 80082cc:	f025 0503 	bic.w	r5, r5, #3
 80082d0:	3508      	adds	r5, #8
 80082d2:	2d0c      	cmp	r5, #12
 80082d4:	bf38      	it	cc
 80082d6:	250c      	movcc	r5, #12
 80082d8:	2d00      	cmp	r5, #0
 80082da:	db01      	blt.n	80082e0 <_malloc_r+0x1c>
 80082dc:	42a9      	cmp	r1, r5
 80082de:	d905      	bls.n	80082ec <_malloc_r+0x28>
 80082e0:	230c      	movs	r3, #12
 80082e2:	2600      	movs	r6, #0
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	4630      	mov	r0, r6
 80082e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ec:	4e2e      	ldr	r6, [pc, #184]	; (80083a8 <_malloc_r+0xe4>)
 80082ee:	f000 fc05 	bl	8008afc <__malloc_lock>
 80082f2:	6833      	ldr	r3, [r6, #0]
 80082f4:	461c      	mov	r4, r3
 80082f6:	bb34      	cbnz	r4, 8008346 <_malloc_r+0x82>
 80082f8:	4629      	mov	r1, r5
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7ff ffc2 	bl	8008284 <sbrk_aligned>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	4604      	mov	r4, r0
 8008304:	d14d      	bne.n	80083a2 <_malloc_r+0xde>
 8008306:	6834      	ldr	r4, [r6, #0]
 8008308:	4626      	mov	r6, r4
 800830a:	2e00      	cmp	r6, #0
 800830c:	d140      	bne.n	8008390 <_malloc_r+0xcc>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	4631      	mov	r1, r6
 8008312:	4638      	mov	r0, r7
 8008314:	eb04 0803 	add.w	r8, r4, r3
 8008318:	f000 fb38 	bl	800898c <_sbrk_r>
 800831c:	4580      	cmp	r8, r0
 800831e:	d13a      	bne.n	8008396 <_malloc_r+0xd2>
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	3503      	adds	r5, #3
 8008324:	4638      	mov	r0, r7
 8008326:	1a6d      	subs	r5, r5, r1
 8008328:	f025 0503 	bic.w	r5, r5, #3
 800832c:	3508      	adds	r5, #8
 800832e:	2d0c      	cmp	r5, #12
 8008330:	bf38      	it	cc
 8008332:	250c      	movcc	r5, #12
 8008334:	4629      	mov	r1, r5
 8008336:	f7ff ffa5 	bl	8008284 <sbrk_aligned>
 800833a:	3001      	adds	r0, #1
 800833c:	d02b      	beq.n	8008396 <_malloc_r+0xd2>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	442b      	add	r3, r5
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	e00e      	b.n	8008364 <_malloc_r+0xa0>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	1b52      	subs	r2, r2, r5
 800834a:	d41e      	bmi.n	800838a <_malloc_r+0xc6>
 800834c:	2a0b      	cmp	r2, #11
 800834e:	d916      	bls.n	800837e <_malloc_r+0xba>
 8008350:	1961      	adds	r1, r4, r5
 8008352:	42a3      	cmp	r3, r4
 8008354:	6025      	str	r5, [r4, #0]
 8008356:	bf18      	it	ne
 8008358:	6059      	strne	r1, [r3, #4]
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	bf08      	it	eq
 800835e:	6031      	streq	r1, [r6, #0]
 8008360:	5162      	str	r2, [r4, r5]
 8008362:	604b      	str	r3, [r1, #4]
 8008364:	f104 060b 	add.w	r6, r4, #11
 8008368:	4638      	mov	r0, r7
 800836a:	f000 fbcd 	bl	8008b08 <__malloc_unlock>
 800836e:	1d23      	adds	r3, r4, #4
 8008370:	f026 0607 	bic.w	r6, r6, #7
 8008374:	1af2      	subs	r2, r6, r3
 8008376:	d0b6      	beq.n	80082e6 <_malloc_r+0x22>
 8008378:	1b9b      	subs	r3, r3, r6
 800837a:	50a3      	str	r3, [r4, r2]
 800837c:	e7b3      	b.n	80082e6 <_malloc_r+0x22>
 800837e:	6862      	ldr	r2, [r4, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	bf0c      	ite	eq
 8008384:	6032      	streq	r2, [r6, #0]
 8008386:	605a      	strne	r2, [r3, #4]
 8008388:	e7ec      	b.n	8008364 <_malloc_r+0xa0>
 800838a:	4623      	mov	r3, r4
 800838c:	6864      	ldr	r4, [r4, #4]
 800838e:	e7b2      	b.n	80082f6 <_malloc_r+0x32>
 8008390:	4634      	mov	r4, r6
 8008392:	6876      	ldr	r6, [r6, #4]
 8008394:	e7b9      	b.n	800830a <_malloc_r+0x46>
 8008396:	230c      	movs	r3, #12
 8008398:	4638      	mov	r0, r7
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	f000 fbb4 	bl	8008b08 <__malloc_unlock>
 80083a0:	e7a1      	b.n	80082e6 <_malloc_r+0x22>
 80083a2:	6025      	str	r5, [r4, #0]
 80083a4:	e7de      	b.n	8008364 <_malloc_r+0xa0>
 80083a6:	bf00      	nop
 80083a8:	200001c4 	.word	0x200001c4

080083ac <__sfputc_r>:
 80083ac:	6893      	ldr	r3, [r2, #8]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	6093      	str	r3, [r2, #8]
 80083b4:	b410      	push	{r4}
 80083b6:	da08      	bge.n	80083ca <__sfputc_r+0x1e>
 80083b8:	6994      	ldr	r4, [r2, #24]
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	db01      	blt.n	80083c2 <__sfputc_r+0x16>
 80083be:	290a      	cmp	r1, #10
 80083c0:	d103      	bne.n	80083ca <__sfputc_r+0x1e>
 80083c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c6:	f7ff bc33 	b.w	8007c30 <__swbuf_r>
 80083ca:	6813      	ldr	r3, [r2, #0]
 80083cc:	1c58      	adds	r0, r3, #1
 80083ce:	6010      	str	r0, [r2, #0]
 80083d0:	4608      	mov	r0, r1
 80083d2:	7019      	strb	r1, [r3, #0]
 80083d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d8:	4770      	bx	lr

080083da <__sfputs_r>:
 80083da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083dc:	4606      	mov	r6, r0
 80083de:	460f      	mov	r7, r1
 80083e0:	4614      	mov	r4, r2
 80083e2:	18d5      	adds	r5, r2, r3
 80083e4:	42ac      	cmp	r4, r5
 80083e6:	d101      	bne.n	80083ec <__sfputs_r+0x12>
 80083e8:	2000      	movs	r0, #0
 80083ea:	e007      	b.n	80083fc <__sfputs_r+0x22>
 80083ec:	463a      	mov	r2, r7
 80083ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ffda 	bl	80083ac <__sfputc_r>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d1f3      	bne.n	80083e4 <__sfputs_r+0xa>
 80083fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008400 <_vfiprintf_r>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	460d      	mov	r5, r1
 8008406:	b09d      	sub	sp, #116	; 0x74
 8008408:	4614      	mov	r4, r2
 800840a:	4698      	mov	r8, r3
 800840c:	4606      	mov	r6, r0
 800840e:	b118      	cbz	r0, 8008418 <_vfiprintf_r+0x18>
 8008410:	6983      	ldr	r3, [r0, #24]
 8008412:	b90b      	cbnz	r3, 8008418 <_vfiprintf_r+0x18>
 8008414:	f7ff fde4 	bl	8007fe0 <__sinit>
 8008418:	4b89      	ldr	r3, [pc, #548]	; (8008640 <_vfiprintf_r+0x240>)
 800841a:	429d      	cmp	r5, r3
 800841c:	d11b      	bne.n	8008456 <_vfiprintf_r+0x56>
 800841e:	6875      	ldr	r5, [r6, #4]
 8008420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008422:	07d9      	lsls	r1, r3, #31
 8008424:	d405      	bmi.n	8008432 <_vfiprintf_r+0x32>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	059a      	lsls	r2, r3, #22
 800842a:	d402      	bmi.n	8008432 <_vfiprintf_r+0x32>
 800842c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800842e:	f7ff fe75 	bl	800811c <__retarget_lock_acquire_recursive>
 8008432:	89ab      	ldrh	r3, [r5, #12]
 8008434:	071b      	lsls	r3, r3, #28
 8008436:	d501      	bpl.n	800843c <_vfiprintf_r+0x3c>
 8008438:	692b      	ldr	r3, [r5, #16]
 800843a:	b9eb      	cbnz	r3, 8008478 <_vfiprintf_r+0x78>
 800843c:	4629      	mov	r1, r5
 800843e:	4630      	mov	r0, r6
 8008440:	f7ff fc48 	bl	8007cd4 <__swsetup_r>
 8008444:	b1c0      	cbz	r0, 8008478 <_vfiprintf_r+0x78>
 8008446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008448:	07dc      	lsls	r4, r3, #31
 800844a:	d50e      	bpl.n	800846a <_vfiprintf_r+0x6a>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	b01d      	add	sp, #116	; 0x74
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	4b7b      	ldr	r3, [pc, #492]	; (8008644 <_vfiprintf_r+0x244>)
 8008458:	429d      	cmp	r5, r3
 800845a:	d101      	bne.n	8008460 <_vfiprintf_r+0x60>
 800845c:	68b5      	ldr	r5, [r6, #8]
 800845e:	e7df      	b.n	8008420 <_vfiprintf_r+0x20>
 8008460:	4b79      	ldr	r3, [pc, #484]	; (8008648 <_vfiprintf_r+0x248>)
 8008462:	429d      	cmp	r5, r3
 8008464:	bf08      	it	eq
 8008466:	68f5      	ldreq	r5, [r6, #12]
 8008468:	e7da      	b.n	8008420 <_vfiprintf_r+0x20>
 800846a:	89ab      	ldrh	r3, [r5, #12]
 800846c:	0598      	lsls	r0, r3, #22
 800846e:	d4ed      	bmi.n	800844c <_vfiprintf_r+0x4c>
 8008470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008472:	f7ff fe54 	bl	800811e <__retarget_lock_release_recursive>
 8008476:	e7e9      	b.n	800844c <_vfiprintf_r+0x4c>
 8008478:	2300      	movs	r3, #0
 800847a:	f8cd 800c 	str.w	r8, [sp, #12]
 800847e:	f04f 0901 	mov.w	r9, #1
 8008482:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800864c <_vfiprintf_r+0x24c>
 8008486:	9309      	str	r3, [sp, #36]	; 0x24
 8008488:	2320      	movs	r3, #32
 800848a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800848e:	2330      	movs	r3, #48	; 0x30
 8008490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008494:	4623      	mov	r3, r4
 8008496:	469a      	mov	sl, r3
 8008498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800849c:	b10a      	cbz	r2, 80084a2 <_vfiprintf_r+0xa2>
 800849e:	2a25      	cmp	r2, #37	; 0x25
 80084a0:	d1f9      	bne.n	8008496 <_vfiprintf_r+0x96>
 80084a2:	ebba 0b04 	subs.w	fp, sl, r4
 80084a6:	d00b      	beq.n	80084c0 <_vfiprintf_r+0xc0>
 80084a8:	465b      	mov	r3, fp
 80084aa:	4622      	mov	r2, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	4630      	mov	r0, r6
 80084b0:	f7ff ff93 	bl	80083da <__sfputs_r>
 80084b4:	3001      	adds	r0, #1
 80084b6:	f000 80aa 	beq.w	800860e <_vfiprintf_r+0x20e>
 80084ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084bc:	445a      	add	r2, fp
 80084be:	9209      	str	r2, [sp, #36]	; 0x24
 80084c0:	f89a 3000 	ldrb.w	r3, [sl]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80a2 	beq.w	800860e <_vfiprintf_r+0x20e>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f04f 32ff 	mov.w	r2, #4294967295
 80084d0:	f10a 0a01 	add.w	sl, sl, #1
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084dc:	931a      	str	r3, [sp, #104]	; 0x68
 80084de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e2:	4654      	mov	r4, sl
 80084e4:	2205      	movs	r2, #5
 80084e6:	4859      	ldr	r0, [pc, #356]	; (800864c <_vfiprintf_r+0x24c>)
 80084e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ec:	f000 faf8 	bl	8008ae0 <memchr>
 80084f0:	9a04      	ldr	r2, [sp, #16]
 80084f2:	b9d8      	cbnz	r0, 800852c <_vfiprintf_r+0x12c>
 80084f4:	06d1      	lsls	r1, r2, #27
 80084f6:	bf44      	itt	mi
 80084f8:	2320      	movmi	r3, #32
 80084fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fe:	0713      	lsls	r3, r2, #28
 8008500:	bf44      	itt	mi
 8008502:	232b      	movmi	r3, #43	; 0x2b
 8008504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008508:	f89a 3000 	ldrb.w	r3, [sl]
 800850c:	2b2a      	cmp	r3, #42	; 0x2a
 800850e:	d015      	beq.n	800853c <_vfiprintf_r+0x13c>
 8008510:	9a07      	ldr	r2, [sp, #28]
 8008512:	4654      	mov	r4, sl
 8008514:	2000      	movs	r0, #0
 8008516:	f04f 0c0a 	mov.w	ip, #10
 800851a:	4621      	mov	r1, r4
 800851c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008520:	3b30      	subs	r3, #48	; 0x30
 8008522:	2b09      	cmp	r3, #9
 8008524:	d94e      	bls.n	80085c4 <_vfiprintf_r+0x1c4>
 8008526:	b1b0      	cbz	r0, 8008556 <_vfiprintf_r+0x156>
 8008528:	9207      	str	r2, [sp, #28]
 800852a:	e014      	b.n	8008556 <_vfiprintf_r+0x156>
 800852c:	eba0 0308 	sub.w	r3, r0, r8
 8008530:	46a2      	mov	sl, r4
 8008532:	fa09 f303 	lsl.w	r3, r9, r3
 8008536:	4313      	orrs	r3, r2
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	e7d2      	b.n	80084e2 <_vfiprintf_r+0xe2>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	1d19      	adds	r1, r3, #4
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	9103      	str	r1, [sp, #12]
 8008546:	bfbb      	ittet	lt
 8008548:	425b      	neglt	r3, r3
 800854a:	f042 0202 	orrlt.w	r2, r2, #2
 800854e:	9307      	strge	r3, [sp, #28]
 8008550:	9307      	strlt	r3, [sp, #28]
 8008552:	bfb8      	it	lt
 8008554:	9204      	strlt	r2, [sp, #16]
 8008556:	7823      	ldrb	r3, [r4, #0]
 8008558:	2b2e      	cmp	r3, #46	; 0x2e
 800855a:	d10c      	bne.n	8008576 <_vfiprintf_r+0x176>
 800855c:	7863      	ldrb	r3, [r4, #1]
 800855e:	2b2a      	cmp	r3, #42	; 0x2a
 8008560:	d135      	bne.n	80085ce <_vfiprintf_r+0x1ce>
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	3402      	adds	r4, #2
 8008566:	1d1a      	adds	r2, r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	9203      	str	r2, [sp, #12]
 800856e:	bfb8      	it	lt
 8008570:	f04f 33ff 	movlt.w	r3, #4294967295
 8008574:	9305      	str	r3, [sp, #20]
 8008576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800865c <_vfiprintf_r+0x25c>
 800857a:	2203      	movs	r2, #3
 800857c:	7821      	ldrb	r1, [r4, #0]
 800857e:	4650      	mov	r0, sl
 8008580:	f000 faae 	bl	8008ae0 <memchr>
 8008584:	b140      	cbz	r0, 8008598 <_vfiprintf_r+0x198>
 8008586:	2340      	movs	r3, #64	; 0x40
 8008588:	eba0 000a 	sub.w	r0, r0, sl
 800858c:	3401      	adds	r4, #1
 800858e:	fa03 f000 	lsl.w	r0, r3, r0
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	4303      	orrs	r3, r0
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859c:	2206      	movs	r2, #6
 800859e:	482c      	ldr	r0, [pc, #176]	; (8008650 <_vfiprintf_r+0x250>)
 80085a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a4:	f000 fa9c 	bl	8008ae0 <memchr>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d03f      	beq.n	800862c <_vfiprintf_r+0x22c>
 80085ac:	4b29      	ldr	r3, [pc, #164]	; (8008654 <_vfiprintf_r+0x254>)
 80085ae:	bb1b      	cbnz	r3, 80085f8 <_vfiprintf_r+0x1f8>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	3307      	adds	r3, #7
 80085b4:	f023 0307 	bic.w	r3, r3, #7
 80085b8:	3308      	adds	r3, #8
 80085ba:	9303      	str	r3, [sp, #12]
 80085bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085be:	443b      	add	r3, r7
 80085c0:	9309      	str	r3, [sp, #36]	; 0x24
 80085c2:	e767      	b.n	8008494 <_vfiprintf_r+0x94>
 80085c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c8:	460c      	mov	r4, r1
 80085ca:	2001      	movs	r0, #1
 80085cc:	e7a5      	b.n	800851a <_vfiprintf_r+0x11a>
 80085ce:	2300      	movs	r3, #0
 80085d0:	3401      	adds	r4, #1
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	4619      	mov	r1, r3
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	4620      	mov	r0, r4
 80085dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e0:	3a30      	subs	r2, #48	; 0x30
 80085e2:	2a09      	cmp	r2, #9
 80085e4:	d903      	bls.n	80085ee <_vfiprintf_r+0x1ee>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0c5      	beq.n	8008576 <_vfiprintf_r+0x176>
 80085ea:	9105      	str	r1, [sp, #20]
 80085ec:	e7c3      	b.n	8008576 <_vfiprintf_r+0x176>
 80085ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f2:	4604      	mov	r4, r0
 80085f4:	2301      	movs	r3, #1
 80085f6:	e7f0      	b.n	80085da <_vfiprintf_r+0x1da>
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	462a      	mov	r2, r5
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	4630      	mov	r0, r6
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <_vfiprintf_r+0x258>)
 8008604:	e000      	b.n	8008608 <_vfiprintf_r+0x208>
 8008606:	bf00      	nop
 8008608:	4607      	mov	r7, r0
 800860a:	1c78      	adds	r0, r7, #1
 800860c:	d1d6      	bne.n	80085bc <_vfiprintf_r+0x1bc>
 800860e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008610:	07d9      	lsls	r1, r3, #31
 8008612:	d405      	bmi.n	8008620 <_vfiprintf_r+0x220>
 8008614:	89ab      	ldrh	r3, [r5, #12]
 8008616:	059a      	lsls	r2, r3, #22
 8008618:	d402      	bmi.n	8008620 <_vfiprintf_r+0x220>
 800861a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800861c:	f7ff fd7f 	bl	800811e <__retarget_lock_release_recursive>
 8008620:	89ab      	ldrh	r3, [r5, #12]
 8008622:	065b      	lsls	r3, r3, #25
 8008624:	f53f af12 	bmi.w	800844c <_vfiprintf_r+0x4c>
 8008628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862a:	e711      	b.n	8008450 <_vfiprintf_r+0x50>
 800862c:	ab03      	add	r3, sp, #12
 800862e:	462a      	mov	r2, r5
 8008630:	a904      	add	r1, sp, #16
 8008632:	4630      	mov	r0, r6
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <_vfiprintf_r+0x258>)
 8008638:	f000 f882 	bl	8008740 <_printf_i>
 800863c:	e7e4      	b.n	8008608 <_vfiprintf_r+0x208>
 800863e:	bf00      	nop
 8008640:	08008d80 	.word	0x08008d80
 8008644:	08008da0 	.word	0x08008da0
 8008648:	08008d60 	.word	0x08008d60
 800864c:	08008dc0 	.word	0x08008dc0
 8008650:	08008dca 	.word	0x08008dca
 8008654:	00000000 	.word	0x00000000
 8008658:	080083db 	.word	0x080083db
 800865c:	08008dc6 	.word	0x08008dc6

08008660 <_printf_common>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	4616      	mov	r6, r2
 8008666:	4699      	mov	r9, r3
 8008668:	688a      	ldr	r2, [r1, #8]
 800866a:	4607      	mov	r7, r0
 800866c:	690b      	ldr	r3, [r1, #16]
 800866e:	460c      	mov	r4, r1
 8008670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008674:	4293      	cmp	r3, r2
 8008676:	bfb8      	it	lt
 8008678:	4613      	movlt	r3, r2
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008680:	b10a      	cbz	r2, 8008686 <_printf_common+0x26>
 8008682:	3301      	adds	r3, #1
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	0699      	lsls	r1, r3, #26
 800868a:	bf42      	ittt	mi
 800868c:	6833      	ldrmi	r3, [r6, #0]
 800868e:	3302      	addmi	r3, #2
 8008690:	6033      	strmi	r3, [r6, #0]
 8008692:	6825      	ldr	r5, [r4, #0]
 8008694:	f015 0506 	ands.w	r5, r5, #6
 8008698:	d106      	bne.n	80086a8 <_printf_common+0x48>
 800869a:	f104 0a19 	add.w	sl, r4, #25
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	6832      	ldr	r2, [r6, #0]
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	42ab      	cmp	r3, r5
 80086a6:	dc29      	bgt.n	80086fc <_printf_common+0x9c>
 80086a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ac:	1e13      	subs	r3, r2, #0
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	bf18      	it	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	0692      	lsls	r2, r2, #26
 80086b6:	d42e      	bmi.n	8008716 <_printf_common+0xb6>
 80086b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086bc:	4649      	mov	r1, r9
 80086be:	4638      	mov	r0, r7
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d021      	beq.n	800870a <_printf_common+0xaa>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	341a      	adds	r4, #26
 80086ca:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80086ce:	f003 0306 	and.w	r3, r3, #6
 80086d2:	6832      	ldr	r2, [r6, #0]
 80086d4:	2600      	movs	r6, #0
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80086dc:	bf08      	it	eq
 80086de:	1aad      	subeq	r5, r5, r2
 80086e0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80086e4:	bf14      	ite	ne
 80086e6:	2500      	movne	r5, #0
 80086e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086ec:	4293      	cmp	r3, r2
 80086ee:	bfc4      	itt	gt
 80086f0:	1a9b      	subgt	r3, r3, r2
 80086f2:	18ed      	addgt	r5, r5, r3
 80086f4:	42b5      	cmp	r5, r6
 80086f6:	d11a      	bne.n	800872e <_printf_common+0xce>
 80086f8:	2000      	movs	r0, #0
 80086fa:	e008      	b.n	800870e <_printf_common+0xae>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4652      	mov	r2, sl
 8008700:	4649      	mov	r1, r9
 8008702:	4638      	mov	r0, r7
 8008704:	47c0      	blx	r8
 8008706:	3001      	adds	r0, #1
 8008708:	d103      	bne.n	8008712 <_printf_common+0xb2>
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008712:	3501      	adds	r5, #1
 8008714:	e7c3      	b.n	800869e <_printf_common+0x3e>
 8008716:	18e1      	adds	r1, r4, r3
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	2030      	movs	r0, #48	; 0x30
 800871c:	3302      	adds	r3, #2
 800871e:	4422      	add	r2, r4
 8008720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800872c:	e7c4      	b.n	80086b8 <_printf_common+0x58>
 800872e:	2301      	movs	r3, #1
 8008730:	4622      	mov	r2, r4
 8008732:	4649      	mov	r1, r9
 8008734:	4638      	mov	r0, r7
 8008736:	47c0      	blx	r8
 8008738:	3001      	adds	r0, #1
 800873a:	d0e6      	beq.n	800870a <_printf_common+0xaa>
 800873c:	3601      	adds	r6, #1
 800873e:	e7d9      	b.n	80086f4 <_printf_common+0x94>

08008740 <_printf_i>:
 8008740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	7e0f      	ldrb	r7, [r1, #24]
 8008746:	4691      	mov	r9, r2
 8008748:	4680      	mov	r8, r0
 800874a:	460c      	mov	r4, r1
 800874c:	2f78      	cmp	r7, #120	; 0x78
 800874e:	469a      	mov	sl, r3
 8008750:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008756:	d807      	bhi.n	8008768 <_printf_i+0x28>
 8008758:	2f62      	cmp	r7, #98	; 0x62
 800875a:	d80a      	bhi.n	8008772 <_printf_i+0x32>
 800875c:	2f00      	cmp	r7, #0
 800875e:	f000 80d8 	beq.w	8008912 <_printf_i+0x1d2>
 8008762:	2f58      	cmp	r7, #88	; 0x58
 8008764:	f000 80a3 	beq.w	80088ae <_printf_i+0x16e>
 8008768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800876c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008770:	e03a      	b.n	80087e8 <_printf_i+0xa8>
 8008772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008776:	2b15      	cmp	r3, #21
 8008778:	d8f6      	bhi.n	8008768 <_printf_i+0x28>
 800877a:	a101      	add	r1, pc, #4	; (adr r1, 8008780 <_printf_i+0x40>)
 800877c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087ed 	.word	0x080087ed
 8008788:	08008769 	.word	0x08008769
 800878c:	08008769 	.word	0x08008769
 8008790:	08008769 	.word	0x08008769
 8008794:	08008769 	.word	0x08008769
 8008798:	080087ed 	.word	0x080087ed
 800879c:	08008769 	.word	0x08008769
 80087a0:	08008769 	.word	0x08008769
 80087a4:	08008769 	.word	0x08008769
 80087a8:	08008769 	.word	0x08008769
 80087ac:	080088f9 	.word	0x080088f9
 80087b0:	0800881d 	.word	0x0800881d
 80087b4:	080088db 	.word	0x080088db
 80087b8:	08008769 	.word	0x08008769
 80087bc:	08008769 	.word	0x08008769
 80087c0:	0800891b 	.word	0x0800891b
 80087c4:	08008769 	.word	0x08008769
 80087c8:	0800881d 	.word	0x0800881d
 80087cc:	08008769 	.word	0x08008769
 80087d0:	08008769 	.word	0x08008769
 80087d4:	080088e3 	.word	0x080088e3
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	1d1a      	adds	r2, r3, #4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	602a      	str	r2, [r5, #0]
 80087e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0a3      	b.n	8008934 <_printf_i+0x1f4>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	6829      	ldr	r1, [r5, #0]
 80087f0:	0606      	lsls	r6, r0, #24
 80087f2:	f101 0304 	add.w	r3, r1, #4
 80087f6:	d50a      	bpl.n	800880e <_printf_i+0xce>
 80087f8:	680e      	ldr	r6, [r1, #0]
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	2e00      	cmp	r6, #0
 80087fe:	da03      	bge.n	8008808 <_printf_i+0xc8>
 8008800:	232d      	movs	r3, #45	; 0x2d
 8008802:	4276      	negs	r6, r6
 8008804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008808:	485e      	ldr	r0, [pc, #376]	; (8008984 <_printf_i+0x244>)
 800880a:	230a      	movs	r3, #10
 800880c:	e019      	b.n	8008842 <_printf_i+0x102>
 800880e:	680e      	ldr	r6, [r1, #0]
 8008810:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	bf18      	it	ne
 8008818:	b236      	sxthne	r6, r6
 800881a:	e7ef      	b.n	80087fc <_printf_i+0xbc>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	6029      	str	r1, [r5, #0]
 8008824:	0601      	lsls	r1, r0, #24
 8008826:	d501      	bpl.n	800882c <_printf_i+0xec>
 8008828:	681e      	ldr	r6, [r3, #0]
 800882a:	e002      	b.n	8008832 <_printf_i+0xf2>
 800882c:	0646      	lsls	r6, r0, #25
 800882e:	d5fb      	bpl.n	8008828 <_printf_i+0xe8>
 8008830:	881e      	ldrh	r6, [r3, #0]
 8008832:	2f6f      	cmp	r7, #111	; 0x6f
 8008834:	4853      	ldr	r0, [pc, #332]	; (8008984 <_printf_i+0x244>)
 8008836:	bf0c      	ite	eq
 8008838:	2308      	moveq	r3, #8
 800883a:	230a      	movne	r3, #10
 800883c:	2100      	movs	r1, #0
 800883e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008842:	6865      	ldr	r5, [r4, #4]
 8008844:	2d00      	cmp	r5, #0
 8008846:	60a5      	str	r5, [r4, #8]
 8008848:	bfa2      	ittt	ge
 800884a:	6821      	ldrge	r1, [r4, #0]
 800884c:	f021 0104 	bicge.w	r1, r1, #4
 8008850:	6021      	strge	r1, [r4, #0]
 8008852:	b90e      	cbnz	r6, 8008858 <_printf_i+0x118>
 8008854:	2d00      	cmp	r5, #0
 8008856:	d04d      	beq.n	80088f4 <_printf_i+0x1b4>
 8008858:	4615      	mov	r5, r2
 800885a:	fbb6 f1f3 	udiv	r1, r6, r3
 800885e:	fb03 6711 	mls	r7, r3, r1, r6
 8008862:	5dc7      	ldrb	r7, [r0, r7]
 8008864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008868:	4637      	mov	r7, r6
 800886a:	460e      	mov	r6, r1
 800886c:	42bb      	cmp	r3, r7
 800886e:	d9f4      	bls.n	800885a <_printf_i+0x11a>
 8008870:	2b08      	cmp	r3, #8
 8008872:	d10b      	bne.n	800888c <_printf_i+0x14c>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	07de      	lsls	r6, r3, #31
 8008878:	d508      	bpl.n	800888c <_printf_i+0x14c>
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	6861      	ldr	r1, [r4, #4]
 800887e:	4299      	cmp	r1, r3
 8008880:	bfde      	ittt	le
 8008882:	2330      	movle	r3, #48	; 0x30
 8008884:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800888c:	1b52      	subs	r2, r2, r5
 800888e:	6122      	str	r2, [r4, #16]
 8008890:	464b      	mov	r3, r9
 8008892:	aa03      	add	r2, sp, #12
 8008894:	4621      	mov	r1, r4
 8008896:	4640      	mov	r0, r8
 8008898:	f8cd a000 	str.w	sl, [sp]
 800889c:	f7ff fee0 	bl	8008660 <_printf_common>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d14c      	bne.n	800893e <_printf_i+0x1fe>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	b004      	add	sp, #16
 80088aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ae:	4835      	ldr	r0, [pc, #212]	; (8008984 <_printf_i+0x244>)
 80088b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088b4:	6829      	ldr	r1, [r5, #0]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80088bc:	6029      	str	r1, [r5, #0]
 80088be:	061d      	lsls	r5, r3, #24
 80088c0:	d514      	bpl.n	80088ec <_printf_i+0x1ac>
 80088c2:	07df      	lsls	r7, r3, #31
 80088c4:	bf44      	itt	mi
 80088c6:	f043 0320 	orrmi.w	r3, r3, #32
 80088ca:	6023      	strmi	r3, [r4, #0]
 80088cc:	b91e      	cbnz	r6, 80088d6 <_printf_i+0x196>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	f023 0320 	bic.w	r3, r3, #32
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	2310      	movs	r3, #16
 80088d8:	e7b0      	b.n	800883c <_printf_i+0xfc>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	f043 0320 	orr.w	r3, r3, #32
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	2378      	movs	r3, #120	; 0x78
 80088e4:	4828      	ldr	r0, [pc, #160]	; (8008988 <_printf_i+0x248>)
 80088e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ea:	e7e3      	b.n	80088b4 <_printf_i+0x174>
 80088ec:	0659      	lsls	r1, r3, #25
 80088ee:	bf48      	it	mi
 80088f0:	b2b6      	uxthmi	r6, r6
 80088f2:	e7e6      	b.n	80088c2 <_printf_i+0x182>
 80088f4:	4615      	mov	r5, r2
 80088f6:	e7bb      	b.n	8008870 <_printf_i+0x130>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	6826      	ldr	r6, [r4, #0]
 80088fc:	1d18      	adds	r0, r3, #4
 80088fe:	6961      	ldr	r1, [r4, #20]
 8008900:	6028      	str	r0, [r5, #0]
 8008902:	0635      	lsls	r5, r6, #24
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	d501      	bpl.n	800890c <_printf_i+0x1cc>
 8008908:	6019      	str	r1, [r3, #0]
 800890a:	e002      	b.n	8008912 <_printf_i+0x1d2>
 800890c:	0670      	lsls	r0, r6, #25
 800890e:	d5fb      	bpl.n	8008908 <_printf_i+0x1c8>
 8008910:	8019      	strh	r1, [r3, #0]
 8008912:	2300      	movs	r3, #0
 8008914:	4615      	mov	r5, r2
 8008916:	6123      	str	r3, [r4, #16]
 8008918:	e7ba      	b.n	8008890 <_printf_i+0x150>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	2100      	movs	r1, #0
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	681d      	ldr	r5, [r3, #0]
 8008924:	6862      	ldr	r2, [r4, #4]
 8008926:	4628      	mov	r0, r5
 8008928:	f000 f8da 	bl	8008ae0 <memchr>
 800892c:	b108      	cbz	r0, 8008932 <_printf_i+0x1f2>
 800892e:	1b40      	subs	r0, r0, r5
 8008930:	6060      	str	r0, [r4, #4]
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	6123      	str	r3, [r4, #16]
 8008936:	2300      	movs	r3, #0
 8008938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893c:	e7a8      	b.n	8008890 <_printf_i+0x150>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	462a      	mov	r2, r5
 8008942:	4649      	mov	r1, r9
 8008944:	4640      	mov	r0, r8
 8008946:	47d0      	blx	sl
 8008948:	3001      	adds	r0, #1
 800894a:	d0ab      	beq.n	80088a4 <_printf_i+0x164>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	079b      	lsls	r3, r3, #30
 8008950:	d413      	bmi.n	800897a <_printf_i+0x23a>
 8008952:	68e0      	ldr	r0, [r4, #12]
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	4298      	cmp	r0, r3
 8008958:	bfb8      	it	lt
 800895a:	4618      	movlt	r0, r3
 800895c:	e7a4      	b.n	80088a8 <_printf_i+0x168>
 800895e:	2301      	movs	r3, #1
 8008960:	4632      	mov	r2, r6
 8008962:	4649      	mov	r1, r9
 8008964:	4640      	mov	r0, r8
 8008966:	47d0      	blx	sl
 8008968:	3001      	adds	r0, #1
 800896a:	d09b      	beq.n	80088a4 <_printf_i+0x164>
 800896c:	3501      	adds	r5, #1
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	9903      	ldr	r1, [sp, #12]
 8008972:	1a5b      	subs	r3, r3, r1
 8008974:	42ab      	cmp	r3, r5
 8008976:	dcf2      	bgt.n	800895e <_printf_i+0x21e>
 8008978:	e7eb      	b.n	8008952 <_printf_i+0x212>
 800897a:	2500      	movs	r5, #0
 800897c:	f104 0619 	add.w	r6, r4, #25
 8008980:	e7f5      	b.n	800896e <_printf_i+0x22e>
 8008982:	bf00      	nop
 8008984:	08008dd1 	.word	0x08008dd1
 8008988:	08008de2 	.word	0x08008de2

0800898c <_sbrk_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	2300      	movs	r3, #0
 8008990:	4d05      	ldr	r5, [pc, #20]	; (80089a8 <_sbrk_r+0x1c>)
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7f8 f848 	bl	8000a2c <_sbrk>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_sbrk_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_sbrk_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	200001cc 	.word	0x200001cc

080089ac <__sread>:
 80089ac:	b510      	push	{r4, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b4:	f000 f8ae 	bl	8008b14 <_read_r>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	bfab      	itete	ge
 80089bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089be:	89a3      	ldrhlt	r3, [r4, #12]
 80089c0:	181b      	addge	r3, r3, r0
 80089c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c6:	bfac      	ite	ge
 80089c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ca:	81a3      	strhlt	r3, [r4, #12]
 80089cc:	bd10      	pop	{r4, pc}

080089ce <__swrite>:
 80089ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	461f      	mov	r7, r3
 80089d4:	898b      	ldrh	r3, [r1, #12]
 80089d6:	4605      	mov	r5, r0
 80089d8:	460c      	mov	r4, r1
 80089da:	05db      	lsls	r3, r3, #23
 80089dc:	4616      	mov	r6, r2
 80089de:	d505      	bpl.n	80089ec <__swrite+0x1e>
 80089e0:	2302      	movs	r3, #2
 80089e2:	2200      	movs	r2, #0
 80089e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e8:	f000 f868 	bl	8008abc <_lseek_r>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	4632      	mov	r2, r6
 80089f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f4:	4628      	mov	r0, r5
 80089f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	463b      	mov	r3, r7
 80089fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a02:	f000 b817 	b.w	8008a34 <_write_r>

08008a06 <__sseek>:
 8008a06:	b510      	push	{r4, lr}
 8008a08:	460c      	mov	r4, r1
 8008a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0e:	f000 f855 	bl	8008abc <_lseek_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	bf15      	itete	ne
 8008a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a22:	81a3      	strheq	r3, [r4, #12]
 8008a24:	bf18      	it	ne
 8008a26:	81a3      	strhne	r3, [r4, #12]
 8008a28:	bd10      	pop	{r4, pc}

08008a2a <__sclose>:
 8008a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2e:	f000 b813 	b.w	8008a58 <_close_r>
	...

08008a34 <_write_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4604      	mov	r4, r0
 8008a38:	4d06      	ldr	r5, [pc, #24]	; (8008a54 <_write_r+0x20>)
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	2200      	movs	r2, #0
 8008a40:	602a      	str	r2, [r5, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f7f7 ffa2 	bl	800098c <_write>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_write_r+0x1e>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_write_r+0x1e>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	200001cc 	.word	0x200001cc

08008a58 <_close_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4d05      	ldr	r5, [pc, #20]	; (8008a74 <_close_r+0x1c>)
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f7 ffae 	bl	80009c4 <_close>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_close_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_close_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	200001cc 	.word	0x200001cc

08008a78 <_fstat_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4d06      	ldr	r5, [pc, #24]	; (8008a98 <_fstat_r+0x20>)
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f7f7 ffa9 	bl	80009dc <_fstat>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d102      	bne.n	8008a94 <_fstat_r+0x1c>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	b103      	cbz	r3, 8008a94 <_fstat_r+0x1c>
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	200001cc 	.word	0x200001cc

08008a9c <_isatty_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	4d05      	ldr	r5, [pc, #20]	; (8008ab8 <_isatty_r+0x1c>)
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f7 ffa8 	bl	80009fc <_isatty>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_isatty_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_isatty_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	200001cc 	.word	0x200001cc

08008abc <_lseek_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4604      	mov	r4, r0
 8008ac0:	4d06      	ldr	r5, [pc, #24]	; (8008adc <_lseek_r+0x20>)
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	602a      	str	r2, [r5, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7f7 ffa1 	bl	8000a12 <_lseek>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_lseek_r+0x1e>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_lseek_r+0x1e>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	200001cc 	.word	0x200001cc

08008ae0 <memchr>:
 8008ae0:	b2c9      	uxtb	r1, r1
 8008ae2:	4402      	add	r2, r0
 8008ae4:	b510      	push	{r4, lr}
 8008ae6:	4290      	cmp	r0, r2
 8008ae8:	4603      	mov	r3, r0
 8008aea:	d101      	bne.n	8008af0 <memchr+0x10>
 8008aec:	2300      	movs	r3, #0
 8008aee:	e003      	b.n	8008af8 <memchr+0x18>
 8008af0:	781c      	ldrb	r4, [r3, #0]
 8008af2:	3001      	adds	r0, #1
 8008af4:	428c      	cmp	r4, r1
 8008af6:	d1f6      	bne.n	8008ae6 <memchr+0x6>
 8008af8:	4618      	mov	r0, r3
 8008afa:	bd10      	pop	{r4, pc}

08008afc <__malloc_lock>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__malloc_lock+0x8>)
 8008afe:	f7ff bb0d 	b.w	800811c <__retarget_lock_acquire_recursive>
 8008b02:	bf00      	nop
 8008b04:	200001c0 	.word	0x200001c0

08008b08 <__malloc_unlock>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__malloc_unlock+0x8>)
 8008b0a:	f7ff bb08 	b.w	800811e <__retarget_lock_release_recursive>
 8008b0e:	bf00      	nop
 8008b10:	200001c0 	.word	0x200001c0

08008b14 <_read_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4604      	mov	r4, r0
 8008b18:	4d06      	ldr	r5, [pc, #24]	; (8008b34 <_read_r+0x20>)
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	602a      	str	r2, [r5, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f7f7 ff15 	bl	8000952 <_read>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_read_r+0x1e>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_read_r+0x1e>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	200001cc 	.word	0x200001cc

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
